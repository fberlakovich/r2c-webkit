# Copyright (C) 2015 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.

matcher LoweringMatcher

# These rules are considered in a cascade, starting at the top. It's implenented using switch
# statements wherever possible.

# Note: adding more rules to this matcher is an excellent way of improving performance!

Load = Load(address)

Add = Add(left, right)
Sub = Sub(left, right)
And = BitAnd(left, right)
Or = BitOr(left, right)
Xor = BitXor(left, right)

Shl = Shl(value, amount)

StoreAddLoad = Store(Add(left, right), address)
StoreSubLoad = Store(Sub(left, right), address)
StoreAndLoad = Store(BitAnd(left, right), address)
Store = Store(value, address)

Trunc = Trunc(value)

ZExt32 = ZExt32(value)

ArgumentReg = ArgumentReg()

Const32 = Const32()
Const64 = Const64()

StackSlot = StackSlot()
FramePointer = FramePointer()

Patchpoint = Patchpoint()
Check = Check(value)

Upsilon = Upsilon(value)
Phi = Phi()

Branch = Branch(value)
Jump = Jump()

# It would be fantastic to not have to have this here, but the philosophy of our lowering is that
# it should be sound even if we haven't run optimizations.
Identity = Identity(value)

Return = Return(value)

