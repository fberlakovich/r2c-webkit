//@ skip

function shouldBe(actual, expected) {
    if (actual !== expected)
        throw new Error('bad value: ' + actual);
}

function shouldThrow(func, message) {
    var error = null;
    try {
        func();
    } catch (e) {
        error = e;
    }
    if (!error)
        throw new Error("not thrown.");
    if (String(error) !== message)
        throw new Error("bad error: " + String(error));
}

/*
wasm-arithmetic.wasm is generated by pack-asmjs <https://github.com/WebAssembly/polyfill-prototype-1> from the following script:

function asmModule(global, env, buffer) {
    "use asm";

    function addSubtract() {
        return ((10 + 40) - 8) | 0;
    }

    function addOverflow() {
        return (2147483647 + 1) | 0;
    }

    function divide() {
        return (42 / 5) | 0;
    }

    function divideByZero() {
        return (1 / 0) | 0;
    }

    function divideOverflow() {
        return (-2147483648 / -1) | 0;
    }

    function unsignedDivide() {
        return ((-1 >>> 0) / 2) | 0;
    }

    function unsignedDivideByZero() {
        return ((-1 >>> 0) / 0) | 0;
    }

    function modulo() {
        return (42 % 5) | 0;
    }

    function moduloNegative() {
        return (-42 % 5) | 0;
    }

    function moduloZero() {
        return (1 % 0) | 0;
    }

    function moduloOverflow() {
        return (-2147483648 % -1) | 0;
    }

    function unsignedModulo() {
        return ((-1 >>> 0) % 100000) | 0;
    }

    function unsignedModuloZero() {
        return ((-1 >>> 0) % 0) | 0;
    }

    return {
        addSubtract: addSubtract,
        addOverflow: addOverflow,
        divide: divide,
        divideByZero: divideByZero,
        divideOverflow: divideOverflow,
        unsignedDivide: unsignedDivide,
        unsignedDivideByZero: unsignedDivideByZero,
        modulo: modulo,
        moduloNegative: moduloNegative,
        moduloZero: moduloZero,
        moduloOverflow: moduloOverflow,
        unsignedModulo: unsignedModulo,
        unsignedModuloZero: unsignedModuloZero,
    };
}
*/

var module = loadWebAssembly("wasm-arithmetic.wasm");

shouldBe(module.addSubtract(), 42);

shouldBe(module.addOverflow(), -2147483648);

shouldBe(module.divide(), 8);

shouldThrow(() => {
    module.divideByZero();
}, "Error: Division by zero or division overflow.");

shouldThrow(() => {
    module.divideOverflow();
}, "Error: Division by zero or division overflow.");

shouldBe(module.unsignedDivide(), 2147483647);

shouldThrow(() => {
    module.unsignedDivideByZero();
}, "Error: Division by zero or division overflow.");

shouldBe(module.modulo(), 2);

shouldBe(module.moduloNegative(), -2);

shouldThrow(() => {
    module.moduloZero();
}, "Error: Division by zero or division overflow.");

shouldThrow(() => {
    module.moduloOverflow();
}, "Error: Division by zero or division overflow.");

shouldBe(module.unsignedModulo(), 67295);

shouldThrow(() => {
    module.unsignedModuloZero();
}, "Error: Division by zero or division overflow.");
