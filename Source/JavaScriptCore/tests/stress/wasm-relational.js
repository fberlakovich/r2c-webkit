//@ skip

function shouldBe(actual, expected) {
    if (actual !== expected)
        throw new Error('bad value: ' + actual);
}

/*
wasm/relational.wasm is generated by pack-asmjs <https://github.com/WebAssembly/polyfill-prototype-1> from the following script:

function asmModule(global, env, buffer) {
    "use asm";

    function equalTrue() {
        return 1 == 1;
    }

    function equalFalse() {
        return 1 == 2;
    }

    function notEqualTrue() {
        return 1 != 2;
    }

    function notEqualFalse() {
        return 1 != 1;
    }

    function lessThanTrue() {
        return -1 < 2;
    }

    function lessThanFalse() {
        return 1 < 1;
    }

    function lessThanOrEqualTrue() {
        return 1 <= 1;
    }

    function lessThanOrEqualFalse() {
        return 2 <= 1;
    }

    function greaterThanTrue() {
        return 2 > -1;
    }

    function greaterThanFalse() {
        return 1 > 1;
    }

    function greaterThanOrEqualTrue() {
        return 1 >= 1;
    }

    function greaterThanOrEqualFalse() {
        return 1 >= 2;
    }

    function unsignedLessThanTrue() {
        return (2 >>> 0) < (-1 >>> 0);
    }

    function unsignedLessThanFalse() {
        return (-1 >>> 0) < (2 >>> 0);
    }

    function unsignedLessThanOrEqualTrue() {
        return (2 >>> 0) <= (-1 >>> 0);
    }

    function unsignedLessThanOrEqualFalse() {
        return (-1 >>> 0) <= (2 >>> 0);
    }

    function unsignedGreaterThanTrue() {
        return (-1 >>> 0) > (2 >>> 0);
    }

    function unsignedGreaterThanFalse() {
        return (2 >>> 0) > (-1 >>> 0);
    }

    function unsignedGreaterThanOrEqualTrue() {
        return (-1 >>> 0) >= (2 >>> 0);
    }

    function unsignedGreaterThanOrEqualFalse() {
        return (2 >>> 0) >= (-1 >>> 0);
    }

    return {
        equalTrue: equalTrue,
        equalFalse: equalFalse,
        notEqualTrue: notEqualTrue,
        notEqualFalse: notEqualFalse,
        lessThanTrue: lessThanTrue,
        lessThanFalse: lessThanFalse,
        lessThanOrEqualTrue: lessThanOrEqualTrue,
        lessThanOrEqualFalse: lessThanOrEqualFalse,
        greaterThanTrue: greaterThanTrue,
        greaterThanFalse: greaterThanFalse,
        greaterThanOrEqualTrue: greaterThanOrEqualTrue,
        greaterThanOrEqualFalse: greaterThanOrEqualFalse,
        unsignedLessThanTrue: unsignedLessThanTrue,
        unsignedLessThanFalse: unsignedLessThanFalse,
        unsignedLessThanOrEqualTrue: unsignedLessThanOrEqualTrue,
        unsignedLessThanOrEqualFalse: unsignedLessThanOrEqualFalse,
        unsignedGreaterThanTrue: unsignedGreaterThanTrue,
        unsignedGreaterThanFalse: unsignedGreaterThanFalse,
        unsignedGreaterThanOrEqualTrue: unsignedGreaterThanOrEqualTrue,
        unsignedGreaterThanOrEqualFalse: unsignedGreaterThanOrEqualFalse,
    };
}
*/

var module = loadWebAssembly("wasm/relational.wasm");

shouldBe(module.equalTrue(), 1);
shouldBe(module.equalFalse(), 0);
shouldBe(module.notEqualTrue(), 1);
shouldBe(module.notEqualFalse(), 0);
shouldBe(module.lessThanTrue(), 1);
shouldBe(module.lessThanFalse(), 0);
shouldBe(module.lessThanOrEqualTrue(), 1);
shouldBe(module.lessThanOrEqualFalse(), 0);
shouldBe(module.greaterThanTrue(), 1);
shouldBe(module.greaterThanFalse(), 0);
shouldBe(module.greaterThanOrEqualTrue(), 1);
shouldBe(module.greaterThanOrEqualFalse(), 0);
shouldBe(module.unsignedLessThanTrue(), 1);
shouldBe(module.unsignedLessThanFalse(), 0);
shouldBe(module.unsignedLessThanOrEqualTrue(), 1);
shouldBe(module.unsignedLessThanOrEqualFalse(), 0);
shouldBe(module.unsignedGreaterThanTrue(), 1);
shouldBe(module.unsignedGreaterThanFalse(), 0);
shouldBe(module.unsignedGreaterThanOrEqualTrue(), 1);
shouldBe(module.unsignedGreaterThanOrEqualFalse(), 0);
