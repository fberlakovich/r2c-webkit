//@ skip

function shouldBe(actual, expected) {
    if (actual !== expected)
        throw new Error('bad value: ' + actual);
}

/*
wasm/calls.wasm is generated by pack-asmjs <https://github.com/WebAssembly/polyfill-prototype-1> from the following script:

function asmModule(global, imports, buffer) {
    "use asm";

    var imul = global.Math.imul;
    var sum = imports.sum;
    var max = imports.max;

    function fibonacci(x) {
        x = x | 0;
        if ((x | 0) <= 1)
            return 1;
        return ((fibonacci((x - 1) | 0) | 0) + (fibonacci((x - 2) | 0) | 0)) | 0;
    }

    function gcd(x, y) {
        x = x | 0;
        y = y | 0;
        if ((y | 0) == 0)
            return x | 0;
        return gcd(y, ((x | 0) % (y | 0)) | 0) | 0;
    }

    function lcm(x, y) {
        x = x | 0;
        y = y | 0;
        return (imul(x, y) / (gcd(x, y) | 0)) | 0;
    }

    function callSum(x, y) {
        x = x | 0;
        y = y | 0;
        return sum(x | 0, y | 0) | 0;
    }

    function callMax(x, y) {
        x = x | 0;
        y = y | 0;
        return max(x | 0, y | 0) | 0;
    }

    return {
        fibonacci: fibonacci,
        gcd: gcd,
        lcm: lcm,
        callSum: callSum,
        callMax: callMax,
    };
}
*/

var imports = {
    sum: (x, y) => x + y,
    max: Math.max,
};
var module = loadWebAssembly("wasm/calls.wasm", imports);

shouldBe(module.fibonacci(10), 89);
shouldBe(module.gcd(15, 25), 5);
shouldBe(module.lcm(15, 25), 75);

shouldBe(module.callSum(1, 2), 3);
shouldBe(module.callMax(1, 2), 2);
