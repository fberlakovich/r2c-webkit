/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMMediaController.h"

#include <WebCore/CSSImportRule.h>
#include "DOMObjectCache.h"
#include <WebCore/Document.h>
#include <WebCore/ExceptionCode.h>
#include <WebCore/ExceptionCodeDescription.h>
#include "GObjectEventListener.h"
#include <WebCore/JSMainThreadExecState.h>
#include "WebKitDOMEventPrivate.h"
#include "WebKitDOMEventTarget.h"
#include "WebKitDOMMediaControllerPrivate.h"
#include "WebKitDOMPrivate.h"
#include "WebKitDOMTimeRangesPrivate.h"
#include "ConvertToUTF8String.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

#define WEBKIT_DOM_MEDIA_CONTROLLER_GET_PRIVATE(obj) G_TYPE_INSTANCE_GET_PRIVATE(obj, WEBKIT_DOM_TYPE_MEDIA_CONTROLLER, WebKitDOMMediaControllerPrivate)

typedef struct _WebKitDOMMediaControllerPrivate {
#if ENABLE(VIDEO)
    RefPtr<WebCore::MediaController> coreObject;
#endif // ENABLE(VIDEO)
} WebKitDOMMediaControllerPrivate;

#if ENABLE(VIDEO)

namespace WebKit {

WebKitDOMMediaController* kit(WebCore::MediaController* obj)
{
    if (!obj)
        return 0;

    if (gpointer ret = DOMObjectCache::get(obj))
        return WEBKIT_DOM_MEDIA_CONTROLLER(ret);

    return wrapMediaController(obj);
}

WebCore::MediaController* core(WebKitDOMMediaController* request)
{
    return request ? static_cast<WebCore::MediaController*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMMediaController* wrapMediaController(WebCore::MediaController* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_MEDIA_CONTROLLER(g_object_new(WEBKIT_DOM_TYPE_MEDIA_CONTROLLER, "core-object", coreObject, nullptr));
}

} // namespace WebKit

#endif // ENABLE(VIDEO)

static gboolean webkit_dom_media_controller_dispatch_event(WebKitDOMEventTarget* target, WebKitDOMEvent* event, GError** error)
{
#if ENABLE(VIDEO)
    WebCore::Event* coreEvent = WebKit::core(event);
    if (!coreEvent)
        return false;
    WebCore::MediaController* coreTarget = static_cast<WebCore::MediaController*>(WEBKIT_DOM_OBJECT(target)->coreObject);

    WebCore::ExceptionCode ec = 0;
    gboolean result = coreTarget->dispatchEventForBindings(*coreEvent, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription description(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), description.code, description.name);
    }
    return result;
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(event);
    UNUSED_PARAM(error);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return false;
#endif // ENABLE(VIDEO)
}

static gboolean webkit_dom_media_controller_add_event_listener(WebKitDOMEventTarget* target, const char* eventName, GClosure* handler, gboolean useCapture)
{
#if ENABLE(VIDEO)
    WebCore::MediaController* coreTarget = static_cast<WebCore::MediaController*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebKit::GObjectEventListener::addEventListener(G_OBJECT(target), coreTarget, eventName, handler, useCapture);
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(eventName);
    UNUSED_PARAM(handler);
    UNUSED_PARAM(useCapture);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return false;
#endif // ENABLE(VIDEO)
}

static gboolean webkit_dom_media_controller_remove_event_listener(WebKitDOMEventTarget* target, const char* eventName, GClosure* handler, gboolean useCapture)
{
#if ENABLE(VIDEO)
    WebCore::MediaController* coreTarget = static_cast<WebCore::MediaController*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebKit::GObjectEventListener::removeEventListener(G_OBJECT(target), coreTarget, eventName, handler, useCapture);
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(eventName);
    UNUSED_PARAM(handler);
    UNUSED_PARAM(useCapture);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return false;
#endif // ENABLE(VIDEO)
}

static void webkit_dom_event_target_init(WebKitDOMEventTargetIface* iface)
{
    iface->dispatch_event = webkit_dom_media_controller_dispatch_event;
    iface->add_event_listener = webkit_dom_media_controller_add_event_listener;
    iface->remove_event_listener = webkit_dom_media_controller_remove_event_listener;
}

G_DEFINE_TYPE_WITH_CODE(WebKitDOMMediaController, webkit_dom_media_controller, WEBKIT_DOM_TYPE_OBJECT, G_IMPLEMENT_INTERFACE(WEBKIT_DOM_TYPE_EVENT_TARGET, webkit_dom_event_target_init))

enum {
    PROP_0,
    PROP_BUFFERED,
    PROP_SEEKABLE,
    PROP_DURATION,
    PROP_CURRENT_TIME,
    PROP_PAUSED,
    PROP_PLAYED,
    PROP_PLAYBACK_STATE,
    PROP_DEFAULT_PLAYBACK_RATE,
    PROP_PLAYBACK_RATE,
    PROP_VOLUME,
    PROP_MUTED,
};

static void webkit_dom_media_controller_finalize(GObject* object)
{
    WebKitDOMMediaControllerPrivate* priv = WEBKIT_DOM_MEDIA_CONTROLLER_GET_PRIVATE(object);
#if ENABLE(VIDEO)
    WebKit::DOMObjectCache::forget(priv->coreObject.get());
#endif // ENABLE(VIDEO)
    priv->~WebKitDOMMediaControllerPrivate();
    G_OBJECT_CLASS(webkit_dom_media_controller_parent_class)->finalize(object);
}

static void webkit_dom_media_controller_set_property(GObject* object, guint propertyId, const GValue* value, GParamSpec* pspec)
{
    WebKitDOMMediaController* self = WEBKIT_DOM_MEDIA_CONTROLLER(object);

    switch (propertyId) {
    case PROP_CURRENT_TIME:
        webkit_dom_media_controller_set_current_time(self, g_value_get_double(value));
        break;
    case PROP_DEFAULT_PLAYBACK_RATE:
        webkit_dom_media_controller_set_default_playback_rate(self, g_value_get_double(value));
        break;
    case PROP_PLAYBACK_RATE:
        webkit_dom_media_controller_set_playback_rate(self, g_value_get_double(value));
        break;
    case PROP_VOLUME:
        webkit_dom_media_controller_set_volume(self, g_value_get_double(value), nullptr);
        break;
    case PROP_MUTED:
        webkit_dom_media_controller_set_muted(self, g_value_get_boolean(value));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static void webkit_dom_media_controller_get_property(GObject* object, guint propertyId, GValue* value, GParamSpec* pspec)
{
    WebKitDOMMediaController* self = WEBKIT_DOM_MEDIA_CONTROLLER(object);

    switch (propertyId) {
    case PROP_BUFFERED:
        g_value_set_object(value, webkit_dom_media_controller_get_buffered(self));
        break;
    case PROP_SEEKABLE:
        g_value_set_object(value, webkit_dom_media_controller_get_seekable(self));
        break;
    case PROP_DURATION:
        g_value_set_double(value, webkit_dom_media_controller_get_duration(self));
        break;
    case PROP_CURRENT_TIME:
        g_value_set_double(value, webkit_dom_media_controller_get_current_time(self));
        break;
    case PROP_PAUSED:
        g_value_set_boolean(value, webkit_dom_media_controller_get_paused(self));
        break;
    case PROP_PLAYED:
        g_value_set_object(value, webkit_dom_media_controller_get_played(self));
        break;
    case PROP_PLAYBACK_STATE:
        g_value_take_string(value, webkit_dom_media_controller_get_playback_state(self));
        break;
    case PROP_DEFAULT_PLAYBACK_RATE:
        g_value_set_double(value, webkit_dom_media_controller_get_default_playback_rate(self));
        break;
    case PROP_PLAYBACK_RATE:
        g_value_set_double(value, webkit_dom_media_controller_get_playback_rate(self));
        break;
    case PROP_VOLUME:
        g_value_set_double(value, webkit_dom_media_controller_get_volume(self));
        break;
    case PROP_MUTED:
        g_value_set_boolean(value, webkit_dom_media_controller_get_muted(self));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static GObject* webkit_dom_media_controller_constructor(GType type, guint constructPropertiesCount, GObjectConstructParam* constructProperties)
{
    GObject* object = G_OBJECT_CLASS(webkit_dom_media_controller_parent_class)->constructor(type, constructPropertiesCount, constructProperties);
#if ENABLE(VIDEO)
    WebKitDOMMediaControllerPrivate* priv = WEBKIT_DOM_MEDIA_CONTROLLER_GET_PRIVATE(object);
    priv->coreObject = static_cast<WebCore::MediaController*>(WEBKIT_DOM_OBJECT(object)->coreObject);
    WebKit::DOMObjectCache::put(priv->coreObject.get(), object);
#endif // ENABLE(VIDEO)
    return object;
}

static void webkit_dom_media_controller_class_init(WebKitDOMMediaControllerClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    g_type_class_add_private(gobjectClass, sizeof(WebKitDOMMediaControllerPrivate));
    gobjectClass->constructor = webkit_dom_media_controller_constructor;
    gobjectClass->finalize = webkit_dom_media_controller_finalize;
    gobjectClass->set_property = webkit_dom_media_controller_set_property;
    gobjectClass->get_property = webkit_dom_media_controller_get_property;

    g_object_class_install_property(
        gobjectClass,
        PROP_BUFFERED,
        g_param_spec_object(
            "buffered",
            "MediaController:buffered",
            "read-only WebKitDOMTimeRanges* MediaController:buffered",
            WEBKIT_DOM_TYPE_TIME_RANGES,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_SEEKABLE,
        g_param_spec_object(
            "seekable",
            "MediaController:seekable",
            "read-only WebKitDOMTimeRanges* MediaController:seekable",
            WEBKIT_DOM_TYPE_TIME_RANGES,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_DURATION,
        g_param_spec_double(
            "duration",
            "MediaController:duration",
            "read-only gdouble MediaController:duration",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_CURRENT_TIME,
        g_param_spec_double(
            "current-time",
            "MediaController:current-time",
            "read-write gdouble MediaController:current-time",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_PAUSED,
        g_param_spec_boolean(
            "paused",
            "MediaController:paused",
            "read-only gboolean MediaController:paused",
            FALSE,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_PLAYED,
        g_param_spec_object(
            "played",
            "MediaController:played",
            "read-only WebKitDOMTimeRanges* MediaController:played",
            WEBKIT_DOM_TYPE_TIME_RANGES,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_PLAYBACK_STATE,
        g_param_spec_string(
            "playback-state",
            "MediaController:playback-state",
            "read-only gchar* MediaController:playback-state",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_DEFAULT_PLAYBACK_RATE,
        g_param_spec_double(
            "default-playback-rate",
            "MediaController:default-playback-rate",
            "read-write gdouble MediaController:default-playback-rate",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_PLAYBACK_RATE,
        g_param_spec_double(
            "playback-rate",
            "MediaController:playback-rate",
            "read-write gdouble MediaController:playback-rate",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_VOLUME,
        g_param_spec_double(
            "volume",
            "MediaController:volume",
            "read-write gdouble MediaController:volume",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_MUTED,
        g_param_spec_boolean(
            "muted",
            "MediaController:muted",
            "read-write gboolean MediaController:muted",
            FALSE,
            WEBKIT_PARAM_READWRITE));

}

static void webkit_dom_media_controller_init(WebKitDOMMediaController* request)
{
    WebKitDOMMediaControllerPrivate* priv = WEBKIT_DOM_MEDIA_CONTROLLER_GET_PRIVATE(request);
    new (priv) WebKitDOMMediaControllerPrivate();
}

void webkit_dom_media_controller_play(WebKitDOMMediaController* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self));
    WebCore::MediaController* item = WebKit::core(self);
    item->play();
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_media_controller_pause(WebKitDOMMediaController* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self));
    WebCore::MediaController* item = WebKit::core(self);
    item->pause();
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_media_controller_unpause(WebKitDOMMediaController* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self));
    WebCore::MediaController* item = WebKit::core(self);
    item->unpause();
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

WebKitDOMTimeRanges* webkit_dom_media_controller_get_buffered(WebKitDOMMediaController* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self), 0);
    WebCore::MediaController* item = WebKit::core(self);
    RefPtr<WebCore::TimeRanges> gobjectResult = WTF::getPtr(item->buffered());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

WebKitDOMTimeRanges* webkit_dom_media_controller_get_seekable(WebKitDOMMediaController* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self), 0);
    WebCore::MediaController* item = WebKit::core(self);
    RefPtr<WebCore::TimeRanges> gobjectResult = WTF::getPtr(item->seekable());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

gdouble webkit_dom_media_controller_get_duration(WebKitDOMMediaController* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self), 0);
    WebCore::MediaController* item = WebKit::core(self);
    gdouble result = item->duration();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gdouble>(0);
#endif /* ENABLE(VIDEO) */
}

gdouble webkit_dom_media_controller_get_current_time(WebKitDOMMediaController* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self), 0);
    WebCore::MediaController* item = WebKit::core(self);
    gdouble result = item->currentTime();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gdouble>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_media_controller_set_current_time(WebKitDOMMediaController* self, gdouble value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self));
    WebCore::MediaController* item = WebKit::core(self);
    item->setCurrentTime(value);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gboolean webkit_dom_media_controller_get_paused(WebKitDOMMediaController* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self), FALSE);
    WebCore::MediaController* item = WebKit::core(self);
    gboolean result = item->paused();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gboolean>(0);
#endif /* ENABLE(VIDEO) */
}

WebKitDOMTimeRanges* webkit_dom_media_controller_get_played(WebKitDOMMediaController* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self), 0);
    WebCore::MediaController* item = WebKit::core(self);
    RefPtr<WebCore::TimeRanges> gobjectResult = WTF::getPtr(item->played());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

gchar* webkit_dom_media_controller_get_playback_state(WebKitDOMMediaController* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self), 0);
    WebCore::MediaController* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->playbackState());
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

gdouble webkit_dom_media_controller_get_default_playback_rate(WebKitDOMMediaController* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self), 0);
    WebCore::MediaController* item = WebKit::core(self);
    gdouble result = item->defaultPlaybackRate();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gdouble>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_media_controller_set_default_playback_rate(WebKitDOMMediaController* self, gdouble value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self));
    WebCore::MediaController* item = WebKit::core(self);
    item->setDefaultPlaybackRate(value);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gdouble webkit_dom_media_controller_get_playback_rate(WebKitDOMMediaController* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self), 0);
    WebCore::MediaController* item = WebKit::core(self);
    gdouble result = item->playbackRate();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gdouble>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_media_controller_set_playback_rate(WebKitDOMMediaController* self, gdouble value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self));
    WebCore::MediaController* item = WebKit::core(self);
    item->setPlaybackRate(value);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gdouble webkit_dom_media_controller_get_volume(WebKitDOMMediaController* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self), 0);
    WebCore::MediaController* item = WebKit::core(self);
    gdouble result = item->volume();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gdouble>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_media_controller_set_volume(WebKitDOMMediaController* self, gdouble value, GError** error)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self));
    g_return_if_fail(!error || !*error);
    WebCore::MediaController* item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->setVolume(value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    UNUSED_PARAM(error);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gboolean webkit_dom_media_controller_get_muted(WebKitDOMMediaController* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self), FALSE);
    WebCore::MediaController* item = WebKit::core(self);
    gboolean result = item->muted();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gboolean>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_media_controller_set_muted(WebKitDOMMediaController* self, gboolean value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_MEDIA_CONTROLLER(self));
    WebCore::MediaController* item = WebKit::core(self);
    item->setMuted(value);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

