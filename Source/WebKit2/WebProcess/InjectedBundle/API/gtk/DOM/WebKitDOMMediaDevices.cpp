/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMMediaDevices.h"

#include <WebCore/CSSImportRule.h>
#include "DOMObjectCache.h"
#include <WebCore/Document.h>
#include <WebCore/ExceptionCode.h>
#include <WebCore/ExceptionCodeDescription.h>
#include <WebCore/JSMainThreadExecState.h>
#include "WebKitDOMMediaDevicesPrivate.h"
#include "WebKitDOMMediaTrackSupportedConstraintsPrivate.h"
#include "WebKitDOMPrivate.h"
#include "ConvertToUTF8String.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

#define WEBKIT_DOM_MEDIA_DEVICES_GET_PRIVATE(obj) G_TYPE_INSTANCE_GET_PRIVATE(obj, WEBKIT_DOM_TYPE_MEDIA_DEVICES, WebKitDOMMediaDevicesPrivate)

typedef struct _WebKitDOMMediaDevicesPrivate {
#if ENABLE(MEDIA_STREAM)
    RefPtr<WebCore::MediaDevices> coreObject;
#endif // ENABLE(MEDIA_STREAM)
} WebKitDOMMediaDevicesPrivate;

#if ENABLE(MEDIA_STREAM)

namespace WebKit {

WebKitDOMMediaDevices* kit(WebCore::MediaDevices* obj)
{
    if (!obj)
        return 0;

    if (gpointer ret = DOMObjectCache::get(obj))
        return WEBKIT_DOM_MEDIA_DEVICES(ret);

    return wrapMediaDevices(obj);
}

WebCore::MediaDevices* core(WebKitDOMMediaDevices* request)
{
    return request ? static_cast<WebCore::MediaDevices*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMMediaDevices* wrapMediaDevices(WebCore::MediaDevices* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_MEDIA_DEVICES(g_object_new(WEBKIT_DOM_TYPE_MEDIA_DEVICES, "core-object", coreObject, nullptr));
}

} // namespace WebKit

#endif // ENABLE(MEDIA_STREAM)

G_DEFINE_TYPE(WebKitDOMMediaDevices, webkit_dom_media_devices, WEBKIT_DOM_TYPE_OBJECT)

static void webkit_dom_media_devices_finalize(GObject* object)
{
    WebKitDOMMediaDevicesPrivate* priv = WEBKIT_DOM_MEDIA_DEVICES_GET_PRIVATE(object);
#if ENABLE(MEDIA_STREAM)
    WebKit::DOMObjectCache::forget(priv->coreObject.get());
#endif // ENABLE(MEDIA_STREAM)
    priv->~WebKitDOMMediaDevicesPrivate();
    G_OBJECT_CLASS(webkit_dom_media_devices_parent_class)->finalize(object);
}

static GObject* webkit_dom_media_devices_constructor(GType type, guint constructPropertiesCount, GObjectConstructParam* constructProperties)
{
    GObject* object = G_OBJECT_CLASS(webkit_dom_media_devices_parent_class)->constructor(type, constructPropertiesCount, constructProperties);
#if ENABLE(MEDIA_STREAM)
    WebKitDOMMediaDevicesPrivate* priv = WEBKIT_DOM_MEDIA_DEVICES_GET_PRIVATE(object);
    priv->coreObject = static_cast<WebCore::MediaDevices*>(WEBKIT_DOM_OBJECT(object)->coreObject);
    WebKit::DOMObjectCache::put(priv->coreObject.get(), object);
#endif // ENABLE(MEDIA_STREAM)
    return object;
}

static void webkit_dom_media_devices_class_init(WebKitDOMMediaDevicesClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    g_type_class_add_private(gobjectClass, sizeof(WebKitDOMMediaDevicesPrivate));
    gobjectClass->constructor = webkit_dom_media_devices_constructor;
    gobjectClass->finalize = webkit_dom_media_devices_finalize;
}

static void webkit_dom_media_devices_init(WebKitDOMMediaDevices* request)
{
    WebKitDOMMediaDevicesPrivate* priv = WEBKIT_DOM_MEDIA_DEVICES_GET_PRIVATE(request);
    new (priv) WebKitDOMMediaDevicesPrivate();
}

WebKitDOMMediaTrackSupportedConstraints* webkit_dom_media_devices_get_supported_constraints(WebKitDOMMediaDevices* self)
{
#if ENABLE(MEDIA_STREAM)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_MEDIA_DEVICES(self), 0);
    WebCore::MediaDevices* item = WebKit::core(self);
    RefPtr<WebCore::MediaTrackSupportedConstraints> gobjectResult = WTF::getPtr(item->getSupportedConstraints());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Media Stream")
    return 0;
#endif /* ENABLE(MEDIA_STREAM) */
}

