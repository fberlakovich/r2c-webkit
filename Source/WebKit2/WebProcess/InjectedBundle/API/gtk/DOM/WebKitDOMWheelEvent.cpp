/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMWheelEvent.h"

#include <WebCore/CSSImportRule.h>
#include "DOMObjectCache.h"
#include <WebCore/Document.h>
#include <WebCore/ExceptionCode.h>
#include <WebCore/ExceptionCodeDescription.h>
#include <WebCore/JSMainThreadExecState.h>
#include "WebKitDOMDOMWindowPrivate.h"
#include "WebKitDOMEventPrivate.h"
#include "WebKitDOMPrivate.h"
#include "WebKitDOMWheelEventPrivate.h"
#include "ConvertToUTF8String.h"
#include "WebKitDOMWheelEventUnstable.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

namespace WebKit {

WebKitDOMWheelEvent* kit(WebCore::WheelEvent* obj)
{
    return WEBKIT_DOM_WHEEL_EVENT(kit(static_cast<WebCore::Event*>(obj)));
}

WebCore::WheelEvent* core(WebKitDOMWheelEvent* request)
{
    return request ? static_cast<WebCore::WheelEvent*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMWheelEvent* wrapWheelEvent(WebCore::WheelEvent* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_WHEEL_EVENT(g_object_new(WEBKIT_DOM_TYPE_WHEEL_EVENT, "core-object", coreObject, nullptr));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMWheelEvent, webkit_dom_wheel_event, WEBKIT_DOM_TYPE_MOUSE_EVENT)

enum {
    PROP_0,
    PROP_DELTA_X,
    PROP_DELTA_Y,
    PROP_DELTA_Z,
    PROP_DELTA_MODE,
    PROP_WHEEL_DELTA_X,
    PROP_WHEEL_DELTA_Y,
    PROP_WHEEL_DELTA,
    PROP_WEBKIT_DIRECTION_INVERTED_FROM_DEVICE,
};

static void webkit_dom_wheel_event_get_property(GObject* object, guint propertyId, GValue* value, GParamSpec* pspec)
{
    WebKitDOMWheelEvent* self = WEBKIT_DOM_WHEEL_EVENT(object);

    switch (propertyId) {
    case PROP_DELTA_X:
        g_value_set_double(value, webkit_dom_wheel_event_get_delta_x(self));
        break;
    case PROP_DELTA_Y:
        g_value_set_double(value, webkit_dom_wheel_event_get_delta_y(self));
        break;
    case PROP_DELTA_Z:
        g_value_set_double(value, webkit_dom_wheel_event_get_delta_z(self));
        break;
    case PROP_DELTA_MODE:
        g_value_set_ulong(value, webkit_dom_wheel_event_get_delta_mode(self));
        break;
    case PROP_WHEEL_DELTA_X:
        g_value_set_long(value, webkit_dom_wheel_event_get_wheel_delta_x(self));
        break;
    case PROP_WHEEL_DELTA_Y:
        g_value_set_long(value, webkit_dom_wheel_event_get_wheel_delta_y(self));
        break;
    case PROP_WHEEL_DELTA:
        g_value_set_long(value, webkit_dom_wheel_event_get_wheel_delta(self));
        break;
    case PROP_WEBKIT_DIRECTION_INVERTED_FROM_DEVICE:
        g_value_set_boolean(value, webkit_dom_wheel_event_get_webkit_direction_inverted_from_device(self));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static void webkit_dom_wheel_event_class_init(WebKitDOMWheelEventClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->get_property = webkit_dom_wheel_event_get_property;

    g_object_class_install_property(
        gobjectClass,
        PROP_DELTA_X,
        g_param_spec_double(
            "delta-x",
            "WheelEvent:delta-x",
            "read-only gdouble WheelEvent:delta-x",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_DELTA_Y,
        g_param_spec_double(
            "delta-y",
            "WheelEvent:delta-y",
            "read-only gdouble WheelEvent:delta-y",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_DELTA_Z,
        g_param_spec_double(
            "delta-z",
            "WheelEvent:delta-z",
            "read-only gdouble WheelEvent:delta-z",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_DELTA_MODE,
        g_param_spec_ulong(
            "delta-mode",
            "WheelEvent:delta-mode",
            "read-only gulong WheelEvent:delta-mode",
            0, G_MAXULONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WHEEL_DELTA_X,
        g_param_spec_long(
            "wheel-delta-x",
            "WheelEvent:wheel-delta-x",
            "read-only glong WheelEvent:wheel-delta-x",
            G_MINLONG, G_MAXLONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WHEEL_DELTA_Y,
        g_param_spec_long(
            "wheel-delta-y",
            "WheelEvent:wheel-delta-y",
            "read-only glong WheelEvent:wheel-delta-y",
            G_MINLONG, G_MAXLONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WHEEL_DELTA,
        g_param_spec_long(
            "wheel-delta",
            "WheelEvent:wheel-delta",
            "read-only glong WheelEvent:wheel-delta",
            G_MINLONG, G_MAXLONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WEBKIT_DIRECTION_INVERTED_FROM_DEVICE,
        g_param_spec_boolean(
            "webkit-direction-inverted-from-device",
            "WheelEvent:webkit-direction-inverted-from-device",
            "read-only gboolean WheelEvent:webkit-direction-inverted-from-device",
            FALSE,
            WEBKIT_PARAM_READABLE));

}

static void webkit_dom_wheel_event_init(WebKitDOMWheelEvent* request)
{
    UNUSED_PARAM(request);
}

void webkit_dom_wheel_event_init_wheel_event(WebKitDOMWheelEvent* self, glong wheelDeltaX, glong wheelDeltaY, WebKitDOMDOMWindow* view, glong screenX, glong screenY, glong clientX, glong clientY, gboolean ctrlKey, gboolean altKey, gboolean shiftKey, gboolean metaKey)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_WHEEL_EVENT(self));
    g_return_if_fail(WEBKIT_DOM_IS_DOM_WINDOW(view));
    WebCore::WheelEvent* item = WebKit::core(self);
    WebCore::DOMWindow* convertedView = WebKit::core(view);
    item->initWheelEvent(wheelDeltaX, wheelDeltaY, convertedView, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey);
}

gdouble webkit_dom_wheel_event_get_delta_x(WebKitDOMWheelEvent* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_WHEEL_EVENT(self), 0);
    WebCore::WheelEvent* item = WebKit::core(self);
    gdouble result = item->deltaX();
    return result;
}

gdouble webkit_dom_wheel_event_get_delta_y(WebKitDOMWheelEvent* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_WHEEL_EVENT(self), 0);
    WebCore::WheelEvent* item = WebKit::core(self);
    gdouble result = item->deltaY();
    return result;
}

gdouble webkit_dom_wheel_event_get_delta_z(WebKitDOMWheelEvent* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_WHEEL_EVENT(self), 0);
    WebCore::WheelEvent* item = WebKit::core(self);
    gdouble result = item->deltaZ();
    return result;
}

gulong webkit_dom_wheel_event_get_delta_mode(WebKitDOMWheelEvent* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_WHEEL_EVENT(self), 0);
    WebCore::WheelEvent* item = WebKit::core(self);
    gulong result = item->deltaMode();
    return result;
}

glong webkit_dom_wheel_event_get_wheel_delta_x(WebKitDOMWheelEvent* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_WHEEL_EVENT(self), 0);
    WebCore::WheelEvent* item = WebKit::core(self);
    glong result = item->wheelDeltaX();
    return result;
}

glong webkit_dom_wheel_event_get_wheel_delta_y(WebKitDOMWheelEvent* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_WHEEL_EVENT(self), 0);
    WebCore::WheelEvent* item = WebKit::core(self);
    glong result = item->wheelDeltaY();
    return result;
}

glong webkit_dom_wheel_event_get_wheel_delta(WebKitDOMWheelEvent* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_WHEEL_EVENT(self), 0);
    WebCore::WheelEvent* item = WebKit::core(self);
    glong result = item->wheelDelta();
    return result;
}

gboolean webkit_dom_wheel_event_get_webkit_direction_inverted_from_device(WebKitDOMWheelEvent* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_WHEEL_EVENT(self), FALSE);
    WebCore::WheelEvent* item = WebKit::core(self);
    gboolean result = item->webkitDirectionInvertedFromDevice();
    return result;
}

