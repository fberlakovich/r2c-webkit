/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMTouch.h"

#include <WebCore/CSSImportRule.h>
#include "DOMObjectCache.h"
#include <WebCore/Document.h>
#include <WebCore/ExceptionCode.h>
#include <WebCore/ExceptionCodeDescription.h>
#include <WebCore/JSMainThreadExecState.h>
#include "WebKitDOMEventTargetPrivate.h"
#include "WebKitDOMPrivate.h"
#include "WebKitDOMTouchPrivate.h"
#include "ConvertToUTF8String.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

#define WEBKIT_DOM_TOUCH_GET_PRIVATE(obj) G_TYPE_INSTANCE_GET_PRIVATE(obj, WEBKIT_DOM_TYPE_TOUCH, WebKitDOMTouchPrivate)

typedef struct _WebKitDOMTouchPrivate {
#if ENABLE(TOUCH_EVENTS)
    RefPtr<WebCore::Touch> coreObject;
#endif // ENABLE(TOUCH_EVENTS)
} WebKitDOMTouchPrivate;

#if ENABLE(TOUCH_EVENTS)

namespace WebKit {

WebKitDOMTouch* kit(WebCore::Touch* obj)
{
    if (!obj)
        return 0;

    if (gpointer ret = DOMObjectCache::get(obj))
        return WEBKIT_DOM_TOUCH(ret);

    return wrapTouch(obj);
}

WebCore::Touch* core(WebKitDOMTouch* request)
{
    return request ? static_cast<WebCore::Touch*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMTouch* wrapTouch(WebCore::Touch* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_TOUCH(g_object_new(WEBKIT_DOM_TYPE_TOUCH, "core-object", coreObject, nullptr));
}

} // namespace WebKit

#endif // ENABLE(TOUCH_EVENTS)

G_DEFINE_TYPE(WebKitDOMTouch, webkit_dom_touch, WEBKIT_DOM_TYPE_OBJECT)

enum {
    PROP_0,
    PROP_CLIENT_X,
    PROP_CLIENT_Y,
    PROP_SCREEN_X,
    PROP_SCREEN_Y,
    PROP_PAGE_X,
    PROP_PAGE_Y,
    PROP_TARGET,
    PROP_IDENTIFIER,
    PROP_WEBKIT_RADIUS_X,
    PROP_WEBKIT_RADIUS_Y,
    PROP_WEBKIT_ROTATION_ANGLE,
    PROP_WEBKIT_FORCE,
};

static void webkit_dom_touch_finalize(GObject* object)
{
    WebKitDOMTouchPrivate* priv = WEBKIT_DOM_TOUCH_GET_PRIVATE(object);
#if ENABLE(TOUCH_EVENTS)
    WebKit::DOMObjectCache::forget(priv->coreObject.get());
#endif // ENABLE(TOUCH_EVENTS)
    priv->~WebKitDOMTouchPrivate();
    G_OBJECT_CLASS(webkit_dom_touch_parent_class)->finalize(object);
}

static void webkit_dom_touch_get_property(GObject* object, guint propertyId, GValue* value, GParamSpec* pspec)
{
    WebKitDOMTouch* self = WEBKIT_DOM_TOUCH(object);

    switch (propertyId) {
    case PROP_CLIENT_X:
        g_value_set_long(value, webkit_dom_touch_get_client_x(self));
        break;
    case PROP_CLIENT_Y:
        g_value_set_long(value, webkit_dom_touch_get_client_y(self));
        break;
    case PROP_SCREEN_X:
        g_value_set_long(value, webkit_dom_touch_get_screen_x(self));
        break;
    case PROP_SCREEN_Y:
        g_value_set_long(value, webkit_dom_touch_get_screen_y(self));
        break;
    case PROP_PAGE_X:
        g_value_set_long(value, webkit_dom_touch_get_page_x(self));
        break;
    case PROP_PAGE_Y:
        g_value_set_long(value, webkit_dom_touch_get_page_y(self));
        break;
    case PROP_TARGET:
        g_value_set_object(value, webkit_dom_touch_get_target(self));
        break;
    case PROP_IDENTIFIER:
        g_value_set_ulong(value, webkit_dom_touch_get_identifier(self));
        break;
    case PROP_WEBKIT_RADIUS_X:
        g_value_set_long(value, webkit_dom_touch_get_webkit_radius_x(self));
        break;
    case PROP_WEBKIT_RADIUS_Y:
        g_value_set_long(value, webkit_dom_touch_get_webkit_radius_y(self));
        break;
    case PROP_WEBKIT_ROTATION_ANGLE:
        g_value_set_float(value, webkit_dom_touch_get_webkit_rotation_angle(self));
        break;
    case PROP_WEBKIT_FORCE:
        g_value_set_float(value, webkit_dom_touch_get_webkit_force(self));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static GObject* webkit_dom_touch_constructor(GType type, guint constructPropertiesCount, GObjectConstructParam* constructProperties)
{
    GObject* object = G_OBJECT_CLASS(webkit_dom_touch_parent_class)->constructor(type, constructPropertiesCount, constructProperties);
#if ENABLE(TOUCH_EVENTS)
    WebKitDOMTouchPrivate* priv = WEBKIT_DOM_TOUCH_GET_PRIVATE(object);
    priv->coreObject = static_cast<WebCore::Touch*>(WEBKIT_DOM_OBJECT(object)->coreObject);
    WebKit::DOMObjectCache::put(priv->coreObject.get(), object);
#endif // ENABLE(TOUCH_EVENTS)
    return object;
}

static void webkit_dom_touch_class_init(WebKitDOMTouchClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    g_type_class_add_private(gobjectClass, sizeof(WebKitDOMTouchPrivate));
    gobjectClass->constructor = webkit_dom_touch_constructor;
    gobjectClass->finalize = webkit_dom_touch_finalize;
    gobjectClass->get_property = webkit_dom_touch_get_property;

    g_object_class_install_property(
        gobjectClass,
        PROP_CLIENT_X,
        g_param_spec_long(
            "client-x",
            "Touch:client-x",
            "read-only glong Touch:client-x",
            G_MINLONG, G_MAXLONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_CLIENT_Y,
        g_param_spec_long(
            "client-y",
            "Touch:client-y",
            "read-only glong Touch:client-y",
            G_MINLONG, G_MAXLONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_SCREEN_X,
        g_param_spec_long(
            "screen-x",
            "Touch:screen-x",
            "read-only glong Touch:screen-x",
            G_MINLONG, G_MAXLONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_SCREEN_Y,
        g_param_spec_long(
            "screen-y",
            "Touch:screen-y",
            "read-only glong Touch:screen-y",
            G_MINLONG, G_MAXLONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_PAGE_X,
        g_param_spec_long(
            "page-x",
            "Touch:page-x",
            "read-only glong Touch:page-x",
            G_MINLONG, G_MAXLONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_PAGE_Y,
        g_param_spec_long(
            "page-y",
            "Touch:page-y",
            "read-only glong Touch:page-y",
            G_MINLONG, G_MAXLONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_TARGET,
        g_param_spec_object(
            "target",
            "Touch:target",
            "read-only WebKitDOMEventTarget* Touch:target",
            WEBKIT_DOM_TYPE_EVENT_TARGET,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_IDENTIFIER,
        g_param_spec_ulong(
            "identifier",
            "Touch:identifier",
            "read-only gulong Touch:identifier",
            0, G_MAXULONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WEBKIT_RADIUS_X,
        g_param_spec_long(
            "webkit-radius-x",
            "Touch:webkit-radius-x",
            "read-only glong Touch:webkit-radius-x",
            G_MINLONG, G_MAXLONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WEBKIT_RADIUS_Y,
        g_param_spec_long(
            "webkit-radius-y",
            "Touch:webkit-radius-y",
            "read-only glong Touch:webkit-radius-y",
            G_MINLONG, G_MAXLONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WEBKIT_ROTATION_ANGLE,
        g_param_spec_float(
            "webkit-rotation-angle",
            "Touch:webkit-rotation-angle",
            "read-only gfloat Touch:webkit-rotation-angle",
            -G_MAXFLOAT, G_MAXFLOAT, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WEBKIT_FORCE,
        g_param_spec_float(
            "webkit-force",
            "Touch:webkit-force",
            "read-only gfloat Touch:webkit-force",
            -G_MAXFLOAT, G_MAXFLOAT, 0,
            WEBKIT_PARAM_READABLE));

}

static void webkit_dom_touch_init(WebKitDOMTouch* request)
{
    WebKitDOMTouchPrivate* priv = WEBKIT_DOM_TOUCH_GET_PRIVATE(request);
    new (priv) WebKitDOMTouchPrivate();
}

glong webkit_dom_touch_get_client_x(WebKitDOMTouch* self)
{
#if ENABLE(TOUCH_EVENTS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TOUCH(self), 0);
    WebCore::Touch* item = WebKit::core(self);
    glong result = item->clientX();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Touch Events")
    return static_cast<glong>(0);
#endif /* ENABLE(TOUCH_EVENTS) */
}

glong webkit_dom_touch_get_client_y(WebKitDOMTouch* self)
{
#if ENABLE(TOUCH_EVENTS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TOUCH(self), 0);
    WebCore::Touch* item = WebKit::core(self);
    glong result = item->clientY();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Touch Events")
    return static_cast<glong>(0);
#endif /* ENABLE(TOUCH_EVENTS) */
}

glong webkit_dom_touch_get_screen_x(WebKitDOMTouch* self)
{
#if ENABLE(TOUCH_EVENTS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TOUCH(self), 0);
    WebCore::Touch* item = WebKit::core(self);
    glong result = item->screenX();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Touch Events")
    return static_cast<glong>(0);
#endif /* ENABLE(TOUCH_EVENTS) */
}

glong webkit_dom_touch_get_screen_y(WebKitDOMTouch* self)
{
#if ENABLE(TOUCH_EVENTS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TOUCH(self), 0);
    WebCore::Touch* item = WebKit::core(self);
    glong result = item->screenY();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Touch Events")
    return static_cast<glong>(0);
#endif /* ENABLE(TOUCH_EVENTS) */
}

glong webkit_dom_touch_get_page_x(WebKitDOMTouch* self)
{
#if ENABLE(TOUCH_EVENTS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TOUCH(self), 0);
    WebCore::Touch* item = WebKit::core(self);
    glong result = item->pageX();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Touch Events")
    return static_cast<glong>(0);
#endif /* ENABLE(TOUCH_EVENTS) */
}

glong webkit_dom_touch_get_page_y(WebKitDOMTouch* self)
{
#if ENABLE(TOUCH_EVENTS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TOUCH(self), 0);
    WebCore::Touch* item = WebKit::core(self);
    glong result = item->pageY();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Touch Events")
    return static_cast<glong>(0);
#endif /* ENABLE(TOUCH_EVENTS) */
}

WebKitDOMEventTarget* webkit_dom_touch_get_target(WebKitDOMTouch* self)
{
#if ENABLE(TOUCH_EVENTS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TOUCH(self), 0);
    WebCore::Touch* item = WebKit::core(self);
    RefPtr<WebCore::EventTarget> gobjectResult = WTF::getPtr(item->target());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Touch Events")
    return 0;
#endif /* ENABLE(TOUCH_EVENTS) */
}

gulong webkit_dom_touch_get_identifier(WebKitDOMTouch* self)
{
#if ENABLE(TOUCH_EVENTS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TOUCH(self), 0);
    WebCore::Touch* item = WebKit::core(self);
    gulong result = item->identifier();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Touch Events")
    return static_cast<gulong>(0);
#endif /* ENABLE(TOUCH_EVENTS) */
}

glong webkit_dom_touch_get_webkit_radius_x(WebKitDOMTouch* self)
{
#if ENABLE(TOUCH_EVENTS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TOUCH(self), 0);
    WebCore::Touch* item = WebKit::core(self);
    glong result = item->webkitRadiusX();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Touch Events")
    return static_cast<glong>(0);
#endif /* ENABLE(TOUCH_EVENTS) */
}

glong webkit_dom_touch_get_webkit_radius_y(WebKitDOMTouch* self)
{
#if ENABLE(TOUCH_EVENTS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TOUCH(self), 0);
    WebCore::Touch* item = WebKit::core(self);
    glong result = item->webkitRadiusY();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Touch Events")
    return static_cast<glong>(0);
#endif /* ENABLE(TOUCH_EVENTS) */
}

gfloat webkit_dom_touch_get_webkit_rotation_angle(WebKitDOMTouch* self)
{
#if ENABLE(TOUCH_EVENTS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TOUCH(self), 0);
    WebCore::Touch* item = WebKit::core(self);
    gfloat result = item->webkitRotationAngle();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Touch Events")
    return static_cast<gfloat>(0);
#endif /* ENABLE(TOUCH_EVENTS) */
}

gfloat webkit_dom_touch_get_webkit_force(WebKitDOMTouch* self)
{
#if ENABLE(TOUCH_EVENTS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TOUCH(self), 0);
    WebCore::Touch* item = WebKit::core(self);
    gfloat result = item->webkitForce();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Touch Events")
    return static_cast<gfloat>(0);
#endif /* ENABLE(TOUCH_EVENTS) */
}

