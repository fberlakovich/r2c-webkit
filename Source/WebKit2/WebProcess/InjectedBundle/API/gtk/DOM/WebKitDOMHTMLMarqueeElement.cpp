/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMHTMLMarqueeElement.h"

#include <WebCore/CSSImportRule.h>
#include "DOMObjectCache.h"
#include <WebCore/Document.h>
#include <WebCore/ExceptionCode.h>
#include <WebCore/ExceptionCodeDescription.h>
#include "GObjectEventListener.h"
#include <WebCore/HTMLNames.h>
#include <WebCore/JSMainThreadExecState.h>
#include "WebKitDOMEventPrivate.h"
#include "WebKitDOMEventTarget.h"
#include "WebKitDOMHTMLMarqueeElementPrivate.h"
#include "WebKitDOMNodePrivate.h"
#include "WebKitDOMPrivate.h"
#include "ConvertToUTF8String.h"
#include "WebKitDOMHTMLMarqueeElementUnstable.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

namespace WebKit {

WebKitDOMHTMLMarqueeElement* kit(WebCore::HTMLMarqueeElement* obj)
{
    return WEBKIT_DOM_HTML_MARQUEE_ELEMENT(kit(static_cast<WebCore::Node*>(obj)));
}

WebCore::HTMLMarqueeElement* core(WebKitDOMHTMLMarqueeElement* request)
{
    return request ? static_cast<WebCore::HTMLMarqueeElement*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMHTMLMarqueeElement* wrapHTMLMarqueeElement(WebCore::HTMLMarqueeElement* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_HTML_MARQUEE_ELEMENT(g_object_new(WEBKIT_DOM_TYPE_HTML_MARQUEE_ELEMENT, "core-object", coreObject, nullptr));
}

} // namespace WebKit

static gboolean webkit_dom_html_marquee_element_dispatch_event(WebKitDOMEventTarget* target, WebKitDOMEvent* event, GError** error)
{
    WebCore::Event* coreEvent = WebKit::core(event);
    if (!coreEvent)
        return false;
    WebCore::HTMLMarqueeElement* coreTarget = static_cast<WebCore::HTMLMarqueeElement*>(WEBKIT_DOM_OBJECT(target)->coreObject);

    WebCore::ExceptionCode ec = 0;
    gboolean result = coreTarget->dispatchEventForBindings(*coreEvent, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription description(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), description.code, description.name);
    }
    return result;
}

static gboolean webkit_dom_html_marquee_element_add_event_listener(WebKitDOMEventTarget* target, const char* eventName, GClosure* handler, gboolean useCapture)
{
    WebCore::HTMLMarqueeElement* coreTarget = static_cast<WebCore::HTMLMarqueeElement*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebKit::GObjectEventListener::addEventListener(G_OBJECT(target), coreTarget, eventName, handler, useCapture);
}

static gboolean webkit_dom_html_marquee_element_remove_event_listener(WebKitDOMEventTarget* target, const char* eventName, GClosure* handler, gboolean useCapture)
{
    WebCore::HTMLMarqueeElement* coreTarget = static_cast<WebCore::HTMLMarqueeElement*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebKit::GObjectEventListener::removeEventListener(G_OBJECT(target), coreTarget, eventName, handler, useCapture);
}

static void webkit_dom_event_target_init(WebKitDOMEventTargetIface* iface)
{
    iface->dispatch_event = webkit_dom_html_marquee_element_dispatch_event;
    iface->add_event_listener = webkit_dom_html_marquee_element_add_event_listener;
    iface->remove_event_listener = webkit_dom_html_marquee_element_remove_event_listener;
}

G_DEFINE_TYPE_WITH_CODE(WebKitDOMHTMLMarqueeElement, webkit_dom_html_marquee_element, WEBKIT_DOM_TYPE_HTML_ELEMENT, G_IMPLEMENT_INTERFACE(WEBKIT_DOM_TYPE_EVENT_TARGET, webkit_dom_event_target_init))

enum {
    PROP_0,
    PROP_BEHAVIOR,
    PROP_BG_COLOR,
    PROP_DIRECTION,
    PROP_HEIGHT,
    PROP_HSPACE,
    PROP_LOOP,
    PROP_SCROLL_AMOUNT,
    PROP_SCROLL_DELAY,
    PROP_TRUE_SPEED,
    PROP_VSPACE,
    PROP_WIDTH,
};

static void webkit_dom_html_marquee_element_set_property(GObject* object, guint propertyId, const GValue* value, GParamSpec* pspec)
{
    WebKitDOMHTMLMarqueeElement* self = WEBKIT_DOM_HTML_MARQUEE_ELEMENT(object);

    switch (propertyId) {
    case PROP_BEHAVIOR:
        webkit_dom_html_marquee_element_set_behavior(self, g_value_get_string(value));
        break;
    case PROP_BG_COLOR:
        webkit_dom_html_marquee_element_set_bg_color(self, g_value_get_string(value));
        break;
    case PROP_DIRECTION:
        webkit_dom_html_marquee_element_set_direction(self, g_value_get_string(value));
        break;
    case PROP_HEIGHT:
        webkit_dom_html_marquee_element_set_height(self, g_value_get_string(value));
        break;
    case PROP_HSPACE:
        webkit_dom_html_marquee_element_set_hspace(self, g_value_get_ulong(value));
        break;
    case PROP_LOOP:
        webkit_dom_html_marquee_element_set_loop(self, g_value_get_long(value), nullptr);
        break;
    case PROP_SCROLL_AMOUNT:
        webkit_dom_html_marquee_element_set_scroll_amount(self, g_value_get_ulong(value));
        break;
    case PROP_SCROLL_DELAY:
        webkit_dom_html_marquee_element_set_scroll_delay(self, g_value_get_ulong(value));
        break;
    case PROP_TRUE_SPEED:
        webkit_dom_html_marquee_element_set_true_speed(self, g_value_get_boolean(value));
        break;
    case PROP_VSPACE:
        webkit_dom_html_marquee_element_set_vspace(self, g_value_get_ulong(value));
        break;
    case PROP_WIDTH:
        webkit_dom_html_marquee_element_set_width(self, g_value_get_string(value));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static void webkit_dom_html_marquee_element_get_property(GObject* object, guint propertyId, GValue* value, GParamSpec* pspec)
{
    WebKitDOMHTMLMarqueeElement* self = WEBKIT_DOM_HTML_MARQUEE_ELEMENT(object);

    switch (propertyId) {
    case PROP_BEHAVIOR:
        g_value_take_string(value, webkit_dom_html_marquee_element_get_behavior(self));
        break;
    case PROP_BG_COLOR:
        g_value_take_string(value, webkit_dom_html_marquee_element_get_bg_color(self));
        break;
    case PROP_DIRECTION:
        g_value_take_string(value, webkit_dom_html_marquee_element_get_direction(self));
        break;
    case PROP_HEIGHT:
        g_value_take_string(value, webkit_dom_html_marquee_element_get_height(self));
        break;
    case PROP_HSPACE:
        g_value_set_ulong(value, webkit_dom_html_marquee_element_get_hspace(self));
        break;
    case PROP_LOOP:
        g_value_set_long(value, webkit_dom_html_marquee_element_get_loop(self));
        break;
    case PROP_SCROLL_AMOUNT:
        g_value_set_ulong(value, webkit_dom_html_marquee_element_get_scroll_amount(self));
        break;
    case PROP_SCROLL_DELAY:
        g_value_set_ulong(value, webkit_dom_html_marquee_element_get_scroll_delay(self));
        break;
    case PROP_TRUE_SPEED:
        g_value_set_boolean(value, webkit_dom_html_marquee_element_get_true_speed(self));
        break;
    case PROP_VSPACE:
        g_value_set_ulong(value, webkit_dom_html_marquee_element_get_vspace(self));
        break;
    case PROP_WIDTH:
        g_value_take_string(value, webkit_dom_html_marquee_element_get_width(self));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static void webkit_dom_html_marquee_element_class_init(WebKitDOMHTMLMarqueeElementClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->set_property = webkit_dom_html_marquee_element_set_property;
    gobjectClass->get_property = webkit_dom_html_marquee_element_get_property;

    g_object_class_install_property(
        gobjectClass,
        PROP_BEHAVIOR,
        g_param_spec_string(
            "behavior",
            "HTMLMarqueeElement:behavior",
            "read-write gchar* HTMLMarqueeElement:behavior",
            "",
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_BG_COLOR,
        g_param_spec_string(
            "bg-color",
            "HTMLMarqueeElement:bg-color",
            "read-write gchar* HTMLMarqueeElement:bg-color",
            "",
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_DIRECTION,
        g_param_spec_string(
            "direction",
            "HTMLMarqueeElement:direction",
            "read-write gchar* HTMLMarqueeElement:direction",
            "",
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_HEIGHT,
        g_param_spec_string(
            "height",
            "HTMLMarqueeElement:height",
            "read-write gchar* HTMLMarqueeElement:height",
            "",
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_HSPACE,
        g_param_spec_ulong(
            "hspace",
            "HTMLMarqueeElement:hspace",
            "read-write gulong HTMLMarqueeElement:hspace",
            0, G_MAXULONG, 0,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_LOOP,
        g_param_spec_long(
            "loop",
            "HTMLMarqueeElement:loop",
            "read-write glong HTMLMarqueeElement:loop",
            G_MINLONG, G_MAXLONG, 0,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_SCROLL_AMOUNT,
        g_param_spec_ulong(
            "scroll-amount",
            "HTMLMarqueeElement:scroll-amount",
            "read-write gulong HTMLMarqueeElement:scroll-amount",
            0, G_MAXULONG, 0,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_SCROLL_DELAY,
        g_param_spec_ulong(
            "scroll-delay",
            "HTMLMarqueeElement:scroll-delay",
            "read-write gulong HTMLMarqueeElement:scroll-delay",
            0, G_MAXULONG, 0,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_TRUE_SPEED,
        g_param_spec_boolean(
            "true-speed",
            "HTMLMarqueeElement:true-speed",
            "read-write gboolean HTMLMarqueeElement:true-speed",
            FALSE,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_VSPACE,
        g_param_spec_ulong(
            "vspace",
            "HTMLMarqueeElement:vspace",
            "read-write gulong HTMLMarqueeElement:vspace",
            0, G_MAXULONG, 0,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WIDTH,
        g_param_spec_string(
            "width",
            "HTMLMarqueeElement:width",
            "read-write gchar* HTMLMarqueeElement:width",
            "",
            WEBKIT_PARAM_READWRITE));

}

static void webkit_dom_html_marquee_element_init(WebKitDOMHTMLMarqueeElement* request)
{
    UNUSED_PARAM(request);
}

void webkit_dom_html_marquee_element_start(WebKitDOMHTMLMarqueeElement* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self));
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    item->start();
}

void webkit_dom_html_marquee_element_stop(WebKitDOMHTMLMarqueeElement* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self));
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    item->stop();
}

gchar* webkit_dom_html_marquee_element_get_behavior(WebKitDOMHTMLMarqueeElement* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self), 0);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->attributeWithoutSynchronization(WebCore::HTMLNames::behaviorAttr));
    return result;
}

void webkit_dom_html_marquee_element_set_behavior(WebKitDOMHTMLMarqueeElement* self, const gchar* value)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self));
    g_return_if_fail(value);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    WTF::String convertedValue = WTF::String::fromUTF8(value);
    item->setAttributeWithoutSynchronization(WebCore::HTMLNames::behaviorAttr, convertedValue);
}

gchar* webkit_dom_html_marquee_element_get_bg_color(WebKitDOMHTMLMarqueeElement* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self), 0);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->attributeWithoutSynchronization(WebCore::HTMLNames::bgcolorAttr));
    return result;
}

void webkit_dom_html_marquee_element_set_bg_color(WebKitDOMHTMLMarqueeElement* self, const gchar* value)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self));
    g_return_if_fail(value);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    WTF::String convertedValue = WTF::String::fromUTF8(value);
    item->setAttributeWithoutSynchronization(WebCore::HTMLNames::bgcolorAttr, convertedValue);
}

gchar* webkit_dom_html_marquee_element_get_direction(WebKitDOMHTMLMarqueeElement* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self), 0);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->attributeWithoutSynchronization(WebCore::HTMLNames::directionAttr));
    return result;
}

void webkit_dom_html_marquee_element_set_direction(WebKitDOMHTMLMarqueeElement* self, const gchar* value)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self));
    g_return_if_fail(value);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    WTF::String convertedValue = WTF::String::fromUTF8(value);
    item->setAttributeWithoutSynchronization(WebCore::HTMLNames::directionAttr, convertedValue);
}

gchar* webkit_dom_html_marquee_element_get_height(WebKitDOMHTMLMarqueeElement* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self), 0);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->attributeWithoutSynchronization(WebCore::HTMLNames::heightAttr));
    return result;
}

void webkit_dom_html_marquee_element_set_height(WebKitDOMHTMLMarqueeElement* self, const gchar* value)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self));
    g_return_if_fail(value);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    WTF::String convertedValue = WTF::String::fromUTF8(value);
    item->setAttributeWithoutSynchronization(WebCore::HTMLNames::heightAttr, convertedValue);
}

gulong webkit_dom_html_marquee_element_get_hspace(WebKitDOMHTMLMarqueeElement* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self), 0);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    gulong result = item->getUnsignedIntegralAttribute(WebCore::HTMLNames::hspaceAttr);
    return result;
}

void webkit_dom_html_marquee_element_set_hspace(WebKitDOMHTMLMarqueeElement* self, gulong value)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self));
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    item->setUnsignedIntegralAttribute(WebCore::HTMLNames::hspaceAttr, value);
}

glong webkit_dom_html_marquee_element_get_loop(WebKitDOMHTMLMarqueeElement* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self), 0);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    glong result = item->loop();
    return result;
}

void webkit_dom_html_marquee_element_set_loop(WebKitDOMHTMLMarqueeElement* self, glong value, GError** error)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self));
    g_return_if_fail(!error || !*error);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->setLoop(value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
}

gulong webkit_dom_html_marquee_element_get_scroll_amount(WebKitDOMHTMLMarqueeElement* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self), 0);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    gulong result = item->scrollAmount();
    return result;
}

void webkit_dom_html_marquee_element_set_scroll_amount(WebKitDOMHTMLMarqueeElement* self, gulong value)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self));
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    item->setScrollAmount(value);
}

gulong webkit_dom_html_marquee_element_get_scroll_delay(WebKitDOMHTMLMarqueeElement* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self), 0);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    gulong result = item->scrollDelay();
    return result;
}

void webkit_dom_html_marquee_element_set_scroll_delay(WebKitDOMHTMLMarqueeElement* self, gulong value)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self));
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    item->setScrollDelay(value);
}

gboolean webkit_dom_html_marquee_element_get_true_speed(WebKitDOMHTMLMarqueeElement* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self), FALSE);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    gboolean result = item->hasAttributeWithoutSynchronization(WebCore::HTMLNames::truespeedAttr);
    return result;
}

void webkit_dom_html_marquee_element_set_true_speed(WebKitDOMHTMLMarqueeElement* self, gboolean value)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self));
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    item->setBooleanAttribute(WebCore::HTMLNames::truespeedAttr, value);
}

gulong webkit_dom_html_marquee_element_get_vspace(WebKitDOMHTMLMarqueeElement* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self), 0);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    gulong result = item->getUnsignedIntegralAttribute(WebCore::HTMLNames::vspaceAttr);
    return result;
}

void webkit_dom_html_marquee_element_set_vspace(WebKitDOMHTMLMarqueeElement* self, gulong value)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self));
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    item->setUnsignedIntegralAttribute(WebCore::HTMLNames::vspaceAttr, value);
}

gchar* webkit_dom_html_marquee_element_get_width(WebKitDOMHTMLMarqueeElement* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self), 0);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->attributeWithoutSynchronization(WebCore::HTMLNames::widthAttr));
    return result;
}

void webkit_dom_html_marquee_element_set_width(WebKitDOMHTMLMarqueeElement* self, const gchar* value)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MARQUEE_ELEMENT(self));
    g_return_if_fail(value);
    WebCore::HTMLMarqueeElement* item = WebKit::core(self);
    WTF::String convertedValue = WTF::String::fromUTF8(value);
    item->setAttributeWithoutSynchronization(WebCore::HTMLNames::widthAttr, convertedValue);
}

