/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMNavigator.h"

#include <WebCore/CSSImportRule.h>
#include "DOMObjectCache.h"
#include <WebCore/Document.h>
#include <WebCore/ExceptionCode.h>
#include <WebCore/ExceptionCodeDescription.h>
#include <WebCore/JSMainThreadExecState.h>
#include <WebCore/NavigatorBattery.h>
#include <WebCore/NavigatorContentUtils.h>
#include <WebCore/NavigatorGeolocation.h>
#include <WebCore/NavigatorMediaDevices.h>
#include <WebCore/NavigatorVibration.h>
#include "WebKitDOMBatteryManagerPrivate.h"
#include "WebKitDOMDOMMimeTypeArrayPrivate.h"
#include "WebKitDOMDOMPluginArrayPrivate.h"
#include "WebKitDOMGeolocationPrivate.h"
#include "WebKitDOMMediaDevicesPrivate.h"
#include "WebKitDOMNavigatorPrivate.h"
#include "WebKitDOMPrivate.h"
#include "ConvertToUTF8String.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

#define WEBKIT_DOM_NAVIGATOR_GET_PRIVATE(obj) G_TYPE_INSTANCE_GET_PRIVATE(obj, WEBKIT_DOM_TYPE_NAVIGATOR, WebKitDOMNavigatorPrivate)

typedef struct _WebKitDOMNavigatorPrivate {
    RefPtr<WebCore::Navigator> coreObject;
} WebKitDOMNavigatorPrivate;

namespace WebKit {

WebKitDOMNavigator* kit(WebCore::Navigator* obj)
{
    if (!obj)
        return 0;

    if (gpointer ret = DOMObjectCache::get(obj))
        return WEBKIT_DOM_NAVIGATOR(ret);

    return wrapNavigator(obj);
}

WebCore::Navigator* core(WebKitDOMNavigator* request)
{
    return request ? static_cast<WebCore::Navigator*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMNavigator* wrapNavigator(WebCore::Navigator* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_NAVIGATOR(g_object_new(WEBKIT_DOM_TYPE_NAVIGATOR, "core-object", coreObject, nullptr));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMNavigator, webkit_dom_navigator, WEBKIT_DOM_TYPE_OBJECT)

enum {
    PROP_0,
    PROP_PLUGINS,
    PROP_MIME_TYPES,
    PROP_COOKIE_ENABLED,
    PROP_WEBKIT_BATTERY,
    PROP_GEOLOCATION,
    PROP_MEDIA_DEVICES,
    PROP_HARDWARE_CONCURRENCY,
    PROP_APP_CODE_NAME,
    PROP_APP_NAME,
    PROP_APP_VERSION,
    PROP_PLATFORM,
    PROP_PRODUCT,
    PROP_PRODUCT_SUB,
    PROP_USER_AGENT,
    PROP_VENDOR,
    PROP_VENDOR_SUB,
    PROP_LANGUAGE,
    PROP_ON_LINE,
};

static void webkit_dom_navigator_finalize(GObject* object)
{
    WebKitDOMNavigatorPrivate* priv = WEBKIT_DOM_NAVIGATOR_GET_PRIVATE(object);

    WebKit::DOMObjectCache::forget(priv->coreObject.get());

    priv->~WebKitDOMNavigatorPrivate();
    G_OBJECT_CLASS(webkit_dom_navigator_parent_class)->finalize(object);
}

static void webkit_dom_navigator_get_property(GObject* object, guint propertyId, GValue* value, GParamSpec* pspec)
{
    WebKitDOMNavigator* self = WEBKIT_DOM_NAVIGATOR(object);

    switch (propertyId) {
    case PROP_PLUGINS:
        g_value_set_object(value, webkit_dom_navigator_get_plugins(self));
        break;
    case PROP_MIME_TYPES:
        g_value_set_object(value, webkit_dom_navigator_get_mime_types(self));
        break;
    case PROP_COOKIE_ENABLED:
        g_value_set_boolean(value, webkit_dom_navigator_get_cookie_enabled(self));
        break;
    case PROP_WEBKIT_BATTERY:
        g_value_set_object(value, webkit_dom_navigator_get_webkit_battery(self));
        break;
    case PROP_GEOLOCATION:
        g_value_set_object(value, webkit_dom_navigator_get_geolocation(self));
        break;
    case PROP_MEDIA_DEVICES:
        g_value_set_object(value, webkit_dom_navigator_get_media_devices(self));
        break;
    case PROP_HARDWARE_CONCURRENCY:
        g_value_set_uint64(value, webkit_dom_navigator_get_hardware_concurrency(self));
        break;
    case PROP_APP_CODE_NAME:
        g_value_take_string(value, webkit_dom_navigator_get_app_code_name(self));
        break;
    case PROP_APP_NAME:
        g_value_take_string(value, webkit_dom_navigator_get_app_name(self));
        break;
    case PROP_APP_VERSION:
        g_value_take_string(value, webkit_dom_navigator_get_app_version(self));
        break;
    case PROP_PLATFORM:
        g_value_take_string(value, webkit_dom_navigator_get_platform(self));
        break;
    case PROP_PRODUCT:
        g_value_take_string(value, webkit_dom_navigator_get_product(self));
        break;
    case PROP_PRODUCT_SUB:
        g_value_take_string(value, webkit_dom_navigator_get_product_sub(self));
        break;
    case PROP_USER_AGENT:
        g_value_take_string(value, webkit_dom_navigator_get_user_agent(self));
        break;
    case PROP_VENDOR:
        g_value_take_string(value, webkit_dom_navigator_get_vendor(self));
        break;
    case PROP_VENDOR_SUB:
        g_value_take_string(value, webkit_dom_navigator_get_vendor_sub(self));
        break;
    case PROP_LANGUAGE:
        g_value_take_string(value, webkit_dom_navigator_get_language(self));
        break;
    case PROP_ON_LINE:
        g_value_set_boolean(value, webkit_dom_navigator_get_on_line(self));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static GObject* webkit_dom_navigator_constructor(GType type, guint constructPropertiesCount, GObjectConstructParam* constructProperties)
{
    GObject* object = G_OBJECT_CLASS(webkit_dom_navigator_parent_class)->constructor(type, constructPropertiesCount, constructProperties);

    WebKitDOMNavigatorPrivate* priv = WEBKIT_DOM_NAVIGATOR_GET_PRIVATE(object);
    priv->coreObject = static_cast<WebCore::Navigator*>(WEBKIT_DOM_OBJECT(object)->coreObject);
    WebKit::DOMObjectCache::put(priv->coreObject.get(), object);

    return object;
}

static void webkit_dom_navigator_class_init(WebKitDOMNavigatorClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    g_type_class_add_private(gobjectClass, sizeof(WebKitDOMNavigatorPrivate));
    gobjectClass->constructor = webkit_dom_navigator_constructor;
    gobjectClass->finalize = webkit_dom_navigator_finalize;
    gobjectClass->get_property = webkit_dom_navigator_get_property;

    g_object_class_install_property(
        gobjectClass,
        PROP_PLUGINS,
        g_param_spec_object(
            "plugins",
            "Navigator:plugins",
            "read-only WebKitDOMDOMPluginArray* Navigator:plugins",
            WEBKIT_DOM_TYPE_DOM_PLUGIN_ARRAY,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_MIME_TYPES,
        g_param_spec_object(
            "mime-types",
            "Navigator:mime-types",
            "read-only WebKitDOMDOMMimeTypeArray* Navigator:mime-types",
            WEBKIT_DOM_TYPE_DOM_MIME_TYPE_ARRAY,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_COOKIE_ENABLED,
        g_param_spec_boolean(
            "cookie-enabled",
            "Navigator:cookie-enabled",
            "read-only gboolean Navigator:cookie-enabled",
            FALSE,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WEBKIT_BATTERY,
        g_param_spec_object(
            "webkit-battery",
            "Navigator:webkit-battery",
            "read-only WebKitDOMBatteryManager* Navigator:webkit-battery",
            WEBKIT_DOM_TYPE_BATTERY_MANAGER,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_GEOLOCATION,
        g_param_spec_object(
            "geolocation",
            "Navigator:geolocation",
            "read-only WebKitDOMGeolocation* Navigator:geolocation",
            WEBKIT_DOM_TYPE_GEOLOCATION,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_MEDIA_DEVICES,
        g_param_spec_object(
            "media-devices",
            "Navigator:media-devices",
            "read-only WebKitDOMMediaDevices* Navigator:media-devices",
            WEBKIT_DOM_TYPE_MEDIA_DEVICES,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_HARDWARE_CONCURRENCY,
        g_param_spec_uint64(
            "hardware-concurrency",
            "Navigator:hardware-concurrency",
            "read-only guint64 Navigator:hardware-concurrency",
            0, G_MAXUINT64, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_APP_CODE_NAME,
        g_param_spec_string(
            "app-code-name",
            "Navigator:app-code-name",
            "read-only gchar* Navigator:app-code-name",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_APP_NAME,
        g_param_spec_string(
            "app-name",
            "Navigator:app-name",
            "read-only gchar* Navigator:app-name",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_APP_VERSION,
        g_param_spec_string(
            "app-version",
            "Navigator:app-version",
            "read-only gchar* Navigator:app-version",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_PLATFORM,
        g_param_spec_string(
            "platform",
            "Navigator:platform",
            "read-only gchar* Navigator:platform",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_PRODUCT,
        g_param_spec_string(
            "product",
            "Navigator:product",
            "read-only gchar* Navigator:product",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_PRODUCT_SUB,
        g_param_spec_string(
            "product-sub",
            "Navigator:product-sub",
            "read-only gchar* Navigator:product-sub",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_USER_AGENT,
        g_param_spec_string(
            "user-agent",
            "Navigator:user-agent",
            "read-only gchar* Navigator:user-agent",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_VENDOR,
        g_param_spec_string(
            "vendor",
            "Navigator:vendor",
            "read-only gchar* Navigator:vendor",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_VENDOR_SUB,
        g_param_spec_string(
            "vendor-sub",
            "Navigator:vendor-sub",
            "read-only gchar* Navigator:vendor-sub",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_LANGUAGE,
        g_param_spec_string(
            "language",
            "Navigator:language",
            "read-only gchar* Navigator:language",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_ON_LINE,
        g_param_spec_boolean(
            "on-line",
            "Navigator:on-line",
            "read-only gboolean Navigator:on-line",
            FALSE,
            WEBKIT_PARAM_READABLE));

}

static void webkit_dom_navigator_init(WebKitDOMNavigator* request)
{
    WebKitDOMNavigatorPrivate* priv = WEBKIT_DOM_NAVIGATOR_GET_PRIVATE(request);
    new (priv) WebKitDOMNavigatorPrivate();
}

gboolean webkit_dom_navigator_java_enabled(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), FALSE);
    WebCore::Navigator* item = WebKit::core(self);
    gboolean result = item->javaEnabled();
    return result;
}

void webkit_dom_navigator_get_storage_updates(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self));
    WebCore::Navigator* item = WebKit::core(self);
    item->getStorageUpdates();
}

void webkit_dom_navigator_register_protocol_handler(WebKitDOMNavigator* self, const gchar* scheme, const gchar* url, const gchar* title, GError** error)
{
#if ENABLE(NAVIGATOR_CONTENT_UTILS)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self));
    g_return_if_fail(scheme);
    g_return_if_fail(url);
    g_return_if_fail(title);
    g_return_if_fail(!error || !*error);
    WebCore::Navigator* item = WebKit::core(self);
    WTF::String convertedScheme = WTF::String::fromUTF8(scheme);
    WTF::String convertedUrl = WTF::String::fromUTF8(url);
    WTF::String convertedTitle = WTF::String::fromUTF8(title);
    WebCore::ExceptionCode ec = 0;
    WebCore::NavigatorContentUtils::registerProtocolHandler(*item, convertedScheme, convertedUrl, convertedTitle, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(scheme);
    UNUSED_PARAM(url);
    UNUSED_PARAM(title);
    UNUSED_PARAM(error);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Navigator Content Utils")
#endif /* ENABLE(NAVIGATOR_CONTENT_UTILS) */
}

gchar* webkit_dom_navigator_is_protocol_handler_registered(WebKitDOMNavigator* self, const gchar* scheme, const gchar* url, GError** error)
{
#if ENABLE(CUSTOM_SCHEME_HANDLER) && ENABLE(NAVIGATOR_CONTENT_UTILS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    g_return_val_if_fail(scheme, 0);
    g_return_val_if_fail(url, 0);
    g_return_val_if_fail(!error || !*error, 0);
    WebCore::Navigator* item = WebKit::core(self);
    WTF::String convertedScheme = WTF::String::fromUTF8(scheme);
    WTF::String convertedUrl = WTF::String::fromUTF8(url);
    WebCore::ExceptionCode ec = 0;
    gchar* result = convertToUTF8String(WebCore::NavigatorContentUtils::isProtocolHandlerRegistered(item, convertedScheme, convertedUrl, ec));
    return result;
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(scheme);
    UNUSED_PARAM(url);
    UNUSED_PARAM(error);
#if !ENABLE(NAVIGATOR_CONTENT_UTILS)
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Navigator Content Utils")
#endif
#if !ENABLE(CUSTOM_SCHEME_HANDLER)
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Custom Scheme Handler")
#endif
    return 0;
#endif /* ENABLE(CUSTOM_SCHEME_HANDLER) && ENABLE(NAVIGATOR_CONTENT_UTILS) */
}

void webkit_dom_navigator_unregister_protocol_handler(WebKitDOMNavigator* self, const gchar* scheme, const gchar* url, GError** error)
{
#if ENABLE(CUSTOM_SCHEME_HANDLER) && ENABLE(NAVIGATOR_CONTENT_UTILS)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self));
    g_return_if_fail(scheme);
    g_return_if_fail(url);
    g_return_if_fail(!error || !*error);
    WebCore::Navigator* item = WebKit::core(self);
    WTF::String convertedScheme = WTF::String::fromUTF8(scheme);
    WTF::String convertedUrl = WTF::String::fromUTF8(url);
    WebCore::ExceptionCode ec = 0;
    WebCore::NavigatorContentUtils::unregisterProtocolHandler(*item, convertedScheme, convertedUrl, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(scheme);
    UNUSED_PARAM(url);
    UNUSED_PARAM(error);
#if !ENABLE(NAVIGATOR_CONTENT_UTILS)
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Navigator Content Utils")
#endif
#if !ENABLE(CUSTOM_SCHEME_HANDLER)
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Custom Scheme Handler")
#endif
#endif /* ENABLE(CUSTOM_SCHEME_HANDLER) && ENABLE(NAVIGATOR_CONTENT_UTILS) */
}

gboolean webkit_dom_navigator_vibrate(WebKitDOMNavigator* self, gulong time)
{
#if ENABLE(VIBRATION)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), FALSE);
    WebCore::Navigator* item = WebKit::core(self);
    gboolean result = WebCore::NavigatorVibration::vibrate(*item, time);
    return result;
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(time);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Vibration")
    return static_cast<gboolean>(0);
#endif /* ENABLE(VIBRATION) */
}

WebKitDOMDOMPluginArray* webkit_dom_navigator_get_plugins(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    RefPtr<WebCore::DOMPluginArray> gobjectResult = WTF::getPtr(item->plugins());
    return WebKit::kit(gobjectResult.get());
}

WebKitDOMDOMMimeTypeArray* webkit_dom_navigator_get_mime_types(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    RefPtr<WebCore::DOMMimeTypeArray> gobjectResult = WTF::getPtr(item->mimeTypes());
    return WebKit::kit(gobjectResult.get());
}

gboolean webkit_dom_navigator_get_cookie_enabled(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), FALSE);
    WebCore::Navigator* item = WebKit::core(self);
    gboolean result = item->cookieEnabled();
    return result;
}

WebKitDOMBatteryManager* webkit_dom_navigator_get_webkit_battery(WebKitDOMNavigator* self)
{
#if ENABLE(BATTERY_STATUS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    RefPtr<WebCore::BatteryManager> gobjectResult = WTF::getPtr(WebCore::NavigatorBattery::webkitBattery(*item));
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Battery Status")
    return 0;
#endif /* ENABLE(BATTERY_STATUS) */
}

WebKitDOMGeolocation* webkit_dom_navigator_get_geolocation(WebKitDOMNavigator* self)
{
#if ENABLE(GEOLOCATION)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    RefPtr<WebCore::Geolocation> gobjectResult = WTF::getPtr(WebCore::NavigatorGeolocation::geolocation(*item));
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Geolocation")
    return 0;
#endif /* ENABLE(GEOLOCATION) */
}

WebKitDOMMediaDevices* webkit_dom_navigator_get_media_devices(WebKitDOMNavigator* self)
{
#if ENABLE(MEDIA_STREAM)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    RefPtr<WebCore::MediaDevices> gobjectResult = WTF::getPtr(WebCore::NavigatorMediaDevices::mediaDevices(*item));
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Media Stream")
    return 0;
#endif /* ENABLE(MEDIA_STREAM) */
}

guint64 webkit_dom_navigator_get_hardware_concurrency(WebKitDOMNavigator* self)
{
#if ENABLE(NAVIGATOR_HWCONCURRENCY)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    guint64 result = item->hardwareConcurrency();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Navigator Hwconcurrency")
    return static_cast<guint64>(0);
#endif /* ENABLE(NAVIGATOR_HWCONCURRENCY) */
}

gchar* webkit_dom_navigator_get_app_code_name(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->appCodeName());
    return result;
}

gchar* webkit_dom_navigator_get_app_name(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->appName());
    return result;
}

gchar* webkit_dom_navigator_get_app_version(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->appVersion());
    return result;
}

gchar* webkit_dom_navigator_get_platform(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->platform());
    return result;
}

gchar* webkit_dom_navigator_get_product(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->product());
    return result;
}

gchar* webkit_dom_navigator_get_product_sub(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->productSub());
    return result;
}

gchar* webkit_dom_navigator_get_user_agent(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->userAgent());
    return result;
}

gchar* webkit_dom_navigator_get_vendor(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->vendor());
    return result;
}

gchar* webkit_dom_navigator_get_vendor_sub(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->vendorSub());
    return result;
}

gchar* webkit_dom_navigator_get_language(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), 0);
    WebCore::Navigator* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->language());
    return result;
}

gboolean webkit_dom_navigator_get_on_line(WebKitDOMNavigator* self)
{
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_NAVIGATOR(self), FALSE);
    WebCore::Navigator* item = WebKit::core(self);
    gboolean result = item->onLine();
    return result;
}

