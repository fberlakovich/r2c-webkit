/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMHTMLMediaElement.h"

#include <WebCore/CSSImportRule.h>
#include "DOMObjectCache.h"
#include <WebCore/Document.h>
#include <WebCore/ExceptionCode.h>
#include <WebCore/ExceptionCodeDescription.h>
#include "GObjectEventListener.h"
#include <WebCore/HTMLMediaElementMediaSession.h>
#include <WebCore/HTMLNames.h>
#include <WebCore/JSMainThreadExecState.h>
#include "WebKitDOMEventPrivate.h"
#include "WebKitDOMEventTarget.h"
#include "WebKitDOMHTMLMediaElementPrivate.h"
#include "WebKitDOMMediaControllerPrivate.h"
#include "WebKitDOMMediaErrorPrivate.h"
#include "WebKitDOMNodePrivate.h"
#include "WebKitDOMPrivate.h"
#include "WebKitDOMTimeRangesPrivate.h"
#include "ConvertToUTF8String.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

#if ENABLE(VIDEO)

namespace WebKit {

WebKitDOMHTMLMediaElement* kit(WebCore::HTMLMediaElement* obj)
{
    return WEBKIT_DOM_HTML_MEDIA_ELEMENT(kit(static_cast<WebCore::Node*>(obj)));
}

WebCore::HTMLMediaElement* core(WebKitDOMHTMLMediaElement* request)
{
    return request ? static_cast<WebCore::HTMLMediaElement*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMHTMLMediaElement* wrapHTMLMediaElement(WebCore::HTMLMediaElement* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_HTML_MEDIA_ELEMENT(g_object_new(WEBKIT_DOM_TYPE_HTML_MEDIA_ELEMENT, "core-object", coreObject, nullptr));
}

} // namespace WebKit

#endif // ENABLE(VIDEO)

static gboolean webkit_dom_html_media_element_dispatch_event(WebKitDOMEventTarget* target, WebKitDOMEvent* event, GError** error)
{
#if ENABLE(VIDEO)
    WebCore::Event* coreEvent = WebKit::core(event);
    if (!coreEvent)
        return false;
    WebCore::HTMLMediaElement* coreTarget = static_cast<WebCore::HTMLMediaElement*>(WEBKIT_DOM_OBJECT(target)->coreObject);

    WebCore::ExceptionCode ec = 0;
    gboolean result = coreTarget->dispatchEventForBindings(*coreEvent, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription description(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), description.code, description.name);
    }
    return result;
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(event);
    UNUSED_PARAM(error);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return false;
#endif // ENABLE(VIDEO)
}

static gboolean webkit_dom_html_media_element_add_event_listener(WebKitDOMEventTarget* target, const char* eventName, GClosure* handler, gboolean useCapture)
{
#if ENABLE(VIDEO)
    WebCore::HTMLMediaElement* coreTarget = static_cast<WebCore::HTMLMediaElement*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebKit::GObjectEventListener::addEventListener(G_OBJECT(target), coreTarget, eventName, handler, useCapture);
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(eventName);
    UNUSED_PARAM(handler);
    UNUSED_PARAM(useCapture);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return false;
#endif // ENABLE(VIDEO)
}

static gboolean webkit_dom_html_media_element_remove_event_listener(WebKitDOMEventTarget* target, const char* eventName, GClosure* handler, gboolean useCapture)
{
#if ENABLE(VIDEO)
    WebCore::HTMLMediaElement* coreTarget = static_cast<WebCore::HTMLMediaElement*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebKit::GObjectEventListener::removeEventListener(G_OBJECT(target), coreTarget, eventName, handler, useCapture);
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(eventName);
    UNUSED_PARAM(handler);
    UNUSED_PARAM(useCapture);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return false;
#endif // ENABLE(VIDEO)
}

static void webkit_dom_event_target_init(WebKitDOMEventTargetIface* iface)
{
    iface->dispatch_event = webkit_dom_html_media_element_dispatch_event;
    iface->add_event_listener = webkit_dom_html_media_element_add_event_listener;
    iface->remove_event_listener = webkit_dom_html_media_element_remove_event_listener;
}

G_DEFINE_TYPE_WITH_CODE(WebKitDOMHTMLMediaElement, webkit_dom_html_media_element, WEBKIT_DOM_TYPE_HTML_ELEMENT, G_IMPLEMENT_INTERFACE(WEBKIT_DOM_TYPE_EVENT_TARGET, webkit_dom_event_target_init))

enum {
    PROP_0,
    PROP_ERROR,
    PROP_SRC,
    PROP_CURRENT_SRC,
    PROP_CROSS_ORIGIN,
    PROP_NETWORK_STATE,
    PROP_PRELOAD,
    PROP_BUFFERED,
    PROP_READY_STATE,
    PROP_SEEKING,
    PROP_CURRENT_TIME,
    PROP_DURATION,
    PROP_PAUSED,
    PROP_DEFAULT_PLAYBACK_RATE,
    PROP_PLAYBACK_RATE,
    PROP_PLAYED,
    PROP_SEEKABLE,
    PROP_ENDED,
    PROP_AUTOPLAY,
    PROP_LOOP,
    PROP_CONTROLS,
    PROP_VOLUME,
    PROP_MUTED,
    PROP_DEFAULT_MUTED,
    PROP_WEBKIT_PRESERVES_PITCH,
    PROP_WEBKIT_HAS_CLOSED_CAPTIONS,
    PROP_WEBKIT_CLOSED_CAPTIONS_VISIBLE,
    PROP_WEBKIT_AUDIO_DECODED_BYTE_COUNT,
    PROP_WEBKIT_VIDEO_DECODED_BYTE_COUNT,
    PROP_MEDIA_GROUP,
    PROP_CONTROLLER,
    PROP_WEBKIT_CURRENT_PLAYBACK_TARGET_IS_WIRELESS,
    PROP_KIND,
};

static void webkit_dom_html_media_element_set_property(GObject* object, guint propertyId, const GValue* value, GParamSpec* pspec)
{
    WebKitDOMHTMLMediaElement* self = WEBKIT_DOM_HTML_MEDIA_ELEMENT(object);

    switch (propertyId) {
    case PROP_SRC:
        webkit_dom_html_media_element_set_src(self, g_value_get_string(value));
        break;
    case PROP_CROSS_ORIGIN:
        webkit_dom_html_media_element_set_cross_origin(self, g_value_get_string(value));
        break;
    case PROP_PRELOAD:
        webkit_dom_html_media_element_set_preload(self, g_value_get_string(value));
        break;
    case PROP_CURRENT_TIME:
        webkit_dom_html_media_element_set_current_time(self, g_value_get_double(value), nullptr);
        break;
    case PROP_DEFAULT_PLAYBACK_RATE:
        webkit_dom_html_media_element_set_default_playback_rate(self, g_value_get_double(value));
        break;
    case PROP_PLAYBACK_RATE:
        webkit_dom_html_media_element_set_playback_rate(self, g_value_get_double(value));
        break;
    case PROP_AUTOPLAY:
        webkit_dom_html_media_element_set_autoplay(self, g_value_get_boolean(value));
        break;
    case PROP_LOOP:
        webkit_dom_html_media_element_set_loop(self, g_value_get_boolean(value));
        break;
    case PROP_CONTROLS:
        webkit_dom_html_media_element_set_controls(self, g_value_get_boolean(value));
        break;
    case PROP_VOLUME:
        webkit_dom_html_media_element_set_volume(self, g_value_get_double(value), nullptr);
        break;
    case PROP_MUTED:
        webkit_dom_html_media_element_set_muted(self, g_value_get_boolean(value));
        break;
    case PROP_DEFAULT_MUTED:
        webkit_dom_html_media_element_set_default_muted(self, g_value_get_boolean(value));
        break;
    case PROP_WEBKIT_PRESERVES_PITCH:
        webkit_dom_html_media_element_set_webkit_preserves_pitch(self, g_value_get_boolean(value));
        break;
    case PROP_WEBKIT_CLOSED_CAPTIONS_VISIBLE:
        webkit_dom_html_media_element_set_webkit_closed_captions_visible(self, g_value_get_boolean(value));
        break;
    case PROP_MEDIA_GROUP:
        webkit_dom_html_media_element_set_media_group(self, g_value_get_string(value));
        break;
    case PROP_KIND:
        webkit_dom_html_media_element_set_kind(self, g_value_get_string(value));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static void webkit_dom_html_media_element_get_property(GObject* object, guint propertyId, GValue* value, GParamSpec* pspec)
{
    WebKitDOMHTMLMediaElement* self = WEBKIT_DOM_HTML_MEDIA_ELEMENT(object);

    switch (propertyId) {
    case PROP_ERROR:
        g_value_set_object(value, webkit_dom_html_media_element_get_error(self));
        break;
    case PROP_SRC:
        g_value_take_string(value, webkit_dom_html_media_element_get_src(self));
        break;
    case PROP_CURRENT_SRC:
        g_value_take_string(value, webkit_dom_html_media_element_get_current_src(self));
        break;
    case PROP_CROSS_ORIGIN:
        g_value_take_string(value, webkit_dom_html_media_element_get_cross_origin(self));
        break;
    case PROP_NETWORK_STATE:
        g_value_set_uint(value, webkit_dom_html_media_element_get_network_state(self));
        break;
    case PROP_PRELOAD:
        g_value_take_string(value, webkit_dom_html_media_element_get_preload(self));
        break;
    case PROP_BUFFERED:
        g_value_set_object(value, webkit_dom_html_media_element_get_buffered(self));
        break;
    case PROP_READY_STATE:
        g_value_set_uint(value, webkit_dom_html_media_element_get_ready_state(self));
        break;
    case PROP_SEEKING:
        g_value_set_boolean(value, webkit_dom_html_media_element_get_seeking(self));
        break;
    case PROP_CURRENT_TIME:
        g_value_set_double(value, webkit_dom_html_media_element_get_current_time(self));
        break;
    case PROP_DURATION:
        g_value_set_double(value, webkit_dom_html_media_element_get_duration(self));
        break;
    case PROP_PAUSED:
        g_value_set_boolean(value, webkit_dom_html_media_element_get_paused(self));
        break;
    case PROP_DEFAULT_PLAYBACK_RATE:
        g_value_set_double(value, webkit_dom_html_media_element_get_default_playback_rate(self));
        break;
    case PROP_PLAYBACK_RATE:
        g_value_set_double(value, webkit_dom_html_media_element_get_playback_rate(self));
        break;
    case PROP_PLAYED:
        g_value_set_object(value, webkit_dom_html_media_element_get_played(self));
        break;
    case PROP_SEEKABLE:
        g_value_set_object(value, webkit_dom_html_media_element_get_seekable(self));
        break;
    case PROP_ENDED:
        g_value_set_boolean(value, webkit_dom_html_media_element_get_ended(self));
        break;
    case PROP_AUTOPLAY:
        g_value_set_boolean(value, webkit_dom_html_media_element_get_autoplay(self));
        break;
    case PROP_LOOP:
        g_value_set_boolean(value, webkit_dom_html_media_element_get_loop(self));
        break;
    case PROP_CONTROLS:
        g_value_set_boolean(value, webkit_dom_html_media_element_get_controls(self));
        break;
    case PROP_VOLUME:
        g_value_set_double(value, webkit_dom_html_media_element_get_volume(self));
        break;
    case PROP_MUTED:
        g_value_set_boolean(value, webkit_dom_html_media_element_get_muted(self));
        break;
    case PROP_DEFAULT_MUTED:
        g_value_set_boolean(value, webkit_dom_html_media_element_get_default_muted(self));
        break;
    case PROP_WEBKIT_PRESERVES_PITCH:
        g_value_set_boolean(value, webkit_dom_html_media_element_get_webkit_preserves_pitch(self));
        break;
    case PROP_WEBKIT_HAS_CLOSED_CAPTIONS:
        g_value_set_boolean(value, webkit_dom_html_media_element_get_webkit_has_closed_captions(self));
        break;
    case PROP_WEBKIT_CLOSED_CAPTIONS_VISIBLE:
        g_value_set_boolean(value, webkit_dom_html_media_element_get_webkit_closed_captions_visible(self));
        break;
    case PROP_WEBKIT_AUDIO_DECODED_BYTE_COUNT:
        g_value_set_ulong(value, webkit_dom_html_media_element_get_webkit_audio_decoded_byte_count(self));
        break;
    case PROP_WEBKIT_VIDEO_DECODED_BYTE_COUNT:
        g_value_set_ulong(value, webkit_dom_html_media_element_get_webkit_video_decoded_byte_count(self));
        break;
    case PROP_MEDIA_GROUP:
        g_value_take_string(value, webkit_dom_html_media_element_get_media_group(self));
        break;
    case PROP_CONTROLLER:
        g_value_set_object(value, webkit_dom_html_media_element_get_controller(self));
        break;
    case PROP_WEBKIT_CURRENT_PLAYBACK_TARGET_IS_WIRELESS:
        g_value_set_boolean(value, webkit_dom_html_media_element_get_webkit_current_playback_target_is_wireless(self));
        break;
    case PROP_KIND:
        g_value_take_string(value, webkit_dom_html_media_element_get_kind(self));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static void webkit_dom_html_media_element_class_init(WebKitDOMHTMLMediaElementClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->set_property = webkit_dom_html_media_element_set_property;
    gobjectClass->get_property = webkit_dom_html_media_element_get_property;

    g_object_class_install_property(
        gobjectClass,
        PROP_ERROR,
        g_param_spec_object(
            "error",
            "HTMLMediaElement:error",
            "read-only WebKitDOMMediaError* HTMLMediaElement:error",
            WEBKIT_DOM_TYPE_MEDIA_ERROR,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_SRC,
        g_param_spec_string(
            "src",
            "HTMLMediaElement:src",
            "read-write gchar* HTMLMediaElement:src",
            "",
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_CURRENT_SRC,
        g_param_spec_string(
            "current-src",
            "HTMLMediaElement:current-src",
            "read-only gchar* HTMLMediaElement:current-src",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_CROSS_ORIGIN,
        g_param_spec_string(
            "cross-origin",
            "HTMLMediaElement:cross-origin",
            "read-write gchar* HTMLMediaElement:cross-origin",
            "",
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_NETWORK_STATE,
        g_param_spec_uint(
            "network-state",
            "HTMLMediaElement:network-state",
            "read-only gushort HTMLMediaElement:network-state",
            0, G_MAXUINT, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_PRELOAD,
        g_param_spec_string(
            "preload",
            "HTMLMediaElement:preload",
            "read-write gchar* HTMLMediaElement:preload",
            "",
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_BUFFERED,
        g_param_spec_object(
            "buffered",
            "HTMLMediaElement:buffered",
            "read-only WebKitDOMTimeRanges* HTMLMediaElement:buffered",
            WEBKIT_DOM_TYPE_TIME_RANGES,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_READY_STATE,
        g_param_spec_uint(
            "ready-state",
            "HTMLMediaElement:ready-state",
            "read-only gushort HTMLMediaElement:ready-state",
            0, G_MAXUINT, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_SEEKING,
        g_param_spec_boolean(
            "seeking",
            "HTMLMediaElement:seeking",
            "read-only gboolean HTMLMediaElement:seeking",
            FALSE,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_CURRENT_TIME,
        g_param_spec_double(
            "current-time",
            "HTMLMediaElement:current-time",
            "read-write gdouble HTMLMediaElement:current-time",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_DURATION,
        g_param_spec_double(
            "duration",
            "HTMLMediaElement:duration",
            "read-only gdouble HTMLMediaElement:duration",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_PAUSED,
        g_param_spec_boolean(
            "paused",
            "HTMLMediaElement:paused",
            "read-only gboolean HTMLMediaElement:paused",
            FALSE,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_DEFAULT_PLAYBACK_RATE,
        g_param_spec_double(
            "default-playback-rate",
            "HTMLMediaElement:default-playback-rate",
            "read-write gdouble HTMLMediaElement:default-playback-rate",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_PLAYBACK_RATE,
        g_param_spec_double(
            "playback-rate",
            "HTMLMediaElement:playback-rate",
            "read-write gdouble HTMLMediaElement:playback-rate",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_PLAYED,
        g_param_spec_object(
            "played",
            "HTMLMediaElement:played",
            "read-only WebKitDOMTimeRanges* HTMLMediaElement:played",
            WEBKIT_DOM_TYPE_TIME_RANGES,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_SEEKABLE,
        g_param_spec_object(
            "seekable",
            "HTMLMediaElement:seekable",
            "read-only WebKitDOMTimeRanges* HTMLMediaElement:seekable",
            WEBKIT_DOM_TYPE_TIME_RANGES,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_ENDED,
        g_param_spec_boolean(
            "ended",
            "HTMLMediaElement:ended",
            "read-only gboolean HTMLMediaElement:ended",
            FALSE,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_AUTOPLAY,
        g_param_spec_boolean(
            "autoplay",
            "HTMLMediaElement:autoplay",
            "read-write gboolean HTMLMediaElement:autoplay",
            FALSE,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_LOOP,
        g_param_spec_boolean(
            "loop",
            "HTMLMediaElement:loop",
            "read-write gboolean HTMLMediaElement:loop",
            FALSE,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_CONTROLS,
        g_param_spec_boolean(
            "controls",
            "HTMLMediaElement:controls",
            "read-write gboolean HTMLMediaElement:controls",
            FALSE,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_VOLUME,
        g_param_spec_double(
            "volume",
            "HTMLMediaElement:volume",
            "read-write gdouble HTMLMediaElement:volume",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_MUTED,
        g_param_spec_boolean(
            "muted",
            "HTMLMediaElement:muted",
            "read-write gboolean HTMLMediaElement:muted",
            FALSE,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_DEFAULT_MUTED,
        g_param_spec_boolean(
            "default-muted",
            "HTMLMediaElement:default-muted",
            "read-write gboolean HTMLMediaElement:default-muted",
            FALSE,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WEBKIT_PRESERVES_PITCH,
        g_param_spec_boolean(
            "webkit-preserves-pitch",
            "HTMLMediaElement:webkit-preserves-pitch",
            "read-write gboolean HTMLMediaElement:webkit-preserves-pitch",
            FALSE,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WEBKIT_HAS_CLOSED_CAPTIONS,
        g_param_spec_boolean(
            "webkit-has-closed-captions",
            "HTMLMediaElement:webkit-has-closed-captions",
            "read-only gboolean HTMLMediaElement:webkit-has-closed-captions",
            FALSE,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WEBKIT_CLOSED_CAPTIONS_VISIBLE,
        g_param_spec_boolean(
            "webkit-closed-captions-visible",
            "HTMLMediaElement:webkit-closed-captions-visible",
            "read-write gboolean HTMLMediaElement:webkit-closed-captions-visible",
            FALSE,
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WEBKIT_AUDIO_DECODED_BYTE_COUNT,
        g_param_spec_ulong(
            "webkit-audio-decoded-byte-count",
            "HTMLMediaElement:webkit-audio-decoded-byte-count",
            "read-only gulong HTMLMediaElement:webkit-audio-decoded-byte-count",
            0, G_MAXULONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WEBKIT_VIDEO_DECODED_BYTE_COUNT,
        g_param_spec_ulong(
            "webkit-video-decoded-byte-count",
            "HTMLMediaElement:webkit-video-decoded-byte-count",
            "read-only gulong HTMLMediaElement:webkit-video-decoded-byte-count",
            0, G_MAXULONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_MEDIA_GROUP,
        g_param_spec_string(
            "media-group",
            "HTMLMediaElement:media-group",
            "read-write gchar* HTMLMediaElement:media-group",
            "",
            WEBKIT_PARAM_READWRITE));

    g_object_class_install_property(
        gobjectClass,
        PROP_CONTROLLER,
        g_param_spec_object(
            "controller",
            "HTMLMediaElement:controller",
            "read-only WebKitDOMMediaController* HTMLMediaElement:controller",
            WEBKIT_DOM_TYPE_MEDIA_CONTROLLER,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_WEBKIT_CURRENT_PLAYBACK_TARGET_IS_WIRELESS,
        g_param_spec_boolean(
            "webkit-current-playback-target-is-wireless",
            "HTMLMediaElement:webkit-current-playback-target-is-wireless",
            "read-only gboolean HTMLMediaElement:webkit-current-playback-target-is-wireless",
            FALSE,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_KIND,
        g_param_spec_string(
            "kind",
            "HTMLMediaElement:kind",
            "read-write gchar* HTMLMediaElement:kind",
            "",
            WEBKIT_PARAM_READWRITE));

}

static void webkit_dom_html_media_element_init(WebKitDOMHTMLMediaElement* request)
{
    UNUSED_PARAM(request);
}

void webkit_dom_html_media_element_load(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    item->load();
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gchar* webkit_dom_html_media_element_can_play_type(WebKitDOMHTMLMediaElement* self, const gchar* type)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    g_return_val_if_fail(type, 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    WTF::String convertedType = WTF::String::fromUTF8(type);
    gchar* result = convertToUTF8String(item->canPlayType(convertedType));
    return result;
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(type);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_pause(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    item->pause();
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_fast_seek(WebKitDOMHTMLMediaElement* self, gdouble time)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    item->fastSeek(time);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(time);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_webkit_show_playback_target_picker(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
#if ENABLE(WIRELESS_PLAYBACK_TARGET)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    item->webkitShowPlaybackTargetPicker();
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Wireless Playback Target")
#endif /* ENABLE(WIRELESS_PLAYBACK_TARGET) */
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

WebKitDOMMediaError* webkit_dom_html_media_element_get_error(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    RefPtr<WebCore::MediaError> gobjectResult = WTF::getPtr(item->error());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

gchar* webkit_dom_html_media_element_get_src(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->getURLAttribute(WebCore::HTMLNames::srcAttr));
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_src(WebKitDOMHTMLMediaElement* self, const gchar* value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    g_return_if_fail(value);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    WTF::String convertedValue = WTF::String::fromUTF8(value);
    item->setAttributeWithoutSynchronization(WebCore::HTMLNames::srcAttr, convertedValue);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gchar* webkit_dom_html_media_element_get_current_src(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->currentSrc());
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

gchar* webkit_dom_html_media_element_get_cross_origin(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->crossOrigin());
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_cross_origin(WebKitDOMHTMLMediaElement* self, const gchar* value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    g_return_if_fail(value);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    WTF::String convertedValue = WTF::String::fromUTF8(value);
    item->setCrossOrigin(convertedValue);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gushort webkit_dom_html_media_element_get_network_state(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gushort result = item->networkState();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gushort>(0);
#endif /* ENABLE(VIDEO) */
}

gchar* webkit_dom_html_media_element_get_preload(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->preload());
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_preload(WebKitDOMHTMLMediaElement* self, const gchar* value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    g_return_if_fail(value);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    WTF::String convertedValue = WTF::String::fromUTF8(value);
    item->setPreload(convertedValue);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

WebKitDOMTimeRanges* webkit_dom_html_media_element_get_buffered(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    RefPtr<WebCore::TimeRanges> gobjectResult = WTF::getPtr(item->buffered());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

gushort webkit_dom_html_media_element_get_ready_state(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gushort result = item->readyState();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gushort>(0);
#endif /* ENABLE(VIDEO) */
}

gboolean webkit_dom_html_media_element_get_seeking(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), FALSE);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gboolean result = item->seeking();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gboolean>(0);
#endif /* ENABLE(VIDEO) */
}

gdouble webkit_dom_html_media_element_get_current_time(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gdouble result = item->currentTime();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gdouble>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_current_time(WebKitDOMHTMLMediaElement* self, gdouble value, GError** error)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    g_return_if_fail(!error || !*error);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->setCurrentTime(value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    UNUSED_PARAM(error);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gdouble webkit_dom_html_media_element_get_duration(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gdouble result = item->duration();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gdouble>(0);
#endif /* ENABLE(VIDEO) */
}

gboolean webkit_dom_html_media_element_get_paused(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), FALSE);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gboolean result = item->paused();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gboolean>(0);
#endif /* ENABLE(VIDEO) */
}

gdouble webkit_dom_html_media_element_get_default_playback_rate(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gdouble result = item->defaultPlaybackRate();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gdouble>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_default_playback_rate(WebKitDOMHTMLMediaElement* self, gdouble value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    item->setDefaultPlaybackRate(value);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gdouble webkit_dom_html_media_element_get_playback_rate(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gdouble result = item->playbackRate();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gdouble>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_playback_rate(WebKitDOMHTMLMediaElement* self, gdouble value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    item->setPlaybackRate(value);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

WebKitDOMTimeRanges* webkit_dom_html_media_element_get_played(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    RefPtr<WebCore::TimeRanges> gobjectResult = WTF::getPtr(item->played());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

WebKitDOMTimeRanges* webkit_dom_html_media_element_get_seekable(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    RefPtr<WebCore::TimeRanges> gobjectResult = WTF::getPtr(item->seekable());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

gboolean webkit_dom_html_media_element_get_ended(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), FALSE);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gboolean result = item->ended();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gboolean>(0);
#endif /* ENABLE(VIDEO) */
}

gboolean webkit_dom_html_media_element_get_autoplay(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), FALSE);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gboolean result = item->hasAttributeWithoutSynchronization(WebCore::HTMLNames::autoplayAttr);
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gboolean>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_autoplay(WebKitDOMHTMLMediaElement* self, gboolean value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    item->setBooleanAttribute(WebCore::HTMLNames::autoplayAttr, value);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gboolean webkit_dom_html_media_element_get_loop(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), FALSE);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gboolean result = item->hasAttributeWithoutSynchronization(WebCore::HTMLNames::loopAttr);
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gboolean>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_loop(WebKitDOMHTMLMediaElement* self, gboolean value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    item->setBooleanAttribute(WebCore::HTMLNames::loopAttr, value);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gboolean webkit_dom_html_media_element_get_controls(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), FALSE);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gboolean result = item->controls();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gboolean>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_controls(WebKitDOMHTMLMediaElement* self, gboolean value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    item->setControls(value);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gdouble webkit_dom_html_media_element_get_volume(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gdouble result = item->volume();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gdouble>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_volume(WebKitDOMHTMLMediaElement* self, gdouble value, GError** error)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    g_return_if_fail(!error || !*error);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    WebCore::ExceptionCode ec = 0;
    item->setVolume(value, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    UNUSED_PARAM(error);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gboolean webkit_dom_html_media_element_get_muted(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), FALSE);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gboolean result = item->muted();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gboolean>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_muted(WebKitDOMHTMLMediaElement* self, gboolean value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    item->setMuted(value);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gboolean webkit_dom_html_media_element_get_default_muted(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), FALSE);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gboolean result = item->hasAttributeWithoutSynchronization(WebCore::HTMLNames::mutedAttr);
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gboolean>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_default_muted(WebKitDOMHTMLMediaElement* self, gboolean value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    item->setBooleanAttribute(WebCore::HTMLNames::mutedAttr, value);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gboolean webkit_dom_html_media_element_get_webkit_preserves_pitch(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), FALSE);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gboolean result = item->webkitPreservesPitch();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gboolean>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_webkit_preserves_pitch(WebKitDOMHTMLMediaElement* self, gboolean value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    item->setWebkitPreservesPitch(value);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gboolean webkit_dom_html_media_element_get_webkit_has_closed_captions(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), FALSE);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gboolean result = item->webkitHasClosedCaptions();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gboolean>(0);
#endif /* ENABLE(VIDEO) */
}

gboolean webkit_dom_html_media_element_get_webkit_closed_captions_visible(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), FALSE);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gboolean result = item->webkitClosedCaptionsVisible();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gboolean>(0);
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_webkit_closed_captions_visible(WebKitDOMHTMLMediaElement* self, gboolean value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    item->setWebkitClosedCaptionsVisible(value);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

gulong webkit_dom_html_media_element_get_webkit_audio_decoded_byte_count(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
#if ENABLE(MEDIA_STATISTICS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gulong result = item->webkitAudioDecodedByteCount();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Media Statistics")
    return static_cast<gulong>(0);
#endif /* ENABLE(MEDIA_STATISTICS) */
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gulong>(0);
#endif /* ENABLE(VIDEO) */
}

gulong webkit_dom_html_media_element_get_webkit_video_decoded_byte_count(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
#if ENABLE(MEDIA_STATISTICS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gulong result = item->webkitVideoDecodedByteCount();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Media Statistics")
    return static_cast<gulong>(0);
#endif /* ENABLE(MEDIA_STATISTICS) */
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gulong>(0);
#endif /* ENABLE(VIDEO) */
}

gchar* webkit_dom_html_media_element_get_media_group(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->attributeWithoutSynchronization(WebCore::HTMLNames::mediagroupAttr));
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_media_group(WebKitDOMHTMLMediaElement* self, const gchar* value)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    g_return_if_fail(value);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    WTF::String convertedValue = WTF::String::fromUTF8(value);
    item->setAttributeWithoutSynchronization(WebCore::HTMLNames::mediagroupAttr, convertedValue);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

WebKitDOMMediaController* webkit_dom_html_media_element_get_controller(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    RefPtr<WebCore::MediaController> gobjectResult = WTF::getPtr(item->controller());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

gboolean webkit_dom_html_media_element_get_webkit_current_playback_target_is_wireless(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
#if ENABLE(WIRELESS_PLAYBACK_TARGET)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), FALSE);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gboolean result = item->webkitCurrentPlaybackTargetIsWireless();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Wireless Playback Target")
    return static_cast<gboolean>(0);
#endif /* ENABLE(WIRELESS_PLAYBACK_TARGET) */
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return static_cast<gboolean>(0);
#endif /* ENABLE(VIDEO) */
}

gchar* webkit_dom_html_media_element_get_kind(WebKitDOMHTMLMediaElement* self)
{
#if ENABLE(VIDEO)
#if ENABLE(MEDIA_SESSION) && ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self), 0);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    gchar* result = convertToUTF8String(WebCore::HTMLMediaElementMediaSession::kind(item));
    return result;
#else
    UNUSED_PARAM(self);
#if !ENABLE(VIDEO)
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif
#if !ENABLE(MEDIA_SESSION)
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Media Session")
#endif
    return 0;
#endif /* ENABLE(MEDIA_SESSION) && ENABLE(VIDEO) */
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
    return 0;
#endif /* ENABLE(VIDEO) */
}

void webkit_dom_html_media_element_set_kind(WebKitDOMHTMLMediaElement* self, const gchar* value)
{
#if ENABLE(VIDEO)
#if ENABLE(MEDIA_SESSION) && ENABLE(VIDEO)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_MEDIA_ELEMENT(self));
    g_return_if_fail(value);
    WebCore::HTMLMediaElement* item = WebKit::core(self);
    WTF::String convertedValue = WTF::String::fromUTF8(value);
    WebCore::HTMLMediaElementMediaSession::setKind(*item, convertedValue);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
#if !ENABLE(VIDEO)
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif
#if !ENABLE(MEDIA_SESSION)
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Media Session")
#endif
#endif /* ENABLE(MEDIA_SESSION) && ENABLE(VIDEO) */
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video")
#endif /* ENABLE(VIDEO) */
}

