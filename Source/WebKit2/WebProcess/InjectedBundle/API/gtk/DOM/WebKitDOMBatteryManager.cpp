/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMBatteryManager.h"

#include <WebCore/CSSImportRule.h>
#include "DOMObjectCache.h"
#include <WebCore/Document.h>
#include <WebCore/ExceptionCode.h>
#include <WebCore/ExceptionCodeDescription.h>
#include "GObjectEventListener.h"
#include <WebCore/JSMainThreadExecState.h>
#include "WebKitDOMBatteryManagerPrivate.h"
#include "WebKitDOMEventPrivate.h"
#include "WebKitDOMEventTarget.h"
#include "WebKitDOMPrivate.h"
#include "ConvertToUTF8String.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

#define WEBKIT_DOM_BATTERY_MANAGER_GET_PRIVATE(obj) G_TYPE_INSTANCE_GET_PRIVATE(obj, WEBKIT_DOM_TYPE_BATTERY_MANAGER, WebKitDOMBatteryManagerPrivate)

typedef struct _WebKitDOMBatteryManagerPrivate {
#if ENABLE(BATTERY_STATUS)
    RefPtr<WebCore::BatteryManager> coreObject;
#endif // ENABLE(BATTERY_STATUS)
} WebKitDOMBatteryManagerPrivate;

#if ENABLE(BATTERY_STATUS)

namespace WebKit {

WebKitDOMBatteryManager* kit(WebCore::BatteryManager* obj)
{
    if (!obj)
        return 0;

    if (gpointer ret = DOMObjectCache::get(obj))
        return WEBKIT_DOM_BATTERY_MANAGER(ret);

    return wrapBatteryManager(obj);
}

WebCore::BatteryManager* core(WebKitDOMBatteryManager* request)
{
    return request ? static_cast<WebCore::BatteryManager*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMBatteryManager* wrapBatteryManager(WebCore::BatteryManager* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_BATTERY_MANAGER(g_object_new(WEBKIT_DOM_TYPE_BATTERY_MANAGER, "core-object", coreObject, nullptr));
}

} // namespace WebKit

#endif // ENABLE(BATTERY_STATUS)

static gboolean webkit_dom_battery_manager_dispatch_event(WebKitDOMEventTarget* target, WebKitDOMEvent* event, GError** error)
{
#if ENABLE(BATTERY_STATUS)
    WebCore::Event* coreEvent = WebKit::core(event);
    if (!coreEvent)
        return false;
    WebCore::BatteryManager* coreTarget = static_cast<WebCore::BatteryManager*>(WEBKIT_DOM_OBJECT(target)->coreObject);

    WebCore::ExceptionCode ec = 0;
    gboolean result = coreTarget->dispatchEventForBindings(*coreEvent, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription description(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), description.code, description.name);
    }
    return result;
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(event);
    UNUSED_PARAM(error);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Battery Status")
    return false;
#endif // ENABLE(BATTERY_STATUS)
}

static gboolean webkit_dom_battery_manager_add_event_listener(WebKitDOMEventTarget* target, const char* eventName, GClosure* handler, gboolean useCapture)
{
#if ENABLE(BATTERY_STATUS)
    WebCore::BatteryManager* coreTarget = static_cast<WebCore::BatteryManager*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebKit::GObjectEventListener::addEventListener(G_OBJECT(target), coreTarget, eventName, handler, useCapture);
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(eventName);
    UNUSED_PARAM(handler);
    UNUSED_PARAM(useCapture);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Battery Status")
    return false;
#endif // ENABLE(BATTERY_STATUS)
}

static gboolean webkit_dom_battery_manager_remove_event_listener(WebKitDOMEventTarget* target, const char* eventName, GClosure* handler, gboolean useCapture)
{
#if ENABLE(BATTERY_STATUS)
    WebCore::BatteryManager* coreTarget = static_cast<WebCore::BatteryManager*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebKit::GObjectEventListener::removeEventListener(G_OBJECT(target), coreTarget, eventName, handler, useCapture);
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(eventName);
    UNUSED_PARAM(handler);
    UNUSED_PARAM(useCapture);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Battery Status")
    return false;
#endif // ENABLE(BATTERY_STATUS)
}

static void webkit_dom_event_target_init(WebKitDOMEventTargetIface* iface)
{
    iface->dispatch_event = webkit_dom_battery_manager_dispatch_event;
    iface->add_event_listener = webkit_dom_battery_manager_add_event_listener;
    iface->remove_event_listener = webkit_dom_battery_manager_remove_event_listener;
}

G_DEFINE_TYPE_WITH_CODE(WebKitDOMBatteryManager, webkit_dom_battery_manager, WEBKIT_DOM_TYPE_OBJECT, G_IMPLEMENT_INTERFACE(WEBKIT_DOM_TYPE_EVENT_TARGET, webkit_dom_event_target_init))

enum {
    PROP_0,
    PROP_CHARGING,
    PROP_CHARGING_TIME,
    PROP_DISCHARGING_TIME,
    PROP_LEVEL,
};

static void webkit_dom_battery_manager_finalize(GObject* object)
{
    WebKitDOMBatteryManagerPrivate* priv = WEBKIT_DOM_BATTERY_MANAGER_GET_PRIVATE(object);
#if ENABLE(BATTERY_STATUS)
    WebKit::DOMObjectCache::forget(priv->coreObject.get());
#endif // ENABLE(BATTERY_STATUS)
    priv->~WebKitDOMBatteryManagerPrivate();
    G_OBJECT_CLASS(webkit_dom_battery_manager_parent_class)->finalize(object);
}

static void webkit_dom_battery_manager_get_property(GObject* object, guint propertyId, GValue* value, GParamSpec* pspec)
{
    WebKitDOMBatteryManager* self = WEBKIT_DOM_BATTERY_MANAGER(object);

    switch (propertyId) {
    case PROP_CHARGING:
        g_value_set_boolean(value, webkit_dom_battery_manager_get_charging(self));
        break;
    case PROP_CHARGING_TIME:
        g_value_set_double(value, webkit_dom_battery_manager_get_charging_time(self));
        break;
    case PROP_DISCHARGING_TIME:
        g_value_set_double(value, webkit_dom_battery_manager_get_discharging_time(self));
        break;
    case PROP_LEVEL:
        g_value_set_double(value, webkit_dom_battery_manager_get_level(self));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static GObject* webkit_dom_battery_manager_constructor(GType type, guint constructPropertiesCount, GObjectConstructParam* constructProperties)
{
    GObject* object = G_OBJECT_CLASS(webkit_dom_battery_manager_parent_class)->constructor(type, constructPropertiesCount, constructProperties);
#if ENABLE(BATTERY_STATUS)
    WebKitDOMBatteryManagerPrivate* priv = WEBKIT_DOM_BATTERY_MANAGER_GET_PRIVATE(object);
    priv->coreObject = static_cast<WebCore::BatteryManager*>(WEBKIT_DOM_OBJECT(object)->coreObject);
    WebKit::DOMObjectCache::put(priv->coreObject.get(), object);
#endif // ENABLE(BATTERY_STATUS)
    return object;
}

static void webkit_dom_battery_manager_class_init(WebKitDOMBatteryManagerClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    g_type_class_add_private(gobjectClass, sizeof(WebKitDOMBatteryManagerPrivate));
    gobjectClass->constructor = webkit_dom_battery_manager_constructor;
    gobjectClass->finalize = webkit_dom_battery_manager_finalize;
    gobjectClass->get_property = webkit_dom_battery_manager_get_property;

    g_object_class_install_property(
        gobjectClass,
        PROP_CHARGING,
        g_param_spec_boolean(
            "charging",
            "BatteryManager:charging",
            "read-only gboolean BatteryManager:charging",
            FALSE,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_CHARGING_TIME,
        g_param_spec_double(
            "charging-time",
            "BatteryManager:charging-time",
            "read-only gdouble BatteryManager:charging-time",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_DISCHARGING_TIME,
        g_param_spec_double(
            "discharging-time",
            "BatteryManager:discharging-time",
            "read-only gdouble BatteryManager:discharging-time",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_LEVEL,
        g_param_spec_double(
            "level",
            "BatteryManager:level",
            "read-only gdouble BatteryManager:level",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READABLE));

}

static void webkit_dom_battery_manager_init(WebKitDOMBatteryManager* request)
{
    WebKitDOMBatteryManagerPrivate* priv = WEBKIT_DOM_BATTERY_MANAGER_GET_PRIVATE(request);
    new (priv) WebKitDOMBatteryManagerPrivate();
}

gboolean webkit_dom_battery_manager_get_charging(WebKitDOMBatteryManager* self)
{
#if ENABLE(BATTERY_STATUS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_BATTERY_MANAGER(self), FALSE);
    WebCore::BatteryManager* item = WebKit::core(self);
    gboolean result = item->charging();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Battery Status")
    return static_cast<gboolean>(0);
#endif /* ENABLE(BATTERY_STATUS) */
}

gdouble webkit_dom_battery_manager_get_charging_time(WebKitDOMBatteryManager* self)
{
#if ENABLE(BATTERY_STATUS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_BATTERY_MANAGER(self), 0);
    WebCore::BatteryManager* item = WebKit::core(self);
    gdouble result = item->chargingTime();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Battery Status")
    return static_cast<gdouble>(0);
#endif /* ENABLE(BATTERY_STATUS) */
}

gdouble webkit_dom_battery_manager_get_discharging_time(WebKitDOMBatteryManager* self)
{
#if ENABLE(BATTERY_STATUS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_BATTERY_MANAGER(self), 0);
    WebCore::BatteryManager* item = WebKit::core(self);
    gdouble result = item->dischargingTime();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Battery Status")
    return static_cast<gdouble>(0);
#endif /* ENABLE(BATTERY_STATUS) */
}

gdouble webkit_dom_battery_manager_get_level(WebKitDOMBatteryManager* self)
{
#if ENABLE(BATTERY_STATUS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_BATTERY_MANAGER(self), 0);
    WebCore::BatteryManager* item = WebKit::core(self);
    gdouble result = item->level();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Battery Status")
    return static_cast<gdouble>(0);
#endif /* ENABLE(BATTERY_STATUS) */
}

