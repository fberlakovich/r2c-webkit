/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMHTMLDetailsElement.h"

#include <WebCore/CSSImportRule.h>
#include "DOMObjectCache.h"
#include <WebCore/Document.h>
#include <WebCore/ExceptionCode.h>
#include <WebCore/ExceptionCodeDescription.h>
#include "GObjectEventListener.h"
#include <WebCore/HTMLNames.h>
#include <WebCore/JSMainThreadExecState.h>
#include "WebKitDOMEventPrivate.h"
#include "WebKitDOMEventTarget.h"
#include "WebKitDOMHTMLDetailsElementPrivate.h"
#include "WebKitDOMNodePrivate.h"
#include "WebKitDOMPrivate.h"
#include "ConvertToUTF8String.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

#if ENABLE(DETAILS_ELEMENT)

namespace WebKit {

WebKitDOMHTMLDetailsElement* kit(WebCore::HTMLDetailsElement* obj)
{
    return WEBKIT_DOM_HTML_DETAILS_ELEMENT(kit(static_cast<WebCore::Node*>(obj)));
}

WebCore::HTMLDetailsElement* core(WebKitDOMHTMLDetailsElement* request)
{
    return request ? static_cast<WebCore::HTMLDetailsElement*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMHTMLDetailsElement* wrapHTMLDetailsElement(WebCore::HTMLDetailsElement* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_HTML_DETAILS_ELEMENT(g_object_new(WEBKIT_DOM_TYPE_HTML_DETAILS_ELEMENT, "core-object", coreObject, nullptr));
}

} // namespace WebKit

#endif // ENABLE(DETAILS_ELEMENT)

static gboolean webkit_dom_html_details_element_dispatch_event(WebKitDOMEventTarget* target, WebKitDOMEvent* event, GError** error)
{
#if ENABLE(DETAILS_ELEMENT)
    WebCore::Event* coreEvent = WebKit::core(event);
    if (!coreEvent)
        return false;
    WebCore::HTMLDetailsElement* coreTarget = static_cast<WebCore::HTMLDetailsElement*>(WEBKIT_DOM_OBJECT(target)->coreObject);

    WebCore::ExceptionCode ec = 0;
    gboolean result = coreTarget->dispatchEventForBindings(*coreEvent, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription description(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), description.code, description.name);
    }
    return result;
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(event);
    UNUSED_PARAM(error);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Details Element")
    return false;
#endif // ENABLE(DETAILS_ELEMENT)
}

static gboolean webkit_dom_html_details_element_add_event_listener(WebKitDOMEventTarget* target, const char* eventName, GClosure* handler, gboolean useCapture)
{
#if ENABLE(DETAILS_ELEMENT)
    WebCore::HTMLDetailsElement* coreTarget = static_cast<WebCore::HTMLDetailsElement*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebKit::GObjectEventListener::addEventListener(G_OBJECT(target), coreTarget, eventName, handler, useCapture);
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(eventName);
    UNUSED_PARAM(handler);
    UNUSED_PARAM(useCapture);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Details Element")
    return false;
#endif // ENABLE(DETAILS_ELEMENT)
}

static gboolean webkit_dom_html_details_element_remove_event_listener(WebKitDOMEventTarget* target, const char* eventName, GClosure* handler, gboolean useCapture)
{
#if ENABLE(DETAILS_ELEMENT)
    WebCore::HTMLDetailsElement* coreTarget = static_cast<WebCore::HTMLDetailsElement*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebKit::GObjectEventListener::removeEventListener(G_OBJECT(target), coreTarget, eventName, handler, useCapture);
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(eventName);
    UNUSED_PARAM(handler);
    UNUSED_PARAM(useCapture);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Details Element")
    return false;
#endif // ENABLE(DETAILS_ELEMENT)
}

static void webkit_dom_event_target_init(WebKitDOMEventTargetIface* iface)
{
    iface->dispatch_event = webkit_dom_html_details_element_dispatch_event;
    iface->add_event_listener = webkit_dom_html_details_element_add_event_listener;
    iface->remove_event_listener = webkit_dom_html_details_element_remove_event_listener;
}

G_DEFINE_TYPE_WITH_CODE(WebKitDOMHTMLDetailsElement, webkit_dom_html_details_element, WEBKIT_DOM_TYPE_HTML_ELEMENT, G_IMPLEMENT_INTERFACE(WEBKIT_DOM_TYPE_EVENT_TARGET, webkit_dom_event_target_init))

enum {
    PROP_0,
    PROP_OPEN,
};

static void webkit_dom_html_details_element_set_property(GObject* object, guint propertyId, const GValue* value, GParamSpec* pspec)
{
    WebKitDOMHTMLDetailsElement* self = WEBKIT_DOM_HTML_DETAILS_ELEMENT(object);

    switch (propertyId) {
    case PROP_OPEN:
        webkit_dom_html_details_element_set_open(self, g_value_get_boolean(value));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static void webkit_dom_html_details_element_get_property(GObject* object, guint propertyId, GValue* value, GParamSpec* pspec)
{
    WebKitDOMHTMLDetailsElement* self = WEBKIT_DOM_HTML_DETAILS_ELEMENT(object);

    switch (propertyId) {
    case PROP_OPEN:
        g_value_set_boolean(value, webkit_dom_html_details_element_get_open(self));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static void webkit_dom_html_details_element_class_init(WebKitDOMHTMLDetailsElementClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->set_property = webkit_dom_html_details_element_set_property;
    gobjectClass->get_property = webkit_dom_html_details_element_get_property;

    g_object_class_install_property(
        gobjectClass,
        PROP_OPEN,
        g_param_spec_boolean(
            "open",
            "HTMLDetailsElement:open",
            "read-write gboolean HTMLDetailsElement:open",
            FALSE,
            WEBKIT_PARAM_READWRITE));

}

static void webkit_dom_html_details_element_init(WebKitDOMHTMLDetailsElement* request)
{
    UNUSED_PARAM(request);
}

gboolean webkit_dom_html_details_element_get_open(WebKitDOMHTMLDetailsElement* self)
{
#if ENABLE(DETAILS_ELEMENT)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_HTML_DETAILS_ELEMENT(self), FALSE);
    WebCore::HTMLDetailsElement* item = WebKit::core(self);
    gboolean result = item->hasAttributeWithoutSynchronization(WebCore::HTMLNames::openAttr);
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Details Element")
    return static_cast<gboolean>(0);
#endif /* ENABLE(DETAILS_ELEMENT) */
}

void webkit_dom_html_details_element_set_open(WebKitDOMHTMLDetailsElement* self, gboolean value)
{
#if ENABLE(DETAILS_ELEMENT)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_HTML_DETAILS_ELEMENT(self));
    WebCore::HTMLDetailsElement* item = WebKit::core(self);
    item->setBooleanAttribute(WebCore::HTMLNames::openAttr, value);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(value);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Details Element")
#endif /* ENABLE(DETAILS_ELEMENT) */
}

