/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMTextTrack.h"

#include <WebCore/CSSImportRule.h>
#include "DOMObjectCache.h"
#include <WebCore/Document.h>
#include <WebCore/ExceptionCode.h>
#include <WebCore/ExceptionCodeDescription.h>
#include "GObjectEventListener.h"
#include <WebCore/JSMainThreadExecState.h>
#include "WebKitDOMEventPrivate.h"
#include "WebKitDOMEventTarget.h"
#include "WebKitDOMPrivate.h"
#include "WebKitDOMTextTrackCueListPrivate.h"
#include "WebKitDOMTextTrackCuePrivate.h"
#include "WebKitDOMTextTrackPrivate.h"
#include "ConvertToUTF8String.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

#define WEBKIT_DOM_TEXT_TRACK_GET_PRIVATE(obj) G_TYPE_INSTANCE_GET_PRIVATE(obj, WEBKIT_DOM_TYPE_TEXT_TRACK, WebKitDOMTextTrackPrivate)

typedef struct _WebKitDOMTextTrackPrivate {
#if ENABLE(VIDEO_TRACK)
    RefPtr<WebCore::TextTrack> coreObject;
#endif // ENABLE(VIDEO_TRACK)
} WebKitDOMTextTrackPrivate;

#if ENABLE(VIDEO_TRACK)

namespace WebKit {

WebKitDOMTextTrack* kit(WebCore::TextTrack* obj)
{
    if (!obj)
        return 0;

    if (gpointer ret = DOMObjectCache::get(obj))
        return WEBKIT_DOM_TEXT_TRACK(ret);

    return wrapTextTrack(obj);
}

WebCore::TextTrack* core(WebKitDOMTextTrack* request)
{
    return request ? static_cast<WebCore::TextTrack*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMTextTrack* wrapTextTrack(WebCore::TextTrack* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_TEXT_TRACK(g_object_new(WEBKIT_DOM_TYPE_TEXT_TRACK, "core-object", coreObject, nullptr));
}

} // namespace WebKit

#endif // ENABLE(VIDEO_TRACK)

static gboolean webkit_dom_text_track_dispatch_event(WebKitDOMEventTarget* target, WebKitDOMEvent* event, GError** error)
{
#if ENABLE(VIDEO_TRACK)
    WebCore::Event* coreEvent = WebKit::core(event);
    if (!coreEvent)
        return false;
    WebCore::TextTrack* coreTarget = static_cast<WebCore::TextTrack*>(WEBKIT_DOM_OBJECT(target)->coreObject);

    WebCore::ExceptionCode ec = 0;
    gboolean result = coreTarget->dispatchEventForBindings(*coreEvent, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription description(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), description.code, description.name);
    }
    return result;
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(event);
    UNUSED_PARAM(error);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video Track")
    return false;
#endif // ENABLE(VIDEO_TRACK)
}

static gboolean webkit_dom_text_track_add_event_listener(WebKitDOMEventTarget* target, const char* eventName, GClosure* handler, gboolean useCapture)
{
#if ENABLE(VIDEO_TRACK)
    WebCore::TextTrack* coreTarget = static_cast<WebCore::TextTrack*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebKit::GObjectEventListener::addEventListener(G_OBJECT(target), coreTarget, eventName, handler, useCapture);
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(eventName);
    UNUSED_PARAM(handler);
    UNUSED_PARAM(useCapture);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video Track")
    return false;
#endif // ENABLE(VIDEO_TRACK)
}

static gboolean webkit_dom_text_track_remove_event_listener(WebKitDOMEventTarget* target, const char* eventName, GClosure* handler, gboolean useCapture)
{
#if ENABLE(VIDEO_TRACK)
    WebCore::TextTrack* coreTarget = static_cast<WebCore::TextTrack*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebKit::GObjectEventListener::removeEventListener(G_OBJECT(target), coreTarget, eventName, handler, useCapture);
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(eventName);
    UNUSED_PARAM(handler);
    UNUSED_PARAM(useCapture);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video Track")
    return false;
#endif // ENABLE(VIDEO_TRACK)
}

static void webkit_dom_event_target_init(WebKitDOMEventTargetIface* iface)
{
    iface->dispatch_event = webkit_dom_text_track_dispatch_event;
    iface->add_event_listener = webkit_dom_text_track_add_event_listener;
    iface->remove_event_listener = webkit_dom_text_track_remove_event_listener;
}

G_DEFINE_TYPE_WITH_CODE(WebKitDOMTextTrack, webkit_dom_text_track, WEBKIT_DOM_TYPE_OBJECT, G_IMPLEMENT_INTERFACE(WEBKIT_DOM_TYPE_EVENT_TARGET, webkit_dom_event_target_init))

enum {
    PROP_0,
    PROP_ID,
    PROP_LABEL,
    PROP_LANGUAGE,
    PROP_IN_BAND_METADATA_TRACK_DISPATCH_TYPE,
    PROP_CUES,
    PROP_ACTIVE_CUES,
};

static void webkit_dom_text_track_finalize(GObject* object)
{
    WebKitDOMTextTrackPrivate* priv = WEBKIT_DOM_TEXT_TRACK_GET_PRIVATE(object);
#if ENABLE(VIDEO_TRACK)
    WebKit::DOMObjectCache::forget(priv->coreObject.get());
#endif // ENABLE(VIDEO_TRACK)
    priv->~WebKitDOMTextTrackPrivate();
    G_OBJECT_CLASS(webkit_dom_text_track_parent_class)->finalize(object);
}

static void webkit_dom_text_track_get_property(GObject* object, guint propertyId, GValue* value, GParamSpec* pspec)
{
    WebKitDOMTextTrack* self = WEBKIT_DOM_TEXT_TRACK(object);

    switch (propertyId) {
    case PROP_ID:
        g_value_take_string(value, webkit_dom_text_track_get_id(self));
        break;
    case PROP_LABEL:
        g_value_take_string(value, webkit_dom_text_track_get_label(self));
        break;
    case PROP_LANGUAGE:
        g_value_take_string(value, webkit_dom_text_track_get_language(self));
        break;
    case PROP_IN_BAND_METADATA_TRACK_DISPATCH_TYPE:
        g_value_take_string(value, webkit_dom_text_track_get_in_band_metadata_track_dispatch_type(self));
        break;
    case PROP_CUES:
        g_value_set_object(value, webkit_dom_text_track_get_cues(self));
        break;
    case PROP_ACTIVE_CUES:
        g_value_set_object(value, webkit_dom_text_track_get_active_cues(self));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static GObject* webkit_dom_text_track_constructor(GType type, guint constructPropertiesCount, GObjectConstructParam* constructProperties)
{
    GObject* object = G_OBJECT_CLASS(webkit_dom_text_track_parent_class)->constructor(type, constructPropertiesCount, constructProperties);
#if ENABLE(VIDEO_TRACK)
    WebKitDOMTextTrackPrivate* priv = WEBKIT_DOM_TEXT_TRACK_GET_PRIVATE(object);
    priv->coreObject = static_cast<WebCore::TextTrack*>(WEBKIT_DOM_OBJECT(object)->coreObject);
    WebKit::DOMObjectCache::put(priv->coreObject.get(), object);
#endif // ENABLE(VIDEO_TRACK)
    return object;
}

static void webkit_dom_text_track_class_init(WebKitDOMTextTrackClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    g_type_class_add_private(gobjectClass, sizeof(WebKitDOMTextTrackPrivate));
    gobjectClass->constructor = webkit_dom_text_track_constructor;
    gobjectClass->finalize = webkit_dom_text_track_finalize;
    gobjectClass->get_property = webkit_dom_text_track_get_property;

    g_object_class_install_property(
        gobjectClass,
        PROP_ID,
        g_param_spec_string(
            "id",
            "TextTrack:id",
            "read-only gchar* TextTrack:id",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_LABEL,
        g_param_spec_string(
            "label",
            "TextTrack:label",
            "read-only gchar* TextTrack:label",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_LANGUAGE,
        g_param_spec_string(
            "language",
            "TextTrack:language",
            "read-only gchar* TextTrack:language",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_IN_BAND_METADATA_TRACK_DISPATCH_TYPE,
        g_param_spec_string(
            "in-band-metadata-track-dispatch-type",
            "TextTrack:in-band-metadata-track-dispatch-type",
            "read-only gchar* TextTrack:in-band-metadata-track-dispatch-type",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_CUES,
        g_param_spec_object(
            "cues",
            "TextTrack:cues",
            "read-only WebKitDOMTextTrackCueList* TextTrack:cues",
            WEBKIT_DOM_TYPE_TEXT_TRACK_CUE_LIST,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_ACTIVE_CUES,
        g_param_spec_object(
            "active-cues",
            "TextTrack:active-cues",
            "read-only WebKitDOMTextTrackCueList* TextTrack:active-cues",
            WEBKIT_DOM_TYPE_TEXT_TRACK_CUE_LIST,
            WEBKIT_PARAM_READABLE));

}

static void webkit_dom_text_track_init(WebKitDOMTextTrack* request)
{
    WebKitDOMTextTrackPrivate* priv = WEBKIT_DOM_TEXT_TRACK_GET_PRIVATE(request);
    new (priv) WebKitDOMTextTrackPrivate();
}

void webkit_dom_text_track_add_cue(WebKitDOMTextTrack* self, WebKitDOMTextTrackCue* cue, GError** error)
{
#if ENABLE(VIDEO_TRACK)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_TEXT_TRACK(self));
    g_return_if_fail(WEBKIT_DOM_IS_TEXT_TRACK_CUE(cue));
    g_return_if_fail(!error || !*error);
    WebCore::TextTrack* item = WebKit::core(self);
    WebCore::TextTrackCue* convertedCue = WebKit::core(cue);
    WebCore::ExceptionCode ec = 0;
    item->addCue(convertedCue, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(cue);
    UNUSED_PARAM(error);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video Track")
#endif /* ENABLE(VIDEO_TRACK) */
}

void webkit_dom_text_track_remove_cue(WebKitDOMTextTrack* self, WebKitDOMTextTrackCue* cue, GError** error)
{
#if ENABLE(VIDEO_TRACK)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_TEXT_TRACK(self));
    g_return_if_fail(WEBKIT_DOM_IS_TEXT_TRACK_CUE(cue));
    g_return_if_fail(!error || !*error);
    WebCore::TextTrack* item = WebKit::core(self);
    WebCore::TextTrackCue* convertedCue = WebKit::core(cue);
    WebCore::ExceptionCode ec = 0;
    item->removeCue(convertedCue, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(cue);
    UNUSED_PARAM(error);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video Track")
#endif /* ENABLE(VIDEO_TRACK) */
}

gchar* webkit_dom_text_track_get_id(WebKitDOMTextTrack* self)
{
#if ENABLE(VIDEO_TRACK)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TEXT_TRACK(self), 0);
    WebCore::TextTrack* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->id());
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video Track")
    return 0;
#endif /* ENABLE(VIDEO_TRACK) */
}

gchar* webkit_dom_text_track_get_label(WebKitDOMTextTrack* self)
{
#if ENABLE(VIDEO_TRACK)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TEXT_TRACK(self), 0);
    WebCore::TextTrack* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->label());
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video Track")
    return 0;
#endif /* ENABLE(VIDEO_TRACK) */
}

gchar* webkit_dom_text_track_get_language(WebKitDOMTextTrack* self)
{
#if ENABLE(VIDEO_TRACK)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TEXT_TRACK(self), 0);
    WebCore::TextTrack* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->language());
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video Track")
    return 0;
#endif /* ENABLE(VIDEO_TRACK) */
}

gchar* webkit_dom_text_track_get_in_band_metadata_track_dispatch_type(WebKitDOMTextTrack* self)
{
#if ENABLE(VIDEO_TRACK)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TEXT_TRACK(self), 0);
    WebCore::TextTrack* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->inBandMetadataTrackDispatchType());
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video Track")
    return 0;
#endif /* ENABLE(VIDEO_TRACK) */
}

WebKitDOMTextTrackCueList* webkit_dom_text_track_get_cues(WebKitDOMTextTrack* self)
{
#if ENABLE(VIDEO_TRACK)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TEXT_TRACK(self), 0);
    WebCore::TextTrack* item = WebKit::core(self);
    RefPtr<WebCore::TextTrackCueList> gobjectResult = WTF::getPtr(item->cues());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video Track")
    return 0;
#endif /* ENABLE(VIDEO_TRACK) */
}

WebKitDOMTextTrackCueList* webkit_dom_text_track_get_active_cues(WebKitDOMTextTrack* self)
{
#if ENABLE(VIDEO_TRACK)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_TEXT_TRACK(self), 0);
    WebCore::TextTrack* item = WebKit::core(self);
    RefPtr<WebCore::TextTrackCueList> gobjectResult = WTF::getPtr(item->activeCues());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Video Track")
    return 0;
#endif /* ENABLE(VIDEO_TRACK) */
}

