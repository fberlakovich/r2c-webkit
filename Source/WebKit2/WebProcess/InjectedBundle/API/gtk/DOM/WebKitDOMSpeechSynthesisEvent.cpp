/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMSpeechSynthesisEvent.h"

#include <WebCore/CSSImportRule.h>
#include "DOMObjectCache.h"
#include <WebCore/Document.h>
#include <WebCore/ExceptionCode.h>
#include <WebCore/ExceptionCodeDescription.h>
#include <WebCore/JSMainThreadExecState.h>
#include "WebKitDOMEventPrivate.h"
#include "WebKitDOMPrivate.h"
#include "WebKitDOMSpeechSynthesisEventPrivate.h"
#include "ConvertToUTF8String.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

#if ENABLE(SPEECH_SYNTHESIS)

namespace WebKit {

WebKitDOMSpeechSynthesisEvent* kit(WebCore::SpeechSynthesisEvent* obj)
{
    return WEBKIT_DOM_SPEECH_SYNTHESIS_EVENT(kit(static_cast<WebCore::Event*>(obj)));
}

WebCore::SpeechSynthesisEvent* core(WebKitDOMSpeechSynthesisEvent* request)
{
    return request ? static_cast<WebCore::SpeechSynthesisEvent*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMSpeechSynthesisEvent* wrapSpeechSynthesisEvent(WebCore::SpeechSynthesisEvent* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_SPEECH_SYNTHESIS_EVENT(g_object_new(WEBKIT_DOM_TYPE_SPEECH_SYNTHESIS_EVENT, "core-object", coreObject, nullptr));
}

} // namespace WebKit

#endif // ENABLE(SPEECH_SYNTHESIS)

G_DEFINE_TYPE(WebKitDOMSpeechSynthesisEvent, webkit_dom_speech_synthesis_event, WEBKIT_DOM_TYPE_EVENT)

enum {
    PROP_0,
    PROP_CHAR_INDEX,
    PROP_ELAPSED_TIME,
    PROP_NAME,
};

static void webkit_dom_speech_synthesis_event_get_property(GObject* object, guint propertyId, GValue* value, GParamSpec* pspec)
{
    WebKitDOMSpeechSynthesisEvent* self = WEBKIT_DOM_SPEECH_SYNTHESIS_EVENT(object);

    switch (propertyId) {
    case PROP_CHAR_INDEX:
        g_value_set_ulong(value, webkit_dom_speech_synthesis_event_get_char_index(self));
        break;
    case PROP_ELAPSED_TIME:
        g_value_set_float(value, webkit_dom_speech_synthesis_event_get_elapsed_time(self));
        break;
    case PROP_NAME:
        g_value_take_string(value, webkit_dom_speech_synthesis_event_get_name(self));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static void webkit_dom_speech_synthesis_event_class_init(WebKitDOMSpeechSynthesisEventClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    gobjectClass->get_property = webkit_dom_speech_synthesis_event_get_property;

    g_object_class_install_property(
        gobjectClass,
        PROP_CHAR_INDEX,
        g_param_spec_ulong(
            "char-index",
            "SpeechSynthesisEvent:char-index",
            "read-only gulong SpeechSynthesisEvent:char-index",
            0, G_MAXULONG, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_ELAPSED_TIME,
        g_param_spec_float(
            "elapsed-time",
            "SpeechSynthesisEvent:elapsed-time",
            "read-only gfloat SpeechSynthesisEvent:elapsed-time",
            -G_MAXFLOAT, G_MAXFLOAT, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_NAME,
        g_param_spec_string(
            "name",
            "SpeechSynthesisEvent:name",
            "read-only gchar* SpeechSynthesisEvent:name",
            "",
            WEBKIT_PARAM_READABLE));

}

static void webkit_dom_speech_synthesis_event_init(WebKitDOMSpeechSynthesisEvent* request)
{
    UNUSED_PARAM(request);
}

gulong webkit_dom_speech_synthesis_event_get_char_index(WebKitDOMSpeechSynthesisEvent* self)
{
#if ENABLE(SPEECH_SYNTHESIS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_SPEECH_SYNTHESIS_EVENT(self), 0);
    WebCore::SpeechSynthesisEvent* item = WebKit::core(self);
    gulong result = item->charIndex();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Speech Synthesis")
    return static_cast<gulong>(0);
#endif /* ENABLE(SPEECH_SYNTHESIS) */
}

gfloat webkit_dom_speech_synthesis_event_get_elapsed_time(WebKitDOMSpeechSynthesisEvent* self)
{
#if ENABLE(SPEECH_SYNTHESIS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_SPEECH_SYNTHESIS_EVENT(self), 0);
    WebCore::SpeechSynthesisEvent* item = WebKit::core(self);
    gfloat result = item->elapsedTime();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Speech Synthesis")
    return static_cast<gfloat>(0);
#endif /* ENABLE(SPEECH_SYNTHESIS) */
}

gchar* webkit_dom_speech_synthesis_event_get_name(WebKitDOMSpeechSynthesisEvent* self)
{
#if ENABLE(SPEECH_SYNTHESIS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_SPEECH_SYNTHESIS_EVENT(self), 0);
    WebCore::SpeechSynthesisEvent* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->name());
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Speech Synthesis")
    return 0;
#endif /* ENABLE(SPEECH_SYNTHESIS) */
}

