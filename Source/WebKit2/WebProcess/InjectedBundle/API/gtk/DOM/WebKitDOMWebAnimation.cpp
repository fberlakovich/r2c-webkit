/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMWebAnimation.h"

#include <WebCore/CSSImportRule.h>
#include "DOMObjectCache.h"
#include <WebCore/Document.h>
#include <WebCore/ExceptionCode.h>
#include <WebCore/ExceptionCodeDescription.h>
#include <WebCore/JSMainThreadExecState.h>
#include "WebKitDOMAnimationEffectPrivate.h"
#include "WebKitDOMAnimationTimelinePrivate.h"
#include "WebKitDOMPrivate.h"
#include "WebKitDOMWebAnimationPrivate.h"
#include "ConvertToUTF8String.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

#define WEBKIT_DOM_WEB_ANIMATION_GET_PRIVATE(obj) G_TYPE_INSTANCE_GET_PRIVATE(obj, WEBKIT_DOM_TYPE_WEB_ANIMATION, WebKitDOMWebAnimationPrivate)

typedef struct _WebKitDOMWebAnimationPrivate {
#if ENABLE(WEB_ANIMATIONS)
    RefPtr<WebCore::WebAnimation> coreObject;
#endif // ENABLE(WEB_ANIMATIONS)
} WebKitDOMWebAnimationPrivate;

#if ENABLE(WEB_ANIMATIONS)

namespace WebKit {

WebKitDOMWebAnimation* kit(WebCore::WebAnimation* obj)
{
    if (!obj)
        return 0;

    if (gpointer ret = DOMObjectCache::get(obj))
        return WEBKIT_DOM_WEB_ANIMATION(ret);

    return wrapWebAnimation(obj);
}

WebCore::WebAnimation* core(WebKitDOMWebAnimation* request)
{
    return request ? static_cast<WebCore::WebAnimation*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMWebAnimation* wrapWebAnimation(WebCore::WebAnimation* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_WEB_ANIMATION(g_object_new(WEBKIT_DOM_TYPE_WEB_ANIMATION, "core-object", coreObject, nullptr));
}

} // namespace WebKit

#endif // ENABLE(WEB_ANIMATIONS)

G_DEFINE_TYPE(WebKitDOMWebAnimation, webkit_dom_web_animation, WEBKIT_DOM_TYPE_OBJECT)

enum {
    PROP_0,
    PROP_EFFECT,
    PROP_TIMELINE,
};

static void webkit_dom_web_animation_finalize(GObject* object)
{
    WebKitDOMWebAnimationPrivate* priv = WEBKIT_DOM_WEB_ANIMATION_GET_PRIVATE(object);
#if ENABLE(WEB_ANIMATIONS)
    WebKit::DOMObjectCache::forget(priv->coreObject.get());
#endif // ENABLE(WEB_ANIMATIONS)
    priv->~WebKitDOMWebAnimationPrivate();
    G_OBJECT_CLASS(webkit_dom_web_animation_parent_class)->finalize(object);
}

static void webkit_dom_web_animation_get_property(GObject* object, guint propertyId, GValue* value, GParamSpec* pspec)
{
    WebKitDOMWebAnimation* self = WEBKIT_DOM_WEB_ANIMATION(object);

    switch (propertyId) {
    case PROP_EFFECT:
        g_value_set_object(value, webkit_dom_web_animation_get_effect(self));
        break;
    case PROP_TIMELINE:
        g_value_set_object(value, webkit_dom_web_animation_get_timeline(self));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static GObject* webkit_dom_web_animation_constructor(GType type, guint constructPropertiesCount, GObjectConstructParam* constructProperties)
{
    GObject* object = G_OBJECT_CLASS(webkit_dom_web_animation_parent_class)->constructor(type, constructPropertiesCount, constructProperties);
#if ENABLE(WEB_ANIMATIONS)
    WebKitDOMWebAnimationPrivate* priv = WEBKIT_DOM_WEB_ANIMATION_GET_PRIVATE(object);
    priv->coreObject = static_cast<WebCore::WebAnimation*>(WEBKIT_DOM_OBJECT(object)->coreObject);
    WebKit::DOMObjectCache::put(priv->coreObject.get(), object);
#endif // ENABLE(WEB_ANIMATIONS)
    return object;
}

static void webkit_dom_web_animation_class_init(WebKitDOMWebAnimationClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    g_type_class_add_private(gobjectClass, sizeof(WebKitDOMWebAnimationPrivate));
    gobjectClass->constructor = webkit_dom_web_animation_constructor;
    gobjectClass->finalize = webkit_dom_web_animation_finalize;
    gobjectClass->get_property = webkit_dom_web_animation_get_property;

    g_object_class_install_property(
        gobjectClass,
        PROP_EFFECT,
        g_param_spec_object(
            "effect",
            "WebAnimation:effect",
            "read-only WebKitDOMAnimationEffect* WebAnimation:effect",
            WEBKIT_DOM_TYPE_ANIMATION_EFFECT,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_TIMELINE,
        g_param_spec_object(
            "timeline",
            "WebAnimation:timeline",
            "read-only WebKitDOMAnimationTimeline* WebAnimation:timeline",
            WEBKIT_DOM_TYPE_ANIMATION_TIMELINE,
            WEBKIT_PARAM_READABLE));

}

static void webkit_dom_web_animation_init(WebKitDOMWebAnimation* request)
{
    WebKitDOMWebAnimationPrivate* priv = WEBKIT_DOM_WEB_ANIMATION_GET_PRIVATE(request);
    new (priv) WebKitDOMWebAnimationPrivate();
}

WebKitDOMAnimationEffect* webkit_dom_web_animation_get_effect(WebKitDOMWebAnimation* self)
{
#if ENABLE(WEB_ANIMATIONS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_WEB_ANIMATION(self), 0);
    WebCore::WebAnimation* item = WebKit::core(self);
    RefPtr<WebCore::AnimationEffect> gobjectResult = WTF::getPtr(item->effect());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Animations")
    return 0;
#endif /* ENABLE(WEB_ANIMATIONS) */
}

WebKitDOMAnimationTimeline* webkit_dom_web_animation_get_timeline(WebKitDOMWebAnimation* self)
{
#if ENABLE(WEB_ANIMATIONS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_WEB_ANIMATION(self), 0);
    WebCore::WebAnimation* item = WebKit::core(self);
    RefPtr<WebCore::AnimationTimeline> gobjectResult = WTF::getPtr(item->timeline());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Animations")
    return 0;
#endif /* ENABLE(WEB_ANIMATIONS) */
}

