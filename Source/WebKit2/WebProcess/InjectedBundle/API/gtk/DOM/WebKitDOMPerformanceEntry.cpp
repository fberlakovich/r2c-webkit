/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMPerformanceEntry.h"

#include <WebCore/CSSImportRule.h>
#include "DOMObjectCache.h"
#include <WebCore/Document.h>
#include <WebCore/ExceptionCode.h>
#include <WebCore/ExceptionCodeDescription.h>
#include <WebCore/JSMainThreadExecState.h>
#include "WebKitDOMPerformanceEntryPrivate.h"
#include "WebKitDOMPrivate.h"
#include "ConvertToUTF8String.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

#define WEBKIT_DOM_PERFORMANCE_ENTRY_GET_PRIVATE(obj) G_TYPE_INSTANCE_GET_PRIVATE(obj, WEBKIT_DOM_TYPE_PERFORMANCE_ENTRY, WebKitDOMPerformanceEntryPrivate)

typedef struct _WebKitDOMPerformanceEntryPrivate {
#if ENABLE(WEB_TIMING)
    RefPtr<WebCore::PerformanceEntry> coreObject;
#endif // ENABLE(WEB_TIMING)
} WebKitDOMPerformanceEntryPrivate;

#if ENABLE(WEB_TIMING)

namespace WebKit {

WebKitDOMPerformanceEntry* kit(WebCore::PerformanceEntry* obj)
{
    if (!obj)
        return 0;

    if (gpointer ret = DOMObjectCache::get(obj))
        return WEBKIT_DOM_PERFORMANCE_ENTRY(ret);

    return wrapPerformanceEntry(obj);
}

WebCore::PerformanceEntry* core(WebKitDOMPerformanceEntry* request)
{
    return request ? static_cast<WebCore::PerformanceEntry*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMPerformanceEntry* wrapPerformanceEntry(WebCore::PerformanceEntry* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_PERFORMANCE_ENTRY(g_object_new(WEBKIT_DOM_TYPE_PERFORMANCE_ENTRY, "core-object", coreObject, nullptr));
}

} // namespace WebKit

#endif // ENABLE(WEB_TIMING)

G_DEFINE_TYPE(WebKitDOMPerformanceEntry, webkit_dom_performance_entry, WEBKIT_DOM_TYPE_OBJECT)

enum {
    PROP_0,
    PROP_NAME,
    PROP_ENTRY_TYPE,
    PROP_START_TIME,
    PROP_DURATION,
};

static void webkit_dom_performance_entry_finalize(GObject* object)
{
    WebKitDOMPerformanceEntryPrivate* priv = WEBKIT_DOM_PERFORMANCE_ENTRY_GET_PRIVATE(object);
#if ENABLE(WEB_TIMING)
    WebKit::DOMObjectCache::forget(priv->coreObject.get());
#endif // ENABLE(WEB_TIMING)
    priv->~WebKitDOMPerformanceEntryPrivate();
    G_OBJECT_CLASS(webkit_dom_performance_entry_parent_class)->finalize(object);
}

static void webkit_dom_performance_entry_get_property(GObject* object, guint propertyId, GValue* value, GParamSpec* pspec)
{
    WebKitDOMPerformanceEntry* self = WEBKIT_DOM_PERFORMANCE_ENTRY(object);

    switch (propertyId) {
    case PROP_NAME:
        g_value_take_string(value, webkit_dom_performance_entry_get_name(self));
        break;
    case PROP_ENTRY_TYPE:
        g_value_take_string(value, webkit_dom_performance_entry_get_entry_type(self));
        break;
    case PROP_START_TIME:
        g_value_set_double(value, webkit_dom_performance_entry_get_start_time(self));
        break;
    case PROP_DURATION:
        g_value_set_double(value, webkit_dom_performance_entry_get_duration(self));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static GObject* webkit_dom_performance_entry_constructor(GType type, guint constructPropertiesCount, GObjectConstructParam* constructProperties)
{
    GObject* object = G_OBJECT_CLASS(webkit_dom_performance_entry_parent_class)->constructor(type, constructPropertiesCount, constructProperties);
#if ENABLE(WEB_TIMING)
    WebKitDOMPerformanceEntryPrivate* priv = WEBKIT_DOM_PERFORMANCE_ENTRY_GET_PRIVATE(object);
    priv->coreObject = static_cast<WebCore::PerformanceEntry*>(WEBKIT_DOM_OBJECT(object)->coreObject);
    WebKit::DOMObjectCache::put(priv->coreObject.get(), object);
#endif // ENABLE(WEB_TIMING)
    return object;
}

static void webkit_dom_performance_entry_class_init(WebKitDOMPerformanceEntryClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    g_type_class_add_private(gobjectClass, sizeof(WebKitDOMPerformanceEntryPrivate));
    gobjectClass->constructor = webkit_dom_performance_entry_constructor;
    gobjectClass->finalize = webkit_dom_performance_entry_finalize;
    gobjectClass->get_property = webkit_dom_performance_entry_get_property;

    g_object_class_install_property(
        gobjectClass,
        PROP_NAME,
        g_param_spec_string(
            "name",
            "PerformanceEntry:name",
            "read-only gchar* PerformanceEntry:name",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_ENTRY_TYPE,
        g_param_spec_string(
            "entry-type",
            "PerformanceEntry:entry-type",
            "read-only gchar* PerformanceEntry:entry-type",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_START_TIME,
        g_param_spec_double(
            "start-time",
            "PerformanceEntry:start-time",
            "read-only gdouble PerformanceEntry:start-time",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_DURATION,
        g_param_spec_double(
            "duration",
            "PerformanceEntry:duration",
            "read-only gdouble PerformanceEntry:duration",
            -G_MAXDOUBLE, G_MAXDOUBLE, 0,
            WEBKIT_PARAM_READABLE));

}

static void webkit_dom_performance_entry_init(WebKitDOMPerformanceEntry* request)
{
    WebKitDOMPerformanceEntryPrivate* priv = WEBKIT_DOM_PERFORMANCE_ENTRY_GET_PRIVATE(request);
    new (priv) WebKitDOMPerformanceEntryPrivate();
}

gchar* webkit_dom_performance_entry_get_name(WebKitDOMPerformanceEntry* self)
{
#if ENABLE(WEB_TIMING)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_PERFORMANCE_ENTRY(self), 0);
    WebCore::PerformanceEntry* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->name());
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
    return 0;
#endif /* ENABLE(WEB_TIMING) */
}

gchar* webkit_dom_performance_entry_get_entry_type(WebKitDOMPerformanceEntry* self)
{
#if ENABLE(WEB_TIMING)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_PERFORMANCE_ENTRY(self), 0);
    WebCore::PerformanceEntry* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->entryType());
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
    return 0;
#endif /* ENABLE(WEB_TIMING) */
}

gdouble webkit_dom_performance_entry_get_start_time(WebKitDOMPerformanceEntry* self)
{
#if ENABLE(WEB_TIMING)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_PERFORMANCE_ENTRY(self), 0);
    WebCore::PerformanceEntry* item = WebKit::core(self);
    gdouble result = item->startTime();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
    return static_cast<gdouble>(0);
#endif /* ENABLE(WEB_TIMING) */
}

gdouble webkit_dom_performance_entry_get_duration(WebKitDOMPerformanceEntry* self)
{
#if ENABLE(WEB_TIMING)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_PERFORMANCE_ENTRY(self), 0);
    WebCore::PerformanceEntry* item = WebKit::core(self);
    gdouble result = item->duration();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
    return static_cast<gdouble>(0);
#endif /* ENABLE(WEB_TIMING) */
}

