/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMPerformance.h"

#include <WebCore/CSSImportRule.h>
#include "DOMObjectCache.h"
#include <WebCore/Document.h>
#include <WebCore/ExceptionCode.h>
#include <WebCore/ExceptionCodeDescription.h>
#include "GObjectEventListener.h"
#include <WebCore/JSMainThreadExecState.h>
#include "WebKitDOMEventPrivate.h"
#include "WebKitDOMEventTarget.h"
#include "WebKitDOMPerformanceNavigationPrivate.h"
#include "WebKitDOMPerformancePrivate.h"
#include "WebKitDOMPerformanceTimingPrivate.h"
#include "WebKitDOMPrivate.h"
#include "ConvertToUTF8String.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

#define WEBKIT_DOM_PERFORMANCE_GET_PRIVATE(obj) G_TYPE_INSTANCE_GET_PRIVATE(obj, WEBKIT_DOM_TYPE_PERFORMANCE, WebKitDOMPerformancePrivate)

typedef struct _WebKitDOMPerformancePrivate {
#if ENABLE(WEB_TIMING)
    RefPtr<WebCore::Performance> coreObject;
#endif // ENABLE(WEB_TIMING)
} WebKitDOMPerformancePrivate;

#if ENABLE(WEB_TIMING)

namespace WebKit {

WebKitDOMPerformance* kit(WebCore::Performance* obj)
{
    if (!obj)
        return 0;

    if (gpointer ret = DOMObjectCache::get(obj))
        return WEBKIT_DOM_PERFORMANCE(ret);

    return wrapPerformance(obj);
}

WebCore::Performance* core(WebKitDOMPerformance* request)
{
    return request ? static_cast<WebCore::Performance*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMPerformance* wrapPerformance(WebCore::Performance* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_PERFORMANCE(g_object_new(WEBKIT_DOM_TYPE_PERFORMANCE, "core-object", coreObject, nullptr));
}

} // namespace WebKit

#endif // ENABLE(WEB_TIMING)

static gboolean webkit_dom_performance_dispatch_event(WebKitDOMEventTarget* target, WebKitDOMEvent* event, GError** error)
{
#if ENABLE(WEB_TIMING)
    WebCore::Event* coreEvent = WebKit::core(event);
    if (!coreEvent)
        return false;
    WebCore::Performance* coreTarget = static_cast<WebCore::Performance*>(WEBKIT_DOM_OBJECT(target)->coreObject);

    WebCore::ExceptionCode ec = 0;
    gboolean result = coreTarget->dispatchEventForBindings(*coreEvent, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription description(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), description.code, description.name);
    }
    return result;
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(event);
    UNUSED_PARAM(error);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
    return false;
#endif // ENABLE(WEB_TIMING)
}

static gboolean webkit_dom_performance_add_event_listener(WebKitDOMEventTarget* target, const char* eventName, GClosure* handler, gboolean useCapture)
{
#if ENABLE(WEB_TIMING)
    WebCore::Performance* coreTarget = static_cast<WebCore::Performance*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebKit::GObjectEventListener::addEventListener(G_OBJECT(target), coreTarget, eventName, handler, useCapture);
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(eventName);
    UNUSED_PARAM(handler);
    UNUSED_PARAM(useCapture);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
    return false;
#endif // ENABLE(WEB_TIMING)
}

static gboolean webkit_dom_performance_remove_event_listener(WebKitDOMEventTarget* target, const char* eventName, GClosure* handler, gboolean useCapture)
{
#if ENABLE(WEB_TIMING)
    WebCore::Performance* coreTarget = static_cast<WebCore::Performance*>(WEBKIT_DOM_OBJECT(target)->coreObject);
    return WebKit::GObjectEventListener::removeEventListener(G_OBJECT(target), coreTarget, eventName, handler, useCapture);
#else
    UNUSED_PARAM(target);
    UNUSED_PARAM(eventName);
    UNUSED_PARAM(handler);
    UNUSED_PARAM(useCapture);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
    return false;
#endif // ENABLE(WEB_TIMING)
}

static void webkit_dom_event_target_init(WebKitDOMEventTargetIface* iface)
{
    iface->dispatch_event = webkit_dom_performance_dispatch_event;
    iface->add_event_listener = webkit_dom_performance_add_event_listener;
    iface->remove_event_listener = webkit_dom_performance_remove_event_listener;
}

G_DEFINE_TYPE_WITH_CODE(WebKitDOMPerformance, webkit_dom_performance, WEBKIT_DOM_TYPE_OBJECT, G_IMPLEMENT_INTERFACE(WEBKIT_DOM_TYPE_EVENT_TARGET, webkit_dom_event_target_init))

enum {
    PROP_0,
    PROP_NAVIGATION,
    PROP_TIMING,
};

static void webkit_dom_performance_finalize(GObject* object)
{
    WebKitDOMPerformancePrivate* priv = WEBKIT_DOM_PERFORMANCE_GET_PRIVATE(object);
#if ENABLE(WEB_TIMING)
    WebKit::DOMObjectCache::forget(priv->coreObject.get());
#endif // ENABLE(WEB_TIMING)
    priv->~WebKitDOMPerformancePrivate();
    G_OBJECT_CLASS(webkit_dom_performance_parent_class)->finalize(object);
}

static void webkit_dom_performance_get_property(GObject* object, guint propertyId, GValue* value, GParamSpec* pspec)
{
    WebKitDOMPerformance* self = WEBKIT_DOM_PERFORMANCE(object);

    switch (propertyId) {
    case PROP_NAVIGATION:
        g_value_set_object(value, webkit_dom_performance_get_navigation(self));
        break;
    case PROP_TIMING:
        g_value_set_object(value, webkit_dom_performance_get_timing(self));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static GObject* webkit_dom_performance_constructor(GType type, guint constructPropertiesCount, GObjectConstructParam* constructProperties)
{
    GObject* object = G_OBJECT_CLASS(webkit_dom_performance_parent_class)->constructor(type, constructPropertiesCount, constructProperties);
#if ENABLE(WEB_TIMING)
    WebKitDOMPerformancePrivate* priv = WEBKIT_DOM_PERFORMANCE_GET_PRIVATE(object);
    priv->coreObject = static_cast<WebCore::Performance*>(WEBKIT_DOM_OBJECT(object)->coreObject);
    WebKit::DOMObjectCache::put(priv->coreObject.get(), object);
#endif // ENABLE(WEB_TIMING)
    return object;
}

static void webkit_dom_performance_class_init(WebKitDOMPerformanceClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    g_type_class_add_private(gobjectClass, sizeof(WebKitDOMPerformancePrivate));
    gobjectClass->constructor = webkit_dom_performance_constructor;
    gobjectClass->finalize = webkit_dom_performance_finalize;
    gobjectClass->get_property = webkit_dom_performance_get_property;

    g_object_class_install_property(
        gobjectClass,
        PROP_NAVIGATION,
        g_param_spec_object(
            "navigation",
            "Performance:navigation",
            "read-only WebKitDOMPerformanceNavigation* Performance:navigation",
            WEBKIT_DOM_TYPE_PERFORMANCE_NAVIGATION,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_TIMING,
        g_param_spec_object(
            "timing",
            "Performance:timing",
            "read-only WebKitDOMPerformanceTiming* Performance:timing",
            WEBKIT_DOM_TYPE_PERFORMANCE_TIMING,
            WEBKIT_PARAM_READABLE));

}

static void webkit_dom_performance_init(WebKitDOMPerformance* request)
{
    WebKitDOMPerformancePrivate* priv = WEBKIT_DOM_PERFORMANCE_GET_PRIVATE(request);
    new (priv) WebKitDOMPerformancePrivate();
}

void webkit_dom_performance_clear_resource_timings(WebKitDOMPerformance* self)
{
#if ENABLE(WEB_TIMING)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_PERFORMANCE(self));
    WebCore::Performance* item = WebKit::core(self);
    item->clearResourceTimings();
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
#endif /* ENABLE(WEB_TIMING) */
}

void webkit_dom_performance_set_resource_timing_buffer_size(WebKitDOMPerformance* self, gulong maxSize)
{
#if ENABLE(WEB_TIMING)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_PERFORMANCE(self));
    WebCore::Performance* item = WebKit::core(self);
    item->setResourceTimingBufferSize(maxSize);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(maxSize);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
#endif /* ENABLE(WEB_TIMING) */
}

void webkit_dom_performance_webkit_mark(WebKitDOMPerformance* self, const gchar* markName, GError** error)
{
#if ENABLE(WEB_TIMING) && ENABLE(USER_TIMING)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_PERFORMANCE(self));
    g_return_if_fail(markName);
    g_return_if_fail(!error || !*error);
    WebCore::Performance* item = WebKit::core(self);
    WTF::String convertedMarkName = WTF::String::fromUTF8(markName);
    WebCore::ExceptionCode ec = 0;
    item->webkitMark(convertedMarkName, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(markName);
    UNUSED_PARAM(error);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
#endif /* ENABLE(WEB_TIMING) */
}

void webkit_dom_performance_webkit_clear_marks(WebKitDOMPerformance* self, const gchar* markName)
{
#if ENABLE(WEB_TIMING) && ENABLE(USER_TIMING)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_PERFORMANCE(self));
    g_return_if_fail(markName);
    WebCore::Performance* item = WebKit::core(self);
    WTF::String convertedMarkName = WTF::String::fromUTF8(markName);
    item->webkitClearMarks(convertedMarkName);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(markName);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
#endif /* ENABLE(WEB_TIMING) */
}

void webkit_dom_performance_webkit_measure(WebKitDOMPerformance* self, const gchar* measureName, const gchar* startMark, const gchar* endMark, GError** error)
{
#if ENABLE(WEB_TIMING) && ENABLE(USER_TIMING)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_PERFORMANCE(self));
    g_return_if_fail(measureName);
    g_return_if_fail(startMark);
    g_return_if_fail(endMark);
    g_return_if_fail(!error || !*error);
    WebCore::Performance* item = WebKit::core(self);
    WTF::String convertedMeasureName = WTF::String::fromUTF8(measureName);
    WTF::String convertedStartMark = WTF::String::fromUTF8(startMark);
    WTF::String convertedEndMark = WTF::String::fromUTF8(endMark);
    WebCore::ExceptionCode ec = 0;
    item->webkitMeasure(convertedMeasureName, convertedStartMark, convertedEndMark, ec);
    if (ec) {
        WebCore::ExceptionCodeDescription ecdesc(ec);
        g_set_error_literal(error, g_quark_from_string("WEBKIT_DOM"), ecdesc.code, ecdesc.name);
    }
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(measureName);
    UNUSED_PARAM(startMark);
    UNUSED_PARAM(endMark);
    UNUSED_PARAM(error);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
#endif /* ENABLE(WEB_TIMING) */
}

void webkit_dom_performance_webkit_clear_measures(WebKitDOMPerformance* self, const gchar* measureName)
{
#if ENABLE(WEB_TIMING) && ENABLE(USER_TIMING)
    WebCore::JSMainThreadNullState state;
    g_return_if_fail(WEBKIT_DOM_IS_PERFORMANCE(self));
    g_return_if_fail(measureName);
    WebCore::Performance* item = WebKit::core(self);
    WTF::String convertedMeasureName = WTF::String::fromUTF8(measureName);
    item->webkitClearMeasures(convertedMeasureName);
#else
    UNUSED_PARAM(self);
    UNUSED_PARAM(measureName);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
#endif /* ENABLE(WEB_TIMING) */
}

gdouble webkit_dom_performance_now(WebKitDOMPerformance* self)
{
#if ENABLE(WEB_TIMING)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_PERFORMANCE(self), 0);
    WebCore::Performance* item = WebKit::core(self);
    gdouble result = item->now();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
    return static_cast<gdouble>(0);
#endif /* ENABLE(WEB_TIMING) */
}

WebKitDOMPerformanceNavigation* webkit_dom_performance_get_navigation(WebKitDOMPerformance* self)
{
#if ENABLE(WEB_TIMING)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_PERFORMANCE(self), 0);
    WebCore::Performance* item = WebKit::core(self);
    RefPtr<WebCore::PerformanceNavigation> gobjectResult = WTF::getPtr(item->navigation());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
    return 0;
#endif /* ENABLE(WEB_TIMING) */
}

WebKitDOMPerformanceTiming* webkit_dom_performance_get_timing(WebKitDOMPerformance* self)
{
#if ENABLE(WEB_TIMING)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_PERFORMANCE(self), 0);
    WebCore::Performance* item = WebKit::core(self);
    RefPtr<WebCore::PerformanceTiming> gobjectResult = WTF::getPtr(item->timing());
    return WebKit::kit(gobjectResult.get());
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Web Timing")
    return 0;
#endif /* ENABLE(WEB_TIMING) */
}

