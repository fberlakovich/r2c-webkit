/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMSpeechSynthesisVoice.h"

#include <WebCore/CSSImportRule.h>
#include "DOMObjectCache.h"
#include <WebCore/Document.h>
#include <WebCore/ExceptionCode.h>
#include <WebCore/ExceptionCodeDescription.h>
#include <WebCore/JSMainThreadExecState.h>
#include "WebKitDOMPrivate.h"
#include "WebKitDOMSpeechSynthesisVoicePrivate.h"
#include "ConvertToUTF8String.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

#define WEBKIT_DOM_SPEECH_SYNTHESIS_VOICE_GET_PRIVATE(obj) G_TYPE_INSTANCE_GET_PRIVATE(obj, WEBKIT_DOM_TYPE_SPEECH_SYNTHESIS_VOICE, WebKitDOMSpeechSynthesisVoicePrivate)

typedef struct _WebKitDOMSpeechSynthesisVoicePrivate {
#if ENABLE(SPEECH_SYNTHESIS)
    RefPtr<WebCore::SpeechSynthesisVoice> coreObject;
#endif // ENABLE(SPEECH_SYNTHESIS)
} WebKitDOMSpeechSynthesisVoicePrivate;

#if ENABLE(SPEECH_SYNTHESIS)

namespace WebKit {

WebKitDOMSpeechSynthesisVoice* kit(WebCore::SpeechSynthesisVoice* obj)
{
    if (!obj)
        return 0;

    if (gpointer ret = DOMObjectCache::get(obj))
        return WEBKIT_DOM_SPEECH_SYNTHESIS_VOICE(ret);

    return wrapSpeechSynthesisVoice(obj);
}

WebCore::SpeechSynthesisVoice* core(WebKitDOMSpeechSynthesisVoice* request)
{
    return request ? static_cast<WebCore::SpeechSynthesisVoice*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMSpeechSynthesisVoice* wrapSpeechSynthesisVoice(WebCore::SpeechSynthesisVoice* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_SPEECH_SYNTHESIS_VOICE(g_object_new(WEBKIT_DOM_TYPE_SPEECH_SYNTHESIS_VOICE, "core-object", coreObject, nullptr));
}

} // namespace WebKit

#endif // ENABLE(SPEECH_SYNTHESIS)

G_DEFINE_TYPE(WebKitDOMSpeechSynthesisVoice, webkit_dom_speech_synthesis_voice, WEBKIT_DOM_TYPE_OBJECT)

enum {
    PROP_0,
    PROP_VOICE_URI,
    PROP_NAME,
    PROP_LANG,
    PROP_LOCAL_SERVICE,
    PROP_DEFAULT,
};

static void webkit_dom_speech_synthesis_voice_finalize(GObject* object)
{
    WebKitDOMSpeechSynthesisVoicePrivate* priv = WEBKIT_DOM_SPEECH_SYNTHESIS_VOICE_GET_PRIVATE(object);
#if ENABLE(SPEECH_SYNTHESIS)
    WebKit::DOMObjectCache::forget(priv->coreObject.get());
#endif // ENABLE(SPEECH_SYNTHESIS)
    priv->~WebKitDOMSpeechSynthesisVoicePrivate();
    G_OBJECT_CLASS(webkit_dom_speech_synthesis_voice_parent_class)->finalize(object);
}

static void webkit_dom_speech_synthesis_voice_get_property(GObject* object, guint propertyId, GValue* value, GParamSpec* pspec)
{
    WebKitDOMSpeechSynthesisVoice* self = WEBKIT_DOM_SPEECH_SYNTHESIS_VOICE(object);

    switch (propertyId) {
    case PROP_VOICE_URI:
        g_value_take_string(value, webkit_dom_speech_synthesis_voice_get_voice_uri(self));
        break;
    case PROP_NAME:
        g_value_take_string(value, webkit_dom_speech_synthesis_voice_get_name(self));
        break;
    case PROP_LANG:
        g_value_take_string(value, webkit_dom_speech_synthesis_voice_get_lang(self));
        break;
    case PROP_LOCAL_SERVICE:
        g_value_set_boolean(value, webkit_dom_speech_synthesis_voice_get_local_service(self));
        break;
    case PROP_DEFAULT:
        g_value_set_boolean(value, webkit_dom_speech_synthesis_voice_get_default(self));
        break;
    default:
        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, propertyId, pspec);
        break;
    }
}

static GObject* webkit_dom_speech_synthesis_voice_constructor(GType type, guint constructPropertiesCount, GObjectConstructParam* constructProperties)
{
    GObject* object = G_OBJECT_CLASS(webkit_dom_speech_synthesis_voice_parent_class)->constructor(type, constructPropertiesCount, constructProperties);
#if ENABLE(SPEECH_SYNTHESIS)
    WebKitDOMSpeechSynthesisVoicePrivate* priv = WEBKIT_DOM_SPEECH_SYNTHESIS_VOICE_GET_PRIVATE(object);
    priv->coreObject = static_cast<WebCore::SpeechSynthesisVoice*>(WEBKIT_DOM_OBJECT(object)->coreObject);
    WebKit::DOMObjectCache::put(priv->coreObject.get(), object);
#endif // ENABLE(SPEECH_SYNTHESIS)
    return object;
}

static void webkit_dom_speech_synthesis_voice_class_init(WebKitDOMSpeechSynthesisVoiceClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    g_type_class_add_private(gobjectClass, sizeof(WebKitDOMSpeechSynthesisVoicePrivate));
    gobjectClass->constructor = webkit_dom_speech_synthesis_voice_constructor;
    gobjectClass->finalize = webkit_dom_speech_synthesis_voice_finalize;
    gobjectClass->get_property = webkit_dom_speech_synthesis_voice_get_property;

    g_object_class_install_property(
        gobjectClass,
        PROP_VOICE_URI,
        g_param_spec_string(
            "voice-uri",
            "SpeechSynthesisVoice:voice-uri",
            "read-only gchar* SpeechSynthesisVoice:voice-uri",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_NAME,
        g_param_spec_string(
            "name",
            "SpeechSynthesisVoice:name",
            "read-only gchar* SpeechSynthesisVoice:name",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_LANG,
        g_param_spec_string(
            "lang",
            "SpeechSynthesisVoice:lang",
            "read-only gchar* SpeechSynthesisVoice:lang",
            "",
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_LOCAL_SERVICE,
        g_param_spec_boolean(
            "local-service",
            "SpeechSynthesisVoice:local-service",
            "read-only gboolean SpeechSynthesisVoice:local-service",
            FALSE,
            WEBKIT_PARAM_READABLE));

    g_object_class_install_property(
        gobjectClass,
        PROP_DEFAULT,
        g_param_spec_boolean(
            "default",
            "SpeechSynthesisVoice:default",
            "read-only gboolean SpeechSynthesisVoice:default",
            FALSE,
            WEBKIT_PARAM_READABLE));

}

static void webkit_dom_speech_synthesis_voice_init(WebKitDOMSpeechSynthesisVoice* request)
{
    WebKitDOMSpeechSynthesisVoicePrivate* priv = WEBKIT_DOM_SPEECH_SYNTHESIS_VOICE_GET_PRIVATE(request);
    new (priv) WebKitDOMSpeechSynthesisVoicePrivate();
}

gchar* webkit_dom_speech_synthesis_voice_get_voice_uri(WebKitDOMSpeechSynthesisVoice* self)
{
#if ENABLE(SPEECH_SYNTHESIS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_SPEECH_SYNTHESIS_VOICE(self), 0);
    WebCore::SpeechSynthesisVoice* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->voiceURI());
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Speech Synthesis")
    return 0;
#endif /* ENABLE(SPEECH_SYNTHESIS) */
}

gchar* webkit_dom_speech_synthesis_voice_get_name(WebKitDOMSpeechSynthesisVoice* self)
{
#if ENABLE(SPEECH_SYNTHESIS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_SPEECH_SYNTHESIS_VOICE(self), 0);
    WebCore::SpeechSynthesisVoice* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->name());
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Speech Synthesis")
    return 0;
#endif /* ENABLE(SPEECH_SYNTHESIS) */
}

gchar* webkit_dom_speech_synthesis_voice_get_lang(WebKitDOMSpeechSynthesisVoice* self)
{
#if ENABLE(SPEECH_SYNTHESIS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_SPEECH_SYNTHESIS_VOICE(self), 0);
    WebCore::SpeechSynthesisVoice* item = WebKit::core(self);
    gchar* result = convertToUTF8String(item->lang());
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Speech Synthesis")
    return 0;
#endif /* ENABLE(SPEECH_SYNTHESIS) */
}

gboolean webkit_dom_speech_synthesis_voice_get_local_service(WebKitDOMSpeechSynthesisVoice* self)
{
#if ENABLE(SPEECH_SYNTHESIS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_SPEECH_SYNTHESIS_VOICE(self), FALSE);
    WebCore::SpeechSynthesisVoice* item = WebKit::core(self);
    gboolean result = item->localService();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Speech Synthesis")
    return static_cast<gboolean>(0);
#endif /* ENABLE(SPEECH_SYNTHESIS) */
}

gboolean webkit_dom_speech_synthesis_voice_get_default(WebKitDOMSpeechSynthesisVoice* self)
{
#if ENABLE(SPEECH_SYNTHESIS)
    WebCore::JSMainThreadNullState state;
    g_return_val_if_fail(WEBKIT_DOM_IS_SPEECH_SYNTHESIS_VOICE(self), FALSE);
    WebCore::SpeechSynthesisVoice* item = WebKit::core(self);
    gboolean result = item->isDefault();
    return result;
#else
    UNUSED_PARAM(self);
    WEBKIT_WARN_FEATURE_NOT_PRESENT("Speech Synthesis")
    return static_cast<gboolean>(0);
#endif /* ENABLE(SPEECH_SYNTHESIS) */
}

