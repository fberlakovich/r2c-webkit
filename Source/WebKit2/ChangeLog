2014-10-23  Benjamin Poulain  <bpoulain@apple.com>

        Fix a bad find-and-replace in r175153

        Looks like I messed up the commit on landing.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::WebPageProxy):
        (WebKit::WebPageProxy::didCommitLoadForFrame):

2014-10-23  Benjamin Poulain  <bpoulain@apple.com>

        [iOS WK2] If a page has the exact same VisibleContentRect as the page before, its VisibleContentRectUpdate can be ignored
        https://bugs.webkit.org/show_bug.cgi?id=138031
        rdar://problem/18739335

        Reviewed by Simon Fraser.

        Since any VisibleContentRectUpdate is costly for the WebProcess, we avoid sending updates
        if none of the important parameters have changed (scale and geometry).

        One unintended side effect is that the update of a page can be blocked if the parameters
        of the previous page were identical.

        What happen is this:
        1) Page [A] sends its content rect update as needed. WebPageProxy saves the last update
           in m_lastVisibleContentRectUpdate and use that value to avoid useless updates.
        2) Page [B] load after page [A] and have the exact VisibleContentRect. When receiving the first
           layer tree commit after didCommitLoadForFrame, WKWebView sends its VisibleContentRect
           to WebPageProxy to synchronize the state of the WebProcess with what is on screen.
        3) Since the two VisibleContentRect update has the same value as the ones of page [A], WebPageProxy
           discards the update. The WebProcess has its initialization viewport and is not udpated until
           a major parameter changes (scale or position).

        In rdar://problem/18739335, the problem is the similar but with a different failure point:
        1) Everything above happened already.
        2) The layer tree transaction has a scrolling request. This is processed by WKWebView.
        3) Since the scrolling position is invalid, the request is ignored and we send the last
           VisibleContentRect to the WebProcess with WebPageProxy::resendLastVisibleContentRects().
        4) Since the VisibleContentRect was never updated after didCommitLoadForFrame, the one we send
           is for the previous page, which the web process correctly ignores.

        This patch solves the problem by nuking the cached m_lastVisibleContentRectUpdate before
        any valid VisibleContentRectUpdate for a new page.

        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::WebPageProxy):
        (WebKit::WebPageProxy::didCommitLoadForFrame):
        * UIProcess/WebPageProxy.h:
        * UIProcess/ios/WebPageProxyIOS.mm:
        (WebKit::WebPageProxy::didCommitLayerTree):

2014-10-23  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: Provide a way to have alternate inspector agents
        https://bugs.webkit.org/show_bug.cgi?id=137901

        Reviewed by Brian Burg.

        * Configurations/FeatureDefines.xcconfig:

2014-10-23  Tim Horton  <timothy_horton@apple.com>

        Add some SPI headers for NSExtension and NSSharingService{Picker}
        https://bugs.webkit.org/show_bug.cgi?id=138027

        Reviewed by Anders Carlsson.

        * UIProcess/API/mac/WKView.mm:
        * UIProcess/mac/ServicesController.mm:
        * UIProcess/mac/WebContextMenuProxyMac.mm:
        Replace redefinitions with SPI header #imports.

2014-10-23  Benjamin Poulain  <bpoulain@apple.com>

        [iOS WK2] Make sure any dynamic viewport update schedules a layer tree commit
        https://bugs.webkit.org/show_bug.cgi?id=138021

        Reviewed by Simon Fraser.

        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::dynamicViewportSizeUpdate):
        Sometimes, the clients can do a dynamic viewport update but only change the minimum
        layout size (see rdar://problem/18755250).

        When that happens, it is possible to do the full state update without ever scheduling
        a layer tree commit. For example, if the new minimum layout height is only a few pixels
        smaller than the old value and the layout of the page is equal or larger than the old value,
        the layout is done without any side effect to the content (assuming a viewport configuration
        based on width).

        The contract with the client is that the next layer tree commit after a dynamic viewport update
        carries all the valid parameters for the new viewport size. Since the new layout never scheduled
        a layer tree commit, the UIProcess is just waiting for one, discarding all input.

        This patch solves the issue by explicitely scheduling a layer flush after updating all the layout
        and view parameters to their final values. In most cases, this makes no difference since a layer
        tree commit was already scheduled. In the rare cases where nothing was scheduled, scheduling
        the layer tree commit ensure we unlock the UIProcess.

2014-10-23  Ryosuke Niwa  <rniwa@webkit.org>

        WebContent crash in WebKit::WebPage::expandedRangeFromHandle
        https://bugs.webkit.org/show_bug.cgi?id=138023

        Reviewed by Enrica Casucci.

        The crashes are caused by rangeForBlockAtPoint returning a null Range.
        Exit early or continue if a range is null in various places.

        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::expandedRangeFromHandle): Continue looking for another point if the range returned by
        rangeForBlockAtPoint is null.
        (WebKit::WebPage::contractedRangeFromHandle): Ditto.
        (WebKit::WebPage::computeExpandAndShrinkThresholdsForHandle): Removed the FIXME now that Enrica has
        verified that this early exit added in r173788 is correct.

2014-10-23  Joseph Pecoraro  <pecoraro@apple.com>

        [iOS] iPhone unselecting items in <select multiple> shows incorrect values selected
        https://bugs.webkit.org/show_bug.cgi?id=137989

        Reviewed by Alexey Proskuryakov.

        * UIProcess/ios/forms/WKFormSelectPicker.mm:
        (-[WKMultipleSelectPicker pickerView:row:column:checked:]):
        The second argument is "allowsMultipleSelection" and should only be set
        when we are making a selection in a <select multiple>.

2014-10-23  Tim Horton  <timothy_horton@apple.com>

        Assertion failures in ImageKit soft linking
        https://bugs.webkit.org/show_bug.cgi?id=138009

        Reviewed by Anders Carlsson.

        * UIProcess/API/mac/WKView.mm:
        Soft-link ImageKit correctly.
        ImageKit is inside the Quartz umbrella framework.

2014-10-23  Daniel Bates  <dabates@apple.com>

        [iOS] Fix the build after <http://trac.webkit.org/changeset/175079>
        (https://bugs.webkit.org/show_bug.cgi?id=137995)

        Rubber-stamped by Anders Carlsson.

        Remove PageClientImpl::didPerformActionMenuHitTest() for iOS.

        * UIProcess/ios/PageClientImplIOS.h:
        * UIProcess/ios/PageClientImplIOS.mm:
        (WebKit::PageClientImpl::didPerformActionMenuHitTest): Deleted.

2014-10-23  Krzysztof Czech  <k.czech@samsung.com>

        [EFL] Fix build problem after r175098
        https://bugs.webkit.org/show_bug.cgi?id=138002

        Reviewed by Gyuyoung Kim.

        Add ECORE_X dependency to avoid linking problems while building unit tests.

        * PlatformEfl.cmake:

2014-10-23  Krzysztof Czech  <k.czech@samsung.com>

        [EFL] Set proper default value for WebPageAccessibilityObject
        https://bugs.webkit.org/show_bug.cgi?id=137951

        Reviewed by Csaba Osztrogon√°c.

        Initial value for WebPageAccessibilityObject should be nullptr.

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::WebPage):

2014-10-23  Krzysztof Czech  <k.czech@samsung.com>

        [EFL] Introduce EFL Accessibility in WebKit
        https://bugs.webkit.org/show_bug.cgi?id=137819

        Reviewed by Gyuyoung Kim.

        EFL Accessibility provides an API that is used to notify clients that certain
        Accessibility events occur. Utilizing it makes WebKit-EFL coherent with EFL native
        accessibility approach.

        * PlatformEfl.cmake:
        * UIProcess/API/efl/EwkView.cpp:
        (EwkView::EwkView):
        * UIProcess/API/efl/EwkView.h:
        (EwkView::webAccessibility):
        * UIProcess/API/efl/WebAccessibility.cpp: Added.
        (WebKit::WebAccessibility::WebAccessibility):
        (WebKit::WebAccessibility::~WebAccessibility):
        (WebKit::WebAccessibility::eventHandler):
        (WebKit::WebAccessibility::executeGestureAction):
        (WebKit::WebAccessibility::activate):
        (WebKit::WebAccessibility::read):
        (WebKit::WebAccessibility::readNext):
        (WebKit::WebAccessibility::readPrev):
        (WebKit::WebAccessibility::up):
        (WebKit::WebAccessibility::down):
        (WebKit::WebAccessibility::scroll):
        (WebKit::WebAccessibility::mouse):
        (WebKit::WebAccessibility::enable):
        (WebKit::WebAccessibility::disable):
        * UIProcess/API/efl/WebAccessibility.h: Added.
        (WebKit::WebAccessibility::activateAction):
        (WebKit::WebAccessibility::nextAction):
        (WebKit::WebAccessibility::prevAction):
        (WebKit::WebAccessibility::readAction):
        * UIProcess/API/efl/ewk_view.cpp:
        (ewk_view_accessibility_action_activate_get):
        (ewk_view_accessibility_action_next_get):
        (ewk_view_accessibility_action_prev_get):
        (ewk_view_accessibility_action_read_by_point_get):
        * UIProcess/API/efl/ewk_view.h:
        * UIProcess/API/efl/tests/test_ewk2_accessibility.cpp: Added.
        (EWK2Accessibility::xwindow):
        (TEST_F):
        * UIProcess/WebPageProxy.h:
        * UIProcess/efl/WebPageProxyEfl.cpp:
        (WebKit::WebPageProxy::accessibilityObjectReadByPoint):
        (WebKit::WebPageProxy::accessibilityObjectReadPrevious):
        (WebKit::WebPageProxy::accessibilityObjectReadNext):

2014-10-22  Benjamin Poulain  <bpoulain@apple.com>

        [iOS WK2] Protect WKWebView dynamic viewport change against empty sizes
        https://bugs.webkit.org/show_bug.cgi?id=137988
        rdar://problem/17785162

        Reviewed by Simon Fraser.

        * UIProcess/API/Cocoa/WKWebView.mm:
        (-[WKWebView _beginAnimatedResizeWithUpdates:]):
        The algorithm behind dynamic size update finds the best content area to put in the viewport
        after a viewport change. If an initial size or a target size is empty, it is impossible to
        compute a reasonable area to keep in the view. We end up handling NaN scales
        and/or sizes and CoreAnimation raises an exception when applying that value.

        This patch add early exits when that occurs and fallback to the common code.

        On Input, things are easy. If any of the initial values is empty, we just execute the updateBlock
        without attempting any of the dynamic behaviors.

        For the target values, things are trickier. We do not know what the values are going to be before we execute
        the block. But once we executed the block, we have already skipped all the setters that call the web process.

        To handle that, every value is set manually on WebPageProxy. This is a bit unfortunate because the setters
        get yet another entry point.

2014-10-22  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        EFL and GTK ports have broken since r175075
        https://bugs.webkit.org/show_bug.cgi?id=137995

        Unreviewed, EFL and GTK ports build fix.

        Need to use PLATFORM(MAC) guard for ActionMenuHitTest functions.

        * UIProcess/PageClient.h:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::removeNavigationGestureSnapshot):
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:
        * WebProcess/WebPage/WebPage.cpp:
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:

2014-10-22  Tim Horton  <timothy_horton@apple.com>

        Add action menu support for images
        https://bugs.webkit.org/show_bug.cgi?id=137987
        <rdar://problem/18717767>

        Reviewed by Anders Carlsson, Sam Weinig, and Beth Dakin.

        * Resources/AddImageToPhotos.pdf: Added.
        * Resources/CopyImage.pdf: Added.
        * Resources/SaveImageToDownloads.pdf: Added.
        * Resources/ShareImage.pdf: Added.
        Add some temporary artwork.

        * Scripts/webkit/messages.py:
        (struct_or_class):
        ActionMenuHitTestResult is a struct.

        * Shared/API/c/WKActionMenuItemTypes.h:
        Add new items for image menus.

        * Shared/mac/ActionMenuHitTestResult.cpp:
        (WebKit::ActionMenuHitTestResult::encode):
        (WebKit::ActionMenuHitTestResult::decode):
        For now, pass the hit image data across to the UI process as a ShareableBitmap.

        * Shared/mac/ActionMenuHitTestResult.h:

        * UIProcess/API/mac/WKView.mm:
        (-[WKView _createActionMenuItemForTag:]):
        Refactor action menu item creation into a single function, so that
        callers can share code and be much simpler.

        (webKitBundleImageNamed):
        Add a helper to acquire an image from the WebKit2 bundle.

        (-[WKView _copyImage:]):
        (-[WKView _saveImageToDownloads:]):
        (temporaryPhotosDirectoryPath):
        (pathToPhotoOnDisk):
        (-[WKView _addImageToPhotos:]):
        Add rudimentary implementations of image actions.

        (-[WKView _defaultMenuItemsForImage]):
        Support the image menu, plus a submenu acquired from NSSharingServicePicker
        for the Share menu.

        (-[WKView _defaultMenuItems]):
        Call _defaultMenuItemsForImage if needed.

        (-[WKView _updateActionMenu]):
        Refactor _updateActionMenu out of prepareForMenu:withEvent:.

        (-[WKView prepareForMenu:withEvent:]):
        Ask the Web process to re-hit-test under the location that the menu
        will appear. Mark the menu as pending.

        (-[WKView _didPerformActionMenuHitTest:]):
        When we get the hit test reply, record the result for future use.

        (-[WKView willOpenMenu:withEvent:]):
        If we got a hit test reply, rebuild the menu immediately. If not, wait
        up to 500ms for the reply to come in. This eventually needs to be
        cancellable if the menu is rejected in the interim.

        (-[WKView didCloseMenu:withEvent:]):
        Clear all state when the menu closes.

        * UIProcess/API/mac/WKViewInternal.h:
        * UIProcess/PageClient.h:
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::performActionMenuHitTestAtLocation):
        (WebKit::WebPageProxy::didPerformActionMenuHitTest):
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:
        * UIProcess/mac/PageClientImpl.h:
        * UIProcess/mac/PageClientImpl.mm:
        (WebKit::PageClientImpl::didPerformActionMenuHitTest):
        * UIProcess/ios/PageClientImplIOS.h:
        * UIProcess/ios/PageClientImplIOS.mm:
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in:
        Plumb didPerformActionMenuHitTest back from WebPageProxy to WKView.

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::performActionMenuHitTestAtLocation):
        Hit test at the given location, recording the image data if there is any,
        and return the result to the UI process.

        * WebKit2.xcodeproj/project.pbxproj:
        Add the PDFs.

2014-10-22  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        Remove WidgetBackingStoreCairo::create() factory function
        https://bugs.webkit.org/show_bug.cgi?id=137943

        Reviewed by Darin Adler.

        WidgetBackingStoreCairo::create() can be replaced by std::make_unique<>.
        Thus this patch removes it, then use std::make_unique<>|std::unique_ptr<>.

        * UIProcess/BackingStore.h:
        * UIProcess/cairo/BackingStoreCairo.cpp:
        (WebKit::createBackingStoreForGTK):
        (WebKit::BackingStore::incorporateUpdate):

2014-10-22  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        Remove TextCheckerEnchant::create() factory function
        https://bugs.webkit.org/show_bug.cgi?id=137944

        Reviewed by Darin Adler.

        TextCheckerEnchant::create() can be replaced by std::make_unique<> and std::unique_ptr<>.

        * UIProcess/API/gtk/WebKitTextChecker.cpp:
        (WebKitTextChecker::WebKitTextChecker):
        * UIProcess/API/gtk/WebKitTextChecker.h:
        * UIProcess/efl/TextCheckerClientEfl.cpp:
        (TextCheckerClientEfl::TextCheckerClientEfl):
        * UIProcess/efl/TextCheckerClientEfl.h:

2014-10-22  Antti Koivisto  <antti@apple.com>

        Revert fix for REGRESSION (r173356): Safari can't install a profile, gets 'Download Failed error
        (https://bugs.webkit.org/show_bug.cgi?id=137493)

        Turns out the root cause was a bug in MIME type sniffing, https://bugs.webkit.org/show_bug.cgi?id=137855

        Remove the workaround.

        * Shared/Downloads/ios/DownloadIOS.mm:
        (WebKit::Download::startWithHandle):
        * Shared/Downloads/mac/DownloadMac.mm:
        (WebKit::Download::startWithHandle):

2014-10-22  Beth Dakin  <bdakin@apple.com>

        Remove action menu web preference
        https://bugs.webkit.org/show_bug.cgi?id=137975

        Reviewed by Tim Horton.

        * Shared/WebPreferencesDefinitions.h:
        * UIProcess/API/C/WKPreferences.cpp:
        (WKPreferencesSetActionMenuSupportEnabled): Deleted.
        (WKPreferencesGetActionMenuSupportEnabled): Deleted.
        * UIProcess/API/C/WKPreferencesRefPrivate.h:
        * UIProcess/API/mac/WKView.mm:
        (-[WKView initWithFrame:context:configuration:webView:]):

2014-10-22  Chris Dumez  <cdumez@apple.com>

        [Mac][WK2] Fix applicationIsSafari() detection
        https://bugs.webkit.org/show_bug.cgi?id=137893

        Reviewed by Alexey Proskuryakov.

        Provide an implementation for FrameLoaderClient's new
        needsQuickLookResourceCachingQuirks(), which accesses the flag stored
        on the WebProcess, which is initialized upon WebProcess creation.

        QuickLookMac::computeNeedsQuickLookResourceCachingQuirks() is called
        on UIProcess side so that it works reliably and the flag is passed as
        parameter when constructing the WebProcess.

        * Shared/WebProcessCreationParameters.cpp:
        (WebKit::WebProcessCreationParameters::encode):
        (WebKit::WebProcessCreationParameters::decode):
        * Shared/WebProcessCreationParameters.h:
        * UIProcess/mac/WebContextMac.mm:
        (WebKit::WebContext::platformInitializeWebProcess):
        * WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp:
        (WebKit::WebFrameLoaderClient::needsQuickLookResourceCachingQuirks):
        * WebProcess/WebCoreSupport/WebFrameLoaderClient.h:
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::WebProcess):
        * WebProcess/WebProcess.h:
        (WebKit::WebProcess::needsQuickLookResourceCachingQuirks):
        * WebProcess/cocoa/WebProcessCocoa.mm:
        (WebKit::WebProcess::platformInitializeWebProcess):

2014-10-22  Carlos Garcia Campos  <cgarcia@igalia.com>

        Unreviewed. Fix GTK+ debug build after r175046.

        Remove invalid ASSERT.

        * UIProcess/gtk/InputMethodFilter.cpp:
        (WebKit::InputMethodFilter::setCursorRect):

2014-10-22  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Move GtkInputMethodFilter from Platform to WebKit2
        https://bugs.webkit.org/show_bug.cgi?id=137884

        Reviewed by Gustavo Noronha Silva.

        Merge WebViewBaseInputMethodFilter and GtkInputMethodFilter into a
        single class InputMethodFilter. The code is mostly the same, but
        instead of having a setWebView method only to get the WebPageProxy,
        it has a setPage method that passes the WebPageProxy. The GtkIMContext
        client window is set by the WebView when it's realized/unrealized.

        * PlatformGTK.cmake:
        * Shared/NativeWebKeyboardEvent.h:
        * Shared/gtk/NativeWebKeyboardEventGtk.cpp:
        (WebKit::NativeWebKeyboardEvent::NativeWebKeyboardEvent):
        * UIProcess/API/gtk/WebKitWebViewBase.cpp:
        (webkitWebViewBaseRealize):
        (webkitWebViewBaseUnrealize):
        (webkit_web_view_base_class_init):
        (webkitWebViewBaseCreateWebPage):
        (webkitWebViewBaseEnterFullScreen): Deleted.
        * UIProcess/API/gtk/WebViewBaseInputMethodFilter.cpp: Removed.
        * UIProcess/API/gtk/WebViewBaseInputMethodFilter.h: Removed.
        * UIProcess/gtk/InputMethodFilter.cpp: Added.
        (WebKit::InputMethodFilter::handleCommitCallback):
        (WebKit::InputMethodFilter::handlePreeditStartCallback):
        (WebKit::InputMethodFilter::handlePreeditChangedCallback):
        (WebKit::InputMethodFilter::handlePreeditEndCallback):
        (WebKit::InputMethodFilter::InputMethodFilter):
        (WebKit::InputMethodFilter::~InputMethodFilter):
        (WebKit::InputMethodFilter::setEnabled):
        (WebKit::InputMethodFilter::setCursorRect):
        (WebKit::InputMethodFilter::handleKeyboardEvent):
        (WebKit::InputMethodFilter::handleKeyboardEventWithCompositionResults):
        (WebKit::InputMethodFilter::filterKeyEvent):
        (WebKit::InputMethodFilter::confirmComposition):
        (WebKit::InputMethodFilter::updatePreedit):
        (WebKit::InputMethodFilter::notifyFocusedIn):
        (WebKit::InputMethodFilter::notifyFocusedOut):
        (WebKit::InputMethodFilter::notifyMouseButtonPress):
        (WebKit::InputMethodFilter::confirmCurrentComposition):
        (WebKit::InputMethodFilter::cancelContextComposition):
        (WebKit::InputMethodFilter::sendCompositionAndPreeditWithFakeKeyEvents):
        (WebKit::InputMethodFilter::handleCommit):
        (WebKit::InputMethodFilter::handlePreeditStart):
        (WebKit::InputMethodFilter::handlePreeditChanged):
        (WebKit::InputMethodFilter::handlePreeditEnd):
        (WebKit::InputMethodFilter::logHandleKeyboardEventForTesting):
        (WebKit::InputMethodFilter::logHandleKeyboardEventWithCompositionResultsForTesting):
        (WebKit::InputMethodFilter::logConfirmCompositionForTesting):
        (WebKit::InputMethodFilter::logSetPreeditForTesting):
        * UIProcess/gtk/InputMethodFilter.h: Added.
        (WebKit::InputMethodFilter::context):
        (WebKit::InputMethodFilter::setPage):
        (WebKit::InputMethodFilter::setTestingMode):
        (WebKit::InputMethodFilter::events):

2014-10-21  Tim Horton  <timothy_horton@apple.com>

        Quick Look preview bubble has unnecessary controls
        https://bugs.webkit.org/show_bug.cgi?id=137940
        <rdar://problem/18731860>

        Reviewed by Simon Fraser.

        * UIProcess/API/mac/WKView.mm:
        (-[WKView _quickLookURLFromActionMenu:]):
        Temporarily use more SPI to allow us to hide the preview bubble's controls.

2014-10-21  Jeff Miller  <jeffm@apple.com>

        Remove const from WKURLRequestRef parameter to WKContextDownloadURLRequest()
        https://bugs.webkit.org/show_bug.cgi?id=137928

        Reviewed by Darin Adler.

        * UIProcess/API/C/WKContext.cpp:
        (WKContextDownloadURLRequest):
        * UIProcess/API/C/WKContext.h:

2014-10-21  Anders Carlsson  <andersca@apple.com>

        WKRemoteObjectCoder should handle floats
        https://bugs.webkit.org/show_bug.cgi?id=137926
        <rdar://problem/18695126>

        Reviewed by Beth Dakin.

        * Shared/API/Cocoa/WKRemoteObjectCoder.mm:
        (encodeInvocation):
        (-[WKRemoteObjectEncoder encodeFloat:forKey:]):
        (decodeInvocationArguments):
        (-[WKRemoteObjectDecoder decodeFloatForKey:]):

2014-10-21  Jeff Miller  <jeffm@apple.com>

        WKContext needs to provide an API to resume a download
        https://bugs.webkit.org/show_bug.cgi?id=137507

        Reviewed by Darin Adler.

        This patch adds WKContextResumeDownload(), which is only supported on the Mac, and requires the
        resume data from WKDownloadGetResumeData().

        We have to create a sandbox extension for the partially downloaded file in the UI process so the
        network or web process can resume writing to it.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::resumeDownload):
        Added, calls through to DownloadManager::resumeDownload().

        * NetworkProcess/NetworkProcess.h:
        Added resumeDownload().

        * NetworkProcess/NetworkProcess.messages.in:
        Added ResumeDownload message.

        * Shared/Downloads/Download.h:
        Added resume().

        * Shared/Downloads/DownloadManager.cpp:
        (WebKit::DownloadManager::resumeDownload):
        Added. The URL being downloaded is part of the opaque resumeData, so we can't specify it when the
        Download is constructed.

        * Shared/Downloads/DownloadManager.h:
        Added resumeDownload().

        * Shared/Downloads/ios/DownloadIOS.mm:
        (WebKit::Download::resume):
        Added, not implemented on this platform.

        * Shared/Downloads/mac/DownloadMac.mm:
        (WebKit::Download::resume):
        Added. Consumes the sandbox extension, resumes the download, and sets m_request after the
        NSURLDownload has been created. Note that we already have code to revoke the sandbox extension when
        the download is finished, canceled, or fails.

        * Shared/Downloads/soup/DownloadSoup.cpp:
        (WebKit::Download::resume):
        Added, not implemented on this platform.

        * UIProcess/API/C/WKContext.cpp:
        (WKContextResumeDownload):
        Added.

        * UIProcess/API/C/WKContext.h:
        Added WKContextResumeDownload().

        * UIProcess/WebContext.cpp:
        (WebKit::WebContext::resumeDownload):
        Added. Creates a sandbox extension for the existing file and includes it in the message to the
        network or web process.

        * UIProcess/WebContext.h:
        Added resumeDownload().

        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::resumeDownload):
        Added, calls through to DownloadManager::resumeDownload().

        * WebProcess/WebProcess.h:
        Added resumeDownload().

        * WebProcess/WebProcess.messages.in:
        Added ResumeDownload message.

2014-10-20  Michael Catanzaro  <mcatanzaro@igalia.com>

        Change the default TLS errors policy to WEBKIT_TLS_ERRORS_POLICY_FAIL
        https://bugs.webkit.org/show_bug.cgi?id=137832

        Reviewed by Carlos Garcia Campos.

        Too many general-purpose browsers that really need this policy
        are not selecting it, so let's do so for them.

        * UIProcess/API/gtk/WebKitWebContext.cpp:
        (createDefaultWebContext):

2014-10-21  Michael Catanzaro  <mcatanzaro@igalia.com>

        [SOUP] Disable SSLv3
        https://bugs.webkit.org/show_bug.cgi?id=137859

        Reviewed by Carlos Garcia Campos.

        Set G_TLS_GNUTLS_PRIORITY if unset.

        * NetworkProcess/EntryPoint/unix/NetworkProcessMain.cpp:
        (main):
        * WebProcess/EntryPoint/unix/WebProcessMain.cpp:
        (main):

2014-10-20  Chris Dumez  <cdumez@apple.com>

        ResourceRequest deserialization unnecessarily calls partitionName() on encoded cache partition
        https://bugs.webkit.org/show_bug.cgi?id=137797

        Reviewed by Darin Adler.

        This patch adds a |needsValidation| argument to
        ResourceRequest::setCachePartition() setter so that the caller can
        indicate that the partition name is valid (because it was already
        processed by partitionName() before). Use this new argument in
        ArgumentCoder<ResourceRequest>::decode() to spent a bit less time
        deserializing resource requests.

        * Shared/WebCoreArgumentCoders.cpp:
        (IPC::ArgumentCoder<ResourceRequest>::decode):

2014-10-20  Beth Dakin  <bdakin@apple.com>

        Action menu items should have tags
        https://bugs.webkit.org/show_bug.cgi?id=137898

        Reviewed by Anders Carlsson.

        * Shared/API/c/WKActionMenuItemTypes.h: Added.
        * UIProcess/API/mac/WKView.mm:
        (-[WKView _defaultMenuItemsForLink]):
        * WebKit2.xcodeproj/project.pbxproj:

2014-10-20  Beth Dakin  <bdakin@apple.com>

        Add support for action menus
        https://bugs.webkit.org/show_bug.cgi?id=137891
        rdar://problem/18451638
        rdar://problem/18694470

        Reviewed by Anders Carlsson.

        Temporary artwork needed for menu item.
        * Resources/OpenInNewWindowTemplate.pdf: Added.
        * WebKit2.xcodeproj/project.pbxproj:

        Add a preference that defaults to false for action menu support.
        * Shared/WebPreferencesDefinitions.h:
        * UIProcess/API/C/WKPreferences.cpp:
        (WKPreferencesSetActionMenuSupportEnabled):
        (WKPreferencesGetActionMenuSupportEnabled):
        * UIProcess/API/C/WKPreferencesRefPrivate.h:

        New SPI. WebKit clients can implement this method to customize the action menu.
        * UIProcess/API/Cocoa/WKViewPrivate.h:

        Create the action menu if it is supported.
        * UIProcess/API/mac/WKView.mm:
        (-[WKView initWithFrame:context:configuration:webView:]):

        Methods to implement the default menu actions.
        (-[WKView _openURLFromActionMenu:]):
        (-[WKView _addToReadingListFromActionMenu:]):
        (-[WKView _quickLookURLFromActionMenu:]):

        Add action menus support for links. Populate the menu at the right time.
        (-[WKView _defaultMenuItemsForLink]):
        (-[WKView _defaultMenuItems]):
        (-[WKView prepareForMenu:withEvent:]):
        (-[WKView _actionMenuItemsForHitTestResult:defaultActionMenuItems:]):

        New member variable caches the HitTestResult on mouse move.
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::mouseDidMoveOverElement):
        * UIProcess/WebPageProxy.h:
        (WebKit::WebPageProxy::activeActionMenuHitTestResult):

2014-10-20  Timothy Hatcher  <timothy@apple.com>

        Web Inspector: Delay and white area when Web Inspector crashes
        https://bugs.webkit.org/show_bug.cgi?id=137230

        Reviewed by Anders Carlsson.

        * UIProcess/WebInspectorProxy.cpp:
        (WebKit::processDidCrash): Added.
        (WebKit::WebInspectorProxy::eagerlyCreateInspectorPage): Hook up loader client.

2014-10-20  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: Generate all Inspector domains together in JavaScriptCore
        https://bugs.webkit.org/show_bug.cgi?id=137748

        Reviewed by Brian Burg.

        * PlatformGTK.cmake:

2014-10-19  Antti Koivisto  <antti@apple.com>

        Avoid unnecessary NSURLResponse construction for QuickLook on iOS
        https://bugs.webkit.org/show_bug.cgi?id=137876

        Reviewed by Andy Estes.

        * WebProcess/Network/WebResourceLoader.cpp:
        (WebKit::WebResourceLoader::didReceiveResponse):

            Switch to the modified QuickLookHandle interface that does not need NSURLResponse.

2014-10-16  Andy Estes  <aestes@apple.com>

        [iOS] Capture WKActionSheetAssistant's interaction with WKContentView in a @protocol
        https://bugs.webkit.org/show_bug.cgi?id=137792

        Reviewed by Tim Horton.

        WKPDFView would like to use WKActionSheetAssistant to show an action sheet when long-pressing a link, but it
        can't so long as WKActionSheetAssistant is tightly coupled to WKContentView. Resolve this by factoring
        WKActionSheetAssistant's interaction with WKContentView into a new protocol called
        WKActionSheetAssistantDelegate and having WKContentView conform to this protocol.

        * UIProcess/API/Cocoa/_WKElementAction.mm:
        (+[_WKElementAction elementActionWithTitle:actionHandler:]): Changed instances of WKContentView * to id <WKActionSheetAssistantDelegate>.
        (+[_WKElementAction elementActionWithType:customTitle:]): Ditto.
        (-[_WKElementAction _runActionWithElementInfo:delegate:]): Ditto.
        (copyElement): Deleted.
        (saveImage): Deleted.
        (-[_WKElementAction _runActionWithElementInfo:view:]): Deleted.
        * UIProcess/API/Cocoa/_WKElementActionInternal.h:
        * UIProcess/ios/WKActionSheet.h:
        * UIProcess/ios/WKActionSheet.mm:
        (-[WKActionSheet init]): Renamed from initWithView: since WKActionSheet no longer needs to know about a view.
        (-[WKActionSheet _didRotateAndLayout]): Called -[WKActionSheetDelegate updatePositionInformation].
        (-[WKActionSheet initWithView:]): Deleted.
        * UIProcess/ios/WKActionSheetAssistant.h:
        * UIProcess/ios/WKActionSheetAssistant.mm:
        (-[WKActionSheetAssistant delegate]): Added a getter for the delegate property.
        (-[WKActionSheetAssistant setDelegate:]): Added a setter for the delegate property.
        (-[WKActionSheetAssistant initWithView:]): Changed argument type from WKContentView * to UIView *.
        (-[WKActionSheetAssistant initialPresentationRectInHostViewForSheet]): Returned CGRectZero if there is no delegate.
        Otherwise, retrieved positionInformation from the delegate.
        (-[WKActionSheetAssistant presentationRectInHostViewForSheet]): Ditto.
        (-[WKActionSheetAssistant updatePositionInformation]): Called -[WKActionSheetAssistantDelegate updatePositionInformation].
        (-[WKActionSheetAssistant _createSheetWithElementActions:showLinkTitle:]): Returned early if there is no delegate.
        Otherwise, retrieved positionInformation from the delegate.
        (-[WKActionSheetAssistant showImageSheet]): Ditto.
        (-[WKActionSheetAssistant showLinkSheet]): Ditto.
        (-[WKActionSheetAssistant showDataDetectorsSheet]): Ditto.
        (-[WKActionSheetAssistant cleanupSheet]):
        * UIProcess/ios/WKContentViewInteraction.h:
        * UIProcess/ios/WKContentViewInteraction.mm:
        (-[WKContentView setupInteraction]): Installed self as WKActionSheetAssistant's delegate.
        (-[WKContentView updatePositionInformation]): Renamed from _updatePositionInformation.
        (-[WKContentView performAction:]): Renamed from _performAction:.
        (-[WKContentView openElementAtLocation:]): Called _attemptClickAtLocation:.
        (-[WKContentView actionsForElement:defaultActions:]): Called API::UIClient::actionsForElement().
        (-[WKContentView startInteractionWithElement:]): Called WebPageProxy::startInteractionWithElementAtPosition().
        (-[WKContentView stopInteraction]): Called WebPageProxy::stopInteraction().
        (-[WKContentView _updatePositionInformation]): Deleted.
        (-[WKContentView _performAction:]): Deleted.

2014-10-20  Carlos Garnacho  <carlosg@gnome.org>

        [GTK] Improve zooming gesture positioning
        https://bugs.webkit.org/show_bug.cgi?id=137822

        Reviewed by Carlos Garcia Campos.

        * UIProcess/WebPageProxy.h:
        * UIProcess/gtk/GestureController.cpp:
        (WebKit::GestureController::ZoomGesture::center):
        (WebKit::GestureController::ZoomGesture::begin):
        (WebKit::GestureController::ZoomGesture::handleZoom):
        (WebKit::GestureController::ZoomGesture::scaleChanged): Calculate
        the proper view coordinates for the current offset/scale, based
        on the initial gesture center point in document coordinates, and
        the current center/scale.
        * UIProcess/gtk/GestureController.h:
        * UIProcess/gtk/WebPageProxyGtk.cpp:
        (WebKit::WebPageProxy::getCenterForZoomGesture): Added. Synchronous
        call to retrieve the zoom gesture anchor point, in document coordinates.
        * WebProcess/WebPage/WebPage.h:
        * WebProcess/WebPage/WebPage.messages.in: Added stub.
        * WebProcess/WebPage/gtk/WebPageGtk.cpp:
        (WebKit::WebPage::getCenterForZoomGesture): Added. Getter for the
        translated coordinates used as the anchor point of the zoom gesture.

2014-10-20  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Remove the factory method from DragAndDropHandler
        https://bugs.webkit.org/show_bug.cgi?id=137872

        Reviewed by Sergio Villar Senin.

        Make the constructor public and use std::make_unique instead.

        * UIProcess/API/gtk/WebKitWebViewBase.cpp:
        (webkitWebViewBaseDragAndDropHandler):
        * UIProcess/gtk/DragAndDropHandler.cpp:
        (WebKit::DragAndDropHandler::create): Deleted.
        * UIProcess/gtk/DragAndDropHandler.h:

2014-10-20  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Add initial gestures support
        https://bugs.webkit.org/show_bug.cgi?id=137812

        Reviewed by Sergio Villar Senin.

        Now that GTK+ has support for gestures, we can use it to handle
        touch events and allow to scroll, zoom and tap with the fingers.

        * PlatformGTK.cmake: Add new files to compilation.
        * UIProcess/API/gtk/PageClientImpl.cpp:
        (WebKit::PageClientImpl::doneWithTouchEvent): When the touch event
        hasn't been handled by the web process pass it to the
        GestureController and only fallback to pointer emulation when the
        GestureController doesn't handle the event.
        * UIProcess/API/gtk/WebKitWebViewBase.cpp:
        (webkitWebViewBaseTouchEvent): If the GestureController is
        currently processing gestures is because the START touch event was
        not handled by the web process, so pass any successive touch
        events to the GestureController directly.
        (webkitWebViewBaseGestureController): Create the GestureController
        on demand and return a reference.
        * UIProcess/API/gtk/WebKitWebViewBasePrivate.h:
        * UIProcess/gtk/GestureController.cpp: Added.
        (WebKit::GestureController::create): Create a GestureController.
        (WebKit::GestureController::GestureController): Initialize the
        Gesture memebers.
        (WebKit::GestureController::handleEvent): Pass the event to the gestures.
        (WebKit::GestureController::isProcessingGestures): Whether
        Gestures are active.
        (WebKit::GestureController::Gesture::Gesture): Base class for gestures.
        (WebKit::GestureController::Gesture::isActive): Whether the
        gesture is active.
        (WebKit::GestureController::Gesture::handleEvent): Pass the event
        to the GtkGesture to process it.
        (WebKit::GestureController::DragGesture::handleDrag): Send a wheel
        event corresponding to the drag gesture to the web process.
        (WebKit::GestureController::DragGesture::handleTap): Send move,
        press and release events corresponding to a tap gesture to the web process.
        (WebKit::GestureController::DragGesture::begin): Start a drag
        gesture and schedule a timer to discard tap gesture in case of
        long press.
        (WebKit::GestureController::DragGesture::update): If the actual
        drag hasn't started yet, check the drag threshold to decide
        whether to start the drag or not. Otherwise call handleDrag() to
        send the appropriate events to the web process.
        (WebKit::GestureController::DragGesture::end): If the drag gesture
        finishes and the drag didn't happen (it wasn't a long press and
        drag threshold was not reached), call handleTap() to emulate a
        click event.
        (WebKit::GestureController::DragGesture::DragGesture): Initialize
        the GtkGestureDrag.
        (WebKit::GestureController::ZoomGesture::begin): Save the current
        page scale factor and the center point of the gesture.
        (WebKit::GestureController::ZoomGesture::scaleChanged): Schedule a
        page scale change in an idle for the given scale value.
        (WebKit::GestureController::ZoomGesture::ZoomGesture): Initialize
        the GtkGestureZoom.
        * UIProcess/gtk/GestureController.h: Added.

2014-10-19  Chris Dumez  <cdumez@apple.com>

        Use is<>() / downcast<>() for all remaining RenderObject subclasses
        https://bugs.webkit.org/show_bug.cgi?id=137845

        Reviewed by Darin Adler.

        Use is<>() / downcast<>() for all remaining RenderObject subclasses and 
        clean up the surrounding code.

        * WebProcess/Plugins/PluginView.cpp:
        (WebKit::PluginView::pluginProcessCrashed):
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::createPlugin):

2014-10-19  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Move GtkDragAndDropHelper from Platform to WebKit2
        https://bugs.webkit.org/show_bug.cgi?id=137422

        Reviewed by Martin Robinson.

        WebKitWebViewBase is currently the only user of
        GtkDragAndDropHelper, that was added to share the code with
        WebKit1. Move all the drag and drop logic to a new class
        DragAndDropHandler.

        * PlatformGTK.cmake: Add new files to compilation.
        * UIProcess/API/gtk/PageClientImpl.cpp:
        (WebKit::PageClientImpl::startDrag):
        * UIProcess/API/gtk/WebKitWebViewBase.cpp:
        (webkitWebViewBaseConstructed):
        (webkitWebViewBaseDragDataGet):
        (webkitWebViewBaseDragEnd):
        (webkitWebViewBaseDragDataReceived):
        (webkitWebViewBaseDragMotion):
        (webkitWebViewBaseDragLeave):
        (webkitWebViewBaseDragDrop):
        (webkitWebViewBaseDragAndDropHandler):
        (dragExitedCallback): Deleted.
        (webkitWebViewBaseStartDrag): Deleted.
        * UIProcess/API/gtk/WebKitWebViewBasePrivate.h:
        * UIProcess/gtk/DragAndDropHandler.cpp: Added.
        (WebKit::DragAndDropHandler::create):
        (WebKit::DragAndDropHandler::DragAndDropHandler):
        (WebKit::DragAndDropHandler::DroppingContext::DroppingContext):
        (WebKit::dragOperationToGdkDragActions):
        (WebKit::dragOperationToSingleGdkDragAction):
        (WebKit::gdkDragActionToDragOperation):
        (WebKit::DragAndDropHandler::startDrag):
        (WebKit::DragAndDropHandler::fillDragData):
        (WebKit::DragAndDropHandler::finishDrag):
        (WebKit::DragAndDropHandler::dataObjectForDropData):
        (WebKit::DragAndDropHandler::dragEntered):
        (WebKit::DragAndDropHandler::requestDragData):
        (WebKit::DragAndDropHandler::dragMotion):
        (WebKit::DragAndDropHandler::dragLeave):
        (WebKit::DragAndDropHandler::drop):
        * UIProcess/gtk/DragAndDropHandler.h: Added.

2014-10-18  Dan Bernstein  <mitz@apple.com>

        WorkQueue dispatches functions but isn‚Äôt a FunctionDispatcher
        https://bugs.webkit.org/show_bug.cgi?id=137853

        Reviewed by Anders Carlsson.

        * Platform/WorkQueue.h: Changed to inherit from FunctionDispatcher.

2014-10-18  Michael Catanzaro  <mcatanzaro@igalia.com>

        [GTK] Improve documentation of webkit_web_view_get_tls_info()
        https://bugs.webkit.org/show_bug.cgi?id=137852

        Reviewed by Martin Robinson.

        * UIProcess/API/gtk/WebKitWebView.cpp:

2014-10-17  Chris Dumez  <cdumez@apple.com>

        Use is<>() / downcast<>() for RenderBox
        https://bugs.webkit.org/show_bug.cgi?id=137804

        Reviewed by Andreas Kling.

        Use is<>() / downcast<>() for RenderBox and clean up the surrounding
        code.

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::determinePrimarySnapshottedPlugIn):
        (WebKit::WebPage::plugInIsPrimarySize):
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::sendTapHighlightForNodeIfNecessary):

2014-10-16  Simon Fraser  <simon.fraser@apple.com>

        [iOS] Turn off font autosizing for iOS WebKitTestRunner
        https://bugs.webkit.org/show_bug.cgi?id=137806

        Reviewed by Sam Weinig.
        
        Confusingly, WKPreferencesSetTextAutosizingEnabled() does nothing on iOS.
        Instead, we have to add WKPreferencesSetMinimumZoomFontSize() and set it to 0
        to disable font autosizing.

        * UIProcess/API/C/WKPreferences.cpp:
        (WKPreferencesSetMinimumZoomFontSize):
        (WKPreferencesGetMinimumZoomFontSize):
        * UIProcess/API/C/WKPreferencesRefPrivate.h:

2014-10-17  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        [EFL] REGRESSION(r173929): It broke the Web Inspector
        https://bugs.webkit.org/show_bug.cgi?id=137522

        Reviewed by Csaba Osztrogon√°c.

        r173929 let web inspector use a separate web process. Besides it changed that the inspector is shown
        as docking mode by default. However EFL port doesn't support to show web inspector as docking window yet.
        This patch is to show web inspector on EFL new window as before. Docking mode should be implemented by
        upcoming patch.

        * UIProcess/efl/WebInspectorProxyEfl.cpp:
        (WebKit::WebInspectorProxy::platformAttach):

2014-10-17  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GLIB] Add API to GMainLoopSource to schedule sources after a delay in microseconds
        https://bugs.webkit.org/show_bug.cgi?id=137782

        Reviewed by Sergio Villar Senin.

        * WebProcess/WebPage/gtk/LayerTreeHostGtk.cpp:
        (WebKit::LayerTreeHostGtk::layerFlushTimerFired): Use microseconds
        instead of milliseconds.

2014-10-17  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Move touch events handling from Platform to WebKit2
        https://bugs.webkit.org/show_bug.cgi?id=137735

        Reviewed by Sergio Villar Senin.

        GtkTouchContextHelper was only used by WebKitWebViewBase, since
        it's the only one that can create touch events. The code has been
        simplified by processing the events in the view, and the native
        touch events are now created with the native event and touch points.

        * Shared/NativeWebTouchEvent.h:
        (WebKit::NativeWebTouchEvent::touchContext): Deleted.
        * Shared/gtk/NativeWebTouchEventGtk.cpp:
        (WebKit::NativeWebTouchEvent::NativeWebTouchEvent): Pass touch
        points instead of touch context to WebEventFactory::createWebTouchEvent().
        * Shared/gtk/WebEventFactory.cpp:
        (WebKit::WebEventFactory::createWebTouchEvent): Create the
        WebTouchEvent for the given native event and points.
        (WebKit::touchPhaseFromEvents): Deleted.
        (WebKit::appendTouchEvent): Deleted.
        * Shared/gtk/WebEventFactory.h:
        * UIProcess/API/gtk/WebKitWebViewBase.cpp:
        (appendTouchEvent): Helper function to create a
        WebPlatformTouchPoint for the given native event and add it to the
        list of touch points.
        (webkitWebViewBaseGetTouchPointForEvent): Build the touch point
        list for the event.
        (webkitWebViewBaseTouchEvent): Process the touch event.
        (webkitWebViewBaseDragDataReceived): Deleted.

2014-10-16  Pascal Jacquemart  <p.jacquemart@samsung.com>

        Removing CUSTOM_PROTOCOLS guard
        https://bugs.webkit.org/show_bug.cgi?id=137741

        Reviewed by Benjamin Poulain.

        * NetworkProcess/NetworkProcess.cpp:
        (WebKit::NetworkProcess::NetworkProcess):
        * Shared/Network/CustomProtocols/Cocoa/CustomProtocolManagerCocoa.mm:
        * Shared/Network/CustomProtocols/CustomProtocolManager.h:
        * Shared/Network/CustomProtocols/CustomProtocolManager.messages.in:
        * Shared/Network/CustomProtocols/soup/CustomProtocolManagerImpl.cpp:
        * Shared/Network/CustomProtocols/soup/CustomProtocolManagerImpl.h:
        * Shared/Network/CustomProtocols/soup/CustomProtocolManagerSoup.cpp:
        * Shared/Network/NetworkProcessCreationParameters.cpp:
        (WebKit::NetworkProcessCreationParameters::encode):
        (WebKit::NetworkProcessCreationParameters::decode):
        * Shared/Network/NetworkProcessCreationParameters.h:
        * Shared/WebProcessCreationParameters.cpp:
        (WebKit::WebProcessCreationParameters::encode):
        (WebKit::WebProcessCreationParameters::decode):
        * Shared/WebProcessCreationParameters.h:
        * UIProcess/API/C/soup/WKAPICastSoup.h:
        * UIProcess/API/C/soup/WKSoupCustomProtocolRequestManager.cpp:
        (WKSoupCustomProtocolRequestManagerGetTypeID):
        (WKSoupCustomProtocolRequestManagerSetClient):
        * UIProcess/Network/CustomProtocols/CustomProtocolManagerProxy.h:
        * UIProcess/Network/CustomProtocols/CustomProtocolManagerProxy.messages.in:
        * UIProcess/Network/CustomProtocols/mac/CustomProtocolManagerProxyMac.mm:
        * UIProcess/Network/CustomProtocols/soup/CustomProtocolManagerProxySoup.cpp:
        * UIProcess/Network/CustomProtocols/soup/WebSoupCustomProtocolRequestManager.cpp:
        * UIProcess/Network/CustomProtocols/soup/WebSoupCustomProtocolRequestManager.h:
        * UIProcess/Network/CustomProtocols/soup/WebSoupCustomProtocolRequestManagerClient.cpp:
        * UIProcess/Network/CustomProtocols/soup/WebSoupCustomProtocolRequestManagerClient.h:
        * UIProcess/Network/NetworkProcessProxy.cpp:
        (WebKit::NetworkProcessProxy::NetworkProcessProxy):
        * UIProcess/Network/NetworkProcessProxy.h:
        * UIProcess/WebContext.cpp:
        (WebKit::WebContext::WebContext):
        (WebKit::WebContext::unregisterGlobalURLSchemeAsHavingCustomProtocolHandlers):
        (WebKit::WebContext::unregisterSchemeForCustomProtocol):
        * UIProcess/WebContext.h:
        * UIProcess/WebProcessProxy.cpp:
        (WebKit::WebProcessProxy::WebProcessProxy):
        * UIProcess/WebProcessProxy.h:
        * UIProcess/mac/WebContextMac.mm:
        (WebKit::WebContext::platformInitializeWebProcess):
        (WebKit::WebContext::platformInitializeNetworkProcess):
        * WebKit2Prefix.h:
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::WebProcess):
        * WebProcess/soup/WebKitSoupRequestGeneric.cpp:
        (webkitSoupRequestGenericSendAsync):
        (webkitSoupRequestGenericSendFinish):
        * WebProcess/soup/WebKitSoupRequestGeneric.h:

2014-10-16  Simon Fraser  <simon.fraser@apple.com>

        Crash under RemoteLayerTreeHost::getLayer() when closing a tab
        https://bugs.webkit.org/show_bug.cgi?id=137796
        rdar://problem/18547565

        Reviewed by Tim Horton.
        
        CA can call our animation delegate after the RemoteLayerTreeHost has been
        destroyed. CAAnimation retains its delegate, so it's safe for us to null out
        the WKAnimationDelegate's pointer to the RemoteLayerTreeHost when tearing down
        the RemoteLayerTreeHost.

        * UIProcess/mac/RemoteLayerTreeHost.mm:
        (WebKit::RemoteLayerTreeHost::~RemoteLayerTreeHost):
        (WebKit::RemoteLayerTreeHost::animationDidEnd):
        * WebProcess/WebPage/mac/PlatformCAAnimationRemote.mm:
        (-[WKAnimationDelegate invalidate]):
        (-[WKAnimationDelegate animationDidStart:]):
        (-[WKAnimationDelegate animationDidStop:finished:]):

2014-10-16  Tim Horton  <timothy_horton@apple.com>

        Implement selection services menu for Legacy WebKit
        https://bugs.webkit.org/show_bug.cgi?id=137582
        <rdar://problem/18604241>

        Reviewed by Brady Eidson.

        * UIProcess/mac/WebContextMenuProxyMac.mm:
        (-[WKSharingServicePickerDelegate sharingService:didShareItems:]):
        Add a note that we should transition to using replaceSelectionWithAttributedString.

        * WebProcess/WebPage/mac/WebPageMac.mm:
        (WebKit::WebPage::handleSelectionServiceClick):
        Allow editor services in editable-but-not-rich-text areas, just like in WebKit1.

2014-10-16  Tim Horton  <timothy_horton@apple.com>

        Various crashes in ViewGestureControllerIOS when closing a tab while a swipe gesture is in progress
        https://bugs.webkit.org/show_bug.cgi?id=137770
        <rdar://problem/17916459>

        Reviewed by Dan Bernstein.

        When tearing down a WKWebView in the middle of a swipe gesture, a variety of
        UI process crashes were observed. First, two uses of potentially deleted objects
        (the WebBackForwardListItem and ViewGestureController), which were fixed by
        extending the object's lifetime and checking for its liveness, respectively.
        Second, a potential null-deref of DrawingArea if the timing of endSwipeGesture
        vs. page teardown was such that DrawingArea was null but everything else was in line.
        Lastly, another case of messaging a potentially deleted object (specifically,
        the _UIViewControllerTransitionContext's animator) in a callback from CA, which
        was fixed by nulling out the animator (and a few other properties) when tearing
        down the ViewGestureController.

        * UIProcess/ios/ViewGestureControllerIOS.mm:
        (-[WKSwipeTransitionController invalidate]):
        Clear the soon-to-be-invalid ViewGestureController pointer.

        (WebKit::ViewGestureController::~ViewGestureController):
        Call [WKSwipeTransitionController invalidate] upon destruction.
        Clear our transition context's interactor and animator, and inform it that
        the transition is not in flight. This avoids a crash when calling back
        to the already-destroyed animator later.

        (WebKit::ViewGestureController::beginSwipeGesture):
        Keep a reference to the target WebBackForwardListItem; this avoids
        it being deleted between here and the transition completion block firing.

        Look up the ViewGestureController by pageID, just like we do in endSwipeGesture,
        to avoid situations where the callback fires after the WKWebView/ViewGestureController
        have gone away.

        Hold on to our _UIViewControllerOneToOneTransitionContext, so that we can do the
        aforementioned clearing upon deallocation.

        (WebKit::ViewGestureController::endSwipeGesture):
        Null check the DrawingArea. If it is null, instead of doing our normal delayed logic
        for swipe snapshot teardown, just put things back together immediately.

        (WebKit::ViewGestureController::removeSwipeSnapshot):
        Clear m_swipeTransitionContext.

2014-10-16  Antti Koivisto  <antti@apple.com>

        REGRESSION (r173356): Downloading a disk image appends ".txt" to it
        https://bugs.webkit.org/show_bug.cgi?id=137493
        <rdar://problem/18321947>

        Reviewed by Alexey Proskuryakov.

        * Shared/Downloads/ios/DownloadIOS.mm:
        (WebKit::Download::startWithHandle):
        * Shared/Downloads/mac/DownloadMac.mm:
        (WebKit::Download::startWithHandle):

            It appears that the synthesized NS/CFURLResponse fails to serialize the suggested filename correctly
            unless it has been accessed first.

2014-10-15  Dan Bernstein  <mitz@apple.com>

        [Cocoa] "Plug-in will handle load" error isn't declared in the modern API
        https://bugs.webkit.org/show_bug.cgi?id=137747

        Reviewed by Anders Carlsson.

        * UIProcess/API/Cocoa/WKError.mm: Define _WKLegacyErrorDomain.
        * UIProcess/API/Cocoa/WKErrorInternal.h: Changed to import WKErrorPrivate.h.
        * UIProcess/API/Cocoa/WKErrorPrivate.h: Added. Declares _WKLegacyErrorDomain
        and _WKLegacyErrorPlugInWillHandleLoad.
        * WebKit2.xcodeproj/project.pbxproj: Added new private header.

2014-10-15  Chris Dumez  <cdumez@apple.com>

        Use is<>() / downcast<>() for TransformOperation subclasses
        https://bugs.webkit.org/show_bug.cgi?id=137731

        Reviewed by Darin Adler.

        Use is<>() / downcast<>() for TransformOperation subclasses and clean
        up the surrounding code.

        * Shared/CoordinatedGraphics/CoordinatedGraphicsArgumentCoders.cpp:
        (IPC::ArgumentCoder<TransformOperations>::encode):

2014-10-15  Alexey Proskuryakov  <ap@apple.com>

        [Mac] Allow some Kerberos related paths in sandbox
        https://bugs.webkit.org/show_bug.cgi?id=137666
        rdar://problem/17965010

        Reviewed by Darin Adler.

        * NetworkProcess/mac/com.apple.WebKit.NetworkProcess.sb.in:
        * WebProcess/com.apple.WebProcess.sb.in:

2014-10-15  Alexey Proskuryakov  <ap@apple.com>

        [Mac] Allow plug-ins to read managed preferences
        https://bugs.webkit.org/show_bug.cgi?id=137665
        <rdar://problem/18255601>

        Reviewed by Darin Adler.

        * Resources/PlugInSandboxProfiles/com.apple.WebKit.plugin-common.sb:

2014-10-14  Joonghun Park  <jh718.park@samsung.com>

        [WK2][EFL] Fix the problem that threads created by a DispatchQueueEfl are not destroyed
        even after the DispatchQueueEfl has been destructed
        https://bugs.webkit.org/show_bug.cgi?id=137195

        Reviewed by Gyuyoung Kim.

        Linux and Unix System's pthreads are created in joinable state by default.
        If threads aren't destructed explicitly, it will be still live
        until process which created the thread is dead.
        Besides it may cause out of capacity range of thread creation in a process.
        It is one of hidden defects.
        This patch calls detachThread() to detach thread immediately after it is created.
        So the thread can be destroyed as soon as the thread's ThreadContext::function()
        returns.

        * Platform/efl/DispatchQueueEfl.cpp:
        (DispatchQueue::ThreadContext::start):

2014-10-14  Chris Dumez  <cdumez@apple.com>

        Use is<>() / downcast<>() for PlatformCAAnimation subclasses
        https://bugs.webkit.org/show_bug.cgi?id=137722

        Reviewed by Simon Fraser.

        Use is<>() / downcast<>() for PlatformCAAnimation subclasses and clean
        up the surrounding code.

        * WebProcess/WebPage/mac/PlatformCAAnimationRemote.h:
        * WebProcess/WebPage/mac/PlatformCAAnimationRemote.mm:
        (WebKit::PlatformCAAnimationRemote::copy):
        (WebKit::PlatformCAAnimationRemote::copyTimingFunctionFrom):
        (WebKit::PlatformCAAnimationRemote::copyFromValueFrom):
        (WebKit::PlatformCAAnimationRemote::copyToValueFrom):
        (WebKit::PlatformCAAnimationRemote::copyValuesFrom):
        (WebKit::PlatformCAAnimationRemote::copyKeyTimesFrom):
        (WebKit::PlatformCAAnimationRemote::copyTimingFunctionsFrom):
        * WebProcess/WebPage/mac/PlatformCALayerRemote.cpp:
        (WebKit::PlatformCALayerRemote::addAnimationForKey):
        (WebKit::PlatformCALayerRemote::animationStarted):
        * WebProcess/WebPage/mac/PlatformCALayerRemote.h:
        * WebProcess/WebPage/mac/TiledCoreAnimationDrawingArea.mm:
        (WebKit::TiledCoreAnimationDrawingArea::commitTransientZoom):

2014-10-14  Alexey Proskuryakov  <ap@apple.com>

        REGRESSION (r165356): Issues with Japanese text input
        https://bugs.webkit.org/show_bug.cgi?id=137719
        rdar://problem/18431952
        rdar://problem/18483741

        Reviewed by Darin Adler.

        * WebProcess/WebPage/WebPage.cpp: (WebKit::WebPage::didChangeSelection):
        In sync code path, ensure consistent message delivery order by adding
        a DispatchMessageEvenWhenWaitingForSyncReply flag. This way, delayed
        EditorStateChanged messages won't confuse UI process.

2014-10-14  Anders Carlsson  <andersca@apple.com>

        Hide the find indicator when starting a swipe
        https://bugs.webkit.org/show_bug.cgi?id=137711

        Reviewed by Tim Horton.

        * UIProcess/mac/PageClientImpl.mm:
        (WebKit::PageClientImpl::navigationGestureDidBegin):

2014-10-14  Chris Dumez  <cdumez@apple.com>

        Use is<>() / downcast<>() for RenderImage
        https://bugs.webkit.org/show_bug.cgi?id=137683

        Reviewed by Mihnea Ovidenie.

        Use is<>() / downcast<>() for RenderImage.

        * WebProcess/WebCoreSupport/mac/WebDragClientMac.mm:
        (WebKit::cachedImage):
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::performActionOnElement):

2014-10-13  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][CMake] Non-ninja build is broken since r174422
        https://bugs.webkit.org/show_bug.cgi?id=137656

        Reviewed by Philippe Normand.

        Make WebKit2-forwarding-headers depend only on static,
        non-generated sources.

        * CMakeLists.txt:
        * PlatformGTK.cmake:

2014-10-13  Chris Dumez  <cdumez@apple.com>

        Use is<>() / downcast<>() for PlatformCALayer subclasses
        https://bugs.webkit.org/show_bug.cgi?id=137661

        Reviewed by Simon Fraser.

        Use is<>() / downcast<>() for PlatformCALayer subclasses and clean up 
        the surrounding code.

        * WebProcess/WebPage/mac/PlatformCALayerRemote.cpp:
        (WebKit::PlatformCALayerRemote::~PlatformCALayerRemote):
        (WebKit::PlatformCALayerRemote::updateClonedLayerProperties):
        (WebKit::PlatformCALayerRemote::recursiveBuildTransaction):
        (WebKit::PlatformCALayerRemote::setSublayers):
        (WebKit::PlatformCALayerRemote::appendSublayer):
        (WebKit::PlatformCALayerRemote::insertSublayer):
        (WebKit::PlatformCALayerRemote::replaceSublayer):
        (WebKit::PlatformCALayerRemote::adoptSublayers):
        (WebKit::PlatformCALayerRemote::setMask):
        (WebKit::PlatformCALayerRemote::copyFiltersFrom):
        * WebProcess/WebPage/mac/PlatformCALayerRemote.h:
        * WebProcess/WebPage/mac/PlatformCALayerRemoteCustom.h:
        * WebProcess/WebPage/mac/RemoteLayerTreeContext.mm:
        (WebKit::RemoteLayerTreeContext::buildTransaction):

2014-10-13  Chris Dumez  <cdumez@apple.com>

        Use is<>() / downcast<>() for Filter / FilterOperation subclasses
        https://bugs.webkit.org/show_bug.cgi?id=137644

        Reviewed by Darin Adler.

        Use is<>() / downcast<>() for Filter / FilterOperation subclasses.

        * Shared/CoordinatedGraphics/CoordinatedGraphicsArgumentCoders.cpp:
        (IPC::ArgumentCoder<WebCore::FilterOperations>::encode):
        * Shared/WebCoreArgumentCoders.cpp:
        (IPC::ArgumentCoder<FilterOperation>::encode):
        * Shared/mac/RemoteLayerTreeTransaction.mm:
        (WebKit::RemoteLayerTreeTextStream::operator<<):

2014-10-12  Sergio Villar Senin  <svillar@igalia.com>

        [SOUP] [WK2] WebProcess and NetworkProcess initialization clears cache contents
        https://bugs.webkit.org/show_bug.cgi?id=137489

        Reviewed by Carlos Garcia Campos.

        Temporarily set the SoupCache's maximum size to a huge value
        before calling soup_cache_load() so that the cache is not shrinked
        to the default value.

        * NetworkProcess/soup/NetworkProcessSoup.cpp:
        (WebKit::NetworkProcess::platformInitializeNetworkProcess):
        * WebProcess/soup/WebProcessSoup.cpp:
        (WebKit::WebProcess::platformInitializeWebProcess):

2014-10-12  Ryuan Choi  <ryuan.choi@gmail.com>

        [EFL] Introduce EWebKit_Extension
        https://bugs.webkit.org/show_bug.cgi?id=134921

        Reviewed by Gyuyoung Kim.

        EWebKit2 does not provide the functionality to extend WebProcess.
        Although there is ewk_context_new_with_injected_bundle_path() in ewebkit2 APIs,
        application developers can not make bundle object without touching WK APIs
        which ewebkit2 does not expose.

        This patch introduces EWebKit_Extension, basic structure for the extension of WebProcess.

        * PlatformEfl.cmake:
        Added files for the EWebKit_Extension and install them properly.
        * UIProcess/API/efl/ewk_context.cpp:
        (EwkContext::EwkContext):
        (bundlePathForExtension):
        (EwkContext::create):
        (EwkContext::getInjectedBundleInitializationUserData):
        (EwkContext::setMessageFromInjectedBundleCallback):
        (ewk_context_new_with_extensions_path):
        Deleted because ewebkit2 does not have a way to make injected bundle.
        Instead, Ewk_Extension will cover the same functionalities.
        (ewk_context_new_with_injected_bundle_path): Deleted.
        * UIProcess/API/efl/ewk_context.h:
        * UIProcess/API/efl/ewk_context_private.h:
        (EwkContext::extensionsPath):
        * UIProcess/API/efl/tests/InjectedBundle/injected_bundle_sample.cpp: Removed.
        * UIProcess/API/efl/tests/UnitTestUtils/EWK2UnitTestEnvironment.cpp:
        (EWK2UnitTest::EWK2UnitTestEnvironment::extensionSample):
        (EWK2UnitTest::EWK2UnitTestEnvironment::injectedBundleSample): Renamed injectedBundleSample to extensionSample.
        * UIProcess/API/efl/tests/UnitTestUtils/EWK2UnitTestEnvironment.h:
        * UIProcess/API/efl/tests/extensions/extension_sample.cpp: Copied from Source/WebKit2/UIProcess/API/efl/tests/InjectedBundle/injected_bundle_sample.cpp.
        * UIProcess/API/efl/tests/test_ewk2_context.cpp: Renamed ewk_context_new_with_injected_bundle_path to ewk_context_new_with_extensions_path.
        (TEST_F):
        * WebProcess/InjectedBundle/API/efl/EWebKit_Extension.h: Added.
        * WebProcess/InjectedBundle/API/efl/ewk_extension.cpp: Added.
        (EwkExtension::append):
        (EwkExtension::remove):
        (ewk_extension_client_add):
        (ewk_extension_client_del):
        * WebProcess/InjectedBundle/API/efl/ewk_extension.h: Added.
        * WebProcess/InjectedBundle/API/efl/ewk_extension_private.h: Added.
        (EwkExtension::EwkExtension):
        (EwkExtension::~EwkExtension):
        * WebProcess/efl/ExtensionManagerEfl.cpp: Added.
        (WebKit::ExtensionManagerEfl::shared):
        (WebKit::ExtensionManagerEfl::ExtensionManagerEfl):
        (WebKit::ExtensionManagerEfl::initialize):
        * WebProcess/efl/ExtensionManagerEfl.h: Added.
        * WebProcess/efl/WebInjectedBundleMainEfl.cpp: Added.
        (WKBundleInitialize):
        * efl/ewebkit2-extension.pc.in: Added.

2014-10-10  Chris Dumez  <cdumez@apple.com>

        Use is<>() / downcast<>() for Image subclasses
        https://bugs.webkit.org/show_bug.cgi?id=137625

        Reviewed by Andreas Kling.

        Use is<>() / downcast<>() for Image subclasses.

        * WebProcess/Plugins/PluginView.cpp:
        (WebKit::PluginView::pluginSnapshotTimerFired):

2014-10-10  Chris Dumez  <cdumez@apple.com>

        Use is<>() / downcast<>() for GraphicsLayer subclasses
        https://bugs.webkit.org/show_bug.cgi?id=137595

        Reviewed by Darin Adler.

        Use is<>() / downcast<>() for GraphicsLayer subclasses and clean up the
        surrounding code.

        * WebProcess/WebPage/mac/GraphicsLayerCARemote.h:
        * WebProcess/WebPage/mac/RemoteLayerTreeDrawingArea.mm:
        (WebKit::RemoteLayerTreeDrawingArea::flushLayers):
        * WebProcess/WebPage/mac/TiledCoreAnimationDrawingArea.mm:
        (WebKit::TiledCoreAnimationDrawingArea::layerForTransientZoom):
        (WebKit::TiledCoreAnimationDrawingArea::shadowLayerForTransientZoom):

2014-10-10  Pascal Jacquemart  <p.jacquemart@samsung.com>

        Fix debug build on EFL after r174584
        https://bugs.webkit.org/show_bug.cgi?id=137613

        Reviewed by Christophe Dumez.

        * UIProcess/efl/RequestManagerClientEfl.cpp:
        (WebKit::RequestManagerClientEfl::RequestManagerClientEfl):

2014-10-10  Chris Dumez  <cdumez@apple.com>

        Use is<>() / downcast<>() for RenderBoxModelObject
        https://bugs.webkit.org/show_bug.cgi?id=137587

        Reviewed by Mihnea Ovidenie.

        Use is<>() / downcast<>() for RenderBoxModelObject and clean up the
        surrounding code.

        * WebProcess/Plugins/PluginView.cpp:
        (WebKit::PluginView::renderer):
        (WebKit::PluginView::invalidateRect):

2014-10-10  Pascal Jacquemart  <p.jacquemart@samsung.com>

        [SOUP] Remove custom URI schemes implementation
        https://bugs.webkit.org/show_bug.cgi?id=128169

        Reviewed by Carlos Garcia Campos.

        * Shared/WebProcessCreationParameters.cpp:
        (WebKit::WebProcessCreationParameters::encode):
        (WebKit::WebProcessCreationParameters::decode):
        * Shared/WebProcessCreationParameters.h:
        * UIProcess/API/C/soup/WKAPICastSoup.h:
        * UIProcess/API/C/soup/WKContextSoup.cpp: Removed.
        * UIProcess/API/C/soup/WKSoupRequestManager.cpp: Removed.
        * UIProcess/WebContext.cpp:
        (WebKit::WebContext::WebContext):
        * UIProcess/WebPageProxy.cpp:
        (WebKit::WebPageProxy::didReceiveURIRequest): Deleted.
        * UIProcess/WebPageProxy.h:
        * UIProcess/WebPageProxy.messages.in:
        * UIProcess/soup/WebSoupRequestManagerClient.cpp: Removed.
        * UIProcess/soup/WebSoupRequestManagerProxy.cpp: Removed.
        * UIProcess/soup/WebSoupRequestManagerProxy.messages.in: Removed.
        * WebProcess/WebProcess.cpp:
        (WebKit::WebProcess::WebProcess):
        * WebProcess/soup/WebKitSoupRequestGeneric.cpp:
        (webkitSoupRequestGenericSendAsync):
        (webkitSoupRequestGenericSendFinish):
        * WebProcess/soup/WebProcessSoup.cpp:
        (WebKit::WebProcess::platformInitializeWebProcess):
        * WebProcess/soup/WebSoupRequestManager.cpp: Removed.
        * WebProcess/soup/WebSoupRequestManager.messages.in: Removed.

2014-10-09  Dean Jackson  <dino@apple.com>

        Remove ENABLE_CSS3_CONDITIONAL_RULES
        https://bugs.webkit.org/show_bug.cgi?id=137571

        Reviewed by Simon Fraser.

        * Configurations/FeatureDefines.xcconfig:

2014-10-09  Tim Horton  <timothy_horton@apple.com>

        Move ServicesOverlayController to WebCore
        https://bugs.webkit.org/show_bug.cgi?id=137416
        <rdar://problem/18546283>

        Reviewed by Anders Carlsson.

        * Platform/Logging.h:
        Move Services logging channel to WebCore.

        * WebKit2.xcodeproj/project.pbxproj:
        * WebProcess/WebCoreSupport/WebChromeClient.cpp:
        (WebKit::WebChromeClient::handleTelephoneNumberClick):
        (WebKit::WebChromeClient::handleSelectionServiceClick):
        (WebKit::WebChromeClient::hasRelevantSelectionServices):
        Implement services-related ChromeClient callbacks.
        Clicks are forwarded to WebPageMac where they do what they used to;
        hasRelevantSelectionServices is implemented as it was when it lived
        inside ServicesOverlayController.

        * WebProcess/WebCoreSupport/WebChromeClient.h:
        * WebProcess/WebCoreSupport/WebEditorClient.cpp:
        (WebKit::WebEditorClient::selectedTelephoneNumberRangesChanged): Deleted.
        (WebKit::WebEditorClient::selectionRectsDidChange): Deleted.
        * WebProcess/WebCoreSupport/WebEditorClient.h:
        Remove WebEditorClient overrides for now-removed functions.

        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::WebPage):
        (WebKit::WebPage::updatePreferences):
        Forward serviceControlsEnabled setting to WebCore.

        (WebKit::WebPage::servicesOverlayController): Deleted.
        * WebProcess/WebPage/WebPage.h:
        (WebKit::WebPage::serviceControlsEnabled): Deleted.

2014-10-09  Andy Estes  <aestes@apple.com>

        [iOS] Crash in CFURLDownloadClient.didFail if the download has a null resumeData
        https://bugs.webkit.org/show_bug.cgi?id=137551

        Reviewed by David Kilzer.

        CFDataGetBytePtr() and CFDataGetLength() crash if passed a null value.

        * Shared/Downloads/ios/DownloadIOS.mm:
        (WebKit::setUpDownloadClient):

2014-10-09  Carlos Garcia Campos  <cgarcia@igalia.com>

        [X11] Plugin process crashes in NetscapePlugin::platformPostInitialize()
        https://bugs.webkit.org/show_bug.cgi?id=137426

        Reviewed by Darin Adler.

        For some reason flash crashes when NPP_GetValue is called with
        NPPVpluginCancelSrcStream, but only in windowed mode. Not calling
        NPP_GetValue and unconditionally loading the source URL in the
        browser fixes the crash and plugins work normally. We can handle
        this particular case with a new quirk.

        * Shared/Plugins/Netscape/x11/NetscapePluginModuleX11.cpp:
        (WebKit::NetscapePluginModule::determineQuirks): Add
        DoNotCancelSrcStreamInWindowedMode quirk if it's flash plugin.
        * Shared/Plugins/PluginQuirks.h: Add
        DoNotCancelSrcStreamInWindowedMode quirk.
        * WebProcess/Plugins/Netscape/NetscapePlugin.cpp:
        (WebKit::NetscapePlugin::shouldLoadSrcURL): Return early if plugin
        is windowed and DoNotCancelSrcStreamInWindowedMode quirk is present.

2014-10-09  Chris Dumez  <cdumez@apple.com>

        Use is<>() / downcast<>() for Widget subclasses
        https://bugs.webkit.org/show_bug.cgi?id=137549

        Reviewed by Darin Adler.

        Use is<>() / downcast<>() for Widget subclasses and clean up the
        surrounding code.

        * Shared/WebRenderObject.cpp:
        (WebKit::WebRenderObject::WebRenderObject):

2014-10-08  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Use the PageLoadState observer also to monitor title and estimated load progress
        https://bugs.webkit.org/show_bug.cgi?id=136997

        Reviewed by Gustavo Noronha Silva.

        * UIProcess/API/gtk/WebKitLoaderClient.cpp:
        (attachLoaderClientToView): Remove implementation of
        didReceiveTitleForFrame, didStartProgress, didChangeProgress and
        didFinishProgress.
        (didReceiveTitleForFrame): Deleted.
        (didChangeProgress): Deleted.
        * UIProcess/API/gtk/WebKitWebView.cpp:
        (webkit_web_view_get_estimated_load_progress): Return the value
        directly from the PageLoadState object, since we don't need to
        cache the value anymore.
        (webkitWebViewSetTitle): Deleted.
        (webkitWebViewSetEstimatedLoadProgress): Deleted.
        * UIProcess/API/gtk/WebKitWebViewPrivate.h:

2014-10-08  Carlos Garcia Campos  <cgarcia@igalia.com>

        Race condition with WebKitWebView:is-loading after starting page load
        https://bugs.webkit.org/show_bug.cgi?id=136692

        Reviewed by Gustavo Noronha Silva.

        Use PageLoadState::Observer to update both is-loading and uri
        properties, instead of manually update them. This ensures that our
        web view is always in sync with the WebPageProxy so that
        webkit_web_view_is_loading() returns true right after requesting
        any load. We still need to manually set the is-loading property
        only in the case where we delay the emission of the load-changed
        signals when waiting for the main resource. The bahaviour is a bit
        different but still consistent with what our API documentation says.

        * UIProcess/API/gtk/WebKitLoaderClient.cpp:
        (attachLoaderClientToView): Remove
        didSameDocumentNavigationForFrame implementation, since we are
        already notified about the URL change by the PageLoadState::Observer.
        (didSameDocumentNavigationForFrame): Deleted.
        * UIProcess/API/gtk/WebKitWebView.cpp:
        (webkitWebViewSetIsLoading): No longer update the URI when
        changing the is-loading property.
        (webkitWebViewConstructed): Crate a PageLoadStateObserver and add
        it to the PageLoadState.
        (webkitWebViewDispose): Remove the PageLoadStateObserver from the PageLoadState.
        (webkitWebViewEmitLoadChanged): Add isDelayedEvent parameter to
        update the is-loading property accordingly when emitting the
        delayed events.
        (webkitWebViewEmitDelayedLoadEvents): Pass true as isDelayedEvent
        parameter of webkitWebViewEmitLoadChanged().
        (webkitWebViewLoadChanged): Pass false as isDelayedEvent parameter
        of webkitWebViewEmitLoadChanged().
        (webkitWebViewLoadFailed):
        (webkitWebViewLoadFailedWithTLSErrors):
        (webkitWebViewUpdateURI): Deleted.
        * UIProcess/API/gtk/WebKitWebViewPrivate.h:

2014-10-08  Christophe Dumez  <cdumez@apple.com>

        Use is<>() / downcast<>() for RenderBlock objects
        https://bugs.webkit.org/show_bug.cgi?id=137512

        Reviewed by Darin Adler.

        Use is<>() / downcast<>() for RenderBlock objects and clean up the 
        surrounding code.

        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::rangeForWebSelectionAtPosition):
        (WebKit::WebPage::contractedRangeFromHandle):

2014-10-08  Ada Chan  <adachan@apple.com>

        Implement WKPageIsPlayingAudio().
        https://bugs.webkit.org/show_bug.cgi?id=137048

        Reviewed by Darin Adler.

        * UIProcess/API/C/WKPage.cpp:
        (WKPageIsPlayingAudio):

2014-10-08  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        [EFL][CoordinatedGraphics] All EFL layout tests are broken since r174231
        https://bugs.webkit.org/show_bug.cgi?id=137443

        Reviewed by Zoltan Herczeg.

        EFL layout test and MiniBrowser have broken since r174231. r174231 was to move PageOverlay implementation
        from WebKit2 to WebCore with lazy initializing of PageOverlayController. It caused all EFL layout tests
        crash and build break. To restore EFL layout test, this patch sets viewOverlayRootLayer through
        attachViewOverlayGraphicsLayer() as mac port's one in r174231.

        * WebProcess/WebPage/CoordinatedGraphics/CoordinatedDrawingArea.cpp:
        (WebKit::CoordinatedDrawingArea::attachViewOverlayGraphicsLayer):
        * WebProcess/WebPage/CoordinatedGraphics/CoordinatedDrawingArea.h:
        * WebProcess/WebPage/CoordinatedGraphics/CoordinatedLayerTreeHost.cpp:
        (WebKit::CoordinatedLayerTreeHost::CoordinatedLayerTreeHost):
        (WebKit::CoordinatedLayerTreeHost::updateRootLayers):
        (WebKit::CoordinatedLayerTreeHost::setViewOverlayRootLayer):
        (WebKit::CoordinatedLayerTreeHost::setRootCompositingLayer):
        (WebKit::CoordinatedLayerTreeHost::didFlushRootLayer):
        * WebProcess/WebPage/CoordinatedGraphics/CoordinatedLayerTreeHost.h:

2014-10-08  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r174335.
        https://bugs.webkit.org/show_bug.cgi?id=137515

        It broke EFL layout test totally (Requested by gyuyoung on
        #webkit).

        Reverted changeset:

        "[EFL] Introduce EWebKit_Extension"
        https://bugs.webkit.org/show_bug.cgi?id=134921
        http://trac.webkit.org/changeset/174335

2014-10-08  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Make forwarding headers generation depend on source code
        https://bugs.webkit.org/show_bug.cgi?id=137394

        Reviewed by Philippe Normand.

        Only run generate-forwarding-headers.pl when source code changes
        and use a different target for the symlinks.

        * PlatformGTK.cmake:

2014-10-07  Pascal Jacquemart  <p.jacquemart@samsung.com>

        [EFL] Enable custom URI schemes with CustomProtocols
        https://bugs.webkit.org/show_bug.cgi?id=128177

        Reviewed by Gyuyoung Kim.

        Fixing ewk_context_url_scheme_register() ewebkit2 API
        rely on r162449 - CustomProtocols implementation from Carlos Garcia Campos

        * PlatformEfl.cmake:
        * UIProcess/API/efl/ewk_context.h:
        * UIProcess/API/efl/ewk_url_scheme_request.cpp:
        (EwkUrlSchemeRequest::EwkUrlSchemeRequest):
        (EwkUrlSchemeRequest::finish):
        * UIProcess/API/efl/ewk_url_scheme_request_private.h:
        (EwkUrlSchemeRequest::create):
        * UIProcess/API/efl/tests/test_ewk2_context.cpp:
        (TEST_F):
        * UIProcess/Network/CustomProtocols/soup/WebSoupCustomProtocolRequestManager.cpp:
        * UIProcess/efl/RequestManagerClientEfl.cpp:
        (WebKit::RequestManagerClientEfl::RequestManagerClientEfl):
        (WebKit::RequestManagerClientEfl::startLoading):
        (WebKit::RequestManagerClientEfl::stopLoading):
        (WebKit::RequestManagerClientEfl::registerURLSchemeHandler):
        (WebKit::EwkUrlSchemeHandler::EwkUrlSchemeHandler): Deleted.
        (WebKit::RequestManagerClientEfl::didReceiveURIRequest): Deleted.
        * UIProcess/efl/RequestManagerClientEfl.h:
        * UIProcess/efl/WebContextEfl.cpp:
        (WebKit::WebContext::platformInitializeWebProcess):
        * UIProcess/soup/WebContextSoup.cpp:
        (WebKit::WebContext::platformInitializeNetworkProcess):

2014-10-07  Sungmann Cho  <sungmann.cho@navercorp.com>

        Remove WKPageCreateSnapshotOfVisibleContent API.
        https://bugs.webkit.org/show_bug.cgi?id=66979

        Reviewed by Darin Adler.

        After the landing of the first patch of webkit.org/b/66979,
        WKPageCreateSnapshotOfVisibleContent API has been neglected for years.
        Currently, this is not used anywhere and does not break the nightlies.
        So we can remove this.

        * UIProcess/API/C/WKPage.cpp:
        (WKPageCreateSnapshotOfVisibleContent): Deleted.
        * UIProcess/API/C/WKPagePrivate.h:

2014-10-07  Sungmann Cho  <sungmann.cho@navercorp.com>

        Remove WKPageSetInvalidMessageFunction.
        https://bugs.webkit.org/show_bug.cgi?id=137509

        Reviewed by Benjamin Poulain.

        According to the FIXME comment in WKPageSetInvalidMessageFunction,
        we can remove this function when doing so won't break the nightlies.
        Currently, this is not used anywhere and does not break the nightlies.
        So we can remove this.

        * UIProcess/API/C/WKPage.cpp:
        (WKPageSetInvalidMessageFunction): Deleted.
        * UIProcess/API/C/WKPagePrivate.h:

2014-10-07  Christophe Dumez  <cdumez@apple.com>

        [WK2] Use is<>() / downcast<>() for DrawingArea subclasses
        https://bugs.webkit.org/show_bug.cgi?id=137497

        Reviewed by Benjamin Poulain.

        Use is<>() / downcast<>() for DrawingArea subclasses.

        * WebProcess/WebPage/DrawingArea.h:
        * WebProcess/WebPage/WebPage.cpp:
        (WebKit::WebPage::didCommitLoad):
        * WebProcess/WebPage/ios/WebPageIOS.mm:
        (WebKit::WebPage::synchronizeDynamicViewportUpdate):
        * WebProcess/WebPage/mac/RemoteLayerTreeDrawingArea.h:
        * WebProcess/WebPage/mac/TiledCoreAnimationDrawingArea.h:

2014-10-07  Simon Fraser  <simon.fraser@apple.com>

        Roll-over Changelogs.

        * ChangeLog-2014-10-07: Copied from Source/WebKit2/ChangeLog.

== Rolled over to ChangeLog-2014-10-07 ==
