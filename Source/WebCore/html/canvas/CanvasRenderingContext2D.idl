/*
 * Copyright (C) 2006 Apple Computer, Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

enum CanvasWindingRule { "nonzero", "evenodd" };

interface CanvasRenderingContext2D : CanvasRenderingContext {

    void save();
    void restore();

    void scale(in [Default=Undefined] optional float sx,
               in [Default=Undefined] optional float sy);
    void rotate(in [Default=Undefined] optional float angle);
    void translate(in [Default=Undefined] optional float tx,
                   in [Default=Undefined] optional float ty);
    void transform(in [Default=Undefined] optional float m11,
                   in [Default=Undefined] optional float m12,
                   in [Default=Undefined] optional float m21,
                   in [Default=Undefined] optional float m22,
                   in [Default=Undefined] optional float dx,
                   in [Default=Undefined] optional float dy);
    void setTransform(in [Default=Undefined] optional float m11,
                      in [Default=Undefined] optional float m12,
                      in [Default=Undefined] optional float m21,
                      in [Default=Undefined] optional float m22,
                      in [Default=Undefined] optional float dx,
                      in [Default=Undefined] optional float dy);

    attribute float globalAlpha;
    [TreatNullAs=NullString] attribute DOMString globalCompositeOperation;

    CanvasGradient createLinearGradient(in [Default=Undefined] optional float x0,
                                        in [Default=Undefined] optional float y0,
                                        in [Default=Undefined] optional float x1,
                                        in [Default=Undefined] optional float y1)
        raises (DOMException);
    CanvasGradient createRadialGradient(in [Default=Undefined] optional float x0,
                                        in [Default=Undefined] optional float y0,
                                        in [Default=Undefined] optional float r0,
                                        in [Default=Undefined] optional float x1,
                                        in [Default=Undefined] optional float y1,
                                        in [Default=Undefined] optional float r1)
        raises (DOMException);

    attribute float lineWidth;
    [TreatNullAs=NullString] attribute DOMString lineCap;
    [TreatNullAs=NullString] attribute DOMString lineJoin;
    attribute float miterLimit;

    attribute float shadowOffsetX;
    attribute float shadowOffsetY;
    attribute float shadowBlur;
    [TreatNullAs=NullString] attribute DOMString shadowColor;

    void setLineDash(in sequence<float> dash);
    sequence<float> getLineDash();
    attribute float lineDashOffset;

    [Custom] attribute Array webkitLineDash;
    attribute float webkitLineDashOffset;

    void clearRect(in [Default=Undefined] optional float x,
                   in [Default=Undefined] optional float y,
                   in [Default=Undefined] optional float width,
                   in [Default=Undefined] optional float height);
    void fillRect(in [Default=Undefined] optional float x,
                  in [Default=Undefined] optional float y,
                  in [Default=Undefined] optional float width,
                  in [Default=Undefined] optional float height);

    void beginPath();

#if defined(ENABLE_CANVAS_PATH) && ENABLE_CANVAS_PATH
    attribute DOMPath currentPath;
#endif

    // FIXME: These methods should be shared with CanvasRenderingContext2D in the CanvasPathMethods interface.
    void closePath();
    void moveTo(in [Default=Undefined] optional float x,
                in [Default=Undefined] optional float y);
    void lineTo(in [Default=Undefined] optional float x,
                in [Default=Undefined] optional float y);
    void quadraticCurveTo(in [Default=Undefined] optional float cpx,
                          in [Default=Undefined] optional float cpy,
                          in [Default=Undefined] optional float x,
                          in [Default=Undefined] optional float y);
    void bezierCurveTo(in [Default=Undefined] optional float cp1x,
                       in [Default=Undefined] optional float cp1y,
                       in [Default=Undefined] optional float cp2x,
                       in [Default=Undefined] optional float cp2y,
                       in [Default=Undefined] optional float x,
                       in [Default=Undefined] optional float y);
    void arcTo(in [Default=Undefined] optional float x1,
               in [Default=Undefined] optional float y1,
               in [Default=Undefined] optional float x2,
               in [Default=Undefined] optional float y2,
               in [Default=Undefined] optional float radius)
        raises (DOMException);
    void rect(in [Default=Undefined] optional float x,
              in [Default=Undefined] optional float y,
              in [Default=Undefined] optional float width,
              in [Default=Undefined] optional float height);
    void arc(in [Default=Undefined] optional float x,
             in [Default=Undefined] optional float y,
             in [Default=Undefined] optional float radius,
             in [Default=Undefined] optional float startAngle,
             in [Default=Undefined] optional float endAngle,
             in [Default=Undefined] optional boolean anticlockwise)
        raises (DOMException);

    void fill(in optional CanvasWindingRule winding);
    void stroke();
    void clip(in optional CanvasWindingRule winding);
    boolean isPointInPath(in [Default=Undefined] optional float x,
                          in [Default=Undefined] optional float y,
                          in optional CanvasWindingRule winding);
    boolean isPointInStroke(in [Default=Undefined] optional float x,
                            in [Default=Undefined] optional float y);

    // text
    attribute DOMString font;
    attribute DOMString textAlign;
    attribute DOMString textBaseline;

    TextMetrics measureText(in [Default=Undefined] optional DOMString text);

    // other

    void setAlpha(in [Default=Undefined] optional float alpha);
    void setCompositeOperation(in [Default=Undefined] optional DOMString compositeOperation);

#if !defined(LANGUAGE_CPP) || !LANGUAGE_CPP
    void setLineWidth(in [Default=Undefined] optional float width);
    void setLineCap(in [Default=Undefined] optional DOMString cap);
    void setLineJoin(in [Default=Undefined] optional DOMString join);
    void setMiterLimit(in [Default=Undefined] optional float limit);
#endif

    void clearShadow();

    void fillText(in DOMString text, in float x, in float y, in optional float maxWidth);
    void strokeText(in DOMString text, in float x, in float y, in optional float maxWidth);

    void setStrokeColor(in [StrictTypeChecking] DOMString color, in optional float alpha);
    void setStrokeColor(in float grayLevel, in optional float alpha);
    void setStrokeColor(in float r, in float g, in float b, in float a);
    void setStrokeColor(in float c, in float m, in float y, in float k, in float a);

    void setFillColor(in [StrictTypeChecking] DOMString color, in optional float alpha);
    void setFillColor(in float grayLevel, in optional float alpha);
    void setFillColor(in float r, in float g, in float b, in float a);
    void setFillColor(in float c, in float m, in float y, in float k, in float a);

    void strokeRect(in [Default=Undefined] optional float x,
                    in [Default=Undefined] optional float y,
                    in [Default=Undefined] optional float width,
                    in [Default=Undefined] optional float height,
                    in optional float lineWidth);

    void drawImage(in HTMLImageElement? image, in float x, in float y)
        raises (DOMException);
    void drawImage(in HTMLImageElement? image, in float x, in float y, in float width, in float height)
        raises (DOMException);
    void drawImage(in HTMLImageElement? image, in float sx, in float sy, in float sw, in float sh, in float dx, in float dy, in float dw, in float dh)
        raises (DOMException);
    void drawImage(in HTMLCanvasElement? canvas, in float x, in float y)
        raises (DOMException);
    void drawImage(in HTMLCanvasElement? canvas, in float x, in float y, in float width, in float height)
        raises (DOMException);
    void drawImage(in HTMLCanvasElement? canvas, in float sx, in float sy, in float sw, in float sh, in float dx, in float dy, in float dw, in float dh)
        raises (DOMException);
#if defined(ENABLE_VIDEO) && ENABLE_VIDEO
    void drawImage(in HTMLVideoElement? video, in float x, in float y)
        raises (DOMException);
    void drawImage(in HTMLVideoElement? video, in float x, in float y, in float width, in float height)
        raises (DOMException);
    void drawImage(in HTMLVideoElement? video, in float sx, in float sy, in float sw, in float sh, in float dx, in float dy, in float dw, in float dh)
        raises (DOMException);
#endif

    void drawImageFromRect(in HTMLImageElement image,
                           in optional float sx, in optional float sy, in optional float sw, in optional float sh,
                           in optional float dx, in optional float dy, in optional float dw, in optional float dh,
                           in optional DOMString compositeOperation);

    void setShadow(in float width, in float height, in float blur, in [StrictTypeChecking] optional DOMString color, in optional float alpha);
    void setShadow(in float width, in float height, in float blur, in float grayLevel, in optional float alpha);
    void setShadow(in float width, in float height, in float blur, in float r, in float g, in float b, in float a);
    void setShadow(in float width, in float height, in float blur, in float c, in float m, in float y, in float k, in float a);

    void putImageData(in ImageData? imagedata, in float dx, in float dy)
        raises(DOMException);
    void putImageData(in ImageData? imagedata, in float dx, in float dy, in float dirtyX, in float dirtyY, in float dirtyWidth, in float dirtyHeight)
        raises(DOMException);

    void webkitPutImageDataHD(in ImageData? imagedata, in float dx, in float dy)
        raises(DOMException);
    void webkitPutImageDataHD(in ImageData? imagedata, in float dx, in float dy, in float dirtyX, in float dirtyY, in float dirtyWidth, in float dirtyHeight)
        raises(DOMException);

    CanvasPattern createPattern(in HTMLCanvasElement? canvas, in [TreatNullAs=NullString] DOMString repetitionType)
        raises (DOMException);
    CanvasPattern createPattern(in HTMLImageElement? image, in [TreatNullAs=NullString] DOMString repetitionType)
        raises (DOMException);
    ImageData createImageData(in ImageData? imagedata)
        raises (DOMException);
    ImageData createImageData(in float sw, in float sh)
        raises (DOMException);

    [Custom] attribute custom strokeStyle;
    [Custom] attribute custom fillStyle;

    // pixel manipulation
    ImageData getImageData(in [Default=Undefined] optional float sx, in [Default=Undefined] optional float sy,
                           in [Default=Undefined] optional float sw, in [Default=Undefined] optional float sh)
        raises(DOMException);

    ImageData webkitGetImageDataHD(in [Default=Undefined] optional float sx, in [Default=Undefined] optional float sy,
                                   in [Default=Undefined] optional float sw, in [Default=Undefined] optional float sh)
        raises(DOMException);

    readonly attribute float webkitBackingStorePixelRatio;

    attribute boolean webkitImageSmoothingEnabled;
};

