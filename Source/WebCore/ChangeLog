2013-04-25  Andreas Kling  <akling@apple.com>

        SVG: Fix viewBox animations on shapes with non-scaling-stroke.
        <http://webkit.org/b/115173>

        From Blink r149058 by <pdr@chromium.org>:

        Previously hasAttribute() to determine if a viewBox was set in the transform
        code for non-scaling-strokes. hasAttribute() should not be used in this case,
        as it will return false if the attribute is not set but the value is animating.

        This patch switches to checking if the viewBox is empty instead of checking for
        the presence of the attribute.

        Test: svg/stroke/animated-non-scaling-stroke.html

        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::localCoordinateSpaceTransform):
        * svg/SVGSVGElement.h:
        (WebCore::SVGSVGElement::hasEmptyViewBox):

2013-04-25  Andreas Kling  <akling@apple.com>

        Remove isPluginElement hack in Document::setFocusedNode()
        <http://webkit.org/b/115171>

        From Blink r148800 by <tkent@chromium.org>:

        This hack is no longer necessary because r147591 made isFocusable for plugin
        elements work correctly.

        * dom/Document.cpp:
        (WebCore::Document::setFocusedNode):

2013-04-25  Per-Erik Brodin  <per-erik.brodin@ericsson.com>

        EventSource: Synchronous loader callback not handled properly
        https://bugs.webkit.org/show_bug.cgi?id=115104

        When attempting a cross-origin request towards a non-HTTP URL, an early verification
        of the protocol scheme will cause didFailAccessControlCheck to be called synchronously
        before the loader has even finished being created. This special case was not handled
        properly, since we tried to cancel a non-existing loader, which resulted in a crash.
        In addition to checking whether a request is in flight before trying to cancel it,
        this change also schedules the initial creation of the loader to happen asynchronously
        when an EventSource is constructed, so that a script can register for the error event
        before it is dispatched (as a result of passing a non-HTTP URL to the constructor).

        Reviewed by Alexey Proskuryakov.

        Test: http/tests/eventsource/eventsource-cors-non-http.html

        * page/EventSource.cpp:
        (WebCore::EventSource::EventSource):
        (WebCore::EventSource::create):
        (WebCore::EventSource::scheduleInitialConnect):
        (WebCore):
        (WebCore::EventSource::scheduleReconnect):
        (WebCore::EventSource::connectTimerFired):
        (WebCore::EventSource::close):
        (WebCore::EventSource::abortConnectionAttempt):
        * page/EventSource.h:
        (EventSource):

2013-04-25  Patrick Gansterer  <paroga@webkit.org>

        Unreviewed WinCE build fix after r148545.

        * page/wince/FrameWinCE.cpp:

2013-04-24  Kent Tamura  <tkent@chromium.org>

        Back references don't work in pattern attribute
        https://bugs.webkit.org/show_bug.cgi?id=105875

        Reviewed by Geoffrey Garen.

        This imports a part of Blink r148951.

        Tests: Update fast/forms/ValidityState-patternMismatch.html

        * html/BaseTextInputType.cpp:
        (WebCore::BaseTextInputType::patternMismatch):
        Don't use capturing parentheses. They affected back references in
        pattern attribute values.

2013-04-24  Tim Horton  <timothy_horton@apple.com>

        PDFPlugin: Cursor should become an i-beam when over selectable text
        https://bugs.webkit.org/show_bug.cgi?id=115018
        <rdar://problem/12645012>

        Reviewed by Alexey Proskuryakov.

        * WebCore.exp.in: Export the I-beam and arrow cursors.

2013-04-24  Simon Fraser  <simon.fraser@apple.com>

        Garbage at the top of http://www.technologyreview.com after scrolling
        https://bugs.webkit.org/show_bug.cgi?id=114825

        Reviewed by Tim Horton.

        Garbage pixels are caused by GraphicsLayerCA setting a layer to be opaque,
        but then not painting anything into it. On this page, the element is
        toggled to be visibility:hidden on scrolling, but RenderLayer::backgroundIsKnownToBeOpaqueInRect()
        failed to consider that as something that can cause backgrounds not to be opaque.
        
        For the bug to happen, some subtle interactions with r142012 come into play
        for the layer to remain visible, hence the slightly complex testcase.
        
        Test: compositing/contents-opaque/visibility-hidden.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::backgroundIsKnownToBeOpaqueInRect):

2013-04-24  Simon Fraser  <simon.fraser@apple.com>

        Dump layer opaqueness in the Compositing log output
        https://bugs.webkit.org/show_bug.cgi?id=115132

        Reviewed by Tim Horton.

        It's useful to see whether we consider layers to be opaque in the Compositing
        log channel output, so dump it.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::logLayerInfo):

2013-04-24  Seokju Kwon  <seokju.kwon@gmail.com>

        Add efl to JSInspectorFrontendHost::port()
        https://bugs.webkit.org/show_bug.cgi?id=115137

        Reviewed by Timothy Hatcher.

        No new tests, because there is no change in behavior.

        * bindings/js/JSInspectorFrontendHostCustom.cpp:
        (WebCore::JSInspectorFrontendHost::port):

2013-04-24  Kangil Han  <kangil.han@samsung.com>

        Function parameter quotePair can be passed by reference
        https://bugs.webkit.org/show_bug.cgi?id=115089

        Reviewed by Alexey Proskuryakov.

        Minor performance patch.

        * rendering/style/QuotesData.cpp:
        (WebCore::QuotesData::addPair):
        * rendering/style/QuotesData.h:
        (QuotesData):

2013-04-24  Brady Eidson  <beidson@apple.com>

        Implementors of CachedResource subclasses should be forced to decide if encoded data can be replaced.
        https://bugs.webkit.org/show_bug.cgi?id=115140

        Reviewed by Beth Dakin.

        No new tests (No behavior change).

        This makes mayTryReplaceEncodedData() return false in CachedResource, but overrides to true
        in all CachedResource subclasses besides CachedFont (which already has an implementation).

        * loader/cache/CachedCSSStyleSheet.h:
        * loader/cache/CachedImage.h:
        * loader/cache/CachedRawResource.h:
        * loader/cache/CachedResource.h:
        * loader/cache/CachedSVGDocument.h:
        * loader/cache/CachedScript.h:
        * loader/cache/CachedShader.h:
        * loader/cache/CachedTextTrack.h:
        * loader/cache/CachedXSLStyleSheet.h:

2013-04-24  Brady Eidson  <beidson@apple.com>

        Once a custom font is cached to disk, it starts failing to render until the page is refreshed.
        <rdar://problem/13622998> and https://bugs.webkit.org/show_bug.cgi?id=115131

        Reviewed by Alexey Proskuryakov.

        No new tests (Not a tested config, nor are disk cache issues currently testable).

        * loader/cache/CachedResource.h:
        (WebCore::CachedResource:: mayTryReplaceEncodedData): Allow subclasses to refuse encoded data replacement.

        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::tryReplaceEncodedData): Only try if shouldTryReplaceEncodedData() is true.

        * loader/cache/CachedFont.cpp:
        (WebCore::CachedFont::CachedFont):
        (WebCore::CachedFont::ensureCustomFontData):
        (WebCore::CachedFont::mayTryReplaceEncodedData): Return false if the custom font data has ever been created.
        * loader/cache/CachedFont.h:

2013-04-24  Beth Dakin  <bdakin@apple.com>

        Vertical overlay scrollbar in iframes fades in and out rapidly when you scroll in 
        a circle
        https://bugs.webkit.org/show_bug.cgi?id=115124
        -and corresponding-
        <rdar://problem/13168957>

        Reviewed by Anders Carlsson.

        With http://trac.webkit.org/changeset/119834 we started calling 
        ScrollbarPainterController's contentAreaScrolled/contentAreaScrolledInDirection 
        API on a zero-delay timer instead of calling it right away. This prevented some 
        crashes that we saw whenever this was called during a layout. However, that delay, 
        combined with the particulars of contentAreaScrolledInDirection cause this bug 
        where sometimes the scrollbars in an iframe will fade out very noticeably when 
        scrolling in a circle.

        This change makes it so we will only use the zero-delay timer if the 
        ScrollableArea is not currently handling a wheel event. If it IS handling a wheel 
        event, then we will send the notifications to AppKit right away. I confirmed that 
        this change did not reintroduce the old crashes. 

        Keep track of whether we are currently handling a wheel event with the new member 
        variable m_isHandlingWheelEvent.
        * page/EventHandler.cpp:
        (WebCore::EventHandler::EventHandler):
        (WebCore::EventHandler::handleWheelEvent):
        * page/EventHandler.h:
        (WebCore::EventHandler::isHandlingWheelEvent):
        (EventHandler):

        To prevent layering violations, the ScrollableArea sub-classes will have to access 
        this information from the EventHandler.
        * page/FrameView.cpp:
        (WebCore::FrameView::isHandlingWheelEvent):
        * page/FrameView.h:
        * platform/ScrollableArea.h:
        (WebCore::ScrollableArea::isHandlingWheelEvent):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::isHandlingWheelEvent):
        * rendering/RenderLayer.h:
        (RenderLayer):
        * rendering/RenderListBox.cpp:
        (WebCore::RenderListBox::isHandlingWheelEvent):
        * rendering/RenderListBox.h:

        sendContentAreaScrolledSoon() can be private. Also add new function 
        sendContentAreaScrolled().
        * platform/mac/ScrollAnimatorMac.h:
        (ScrollAnimatorMac):

        If the ScrollableArea is handling a wheel event, call 
        sendContentAreaScrolled(), otherwise call sendContentAreaScrolledSoon()
        * platform/mac/ScrollAnimatorMac.mm:
        (WebCore::ScrollAnimatorMac::notifyContentAreaScrolled):
        (WebCore::ScrollAnimatorMac::sendContentAreaScrolled):

        Re-factored to use sendContentAreaScrolled()
        (WebCore::ScrollAnimatorMac::sendContentAreaScrolledTimerFired):

2013-04-24  Ryosuke Niwa  <rniwa@webkit.org>

        Fix a merge error in r149007 (was missing a null check added in r148777).

        * rendering/LogicalSelectionOffsetCaches.h:
        (WebCore::containingBlockForAbsolutePosition):

2013-04-24  Otto Derek Cheung  <otcheung@rim.com>

        Battery API won't return updated battery status until client calls didChangeBatteryStatus
        https://bugs.webkit.org/show_bug.cgi?id=114891

        Reviewed by Rob Buis.

        The BatteryStatus object in BatteryManager won't get updated until BatteryClient calls
        didChangeBatteryStatus in BatteryController. Any attempts to call webkitBattery.charged()
        or other get functions will always return the default values until the next battery status
        change object gets passed to the controller.

        We need to update the manager when we attach it to the controller, and update all
        existing managers when the controller receives it's first battery status object.

        * Modules/battery/BatteryController.cpp:
        (WebCore::BatteryController::addListener):
        (WebCore::BatteryController::updateBatteryStatus):
        * Modules/battery/BatteryManager.cpp:
        (WebCore::BatteryManager::didChangeBatteryStatus):
        (WebCore::BatteryManager::updateBatteryStatus):
        (WebCore):
        * Modules/battery/BatteryManager.h:
        (BatteryManager):

2013-04-24  Jacky Jiang  <zhajiang@blackberry.com>

        Clean up unused code in ViewportArguments.h
        https://bugs.webkit.org/show_bug.cgi?id=115121

        Reviewed by Benjamin Poulain.

        The target-densityDPI emulation implementation has been removed by
        r147893, so clean up the remaining code as well.

        * dom/ViewportArguments.h:

2013-04-24  Andreas Kling  <akling@apple.com>

        ElementData should use 'unsigned' attribute indices.
        <http://webkit.org/b/115103>

        Reviewed by Antti Koivisto.

        Switch to using 'unsigned' for attribute indices. This gives consistent behavior
        on 32/64-bit, and the underlying storage is already limited by Vector's 32-bit capacity.

        Added an ElementData::attributeNotFound constant (-1) since we can't use WTF::notFound.

        * dom/Element.cpp:
        (WebCore::Element::detachAttribute):
        (WebCore::Element::removeAttribute):
        (WebCore::Element::setAttribute):
        (WebCore::Element::setSynchronizedLazyAttribute):
        (WebCore::Element::setAttributeInternal):
        (WebCore::Element::setAttributeNode):
        (WebCore::Element::removeAttributeNode):
        (WebCore::Element::removeAttributeInternal):
        (WebCore::UniqueElementData::removeAttribute):
        (WebCore::ElementData::getAttributeItemIndexSlowCase):
        * dom/Element.h:
        (ElementData):
        (UniqueElementData):
        (Element):
        (WebCore::Element::getAttributeItemIndex):
        (WebCore::Element::attributeCount):
        (WebCore::ElementData::length):
        (WebCore::ElementData::getAttributeItem):
        (WebCore::ElementData::getAttributeItemIndex):
        * dom/NamedNodeMap.cpp:
        (WebCore::NamedNodeMap::removeNamedItem):
        (WebCore::NamedNodeMap::removeNamedItemNS):
        (WebCore::NamedNodeMap::length):
        * dom/NamedNodeMap.h:
        (NamedNodeMap):

2013-04-24  Andreas Kling  <akling@apple.com>

        ElementData::attributeItem() should bounds-check the index.
        <http://webkit.org/b/115076>

        Reviewed by Antti Koivisto.

        Switch the ASSERT_WITH_SECURITY_IMPLICATION to a RELEASE_ASSERT.

        * dom/Element.h:
        (WebCore::ElementData::attributeItem):

2013-04-23  Andreas Kling  <akling@apple.com>

        Setting an inline style property to "" shouldn't cause style recalc unless the property was present.
        <http://webkit.org/b/115122>

        Reviewed by Antti Koivisto.

        StylePropertySet::setProperty() handles empty strings by removing the property entirely.
        If there was no property to remove, it shouldn't claim that it changed something, as that
        will cause the CSSOM wrapper to mark the element for style recalc.

        A common idiom that triggers this is excessive use of { element.style.display = ''; }

        * css/StylePropertySet.cpp:
        (WebCore::MutableStylePropertySet::setProperty):

2013-04-23  Ryosuke Niwa  <rniwa@webkit.org>

        Moving word boundaries backwards fails when there is a text node starting with an apostrophe
        https://bugs.webkit.org/show_bug.cgi?id=115070

        Reviewed by Alexey Proskuryakov.

        The bug was caused by previousBoundary erroneously assuming that we don't need any more context if a word
        boundary is found at the beginning of a string. For example, when "I'll" is split into two text nodes,
        "I" and "'ll", there is a word boundary between "'" and "ll" in "'ll" so we need to examine the whole "I'll".

        Fixed the bug by obtaining more context when the character starts exactly at offset 1 in a text node to
        work around this bug. In the long term, we probably need to provide Foundation of the entire context since in
        languages like Hebrew and some of European languages, there could be many accents and combining characters
        between split into multiple text nodes as one variant is seen in the newly added test case.

        Test: editing/selection/previous-word-boundary-across-text-nodes.html

        * editing/VisibleUnits.cpp:
        (WebCore::previousBoundary):

2013-04-24  Benjamin Poulain  <bpoulain@apple.com>

        Do not use static string in DiagnosticLoggingKeys
        https://bugs.webkit.org/show_bug.cgi?id=115093

        Reviewed by Andreas Kling.

        The code is not hot enough to justify keeping the memory around.
        This removes 3kb from the binary on x86_64.

        * page/DiagnosticLoggingKeys.cpp:
        (WebCore::DiagnosticLoggingKeys::mediaLoadedKey):
        (WebCore::DiagnosticLoggingKeys::mediaLoadingFailedKey):
        (WebCore::DiagnosticLoggingKeys::pluginLoadedKey):
        (WebCore::DiagnosticLoggingKeys::pluginLoadingFailedKey):
        (WebCore::DiagnosticLoggingKeys::pageContainsPluginKey):
        (WebCore::DiagnosticLoggingKeys::pageContainsAtLeastOnePluginKey):
        (WebCore::DiagnosticLoggingKeys::pageContainsMediaEngineKey):
        (WebCore::DiagnosticLoggingKeys::pageContainsAtLeastOneMediaEngineKey):
        (WebCore::DiagnosticLoggingKeys::passKey):
        (WebCore::DiagnosticLoggingKeys::failKey):
        (WebCore::DiagnosticLoggingKeys::noopKey):
        * page/DiagnosticLoggingKeys.h:
        (DiagnosticLoggingKeys):

2013-04-24  Benjamin Poulain  <benjamin@webkit.org>

        Remove wxWebKit #ifdefs from WebCore/platform/graphics
        https://bugs.webkit.org/show_bug.cgi?id=115081

        Reviewed by Geoffrey Garen.

        * platform/graphics/BitmapImage.h:
        (BitmapImage):
        * platform/graphics/Color.h:
        (Color):
        * platform/graphics/FloatRect.h:
        (FloatRect):
        * platform/graphics/FloatSize.h:
        (FloatSize):
        * platform/graphics/FontPlatformData.h:
        * platform/graphics/GlyphBuffer.h:
        (WebCore):
        (WebCore::GlyphBuffer::glyphAt):
        (WebCore::GlyphBuffer::add):
        * platform/graphics/Gradient.h:
        * platform/graphics/GraphicsContext.h:
        (GraphicsContext):
        * platform/graphics/Image.cpp:
        (WebCore::Image::drawTiled):
        * platform/graphics/ImageBufferData.h:
        * platform/graphics/IntPoint.h:
        (IntPoint):
        * platform/graphics/IntRect.h:
        * platform/graphics/IntSize.h:
        (IntSize):
        * platform/graphics/NativeImagePtr.h:
        (WebCore):
        * platform/graphics/Path.h:
        * platform/graphics/Pattern.h:
        * platform/graphics/SimpleFontData.h:
        (SimpleFontData):
        (WebCore::SimpleFontData::widthForGlyph):
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::collectComplexTextRuns):
        * platform/graphics/mac/ComplexTextControllerCoreText.mm:
        (WebCore::ComplexTextController::collectComplexTextRunsForCharacters):
        * platform/graphics/transforms/AffineTransform.h:
        (AffineTransform):
        * platform/graphics/transforms/TransformationMatrix.h:
        (TransformationMatrix):

2013-04-24  Benjamin Poulain  <benjamin@webkit.org>

        Remove wxWebKit #ifdefs from WebCore/plugins
        https://bugs.webkit.org/show_bug.cgi?id=115080

        Reviewed by Geoffrey Garen.

        * plugins/PluginView.h:
        (PluginView):
        * plugins/mac/PluginViewMac.mm:
        (WebCore::nativeWindowFor):
        (WebCore::cgHandleFor):
        (WebCore::topLevelOffsetFor):
        (WebCore::PluginView::platformStart):
        * plugins/win/PluginViewWin.cpp:
        (windowHandleForPageClient):
        (WebCore::PluginView::handleMouseEvent):
        (WebCore::PluginView::platformStart):
        (WebCore::PluginView::snapshot):

2013-04-24  Benjamin Poulain  <benjamin@webkit.org>

        Remove wxWebKit #ifdefs from WebCore/page
        https://bugs.webkit.org/show_bug.cgi?id=115079

        Reviewed by Geoffrey Garen.

        * page/FrameView.cpp:
        (WebCore::FrameView::wheelEvent):
        * page/Settings.cpp:
        (WebCore):
        * page/Settings.h:
        (Settings):

2013-04-24  Chris Fleizach  <cfleizach@apple.com>

        AX: WAI-ARIA landmarks no longer speak type of landmark on iOS
        https://bugs.webkit.org/show_bug.cgi?id=114547

        Reviewed by David Kilzer.

        We want iOS to speak the landmark type.
        I've moved the landmark role description to the base Mac class and exposed
        these localized strings to iOS (the ones used to return landmark descriptions).

        I've also updated the accessibilityLabel to account for landmark type, but also
        handle multiple label sources more gracefully by appending commas, which changed a few
        tests in minor ways.

        Test: platform/iphone-simulator/accessibility/landmark-type.html

        * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper accessibilityLabel]):
        * accessibility/mac/WebAccessibilityObjectWrapperBase.h:
        * accessibility/mac/WebAccessibilityObjectWrapperBase.mm:
        (-[WebAccessibilityObjectWrapperBase ariaLandmarkRoleDescription]):
        * accessibility/mac/WebAccessibilityObjectWrapperMac.mm:
        (-[WebAccessibilityObjectWrapper roleDescription]):
        * platform/LocalizedStrings.cpp:
        (WebCore):
        (WebCore::AXButtonActionVerb):
        (WebCore::AXRadioButtonActionVerb):
        (WebCore::AXTextFieldActionVerb):
        (WebCore::AXCheckedCheckBoxActionVerb):
        (WebCore::AXUncheckedCheckBoxActionVerb):
        (WebCore::AXLinkActionVerb):
        (WebCore::AXMenuListPopupActionVerb):
        (WebCore::AXMenuListActionVerb):
        * platform/LocalizedStrings.h:
        (WebCore):

2013-04-24  Andreas Kling  <akling@apple.com>

        CSS attribute selectors cause unnecessary style recalc when setting attribute to same value.
        <http://webkit.org/b/115116>
        <rdar://problem/13727709>

        Reviewed by Simon Fraser.

        The logic that dirties the style if there's a relevant attribute selector in the document
        shouldn't run if the attribute is being overwritten with an identical value.
        Move this into willModifyAttribute() instead, since we need access to both the old and the new value.

        This reduces unnecessary style recalculation in Mac App Store content.

        * dom/Element.cpp:
        (WebCore::Element::attributeChanged):
        (WebCore::Element::willModifyAttribute):

2013-04-24  Jonathan Feldstein <jfeldstein@blackberry.com>

        [BlackBerry] Fixes the San Angeles demo on khronos.org
        https://bugs.webkit.org/show_bug.cgi?id=115106

        Reviewed by Rob Buis
        Internally Reviewed by Jeremy Nicholl and Arvid Nilsson

        Fixes a bug in which the currently bound vertex array object's vertex array
        state was being modified as opposed to the default vertex array state.

        * platform/graphics/blackberry/EGLImageLayerWebKitThread.cpp:
        (EGLImageLayerWebKitThread::blitToFrontBuffer):

2013-04-24  Nico Weber  <thakis@chromium.org>

        Fold RenderThemeMacShared into RenderThemeMac
        https://bugs.webkit.org/show_bug.cgi?id=115086

        Reviewed by Anders Carlsson.

        No intended functionality change.

        * WebCore.xcodeproj/project.pbxproj:
        * rendering/RenderThemeMac.h:
        (RenderThemeMac):
        (WebCore::RenderThemeMac::supportsControlTints):
        (WebCore::RenderThemeMac::scrollbarControlSizeForPart):
        (WebCore::RenderThemeMac::supportsSelectionForegroundColors):
        (WebCore::RenderThemeMac::supportsClosedCaptioning):
        (WebCore::RenderThemeMac::updateActiveState):
        * rendering/RenderThemeMac.mm:
        (-[WebCoreRenderThemeNotificationObserver initWithTheme:WebCore::]):
        (-[WebCoreRenderThemeNotificationObserver systemColorsDidChange:]):
        (-[WebCoreTextFieldCell _coreUIDrawOptionsWithFrame:inView:includeFocus:]):
        (WebCore::RenderThemeMac::RenderThemeMac):
        (WebCore::RenderThemeMac::~RenderThemeMac):
        (WebCore::RenderThemeMac::platformActiveSelectionBackgroundColor):
        (WebCore):
        (WebCore::RenderThemeMac::platformInactiveSelectionBackgroundColor):
        (WebCore::RenderThemeMac::platformActiveListBoxSelectionBackgroundColor):
        (WebCore::RenderThemeMac::platformActiveListBoxSelectionForegroundColor):
        (WebCore::RenderThemeMac::platformInactiveListBoxSelectionForegroundColor):
        (WebCore::RenderThemeMac::platformFocusRingColor):
        (WebCore::RenderThemeMac::platformInactiveListBoxSelectionBackgroundColor):
        (WebCore::toFontWeight):
        (WebCore::RenderThemeMac::systemFont):
        (WebCore::convertNSColorToColor):
        (WebCore::menuBackgroundColor):
        (WebCore::RenderThemeMac::platformColorsDidChange):
        (WebCore::RenderThemeMac::systemColor):
        (WebCore::RenderThemeMac::usesTestModeFocusRingColor):
        (WebCore::RenderThemeMac::isControlStyled):
        (WebCore::RenderThemeMac::adjustRepaintRect):
        (WebCore::RenderThemeMac::inflateRect):
        (WebCore::RenderThemeMac::convertToPaintingRect):
        (WebCore::RenderThemeMac::updateCheckedState):
        (WebCore::RenderThemeMac::updateEnabledState):
        (WebCore::RenderThemeMac::updateFocusedState):
        (WebCore::RenderThemeMac::updatePressedState):
        (WebCore::RenderThemeMac::controlSupportsTints):
        (WebCore::RenderThemeMac::controlSizeForFont):
        (WebCore::RenderThemeMac::setControlSize):
        (WebCore::RenderThemeMac::sizeForFont):
        (WebCore::RenderThemeMac::sizeForSystemFont):
        (WebCore::RenderThemeMac::setSizeFromFont):
        (WebCore::RenderThemeMac::setFontFromControlSize):
        (WebCore::RenderThemeMac::controlSizeForSystemFont):
        (WebCore::RenderThemeMac::paintTextField):
        (WebCore::RenderThemeMac::adjustTextFieldStyle):
        (WebCore::RenderThemeMac::paintCapsLockIndicator):
        (WebCore::RenderThemeMac::paintTextArea):
        (WebCore::RenderThemeMac::adjustTextAreaStyle):
        (WebCore::RenderThemeMac::popupButtonMargins):
        (WebCore::RenderThemeMac::popupButtonSizes):
        (WebCore::RenderThemeMac::popupButtonPadding):
        (WebCore::RenderThemeMac::paintMenuList):
        (WebCore::RenderThemeMac::meterSizeForBounds):
        (WebCore::RenderThemeMac::paintMeter):
        (WebCore::RenderThemeMac::supportsMeter):
        (WebCore::RenderThemeMac::levelIndicatorStyleFor):
        (WebCore::RenderThemeMac::levelIndicatorFor):
        (WebCore::RenderThemeMac::progressBarSizes):
        (WebCore::RenderThemeMac::progressBarMargins):
        (WebCore::RenderThemeMac::minimumProgressBarHeight):
        (WebCore::RenderThemeMac::animationRepeatIntervalForProgressBar):
        (WebCore::RenderThemeMac::animationDurationForProgressBar):
        (WebCore::RenderThemeMac::adjustProgressBarStyle):
        (WebCore::RenderThemeMac::paintProgressBar):
        (WebCore::TopGradientInterpolate):
        (WebCore::BottomGradientInterpolate):
        (WebCore::MainGradientInterpolate):
        (WebCore::TrackGradientInterpolate):
        (WebCore::RenderThemeMac::paintMenuListButtonGradients):
        (WebCore::RenderThemeMac::paintMenuListButton):
        (WebCore::menuListButtonSizes):
        (WebCore::RenderThemeMac::adjustMenuListStyle):
        (WebCore::RenderThemeMac::popupInternalPaddingLeft):
        (WebCore::RenderThemeMac::popupInternalPaddingRight):
        (WebCore::RenderThemeMac::popupInternalPaddingTop):
        (WebCore::RenderThemeMac::popupInternalPaddingBottom):
        (WebCore::RenderThemeMac::adjustMenuListButtonStyle):
        (WebCore::RenderThemeMac::setPopupButtonCellState):
        (WebCore::RenderThemeMac::menuListSizes):
        (WebCore::RenderThemeMac::minimumMenuListSize):
        (WebCore::RenderThemeMac::adjustSliderTrackStyle):
        (WebCore::RenderThemeMac::paintSliderTrack):
        (WebCore::RenderThemeMac::adjustSliderThumbStyle):
        (WebCore::RenderThemeMac::paintSliderThumb):
        (WebCore::RenderThemeMac::paintSearchField):
        (WebCore::RenderThemeMac::setSearchCellState):
        (WebCore::RenderThemeMac::searchFieldSizes):
        (WebCore::RenderThemeMac::setSearchFieldSize):
        (WebCore::RenderThemeMac::adjustSearchFieldStyle):
        (WebCore::RenderThemeMac::paintSearchFieldCancelButton):
        (WebCore::RenderThemeMac::cancelButtonSizes):
        (WebCore::RenderThemeMac::adjustSearchFieldCancelButtonStyle):
        (WebCore::RenderThemeMac::resultsButtonSizes):
        (WebCore::RenderThemeMac::adjustSearchFieldDecorationStyle):
        (WebCore::RenderThemeMac::paintSearchFieldDecoration):
        (WebCore::RenderThemeMac::adjustSearchFieldResultsDecorationStyle):
        (WebCore::RenderThemeMac::paintSearchFieldResultsDecoration):
        (WebCore::RenderThemeMac::adjustSearchFieldResultsButtonStyle):
        (WebCore::RenderThemeMac::paintSearchFieldResultsButton):
        (WebCore::RenderThemeMac::paintSnapshottedPluginOverlay):
        (WebCore::RenderThemeMac::sliderTickSize):
        (WebCore::RenderThemeMac::sliderTickOffsetFromTrackCenter):
        (WebCore::RenderThemeMac::adjustSliderThumbSize):
        (WebCore::RenderThemeMac::shouldShowPlaceholderWhenFocused):
        (WebCore::RenderThemeMac::popupButton):
        (WebCore::RenderThemeMac::search):
        (WebCore::RenderThemeMac::searchMenuTemplate):
        (WebCore::RenderThemeMac::sliderThumbHorizontal):
        (WebCore::RenderThemeMac::sliderThumbVertical):
        (WebCore::RenderThemeMac::textField):
        (WebCore::RenderThemeMac::fileListNameForWidth):
        * rendering/RenderThemeMacShared.h: Removed.
        * rendering/RenderThemeMacShared.mm: Removed.

2013-04-24  ChangSeok Oh  <changseok.oh@collabora.com>

        [GTK][AC] Visible rect doesn't update after resizing a window.
        https://bugs.webkit.org/show_bug.cgi?id=115096

        Reviewed by Gustavo Noronha Silva.

        Once we set actor's a clip rect, we should update the rect when resizing the actor.

        No new tests since no new functionality.

        * platform/graphics/clutter/GraphicsLayerClutter.cpp:
        (WebCore::GraphicsLayerClutter::setSize):

2013-04-24  ChangSeok Oh  <changseok.oh@collabora.com>

        [GTK][AC] Fix unexpected clear of ClutterContent.
        https://bugs.webkit.org/show_bug.cgi?id=115099

        Reviewed by Gustavo Noronha Silva.

        adoptGRef doesn't increase a reference count. So if a actor has a valid ClutterContent,
        it would be cleared unexpectedly by smart pointer when escaping a function.

        No new tests, no functionality changed.

        * platform/graphics/clutter/GraphicsLayerActor.cpp:
        (graphicsLayerActorUpdateTexture):

2013-04-24  Alberto Garcia  <agarcia@igalia.com>

        DOMFileSystemBase: fix multiple definitions in the BlackBerry port
        https://bugs.webkit.org/show_bug.cgi?id=114950

        Reviewed by Xan Lopez.

        The following  methods are already defined in DOMFileSystemBlackBerry.cpp:

        crackFileSystemURL()
        createFileSystemURL()
        isValidType()
        supportsToURL()

        * Modules/filesystem/DOMFileSystemBase.cpp:
        (WebCore):

2013-04-24  George Staikos  <gstaikos@rim.com>

        [BlackBerry] Add support for JPEG image quality during encoding.
        https://bugs.webkit.org/show_bug.cgi?id=105773

        Reviewed by Xan Lopez.

        PR 271611
        Internally reviewed by Liam Quinn.

        Pass the quality flag into the encoder, with a default of 65

        Covered by existing tests.

        * platform/image-encoders/JPEGImageEncoder.cpp:
        (WebCore::compressRGBABigEndianToJPEG):
        * platform/image-encoders/JPEGImageEncoder.h:
        (WebCore):

2013-04-24  Csaba Osztrogonác  <ossy@webkit.org>

        Fix cast-align WebCore/platform/graphics/GraphicsContext3D.cpp on ARM
        https://bugs.webkit.org/show_bug.cgi?id=115036

        Reviewed by Benjamin Poulain.

        * platform/graphics/GraphicsContext3D.cpp:
        (WebCore):

2013-04-24  Andreas Kling  <akling@apple.com>

        Remove unnecessary MutableStylePropertySet casts.
        <http://webkit.org/b/115075>

        Reviewed by Geoffrey Garen.

        Get rid of some now-unneeded static_casts that were left from the StylePropertySet
        refactoring last weekend.

        * css/StylePropertySet.cpp:
        (WebCore::MutableStylePropertySet::setProperty):
        * editing/EditingStyle.cpp:
        (WebCore::EditingStyle::triStateOfStyle):
        (WebCore::EditingStyle::removeStyleFromRulesAndContext):

2013-04-24  Kangil Han  <kangil.han@samsung.com>

        [Minor code cleanup] Remove duplicated condition check
        https://bugs.webkit.org/show_bug.cgi?id=115082

        Reviewed by Andreas Kling.

        areRectsPartiallyAligned() has duplicated condition check, so remove it.

        * page/SpatialNavigation.cpp:
        (WebCore::areRectsPartiallyAligned):

2013-04-24  Krzysztof Wolanski  <k.wolanski@samsung.com>

        [EFL] Fix build warnings caused by missing images attributes for default buttons
        https://bugs.webkit.org/show_bug.cgi?id=114955

        Reviewed by Gyuyoung Kim.

        Added default image for each button from mediacontrol catalog.

        No new tests, because there is no change in behavior.

        * platform/efl/DefaultTheme/widget/mediacontrol/fullscreenbutton/fullscreen_button.edc:
        * platform/efl/DefaultTheme/widget/mediacontrol/mutebutton/mute_button.edc:
        * platform/efl/DefaultTheme/widget/mediacontrol/playpausebutton/playpause_button.edc:
        * platform/efl/DefaultTheme/widget/mediacontrol/seekbackwardbutton/seekbackward_button.edc:
        * platform/efl/DefaultTheme/widget/mediacontrol/seekforwardbutton/seekforward_button.edc:
        * platform/efl/DefaultTheme/widget/mediacontrol/togglecaptionsbutton/toggle_captions_button.edc:

2013-04-24  Christophe Dumez  <ch.dumez@sisa.samsung.com>

        Unreviewed build fix with gstreamer 0.10.x after r147555.

        * platform/audio/gstreamer/WebKitWebAudioSourceGStreamer.cpp:
        (webKitWebAudioSrcLoop):

== Rolled over to ChangeLog-2013-04-24 ==
