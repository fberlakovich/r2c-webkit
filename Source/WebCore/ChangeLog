2013-04-26  Zalan Bujtas  <zalan@apple.com>

        use-after-free removing a frame from its parent in a beforeload event of an OBJECT element
        https://bugs.webkit.org/show_bug.cgi?id=113964

        Object elements have the tendecny to modify or even fully remove 
        the containing Document inside beforeload callback. While Document is removed, 
        RenderArena gets destroyed. Retained RenderWidgets fails to function with NULL arena.
        
        Protect RendereArena from getting wiped out, when Document is removed 
        during FrameView::updateWidget(). 

        Reviewed by Antti Koivisto.

        Test: fast/frames/crash-remove-iframe-during-object-beforeload.html

        * dom/Document.cpp:
        (WebCore::Document::attach):
        * dom/Document.h:
        (Document):
        * page/FrameView.cpp:
        (WebCore::FrameView::updateWidgets):
        * rendering/RenderArena.h:
        (RenderArena):
        (WebCore::RenderArena::create):

2013-04-26  Christophe Dumez  <ch.dumez@sisa.samsung.com>

        Optimize function and interface object length computation in bindings generator
        https://bugs.webkit.org/show_bug.cgi?id=115247

        Reviewed by Kentaro Hara.

        Introduce new GetFunctionLength() function that efficiently compute the length
        of a function (i.e. its number of mandatory parameters).

        We now call GetFunctionLength() instead of GenerateFunctionParametersCheck()
        whenever we care only interested in the function length and not the actual
        expression for checking the parameters. This is much more efficient as
        GenerateFunctionParametersCheck() does a lot more processing than we need in
        this case.

        No new tests, no behavior change.

        * bindings/scripts/CodeGeneratorJS.pm:
        (GetFunctionLength):
        (GenerateImplementation):
        (GenerateConstructorHelperMethods):

2013-04-26  Andreas Kling  <akling@apple.com>

        Web Audio: Remove reduplicative addInput() in AnalyserNode.
        <http://webkit.org/b/115244>

        From Blink r149155 by <james.wei@intel.com>:

        The parent class BasicInspectorNode already called addInput() and addOutput().
        So it is reduplicative to call them in AnalyserNode.

        * Modules/webaudio/AnalyserNode.cpp:
        (WebCore::AnalyserNode::AnalyserNode):
        * Modules/webaudio/AudioBasicInspectorNode.cpp:
        (WebCore::AudioBasicInspectorNode::AudioBasicInspectorNode):
        * Modules/webaudio/AudioBasicInspectorNode.h:
        (AudioBasicInspectorNode):
        * Modules/webaudio/MediaStreamAudioDestinationNode.cpp:
        (WebCore::MediaStreamAudioDestinationNode::MediaStreamAudioDestinationNode):

2013-04-26  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        Mouseenter and mouseleave events not supported
        https://bugs.webkit.org/show_bug.cgi?id=18930

        Reviewed by David Hyatt.

        Implements mouseenter and mouseleave events from W3C DOM Level 3 Events.
        These event are already supported by all other major browsers.

        To avoid performance regressions the new events are only dispatched when
        there are event listeners for them.

        Tests: fast/events/mouseenter-mouseleave-capture.html
               fast/events/mouseenter-mouseleave.html

        * bindings/scripts/CodeGenerator.pm:
        * dom/Document.cpp:
        (WebCore::Document::prepareMouseEvent):
        (WebCore::Document::updateHoverActiveState):
        * dom/Document.h:
        (Document):
        * dom/Document.idl:
        * dom/Element.h:
        (Element):
        * dom/Element.idl:
        * dom/EventListenerMap.cpp:
        (WebCore::EventListenerMap::containsCapturing):
        * dom/EventListenerMap.h:
        (EventListenerMap):
        * dom/EventNames.h:
        * dom/EventTarget.h:
        (EventTarget):
        (WebCore::EventTarget::hasCapturingEventListeners):
        * dom/MouseEvent.cpp:
        (WebCore::MouseEvent::create):
        (WebCore::MouseEvent::toElement):
        (WebCore::MouseEvent::fromElement):
        * html/HTMLAttributeNames.in:
        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::eventNameForAttributeName):
        * page/DOMWindow.h:
        (DOMWindow):
        * page/DOMWindow.idl:
        * svg/SVGElement.cpp:
        (WebCore::SVGElement::parseAttribute):
        * svg/SVGElementInstance.h:
        (SVGElementInstance):
        * svg/SVGElementInstance.idl:

2013-04-26  Christophe Dumez  <ch.dumez@sisa.samsung.com>

        Add support for Web IDL partial interfaces to the bindings generator
        https://bugs.webkit.org/show_bug.cgi?id=115228

        Reviewed by Kentaro Hara.

        Add support for Web IDL partial interfaces to the bindings generator:
        http://dev.w3.org/2006/webapi/WebIDL/#dfn-partial-interface

        Also drop support for the the WebKit-specific [Supplemental] extended
        attribute and use partial interfaces instead in existing IDL files.

        No new tests, no behavior change.

        * Modules/battery/NavigatorBattery.idl:
        * Modules/filesystem/DOMWindowFileSystem.idl:
        * Modules/filesystem/DataTransferItemFileSystem.idl:
        * Modules/filesystem/HTMLInputElementFileSystem.idl:
        * Modules/filesystem/WorkerContextFileSystem.idl:
        * Modules/gamepad/NavigatorGamepad.idl:
        * Modules/geolocation/NavigatorGeolocation.idl:
        * Modules/indexeddb/DOMWindowIndexedDatabase.idl:
        * Modules/indexeddb/WorkerContextIndexedDatabase.idl:
        * Modules/mediastream/DOMWindowMediaStream.idl:
        * Modules/mediastream/NavigatorMediaStream.idl:
        * Modules/navigatorcontentutils/NavigatorContentUtils.idl:
        * Modules/networkinfo/NavigatorNetworkInfoConnection.idl:
        * Modules/notifications/DOMWindowNotifications.idl:
        * Modules/notifications/WorkerContextNotifications.idl:
        * Modules/quota/DOMWindowQuota.idl:
        * Modules/quota/NavigatorStorageQuota.idl:
        * Modules/quota/WorkerNavigatorStorageQuota.idl:
        * Modules/speech/DOMWindowSpeech.idl:
        * Modules/speech/DOMWindowSpeechSynthesis.idl:
        * Modules/vibration/NavigatorVibration.idl:
        * Modules/webaudio/DOMWindowWebAudio.idl:
        * Modules/webdatabase/DOMWindowWebDatabase.idl:
        * Modules/webdatabase/WorkerContextWebDatabase.idl:
        * Modules/websockets/DOMWindowWebSocket.idl:
        * Modules/websockets/WorkerContextWebSocket.idl:
        * bindings/scripts/IDLAttributes.txt:
        * bindings/scripts/IDLParser.pm:
        (parsePartialDefinition):
        * bindings/scripts/generate-bindings.pl:
        * bindings/scripts/preprocess-idls.pl:
        (getPartialInterfaceNameFromIDLFile):
        * bindings/scripts/test/TestSupplemental.idl:
        * page/DOMWindowPagePopup.idl:

2013-04-25  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSS Regions] Hit testing is broken for absolutely positioned regions that have overflow: hidden
        https://bugs.webkit.org/show_bug.cgi?id=113874

        Reviewed by David Hyatt.

        Test: fast/regions/hit-test-abspos-overflow-region.html

        When a region is an out-of-flow positioned object with an overflow clip, we need
        to make sure that hit testing works also for cases other than foreground (content)
        hit testing. This patch moves the previous hit testing code, that delegated foreground
        hit testing to the region's flow thread hit testing, into the hitTestContent method,
        now that RenderRegion is RenderBlock based.

        * rendering/RenderRegion.cpp:
        (WebCore::RenderRegion::hitTestContents):
        * rendering/RenderRegion.h:
        (RenderRegion):

2013-04-25  Ryosuke Niwa  <rniwa@webkit.org>

        Copy and paste can strip !important CSS rules due to a bug in mergeStyleFromRules
        https://bugs.webkit.org/show_bug.cgi?id=115217

        Reviewed by Darin Adler.

        The bug was caused by mergeStyleFromRules overriding "important" style rules with "unimportant" inline styles.
        Fixed the bug by using addParsedProperty, which respects !important, in MutableStylePropertySet's
        mergeAndOverrideOnConflict, which was only used in editing code. Now that we've fixed this function, we can use
        it in ViewportStyleResolver::addViewportRule as well.

        Test: editing/pasteboard/copy-paste-with-important-rules.html

        * css/StylePropertySet.cpp:
        (WebCore::MutableStylePropertySet::mergeAndOverrideOnConflict): Fixed to respect !important.
        * css/ViewportStyleResolver.cpp:
        (WebCore::ViewportStyleResolver::addViewportRule): Use mergeAndOverrideOnConflict now that the code is identical.

2013-04-25  Andreas Kling  <akling@apple.com>

        StylePropertySet::getPropertyShorthand() should return a String.
        <http://webkit.org/b/115213>

        Reviewed by Anders Carlsson.

        Return a String directly from getPropertyShorthand() instead of forcing clients
        to call getPropertyNameString().

        * css/PropertySetCSSStyleDeclaration.cpp:
        (WebCore::PropertySetCSSStyleDeclaration::getPropertyShorthand):
        * css/StylePropertySet.cpp:
        (WebCore::StylePropertySet::getPropertyShorthand):
        * css/StylePropertySet.h:
        (StylePropertySet):

2013-04-25  Chris Fleizach  <cfleizach@apple.com>

        WEB SPEECH: language support does not work as expected
        https://bugs.webkit.org/show_bug.cgi?id=115119

        Reviewed by Alexey Proskuryakov.

        Make the Mac platform synthesizer have access to all the voices installed on the system.

        * WebCore.exp.in:
        * platform/mac/PlatformSpeechSynthesizerMac.mm:
        (WebCore::PlatformSpeechSynthesizer::initializeVoiceList):
        * platform/mac/WebCoreSystemInterface.h:
        * platform/mac/WebCoreSystemInterface.mm:

2013-04-25  Chris Fleizach  <cfleizach@apple.com>

        <meter> element not exposed to accessibility
        https://bugs.webkit.org/show_bug.cgi?id=109023
        rdar://problem/13658964

        Reviewed by Tim Horton.

        Makes the <meter> element appear in the AX tree by reusing the
        AccessibilityProgressIndicator element to handle either progress or meter
        elements.

        Test: accessibility/meter-element.html

        * accessibility/AXObjectCache.cpp:
        (WebCore::createFromRenderer):
        (WebCore::AXObjectCache::getOrCreate):
        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::canHaveChildren):
        (WebCore::AccessibilityNodeObject::visibleText):
        * accessibility/AccessibilityProgressIndicator.cpp:
        (WebCore::AccessibilityProgressIndicator::AccessibilityProgressIndicator):
        (WebCore::AccessibilityProgressIndicator::create):
        (WebCore::AccessibilityProgressIndicator::valueForRange):
        (WebCore::AccessibilityProgressIndicator::maxValueForRange):
        (WebCore::AccessibilityProgressIndicator::minValueForRange):
        (WebCore::AccessibilityProgressIndicator::progressElement):
        (WebCore::AccessibilityProgressIndicator::meterElement):
        * accessibility/AccessibilityProgressIndicator.h:
        (AccessibilityProgressIndicator):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::firstChild):
        (WebCore::AccessibilityRenderObject::lastChild):
            These methods are modified to handle when there is no rendered children, but there are Node
            children. The node children are desired when calculating text within a node, for example.

2013-04-25  Qiankun Miao  <qiankun.miao@intel.com>

        [CSS Shaders] Remove the meshType from the CustomFilterOperation
        https://bugs.webkit.org/show_bug.cgi?id=102529

        Reviewed by Dean Jackson.

        No new tests, no new functionality.

        MeshType can be accessed from program, so remove the m_meshType
        related code in CustomFilterOperation.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::createCustomFilterOperationWithInlineSyntax):
        * platform/graphics/filters/CustomFilterOperation.cpp:
        (WebCore::CustomFilterOperation::CustomFilterOperation):
        (WebCore::CustomFilterOperation::blend):
        * platform/graphics/filters/CustomFilterOperation.h:
        (WebCore::CustomFilterOperation::create):
        (WebCore::CustomFilterOperation::meshType):
        (CustomFilterOperation):
        (WebCore::CustomFilterOperation::operator==):
        * platform/graphics/texmap/coordinated/CoordinatedCustomFilterOperation.h:
        (WebCore::CoordinatedCustomFilterOperation::CoordinatedCustomFilterOperation):

2013-04-25  Kent Tamura  <tkent@chromium.org>

        Ignore invalid regular expressions for input[pattern].
        https://bugs.webkit.org/show_bug.cgi?id=115204

        Reviewed by Darin Adler.

        According to the specification, we should not proceed regular expression
        matching if a pattern attribute value is an invalid regular
        expression. We had a bug that invalid expressions such as
        pattern=")foo(" made RegularExpression objects successfully.

        http://www.whatwg.org/specs/web-apps/current-work/multipage/common-input-element-attributes.html#the-pattern-attribute
        > If an input element has a pattern attribute specified, and the
        > attribute's value, when compiled as a JavaScript regular expression with
        > the global, ignoreCase, and multiline flags disabled (see ECMA262
        > Edition 5, sections 15.10.7.2 through 15.10.7.4), compiles successfully,
        > then the resulting regular expression is the element's compiled pattern
        > regular expression. If the element has no such attribute, or if the
        > value doesn't compile successfully, then the element has no compiled
        > pattern regular expression.

        This imports a part of Blink r148951.

        Tests: Update fast/forms/ValidityState-patternMismatch.html

        * html/BaseTextInputType.cpp:
        (WebCore::BaseTextInputType::patternMismatch):
        Check correctness of pattern attribute value before wrapping with parentheses.
        * platform/text/RegularExpression.cpp:
        (WebCore::RegularExpression::isValid): Added.
        * platform/text/RegularExpression.h:
        (RegularExpression): Declare isValid.

2013-04-25  Antoine Quint  <graouts@apple.com>

        Glyphs may fail to render when using SVG font
        https://bugs.webkit.org/show_bug.cgi?id=115193

        Reviewed by Simon Fraser.

        Calling SimpleFontData::applyTransforms() when the font used is
        an SVG font makes little sense since Core Text doesn’t know or
        understand SVG fonts and would be passed some other, unrelated
        platform font.

        * platform/graphics/SimpleFontData.h:
        (WebCore::SimpleFontData::applyTransforms):

2013-04-25  Jer Noble  <jer.noble@apple.com>

        Media elements shouldn't resume playback when a page is restored from the back/forward cache if the WKView isn't in a window
        https://bugs.webkit.org/show_bug.cgi?id=115191

        Reviewed by Eric Carlson.

        If a page is suspended, then resumed when its WebView or WKView has been removed from a window,
        the page's media elements will unpause. Check whether media is allowed to start during resume()
        via Page::canMediaStart() and if not, register for mediaCanStart notifications. Then, in 
        mediaCanStart() if the media is force-paused, unpause it.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::suspend):
        (WebCore::HTMLMediaElement::resume):
        (WebCore::HTMLMediaElement::mediaCanStart):
        * html/HTMLMediaElement.h:
        (WebCore::HTMLMediaElement::pageConsentRequiredForResume):

2013-04-25  Andreas Kling  <akling@apple.com>

        Remove ENABLE(PARSED_STYLE_SHEET_CACHING) and make it always-on.

        Rubber-stamped by Anders Koivisto.

        * PlatformWinCE.cmake:
        * accessibility/AccessibilityObject.h:
        * html/HTMLLinkElement.cpp:
        (WebCore::HTMLLinkElement::setCSSStyleSheet):

2013-04-25  Patrick Gansterer  <paroga@webkit.org>

        Remove OS(WINCE) from AccessibilityObject.h
        https://bugs.webkit.org/show_bug.cgi?id=115192

        Reviewed by Andreas Kling.

        Use the same files like the the other PLATFORM(WIN) ports use.

        * PlatformWinCE.cmake:
        * accessibility/AccessibilityObject.h:
        (AccessibilityObject):

2013-04-25  Alberto Garcia  <agarcia@igalia.com>

        Add definition of GlyphBufferGlyph for BlackBerry
        https://bugs.webkit.org/show_bug.cgi?id=115183

        Reviewed by Xan Lopez.

        BlackBerry uses an unsigned int.

        * platform/graphics/GlyphBuffer.h:
        (WebCore):

2013-04-25  Joseph Pecoraro  <pecoraro@apple.com>

        ScriptExecutionContext log exception should include a column number
        https://bugs.webkit.org/show_bug.cgi?id=114315

        Reviewed by Oliver Hunt.

        Test: inspector/console/console-exception-stack-traces.html

        * bindings/js/ScriptCallStackFactory.h:
        * bindings/js/ScriptCallStackFactory.cpp:
        (WebCore::createScriptCallStackFromException):
        Generate a ScriptCallStack from an exception. Use the vm.exceptionStack
        if available, and fallback to the exception object where needed.

        * bindings/js/JSDOMBinding.cpp:
        (WebCore::reportException):
        Always include a non-empty call stack with exceptions.
        Where not provided, fallback to the exception object.

        * dom/Document.h:
        * dom/Document.cpp:
        (WebCore::Document::logExceptionToConsole):
        * dom/ScriptExecutionContext.h:
        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::PendingException::PendingException):
        (ScriptExecutionContext::PendingException):
        (WebCore::ScriptExecutionContext::reportException):
        * workers/DefaultSharedWorkerRepository.cpp:
        * workers/SharedWorkerContext.cpp:
        (WebCore::SharedWorkerContext::logExceptionToConsole):
        * workers/SharedWorkerContext.h:
        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::logExceptionToConsole):
        * workers/WorkerContext.h:
        * workers/WorkerMessagingProxy.cpp:
        (WebCore::WorkerExceptionTask::performTask):
        Plumb columnNumber through as needed.

2013-04-25  Gregg Tavares  <gman@chromium.org>

        Fix build files so WebGLDebugXXX extensions can be used if enabled.
        https://bugs.webkit.org/show_bug.cgi?id=113976

        Reviewed by Dean Jackson.

        No new tests as no new functionality.

        * DerivedSources.make:
        * GNUmakefile.list.am:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSWebGLRenderingContextCustom.cpp:

2013-04-25  Ryosuke Niwa  <rniwa@webkit.org>

        cloneChildNodes looks for deleteButtonController in each level of recursion
        https://bugs.webkit.org/show_bug.cgi?id=115146

        Reviewed by Andreas Kling.

        Obtain the delete button controller upfront, and shallow copy descendents of each child
        so that we don't look for the delete button controller inside cloneNode called on each child.

        Performance Tests: DOM/CloneNodes.html

        * dom/ContainerNode.cpp:
        (WebCore::cloneChildNodesAvoidingDeleteButon): Extracted.
        (WebCore::ContainerNode::cloneChildNodes):

2013-04-25  Ryosuke Niwa  <rniwa@webkit.org>

        HTMLOptionsCollection's namedItem and name getter should return the first item
        https://bugs.webkit.org/show_bug.cgi?id=115150

        Reviewed by Andreas Kling.

        Following the resolution in http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2012-December/038355.html,
        the spefication has been updated to only return the first item when there are multiple items of the same name
        in HTMLOptionsCollection; this new behavior matches that of Firefox and Opera (Presto).

        Implement this new behavior to remove the custom binding code and use the fast path in namedItem and name
        getter of HTMLOptionsCollection. (Obtaining all items for a given name is expensive!).

        Tests: fast/dom/HTMLSelectElement/named-options.html
               fast/dom/html-collections-named-getter.html

        * bindings/js/JSHTMLOptionsCollectionCustom.cpp:
        (WebCore): Removed the custom bindings for name getter and namedItem.
        * html/HTMLOptionsCollection.idl:

2013-04-25  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: ConsoleMessage should include line and column number where possible
        https://bugs.webkit.org/show_bug.cgi?id=114929

          - adds "m_column" to WebCore::ConsoleMessage
          - adds "column" to Console.ConsoleMessage in the inspector protocol
          - set the column number for console.* functions (Console.cpp)
          - set the column number for XSLT errors (XSLTProcessor)
          - plumb columnNumber everywhere else it is needed, set it to 0 and file
            bugs for all cases missing columnNumber that could provide it.

        Reviewed by Timothy Hatcher.

        Test: inspector/console/console-url-line-column.html
              inspector/console/console-messages-stack-traces.html

        * inspector/ConsoleMessage.h:
        * inspector/ConsoleMessage.cpp:
        (WebCore::ConsoleMessage::ConsoleMessage):
        (WebCore::ConsoleMessage::autogenerateMetadata):
        (WebCore::ConsoleMessage::addToFrontend):
        (WebCore::ConsoleMessage::isEqual):
        Add m_column and set it where appropriate.

        * inspector/Inspector.json:
        Add column property to Console.ConsoleMessage.

        * page/Console.cpp:
        (WebCore::internalAddMessage):
        (WebCore::Console::profile):
        Set columnNumber like lineNumber from the last stack frame.
        (WebCore::Console::groupEnd):
        Line and column are unused in this message type, set both to 0.

        * xml/XSLTProcessorLibxslt.cpp:
        (WebCore::XSLTProcessor::parseErrorFunc):
        * xml/XSLTProcessorQt.cpp:
        (WebCore::XSLTMessageHandler::handleMessage):
        Add real column numbers, the XSLT handlers already had it available.

        * bindings/js/JSCustomXPathNSResolver.cpp:
        (WebCore::JSCustomXPathNSResolver::lookupNamespaceURI):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::logError):
        * dom/ScriptExecutionContext.h:
        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::addConsoleMessage):
        * dom/Document.cpp:
        (WebCore::Document::logExceptionToConsole):
        (WebCore::Document::addMessage):
        * dom/Document.h:
        * inspector/InspectorConsoleAgent.cpp:
        (WebCore::InspectorConsoleAgent::addMessageToConsole):
        (WebCore::InspectorConsoleAgent::stopTiming):
        (WebCore::InspectorConsoleAgent::didFinishXHRLoading):
        (WebCore::InspectorConsoleAgent::didReceiveResponse):
        (WebCore::InspectorConsoleAgent::didFailLoading):
        * inspector/InspectorConsoleAgent.h:
        * inspector/InspectorConsoleInstrumentation.h:
        (WebCore::InspectorInstrumentation::addMessageToConsole):
        (WebCore::InspectorInstrumentation::addStartProfilingMessageToConsole):
        * inspector/InspectorInstrumentation.cpp:
        (WebCore::InspectorInstrumentation::addMessageToConsoleImpl):
        (WebCore::InspectorInstrumentation::addStartProfilingMessageToConsoleImpl):
        (WebCore::InspectorInstrumentation::addProfileImpl):
        * inspector/InspectorInstrumentation.h:
        (InspectorInstrumentation):
        * inspector/InspectorProfilerAgent.cpp:
        (WebCore::InspectorProfilerAgent::addProfile):
        (WebCore::InspectorProfilerAgent::addProfileFinishedMessageToConsole):
        (WebCore::InspectorProfilerAgent::addStartProfilingMessageToConsole):
        (WebCore::InspectorProfilerAgent::start):
        (WebCore::InspectorProfilerAgent::stop):
        * inspector/InspectorProfilerAgent.h:
        (InspectorProfilerAgent):
        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::addMessageToConsole):
        * page/ChromeClient.h:
        (WebCore::ChromeClient::addMessageToConsole):
        * page/ContentSecurityPolicy.cpp:
        (WebCore::ContentSecurityPolicy::logToConsole):
        * page/PageConsole.cpp:
        (WebCore::PageConsole::addMessage):
        * page/PageConsole.h:
        * workers/DefaultSharedWorkerRepository.cpp:
        (SharedWorkerProxy):
        (WebCore::postExceptionTask):
        (WebCore::SharedWorkerProxy::postExceptionToWorkerObject):
        (WebCore::postConsoleMessageTask):
        (WebCore::SharedWorkerProxy::postConsoleMessageToWorkerObject):
        * workers/SharedWorkerContext.cpp:
        (WebCore::SharedWorkerContext::logExceptionToConsole):
        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::logExceptionToConsole):
        (WebCore::WorkerContext::addConsoleMessage):
        (WebCore::WorkerContext::addMessage):
        (WebCore::WorkerContext::addMessageToWorkerConsole):
        * workers/WorkerContext.h:
        * workers/WorkerMessagingProxy.cpp:
        (WebCore::WorkerExceptionTask::create):
        (WebCore::WorkerExceptionTask::WorkerExceptionTask):
        (WebCore::WorkerExceptionTask::performTask):
        (WorkerExceptionTask):
        (WebCore::WorkerMessagingProxy::postExceptionToWorkerObject):
        (WebCore::postConsoleMessageTask):
        (WebCore::WorkerMessagingProxy::postConsoleMessageToWorkerObject):
        * workers/WorkerMessagingProxy.h:
        (WorkerMessagingProxy):
        * workers/WorkerReportingProxy.h:
        (WorkerReportingProxy):
        Plumb columnNumber through where appropriate. File bugs where missing.

2013-04-25  Allan Sandfeld Jensen  <allan.jensen@digia.com>

        [Qt] Animated opacity does not trigger accelerated compositing
        https://bugs.webkit.org/show_bug.cgi?id=115107

        Reviewed by Simon Fraser.

        Add extra option to also trigger compositing on animated opacity.

        * page/ChromeClient.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::requiresCompositingForAnimation):

2013-04-25  Lamarque V. Souza  <Lamarque.Souza@basyskom.com>

        Sec-WebSocket-Extensions header field must not appear more than once in an HTTP response.
        https://bugs.webkit.org/show_bug.cgi?id=115128

        Reviewed by Alexey Proskuryakov.

        According to WebSocket specification Sec-WebSocket-Extensions header field
        must not appear more than once in an HTTP response. It is ok if it appears
        more than once in client request. Also add a check for invalid UTF-8
        characters when parsing Sec-WebSocket-Extensions quoted string.

        Test: http/tests/websocket/tests/hybi/handshake-fail-by-more-extensions-header.html

        * Modules/websockets/WebSocketExtensionParser.cpp:
        (WebCore::WebSocketExtensionParser::consumeQuotedString): Return false if there is
        invalid character in the quoted string being parsed.
        * Modules/websockets/WebSocketHandshake.cpp:
        (WebCore::WebSocketHandshake::readHTTPHeaders): Check if Sec-WebSocket-Extensions
        appears more than once in header response. Abort handshake if it does.

2013-04-25  Raphael Kubo da Costa  <raphael.kubo.da.costa@intel.com>

        REGRESSION(r148758): Remove WTFLogAlways call from IconLoader.
        https://bugs.webkit.org/show_bug.cgi?id=115182

        Reviewed by Dan Bernstein.

        The call added in r148758 was apparently a leftover from some debugging
        session, and it makes the Interactive/window-resize.html performance
        test randomly fail on Qt and EFL due to WTFLogAlways writing to stderr.

        * loader/icon/IconLoader.cpp:
        (WebCore::IconLoader::notifyFinished):

2013-04-25  Christophe Dumez  <ch.dumez@sisa.samsung.com>

        Add support for Web IDL callback interfaces to the bindings generator
        https://bugs.webkit.org/show_bug.cgi?id=115179

        Reviewed by Kentaro Hara.

        Add support in the bindings generator for Web IDL callback interfaces:
        http://dev.w3.org/2006/webapi/WebIDL/#dfn-callback-interface

        Drop support for the WebKit-specific [Callback] extended attributes
        on Web IDL interfaces and update existing IDL files to use proper
        callback interfaces instead.

        No new tests, no behavior change.

        * Modules/filesystem/EntriesCallback.idl:
        * Modules/filesystem/EntryCallback.idl:
        * Modules/filesystem/ErrorCallback.idl:
        * Modules/filesystem/FileCallback.idl:
        * Modules/filesystem/FileSystemCallback.idl:
        * Modules/filesystem/FileWriterCallback.idl:
        * Modules/filesystem/MetadataCallback.idl:
        * Modules/geolocation/PositionCallback.idl:
        * Modules/geolocation/PositionErrorCallback.idl:
        * Modules/mediastream/NavigatorUserMediaErrorCallback.idl:
        * Modules/mediastream/NavigatorUserMediaSuccessCallback.idl:
        * Modules/mediastream/RTCErrorCallback.idl:
        * Modules/mediastream/RTCSessionDescriptionCallback.idl:
        * Modules/mediastream/RTCStatsCallback.idl:
        * Modules/notifications/NotificationPermissionCallback.idl:
        * Modules/quota/StorageErrorCallback.idl:
        * Modules/quota/StorageQuotaCallback.idl:
        * Modules/quota/StorageUsageCallback.idl:
        * Modules/webaudio/AudioBufferCallback.idl:
        * Modules/webdatabase/DatabaseCallback.idl:
        * Modules/webdatabase/SQLStatementCallback.idl:
        * Modules/webdatabase/SQLStatementErrorCallback.idl:
        * Modules/webdatabase/SQLTransactionCallback.idl:
        * Modules/webdatabase/SQLTransactionErrorCallback.idl:
        * Modules/webdatabase/SQLTransactionSyncCallback.idl:
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateInterface):
        * bindings/scripts/IDLParser.pm:
        (parseCallbackRestOrInterface):
        * bindings/scripts/test/TestCallback.idl:
        * dom/RequestAnimationFrameCallback.idl:
        * dom/StringCallback.idl:
        * html/VoidCallback.idl:

2013-04-25  Adrian Perez de Castro  <aperez@igalia.com>

        [GStreamer] Add audio/speex MIME type as supported
        https://bugs.webkit.org/show_bug.cgi?id=115032

        Reviewed by Philippe Normand.

        GStreamer has support for the Speex codec (http://www.speex.org).
        Speex streams may be embedded in a Ogg container, or standalone.
        The case of the Ogg container is already covered by the "*/ogg"
        MIME types declared as supported by the GStreamer media playing
        code, but for standalone streams to work, "audio/speex" has to
        be added.

        With this, and the needed GStreamer plugin installed, the GTK+
        launcher is able to correctly play Speex streams served with
        "Content-type: audio/speex".

        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:

2013-04-25  Andreas Kling  <akling@apple.com>

        Add FINAL decorators to the InlineBox class hierarchy.
        <http://webkit.org/b/115177>

        Reviewed by Antti Koivisto.

        From Blink r148628 by <cevans@chromium.org>:

        FINAL is a macro in wtf/Compiler.h that does the correct thing if the compiler does not support "final")
        The approach used is as simple as possible whilst being thorough.
        So, leaf classes have FINAL applied to the whole class whereas intermediary classes have FINAL applied to relevant methods.

        FINAL allows a compiler to devirtualize call sites and turn them into direct calls. As you might expect, this is perf positive:
        (clang on Linux):
        - line_layout.html goes from 120 runs/s -> 123 runs/2, +2.5%
        - html5-full-render.html goes from 3176ms -> 3162ms, +0.4%

        I have confidence that the former result is statistically significant (as the numbers are very very stable) but not the latter.

        * rendering/EllipsisBox.h:
        * rendering/InlineFlowBox.h:
        * rendering/InlineTextBox.h:
        * rendering/RootInlineBox.h:
        * rendering/TrailingFloatsRootInlineBox.h:
        * rendering/svg/SVGInlineFlowBox.h:
        * rendering/svg/SVGInlineTextBox.h:
        * rendering/svg/SVGRootInlineBox.h:

2013-04-25  Andreas Kling  <akling@apple.com>

        CSS parser: Add error recovery while parsing @-webkit-keyframes key values.
        <http://webkit.org/b/115175>

        From Blink r148714 by <apavlov@chromium.org>:

        If not a percentage, "from", or "to" value is used in a key list, the rule is erroneous,
        and due to the absense of recovery, the parser skips the following, valid CSS rule.

        On a related note, keyframes, whose selectors contain invalid keys, should be discarded
        altogether, according to <http://www.w3.org/TR/css3-animations/#keyframes>

        Tests: animations/keyframes-invalid-keys.html
               fast/css/webkit-keyframes-errors.html

        * css/CSSGrammar.y.in:
        * css/CSSParser.cpp:
        (WebCore::CSSParser::rewriteSpecifiers):

2013-04-25  Antti Koivisto  <antti@apple.com>

        REGRESSION (r147797): Animations slideshows of images on www.thesuperficial.com are slow
        https://bugs.webkit.org/show_bug.cgi?id=115172

        Reviewed by Andreas Kling.

        On this page ads dynamically loaded to subframes on slideshow navigation switch us to state where we throttle layer flushes.
        
        Fix by ignoring any subframe-originated loads when determining throttling.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadProgressingStatusChanged):
        * loader/ProgressTracker.cpp:
        (WebCore::ProgressTracker::isMainLoadProgressing):
        
            Rename, ignore subframe originated loads. Subframe loads that are initiated during the main load still count.

        * loader/ProgressTracker.h:
        (ProgressTracker):
        * page/FrameView.cpp:
        (WebCore::FrameView::updateLayerFlushThrottlingInAllFrames):
        * page/FrameView.h:
        (FrameView):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::computeTileCoverage):

2013-04-25  Andreas Kling  <akling@apple.com>

        SVG: Fix viewBox animations on shapes with non-scaling-stroke.
        <http://webkit.org/b/115173>

        From Blink r149058 by <pdr@chromium.org>:

        Previously hasAttribute() to determine if a viewBox was set in the transform
        code for non-scaling-strokes. hasAttribute() should not be used in this case,
        as it will return false if the attribute is not set but the value is animating.

        This patch switches to checking if the viewBox is empty instead of checking for
        the presence of the attribute.

        Test: svg/stroke/animated-non-scaling-stroke.html

        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::localCoordinateSpaceTransform):
        * svg/SVGSVGElement.h:
        (WebCore::SVGSVGElement::hasEmptyViewBox):

2013-04-25  Andreas Kling  <akling@apple.com>

        Remove isPluginElement hack in Document::setFocusedNode()
        <http://webkit.org/b/115171>

        From Blink r148800 by <tkent@chromium.org>:

        This hack is no longer necessary because r147591 made isFocusable for plugin
        elements work correctly.

        * dom/Document.cpp:
        (WebCore::Document::setFocusedNode):

2013-04-25  Per-Erik Brodin  <per-erik.brodin@ericsson.com>

        EventSource: Synchronous loader callback not handled properly
        https://bugs.webkit.org/show_bug.cgi?id=115104

        When attempting a cross-origin request towards a non-HTTP URL, an early verification
        of the protocol scheme will cause didFailAccessControlCheck to be called synchronously
        before the loader has even finished being created. This special case was not handled
        properly, since we tried to cancel a non-existing loader, which resulted in a crash.
        In addition to checking whether a request is in flight before trying to cancel it,
        this change also schedules the initial creation of the loader to happen asynchronously
        when an EventSource is constructed, so that a script can register for the error event
        before it is dispatched (as a result of passing a non-HTTP URL to the constructor).

        Reviewed by Alexey Proskuryakov.

        Test: http/tests/eventsource/eventsource-cors-non-http.html

        * page/EventSource.cpp:
        (WebCore::EventSource::EventSource):
        (WebCore::EventSource::create):
        (WebCore::EventSource::scheduleInitialConnect):
        (WebCore):
        (WebCore::EventSource::scheduleReconnect):
        (WebCore::EventSource::connectTimerFired):
        (WebCore::EventSource::close):
        (WebCore::EventSource::abortConnectionAttempt):
        * page/EventSource.h:
        (EventSource):

2013-04-25  Patrick Gansterer  <paroga@webkit.org>

        Unreviewed WinCE build fix after r148545.

        * page/wince/FrameWinCE.cpp:

2013-04-24  Kent Tamura  <tkent@chromium.org>

        Back references don't work in pattern attribute
        https://bugs.webkit.org/show_bug.cgi?id=105875

        Reviewed by Geoffrey Garen.

        This imports a part of Blink r148951.

        Tests: Update fast/forms/ValidityState-patternMismatch.html

        * html/BaseTextInputType.cpp:
        (WebCore::BaseTextInputType::patternMismatch):
        Don't use capturing parentheses. They affected back references in
        pattern attribute values.

2013-04-24  Tim Horton  <timothy_horton@apple.com>

        PDFPlugin: Cursor should become an i-beam when over selectable text
        https://bugs.webkit.org/show_bug.cgi?id=115018
        <rdar://problem/12645012>

        Reviewed by Alexey Proskuryakov.

        * WebCore.exp.in: Export the I-beam and arrow cursors.

2013-04-24  Simon Fraser  <simon.fraser@apple.com>

        Garbage at the top of http://www.technologyreview.com after scrolling
        https://bugs.webkit.org/show_bug.cgi?id=114825

        Reviewed by Tim Horton.

        Garbage pixels are caused by GraphicsLayerCA setting a layer to be opaque,
        but then not painting anything into it. On this page, the element is
        toggled to be visibility:hidden on scrolling, but RenderLayer::backgroundIsKnownToBeOpaqueInRect()
        failed to consider that as something that can cause backgrounds not to be opaque.
        
        For the bug to happen, some subtle interactions with r142012 come into play
        for the layer to remain visible, hence the slightly complex testcase.
        
        Test: compositing/contents-opaque/visibility-hidden.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::backgroundIsKnownToBeOpaqueInRect):

2013-04-24  Simon Fraser  <simon.fraser@apple.com>

        Dump layer opaqueness in the Compositing log output
        https://bugs.webkit.org/show_bug.cgi?id=115132

        Reviewed by Tim Horton.

        It's useful to see whether we consider layers to be opaque in the Compositing
        log channel output, so dump it.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::logLayerInfo):

2013-04-24  Seokju Kwon  <seokju.kwon@gmail.com>

        Add efl to JSInspectorFrontendHost::port()
        https://bugs.webkit.org/show_bug.cgi?id=115137

        Reviewed by Timothy Hatcher.

        No new tests, because there is no change in behavior.

        * bindings/js/JSInspectorFrontendHostCustom.cpp:
        (WebCore::JSInspectorFrontendHost::port):

2013-04-24  Kangil Han  <kangil.han@samsung.com>

        Function parameter quotePair can be passed by reference
        https://bugs.webkit.org/show_bug.cgi?id=115089

        Reviewed by Alexey Proskuryakov.

        Minor performance patch.

        * rendering/style/QuotesData.cpp:
        (WebCore::QuotesData::addPair):
        * rendering/style/QuotesData.h:
        (QuotesData):

2013-04-24  Brady Eidson  <beidson@apple.com>

        Implementors of CachedResource subclasses should be forced to decide if encoded data can be replaced.
        https://bugs.webkit.org/show_bug.cgi?id=115140

        Reviewed by Beth Dakin.

        No new tests (No behavior change).

        This makes mayTryReplaceEncodedData() return false in CachedResource, but overrides to true
        in all CachedResource subclasses besides CachedFont (which already has an implementation).

        * loader/cache/CachedCSSStyleSheet.h:
        * loader/cache/CachedImage.h:
        * loader/cache/CachedRawResource.h:
        * loader/cache/CachedResource.h:
        * loader/cache/CachedSVGDocument.h:
        * loader/cache/CachedScript.h:
        * loader/cache/CachedShader.h:
        * loader/cache/CachedTextTrack.h:
        * loader/cache/CachedXSLStyleSheet.h:

2013-04-24  Brady Eidson  <beidson@apple.com>

        Once a custom font is cached to disk, it starts failing to render until the page is refreshed.
        <rdar://problem/13622998> and https://bugs.webkit.org/show_bug.cgi?id=115131

        Reviewed by Alexey Proskuryakov.

        No new tests (Not a tested config, nor are disk cache issues currently testable).

        * loader/cache/CachedResource.h:
        (WebCore::CachedResource:: mayTryReplaceEncodedData): Allow subclasses to refuse encoded data replacement.

        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::tryReplaceEncodedData): Only try if shouldTryReplaceEncodedData() is true.

        * loader/cache/CachedFont.cpp:
        (WebCore::CachedFont::CachedFont):
        (WebCore::CachedFont::ensureCustomFontData):
        (WebCore::CachedFont::mayTryReplaceEncodedData): Return false if the custom font data has ever been created.
        * loader/cache/CachedFont.h:

2013-04-24  Beth Dakin  <bdakin@apple.com>

        Vertical overlay scrollbar in iframes fades in and out rapidly when you scroll in 
        a circle
        https://bugs.webkit.org/show_bug.cgi?id=115124
        -and corresponding-
        <rdar://problem/13168957>

        Reviewed by Anders Carlsson.

        With http://trac.webkit.org/changeset/119834 we started calling 
        ScrollbarPainterController's contentAreaScrolled/contentAreaScrolledInDirection 
        API on a zero-delay timer instead of calling it right away. This prevented some 
        crashes that we saw whenever this was called during a layout. However, that delay, 
        combined with the particulars of contentAreaScrolledInDirection cause this bug 
        where sometimes the scrollbars in an iframe will fade out very noticeably when 
        scrolling in a circle.

        This change makes it so we will only use the zero-delay timer if the 
        ScrollableArea is not currently handling a wheel event. If it IS handling a wheel 
        event, then we will send the notifications to AppKit right away. I confirmed that 
        this change did not reintroduce the old crashes. 

        Keep track of whether we are currently handling a wheel event with the new member 
        variable m_isHandlingWheelEvent.
        * page/EventHandler.cpp:
        (WebCore::EventHandler::EventHandler):
        (WebCore::EventHandler::handleWheelEvent):
        * page/EventHandler.h:
        (WebCore::EventHandler::isHandlingWheelEvent):
        (EventHandler):

        To prevent layering violations, the ScrollableArea sub-classes will have to access 
        this information from the EventHandler.
        * page/FrameView.cpp:
        (WebCore::FrameView::isHandlingWheelEvent):
        * page/FrameView.h:
        * platform/ScrollableArea.h:
        (WebCore::ScrollableArea::isHandlingWheelEvent):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::isHandlingWheelEvent):
        * rendering/RenderLayer.h:
        (RenderLayer):
        * rendering/RenderListBox.cpp:
        (WebCore::RenderListBox::isHandlingWheelEvent):
        * rendering/RenderListBox.h:

        sendContentAreaScrolledSoon() can be private. Also add new function 
        sendContentAreaScrolled().
        * platform/mac/ScrollAnimatorMac.h:
        (ScrollAnimatorMac):

        If the ScrollableArea is handling a wheel event, call 
        sendContentAreaScrolled(), otherwise call sendContentAreaScrolledSoon()
        * platform/mac/ScrollAnimatorMac.mm:
        (WebCore::ScrollAnimatorMac::notifyContentAreaScrolled):
        (WebCore::ScrollAnimatorMac::sendContentAreaScrolled):

        Re-factored to use sendContentAreaScrolled()
        (WebCore::ScrollAnimatorMac::sendContentAreaScrolledTimerFired):

2013-04-24  Ryosuke Niwa  <rniwa@webkit.org>

        Fix a merge error in r149007 (was missing a null check added in r148777).

        * rendering/LogicalSelectionOffsetCaches.h:
        (WebCore::containingBlockForAbsolutePosition):

2013-04-24  Otto Derek Cheung  <otcheung@rim.com>

        Battery API won't return updated battery status until client calls didChangeBatteryStatus
        https://bugs.webkit.org/show_bug.cgi?id=114891

        Reviewed by Rob Buis.

        The BatteryStatus object in BatteryManager won't get updated until BatteryClient calls
        didChangeBatteryStatus in BatteryController. Any attempts to call webkitBattery.charged()
        or other get functions will always return the default values until the next battery status
        change object gets passed to the controller.

        We need to update the manager when we attach it to the controller, and update all
        existing managers when the controller receives it's first battery status object.

        * Modules/battery/BatteryController.cpp:
        (WebCore::BatteryController::addListener):
        (WebCore::BatteryController::updateBatteryStatus):
        * Modules/battery/BatteryManager.cpp:
        (WebCore::BatteryManager::didChangeBatteryStatus):
        (WebCore::BatteryManager::updateBatteryStatus):
        (WebCore):
        * Modules/battery/BatteryManager.h:
        (BatteryManager):

2013-04-24  Jacky Jiang  <zhajiang@blackberry.com>

        Clean up unused code in ViewportArguments.h
        https://bugs.webkit.org/show_bug.cgi?id=115121

        Reviewed by Benjamin Poulain.

        The target-densityDPI emulation implementation has been removed by
        r147893, so clean up the remaining code as well.

        * dom/ViewportArguments.h:

2013-04-24  Andreas Kling  <akling@apple.com>

        ElementData should use 'unsigned' attribute indices.
        <http://webkit.org/b/115103>

        Reviewed by Antti Koivisto.

        Switch to using 'unsigned' for attribute indices. This gives consistent behavior
        on 32/64-bit, and the underlying storage is already limited by Vector's 32-bit capacity.

        Added an ElementData::attributeNotFound constant (-1) since we can't use WTF::notFound.

        * dom/Element.cpp:
        (WebCore::Element::detachAttribute):
        (WebCore::Element::removeAttribute):
        (WebCore::Element::setAttribute):
        (WebCore::Element::setSynchronizedLazyAttribute):
        (WebCore::Element::setAttributeInternal):
        (WebCore::Element::setAttributeNode):
        (WebCore::Element::removeAttributeNode):
        (WebCore::Element::removeAttributeInternal):
        (WebCore::UniqueElementData::removeAttribute):
        (WebCore::ElementData::getAttributeItemIndexSlowCase):
        * dom/Element.h:
        (ElementData):
        (UniqueElementData):
        (Element):
        (WebCore::Element::getAttributeItemIndex):
        (WebCore::Element::attributeCount):
        (WebCore::ElementData::length):
        (WebCore::ElementData::getAttributeItem):
        (WebCore::ElementData::getAttributeItemIndex):
        * dom/NamedNodeMap.cpp:
        (WebCore::NamedNodeMap::removeNamedItem):
        (WebCore::NamedNodeMap::removeNamedItemNS):
        (WebCore::NamedNodeMap::length):
        * dom/NamedNodeMap.h:
        (NamedNodeMap):

2013-04-24  Andreas Kling  <akling@apple.com>

        ElementData::attributeItem() should bounds-check the index.
        <http://webkit.org/b/115076>

        Reviewed by Antti Koivisto.

        Switch the ASSERT_WITH_SECURITY_IMPLICATION to a RELEASE_ASSERT.

        * dom/Element.h:
        (WebCore::ElementData::attributeItem):

2013-04-23  Andreas Kling  <akling@apple.com>

        Setting an inline style property to "" shouldn't cause style recalc unless the property was present.
        <http://webkit.org/b/115122>

        Reviewed by Antti Koivisto.

        StylePropertySet::setProperty() handles empty strings by removing the property entirely.
        If there was no property to remove, it shouldn't claim that it changed something, as that
        will cause the CSSOM wrapper to mark the element for style recalc.

        A common idiom that triggers this is excessive use of { element.style.display = ''; }

        * css/StylePropertySet.cpp:
        (WebCore::MutableStylePropertySet::setProperty):

2013-04-23  Ryosuke Niwa  <rniwa@webkit.org>

        Moving word boundaries backwards fails when there is a text node starting with an apostrophe
        https://bugs.webkit.org/show_bug.cgi?id=115070

        Reviewed by Alexey Proskuryakov.

        The bug was caused by previousBoundary erroneously assuming that we don't need any more context if a word
        boundary is found at the beginning of a string. For example, when "I'll" is split into two text nodes,
        "I" and "'ll", there is a word boundary between "'" and "ll" in "'ll" so we need to examine the whole "I'll".

        Fixed the bug by obtaining more context when the character starts exactly at offset 1 in a text node to
        work around this bug. In the long term, we probably need to provide Foundation of the entire context since in
        languages like Hebrew and some of European languages, there could be many accents and combining characters
        between split into multiple text nodes as one variant is seen in the newly added test case.

        Test: editing/selection/previous-word-boundary-across-text-nodes.html

        * editing/VisibleUnits.cpp:
        (WebCore::previousBoundary):

2013-04-24  Benjamin Poulain  <bpoulain@apple.com>

        Do not use static string in DiagnosticLoggingKeys
        https://bugs.webkit.org/show_bug.cgi?id=115093

        Reviewed by Andreas Kling.

        The code is not hot enough to justify keeping the memory around.
        This removes 3kb from the binary on x86_64.

        * page/DiagnosticLoggingKeys.cpp:
        (WebCore::DiagnosticLoggingKeys::mediaLoadedKey):
        (WebCore::DiagnosticLoggingKeys::mediaLoadingFailedKey):
        (WebCore::DiagnosticLoggingKeys::pluginLoadedKey):
        (WebCore::DiagnosticLoggingKeys::pluginLoadingFailedKey):
        (WebCore::DiagnosticLoggingKeys::pageContainsPluginKey):
        (WebCore::DiagnosticLoggingKeys::pageContainsAtLeastOnePluginKey):
        (WebCore::DiagnosticLoggingKeys::pageContainsMediaEngineKey):
        (WebCore::DiagnosticLoggingKeys::pageContainsAtLeastOneMediaEngineKey):
        (WebCore::DiagnosticLoggingKeys::passKey):
        (WebCore::DiagnosticLoggingKeys::failKey):
        (WebCore::DiagnosticLoggingKeys::noopKey):
        * page/DiagnosticLoggingKeys.h:
        (DiagnosticLoggingKeys):

2013-04-24  Benjamin Poulain  <benjamin@webkit.org>

        Remove wxWebKit #ifdefs from WebCore/platform/graphics
        https://bugs.webkit.org/show_bug.cgi?id=115081

        Reviewed by Geoffrey Garen.

        * platform/graphics/BitmapImage.h:
        (BitmapImage):
        * platform/graphics/Color.h:
        (Color):
        * platform/graphics/FloatRect.h:
        (FloatRect):
        * platform/graphics/FloatSize.h:
        (FloatSize):
        * platform/graphics/FontPlatformData.h:
        * platform/graphics/GlyphBuffer.h:
        (WebCore):
        (WebCore::GlyphBuffer::glyphAt):
        (WebCore::GlyphBuffer::add):
        * platform/graphics/Gradient.h:
        * platform/graphics/GraphicsContext.h:
        (GraphicsContext):
        * platform/graphics/Image.cpp:
        (WebCore::Image::drawTiled):
        * platform/graphics/ImageBufferData.h:
        * platform/graphics/IntPoint.h:
        (IntPoint):
        * platform/graphics/IntRect.h:
        * platform/graphics/IntSize.h:
        (IntSize):
        * platform/graphics/NativeImagePtr.h:
        (WebCore):
        * platform/graphics/Path.h:
        * platform/graphics/Pattern.h:
        * platform/graphics/SimpleFontData.h:
        (SimpleFontData):
        (WebCore::SimpleFontData::widthForGlyph):
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::collectComplexTextRuns):
        * platform/graphics/mac/ComplexTextControllerCoreText.mm:
        (WebCore::ComplexTextController::collectComplexTextRunsForCharacters):
        * platform/graphics/transforms/AffineTransform.h:
        (AffineTransform):
        * platform/graphics/transforms/TransformationMatrix.h:
        (TransformationMatrix):

2013-04-24  Benjamin Poulain  <benjamin@webkit.org>

        Remove wxWebKit #ifdefs from WebCore/plugins
        https://bugs.webkit.org/show_bug.cgi?id=115080

        Reviewed by Geoffrey Garen.

        * plugins/PluginView.h:
        (PluginView):
        * plugins/mac/PluginViewMac.mm:
        (WebCore::nativeWindowFor):
        (WebCore::cgHandleFor):
        (WebCore::topLevelOffsetFor):
        (WebCore::PluginView::platformStart):
        * plugins/win/PluginViewWin.cpp:
        (windowHandleForPageClient):
        (WebCore::PluginView::handleMouseEvent):
        (WebCore::PluginView::platformStart):
        (WebCore::PluginView::snapshot):

2013-04-24  Benjamin Poulain  <benjamin@webkit.org>

        Remove wxWebKit #ifdefs from WebCore/page
        https://bugs.webkit.org/show_bug.cgi?id=115079

        Reviewed by Geoffrey Garen.

        * page/FrameView.cpp:
        (WebCore::FrameView::wheelEvent):
        * page/Settings.cpp:
        (WebCore):
        * page/Settings.h:
        (Settings):

2013-04-24  Chris Fleizach  <cfleizach@apple.com>

        AX: WAI-ARIA landmarks no longer speak type of landmark on iOS
        https://bugs.webkit.org/show_bug.cgi?id=114547

        Reviewed by David Kilzer.

        We want iOS to speak the landmark type.
        I've moved the landmark role description to the base Mac class and exposed
        these localized strings to iOS (the ones used to return landmark descriptions).

        I've also updated the accessibilityLabel to account for landmark type, but also
        handle multiple label sources more gracefully by appending commas, which changed a few
        tests in minor ways.

        Test: platform/iphone-simulator/accessibility/landmark-type.html

        * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper accessibilityLabel]):
        * accessibility/mac/WebAccessibilityObjectWrapperBase.h:
        * accessibility/mac/WebAccessibilityObjectWrapperBase.mm:
        (-[WebAccessibilityObjectWrapperBase ariaLandmarkRoleDescription]):
        * accessibility/mac/WebAccessibilityObjectWrapperMac.mm:
        (-[WebAccessibilityObjectWrapper roleDescription]):
        * platform/LocalizedStrings.cpp:
        (WebCore):
        (WebCore::AXButtonActionVerb):
        (WebCore::AXRadioButtonActionVerb):
        (WebCore::AXTextFieldActionVerb):
        (WebCore::AXCheckedCheckBoxActionVerb):
        (WebCore::AXUncheckedCheckBoxActionVerb):
        (WebCore::AXLinkActionVerb):
        (WebCore::AXMenuListPopupActionVerb):
        (WebCore::AXMenuListActionVerb):
        * platform/LocalizedStrings.h:
        (WebCore):

2013-04-24  Andreas Kling  <akling@apple.com>

        CSS attribute selectors cause unnecessary style recalc when setting attribute to same value.
        <http://webkit.org/b/115116>
        <rdar://problem/13727709>

        Reviewed by Simon Fraser.

        The logic that dirties the style if there's a relevant attribute selector in the document
        shouldn't run if the attribute is being overwritten with an identical value.
        Move this into willModifyAttribute() instead, since we need access to both the old and the new value.

        This reduces unnecessary style recalculation in Mac App Store content.

        * dom/Element.cpp:
        (WebCore::Element::attributeChanged):
        (WebCore::Element::willModifyAttribute):

2013-04-24  Jonathan Feldstein <jfeldstein@blackberry.com>

        [BlackBerry] Fixes the San Angeles demo on khronos.org
        https://bugs.webkit.org/show_bug.cgi?id=115106

        Reviewed by Rob Buis
        Internally Reviewed by Jeremy Nicholl and Arvid Nilsson

        Fixes a bug in which the currently bound vertex array object's vertex array
        state was being modified as opposed to the default vertex array state.

        * platform/graphics/blackberry/EGLImageLayerWebKitThread.cpp:
        (EGLImageLayerWebKitThread::blitToFrontBuffer):

2013-04-24  Nico Weber  <thakis@chromium.org>

        Fold RenderThemeMacShared into RenderThemeMac
        https://bugs.webkit.org/show_bug.cgi?id=115086

        Reviewed by Anders Carlsson.

        No intended functionality change.

        * WebCore.xcodeproj/project.pbxproj:
        * rendering/RenderThemeMac.h:
        (RenderThemeMac):
        (WebCore::RenderThemeMac::supportsControlTints):
        (WebCore::RenderThemeMac::scrollbarControlSizeForPart):
        (WebCore::RenderThemeMac::supportsSelectionForegroundColors):
        (WebCore::RenderThemeMac::supportsClosedCaptioning):
        (WebCore::RenderThemeMac::updateActiveState):
        * rendering/RenderThemeMac.mm:
        (-[WebCoreRenderThemeNotificationObserver initWithTheme:WebCore::]):
        (-[WebCoreRenderThemeNotificationObserver systemColorsDidChange:]):
        (-[WebCoreTextFieldCell _coreUIDrawOptionsWithFrame:inView:includeFocus:]):
        (WebCore::RenderThemeMac::RenderThemeMac):
        (WebCore::RenderThemeMac::~RenderThemeMac):
        (WebCore::RenderThemeMac::platformActiveSelectionBackgroundColor):
        (WebCore):
        (WebCore::RenderThemeMac::platformInactiveSelectionBackgroundColor):
        (WebCore::RenderThemeMac::platformActiveListBoxSelectionBackgroundColor):
        (WebCore::RenderThemeMac::platformActiveListBoxSelectionForegroundColor):
        (WebCore::RenderThemeMac::platformInactiveListBoxSelectionForegroundColor):
        (WebCore::RenderThemeMac::platformFocusRingColor):
        (WebCore::RenderThemeMac::platformInactiveListBoxSelectionBackgroundColor):
        (WebCore::toFontWeight):
        (WebCore::RenderThemeMac::systemFont):
        (WebCore::convertNSColorToColor):
        (WebCore::menuBackgroundColor):
        (WebCore::RenderThemeMac::platformColorsDidChange):
        (WebCore::RenderThemeMac::systemColor):
        (WebCore::RenderThemeMac::usesTestModeFocusRingColor):
        (WebCore::RenderThemeMac::isControlStyled):
        (WebCore::RenderThemeMac::adjustRepaintRect):
        (WebCore::RenderThemeMac::inflateRect):
        (WebCore::RenderThemeMac::convertToPaintingRect):
        (WebCore::RenderThemeMac::updateCheckedState):
        (WebCore::RenderThemeMac::updateEnabledState):
        (WebCore::RenderThemeMac::updateFocusedState):
        (WebCore::RenderThemeMac::updatePressedState):
        (WebCore::RenderThemeMac::controlSupportsTints):
        (WebCore::RenderThemeMac::controlSizeForFont):
        (WebCore::RenderThemeMac::setControlSize):
        (WebCore::RenderThemeMac::sizeForFont):
        (WebCore::RenderThemeMac::sizeForSystemFont):
        (WebCore::RenderThemeMac::setSizeFromFont):
        (WebCore::RenderThemeMac::setFontFromControlSize):
        (WebCore::RenderThemeMac::controlSizeForSystemFont):
        (WebCore::RenderThemeMac::paintTextField):
        (WebCore::RenderThemeMac::adjustTextFieldStyle):
        (WebCore::RenderThemeMac::paintCapsLockIndicator):
        (WebCore::RenderThemeMac::paintTextArea):
        (WebCore::RenderThemeMac::adjustTextAreaStyle):
        (WebCore::RenderThemeMac::popupButtonMargins):
        (WebCore::RenderThemeMac::popupButtonSizes):
        (WebCore::RenderThemeMac::popupButtonPadding):
        (WebCore::RenderThemeMac::paintMenuList):
        (WebCore::RenderThemeMac::meterSizeForBounds):
        (WebCore::RenderThemeMac::paintMeter):
        (WebCore::RenderThemeMac::supportsMeter):
        (WebCore::RenderThemeMac::levelIndicatorStyleFor):
        (WebCore::RenderThemeMac::levelIndicatorFor):
        (WebCore::RenderThemeMac::progressBarSizes):
        (WebCore::RenderThemeMac::progressBarMargins):
        (WebCore::RenderThemeMac::minimumProgressBarHeight):
        (WebCore::RenderThemeMac::animationRepeatIntervalForProgressBar):
        (WebCore::RenderThemeMac::animationDurationForProgressBar):
        (WebCore::RenderThemeMac::adjustProgressBarStyle):
        (WebCore::RenderThemeMac::paintProgressBar):
        (WebCore::TopGradientInterpolate):
        (WebCore::BottomGradientInterpolate):
        (WebCore::MainGradientInterpolate):
        (WebCore::TrackGradientInterpolate):
        (WebCore::RenderThemeMac::paintMenuListButtonGradients):
        (WebCore::RenderThemeMac::paintMenuListButton):
        (WebCore::menuListButtonSizes):
        (WebCore::RenderThemeMac::adjustMenuListStyle):
        (WebCore::RenderThemeMac::popupInternalPaddingLeft):
        (WebCore::RenderThemeMac::popupInternalPaddingRight):
        (WebCore::RenderThemeMac::popupInternalPaddingTop):
        (WebCore::RenderThemeMac::popupInternalPaddingBottom):
        (WebCore::RenderThemeMac::adjustMenuListButtonStyle):
        (WebCore::RenderThemeMac::setPopupButtonCellState):
        (WebCore::RenderThemeMac::menuListSizes):
        (WebCore::RenderThemeMac::minimumMenuListSize):
        (WebCore::RenderThemeMac::adjustSliderTrackStyle):
        (WebCore::RenderThemeMac::paintSliderTrack):
        (WebCore::RenderThemeMac::adjustSliderThumbStyle):
        (WebCore::RenderThemeMac::paintSliderThumb):
        (WebCore::RenderThemeMac::paintSearchField):
        (WebCore::RenderThemeMac::setSearchCellState):
        (WebCore::RenderThemeMac::searchFieldSizes):
        (WebCore::RenderThemeMac::setSearchFieldSize):
        (WebCore::RenderThemeMac::adjustSearchFieldStyle):
        (WebCore::RenderThemeMac::paintSearchFieldCancelButton):
        (WebCore::RenderThemeMac::cancelButtonSizes):
        (WebCore::RenderThemeMac::adjustSearchFieldCancelButtonStyle):
        (WebCore::RenderThemeMac::resultsButtonSizes):
        (WebCore::RenderThemeMac::adjustSearchFieldDecorationStyle):
        (WebCore::RenderThemeMac::paintSearchFieldDecoration):
        (WebCore::RenderThemeMac::adjustSearchFieldResultsDecorationStyle):
        (WebCore::RenderThemeMac::paintSearchFieldResultsDecoration):
        (WebCore::RenderThemeMac::adjustSearchFieldResultsButtonStyle):
        (WebCore::RenderThemeMac::paintSearchFieldResultsButton):
        (WebCore::RenderThemeMac::paintSnapshottedPluginOverlay):
        (WebCore::RenderThemeMac::sliderTickSize):
        (WebCore::RenderThemeMac::sliderTickOffsetFromTrackCenter):
        (WebCore::RenderThemeMac::adjustSliderThumbSize):
        (WebCore::RenderThemeMac::shouldShowPlaceholderWhenFocused):
        (WebCore::RenderThemeMac::popupButton):
        (WebCore::RenderThemeMac::search):
        (WebCore::RenderThemeMac::searchMenuTemplate):
        (WebCore::RenderThemeMac::sliderThumbHorizontal):
        (WebCore::RenderThemeMac::sliderThumbVertical):
        (WebCore::RenderThemeMac::textField):
        (WebCore::RenderThemeMac::fileListNameForWidth):
        * rendering/RenderThemeMacShared.h: Removed.
        * rendering/RenderThemeMacShared.mm: Removed.

2013-04-24  ChangSeok Oh  <changseok.oh@collabora.com>

        [GTK][AC] Visible rect doesn't update after resizing a window.
        https://bugs.webkit.org/show_bug.cgi?id=115096

        Reviewed by Gustavo Noronha Silva.

        Once we set actor's a clip rect, we should update the rect when resizing the actor.

        No new tests since no new functionality.

        * platform/graphics/clutter/GraphicsLayerClutter.cpp:
        (WebCore::GraphicsLayerClutter::setSize):

2013-04-24  ChangSeok Oh  <changseok.oh@collabora.com>

        [GTK][AC] Fix unexpected clear of ClutterContent.
        https://bugs.webkit.org/show_bug.cgi?id=115099

        Reviewed by Gustavo Noronha Silva.

        adoptGRef doesn't increase a reference count. So if a actor has a valid ClutterContent,
        it would be cleared unexpectedly by smart pointer when escaping a function.

        No new tests, no functionality changed.

        * platform/graphics/clutter/GraphicsLayerActor.cpp:
        (graphicsLayerActorUpdateTexture):

2013-04-24  Alberto Garcia  <agarcia@igalia.com>

        DOMFileSystemBase: fix multiple definitions in the BlackBerry port
        https://bugs.webkit.org/show_bug.cgi?id=114950

        Reviewed by Xan Lopez.

        The following  methods are already defined in DOMFileSystemBlackBerry.cpp:

        crackFileSystemURL()
        createFileSystemURL()
        isValidType()
        supportsToURL()

        * Modules/filesystem/DOMFileSystemBase.cpp:
        (WebCore):

2013-04-24  George Staikos  <gstaikos@rim.com>

        [BlackBerry] Add support for JPEG image quality during encoding.
        https://bugs.webkit.org/show_bug.cgi?id=105773

        Reviewed by Xan Lopez.

        PR 271611
        Internally reviewed by Liam Quinn.

        Pass the quality flag into the encoder, with a default of 65

        Covered by existing tests.

        * platform/image-encoders/JPEGImageEncoder.cpp:
        (WebCore::compressRGBABigEndianToJPEG):
        * platform/image-encoders/JPEGImageEncoder.h:
        (WebCore):

2013-04-24  Csaba Osztrogonác  <ossy@webkit.org>

        Fix cast-align WebCore/platform/graphics/GraphicsContext3D.cpp on ARM
        https://bugs.webkit.org/show_bug.cgi?id=115036

        Reviewed by Benjamin Poulain.

        * platform/graphics/GraphicsContext3D.cpp:
        (WebCore):

2013-04-24  Andreas Kling  <akling@apple.com>

        Remove unnecessary MutableStylePropertySet casts.
        <http://webkit.org/b/115075>

        Reviewed by Geoffrey Garen.

        Get rid of some now-unneeded static_casts that were left from the StylePropertySet
        refactoring last weekend.

        * css/StylePropertySet.cpp:
        (WebCore::MutableStylePropertySet::setProperty):
        * editing/EditingStyle.cpp:
        (WebCore::EditingStyle::triStateOfStyle):
        (WebCore::EditingStyle::removeStyleFromRulesAndContext):

2013-04-24  Kangil Han  <kangil.han@samsung.com>

        [Minor code cleanup] Remove duplicated condition check
        https://bugs.webkit.org/show_bug.cgi?id=115082

        Reviewed by Andreas Kling.

        areRectsPartiallyAligned() has duplicated condition check, so remove it.

        * page/SpatialNavigation.cpp:
        (WebCore::areRectsPartiallyAligned):

2013-04-24  Krzysztof Wolanski  <k.wolanski@samsung.com>

        [EFL] Fix build warnings caused by missing images attributes for default buttons
        https://bugs.webkit.org/show_bug.cgi?id=114955

        Reviewed by Gyuyoung Kim.

        Added default image for each button from mediacontrol catalog.

        No new tests, because there is no change in behavior.

        * platform/efl/DefaultTheme/widget/mediacontrol/fullscreenbutton/fullscreen_button.edc:
        * platform/efl/DefaultTheme/widget/mediacontrol/mutebutton/mute_button.edc:
        * platform/efl/DefaultTheme/widget/mediacontrol/playpausebutton/playpause_button.edc:
        * platform/efl/DefaultTheme/widget/mediacontrol/seekbackwardbutton/seekbackward_button.edc:
        * platform/efl/DefaultTheme/widget/mediacontrol/seekforwardbutton/seekforward_button.edc:
        * platform/efl/DefaultTheme/widget/mediacontrol/togglecaptionsbutton/toggle_captions_button.edc:

2013-04-24  Christophe Dumez  <ch.dumez@sisa.samsung.com>

        Unreviewed build fix with gstreamer 0.10.x after r147555.

        * platform/audio/gstreamer/WebKitWebAudioSourceGStreamer.cpp:
        (webKitWebAudioSrcLoop):

== Rolled over to ChangeLog-2013-04-24 ==
