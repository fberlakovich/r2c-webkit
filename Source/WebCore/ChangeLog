2014-02-27  Benjamin Poulain  <benjamin@webkit.org>

        Compile attribute value matching
        https://bugs.webkit.org/show_bug.cgi?id=129228

        Reviewed by Geoffrey Garen.

        Add support for compiling value matching when matching attributes in Selector.
        This patch only adds exact matching, the other cases will follow.

        There is a little infrastructure changes since FunctionCall now needs to support
        calls taking 2 arguments. The fun begins when the arguments are not in the right
        registers and need to be moved to the right place. Otherwise the code is straightforward.

        In SelectorCompiler, it is necessary to handle two different cases of matching: case sensitive
        and case insensitive. The choice is done in part at compilation time by asking HTMLDocument
        if the name filter can include case insensitive attribute. The other part is done at runtime
        by querying the element for its type and document.

        Test: fast/selectors/case-insensitive-value-matching.html

        * css/SelectorChecker.cpp:
        (WebCore::attributeValueMatches): Null values matching should never happen, when an attribute
        has no value, its value is empty.

        * cssjit/FunctionCall.h:
        (WebCore::FunctionCall::FunctionCall):
        Add support for calls with two arguments.
        (WebCore::FunctionCall::setOneArgument):
        (WebCore::FunctionCall::setTwoArguments):
        (WebCore::FunctionCall::swapArguments):
        Here we need to swap two registers, but we cannot allocate a new register (because the context
        of the function call may have taken all the available registers already).

        On x86, the solution is simple, we can swap the two registers without side effects.

        On other platforms, it is a little more complex. If there is any available register, we can just
        use it as a temporary to make the swap.
        If there are no available registers, we know that all the registers are taken. Since swapArguments()
        was called after pushing all the arguments on the stack, we can safely trash the value of any of those.
        We take the first available register that is not a function argument and use it as a temporary.

        (WebCore::FunctionCall::prepareAndCall):
        This is the fun part, we have two registers where the values must go before the function call. The values
        can be in any combination of the allocated registers. The code here needs to move the two values to
        their target register while avoiding conflicts.

        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::AttributeMatchingInfo::AttributeMatchingInfo):
        (WebCore::SelectorCompiler::AttributeMatchingInfo::canDefaultToCaseSensitiveValueMatch):
        (WebCore::SelectorCompiler::AttributeMatchingInfo::selector):
        The value of HTMLDocument::isCaseSensitiveAttribute is needed at compilation time to compute the number
        of required registers. As a result, we need to keep it along in the selector fragment.

        (WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator):
        (WebCore::SelectorCompiler::attributeNameTestingRequiresNamespaceRegister):
        (WebCore::SelectorCompiler::attributeValueTestingRequiresExtraRegister):
        (WebCore::SelectorCompiler::minimumRegisterRequirements):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::markParentElementIfResolvingStyle):
        (WebCore::SelectorCompiler::canMatchStyleAttribute):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateSynchronizeStyleAttribute):
        (WebCore::SelectorCompiler::canMatchAnimatableSVGAttribute):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateSynchronizeAllAnimatedSVGAttribute):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementAttributeMatching):
        The matching code is moved in a local scope. This is done to recover the register of qualifiedNameImpl
        before doing any value matching. That register can then be used to store the expected value when matching
        an attribute value.
        It is unfortunate there is so much register pressure in this part.

        Value matching is done outside the loop. The idea is to keep the loop really small since in the vast majority
        of cases, name matching fails.
        If the value matching fails, we jump back into the tight loop.

        This is not ideal in all situation. For example trivial name matching with trivial value matching should
        be done in loop. There is a FIXME to improve those cases later.

        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementAttributeValueMatching):
        (WebCore::SelectorCompiler::testIsHTMLClassOnDocument):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementAttributeValueExactMatching):
        In the case sensitive branch, things are really simple. We have to AtomicStringImpl pointers, if they
        don't match, it is a failure.

        The case sensitive branch start by comparing the pointers in case the values are equal. This is a common
        case and it simplifies the cases for SVG, XHTML, etc.
        If the two values are not equal, we must first find if the context requires case insensitive comparison
        (HTMLElement in HTMLDocument). If the conditions require case insensitive matching, we then fall back
        to a function call.

        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementFunctionCallTest):
        * dom/Attribute.h:
        (WebCore::Attribute::valueMemoryOffset):
        * dom/Document.h:
        (WebCore::Document::documentClassesMemoryOffset):
        (WebCore::Document::isHTMLDocumentClassFlag):
        * dom/Node.h:
        (WebCore::Node::treeScopeMemoryOffset):
        * dom/TreeScope.h:
        (WebCore::TreeScope::documentScopeMemoryOffset):

2014-02-27  Ryuan Choi  <ryuan.choi@samsung.com>

        Build break when disabled CSS_GRID_LAYOUT
        https://bugs.webkit.org/show_bug.cgi?id=129459

        Reviewed by Gyuyoung Kim.

        * css/CSSValue.h: Added guards of CSS_GRID_LAYOUT for GridTemplateAreasClass.

2014-02-17  Myles C. Maxfield  <mmaxfield@apple.com>

        text-decoration-skip: ink does not skip over SVG fonts
        https://bugs.webkit.org/show_bug.cgi?id=128936

        Reviewed by Darin Adler.

        When drawing glyphs in an SVG font, the glyphs are converted to paths and then filled. This patch moves
        the glyph -> path conversion into a helper class, GlyphToPathTranslator, and creates an implementation
        for the SVG drawing code. Once this helper class is created, it can be used to trace paths in order
        to make underlines skip over SVG glyphs. This helper class also has an implementation for non-SVG glyphs,
        which allows for the glyph tracing code to be paramaterized over the implementation of the helper class
        rather than if the FontData itself is SVG or not.

        Tests: fast/css3-text/css3-text-decoration/text-decoration-skip/text-decoration-skip-ink-svg.html

        * platform/graphics/Font.h:
        (WebCore::GlyphToPathTranslator::~GlyphToPathTranslator): Virtual implementation of helper class
        * platform/graphics/cg/PathCG.cpp:
        (WebCore::Path::Path): Created constructor that takes a RefPtr<CGMutablePathRef>
        * platform/graphics/Path.h:
        * platform/graphics/TextRun.h: Give RenderingContext a factory function to create the helper class
        instance
        * platform/graphics/mac/FontMac.mm: Implementation of helper class used for skipping underlines on
        regular (CoreText) glyphs
        (WebCore::MacGlyphToPathTranslator::MacGlyphToPathTranslator):
        (WebCore::MacGlyphToPathTranslator::moveToNextValidGlyph):
        (WebCore::MacGlyphToPathTranslator::incrementIndex):
        (WebCore::Font::dashesForIntersectionsWithRect): Call the relevant factory function, and use it
        to successively generate Paths
        * rendering/svg/SVGTextRunRenderingContext.cpp: Implementation of helper class used for SVG fonts
        (WebCore::SVGGlyphToPathTranslator::SVGGlyphToPathTranslator):
        (WebCore::SVGGlyphToPathTranslator::moveToNextValidGlyph):
        (WebCore::SVGGlyphToPathTranslator::incrementIndex):
        (WebCore::SVGTextRunRenderingContext::createGlyphToPathTranslator):
        (WebCore::SVGTextRunRenderingContext::drawSVGGlyphs): Use the above implementation
        * rendering/svg/SVGTextRunRenderingContext.h: Factory function declaration

2014-02-27  Thiago de Barros Lacerda  <thiago.lacerda@openbossa.org>

        [WebRTC] Removing MediaConstraints argument from RTCPeerConnection addStream, updateIce methods and constructor
        https://bugs.webkit.org/show_bug.cgi?id=129449

        Reviewed by Eric Carlson.

        According to WebRTC editor's draft, MediaConstraints will no longer be an argument of those methods and
        constructor.

        Existing tests were updated.

        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::RTCPeerConnection::create):
        (WebCore::RTCPeerConnection::RTCPeerConnection):
        (WebCore::RTCPeerConnection::updateIce):
        (WebCore::RTCPeerConnection::addStream):
        * Modules/mediastream/RTCPeerConnection.h:
        * Modules/mediastream/RTCPeerConnection.idl:
        * bindings/js/JSRTCPeerConnectionCustom.cpp:
        (WebCore::JSRTCPeerConnectionConstructor::constructJSRTCPeerConnection):
        * platform/mediastream/RTCPeerConnectionHandler.h:
        * platform/mock/RTCPeerConnectionHandlerMock.cpp:
        (WebCore::RTCPeerConnectionHandlerMock::initialize):
        (WebCore::RTCPeerConnectionHandlerMock::updateIce):
        (WebCore::RTCPeerConnectionHandlerMock::addStream):
        * platform/mock/RTCPeerConnectionHandlerMock.h:

2014-02-27  Radu Stavila  <stavila@adobe.com>

        [CSS Regions] Move named-flow specific method decorationsClipRectForBoxInRegion to RenderNamedFlowThread
        https://bugs.webkit.org/show_bug.cgi?id=129428

        Reviewed by Andreas Kling.

        Since the decorationsClipRectForBoxInRegion method is a named flow specific method, it makes
        sense to be in the named flow specific class, RenderNamedFlowThread, instead of the more
        generic RenderFlowThread.

        No new tests required. No new functionality.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::paintObject):
        * rendering/RenderFlowThread.cpp:
        * rendering/RenderFlowThread.h:
        * rendering/RenderNamedFlowThread.cpp:
        (WebCore::RenderNamedFlowThread::decorationsClipRectForBoxInNamedFlowFragment):
        * rendering/RenderNamedFlowThread.h:

2014-02-27  Zoltan Horvath  <zoltan@webkit.org>

        Avoid calling logicalLeftOffsetForLine 2 times in LineWidth::fitBelowFloats
        https://bugs.webkit.org/show_bug.cgi?id=129433

        Reviewed by Darin Adler.

        This change updates fitBelowFloats and its helpers to call RenderBlock::logicalLeftOffsetForLine only once.

        No new tests, no behavior change.

        * rendering/line/LineWidth.cpp:
        (WebCore::availableWidthAtOffset):
        (WebCore::LineWidth::updateLineDimension):
        (WebCore::LineWidth::wrapNextToShapeOutside):
        (WebCore::LineWidth::fitBelowFloats):
        * rendering/line/LineWidth.h:

2014-02-27  Andreas Kling  <akling@apple.com>

        Micro-optimize elementAffectsDirectionality().
        <https://webkit.org/b/129444>

        Tweak this function to skip an unnecessary bit check and use
        fastHasAttribute() instead of hasAttribute() for looking up dirAttr.

        ~1% speedup on DYEB/AngularJS.

        Reviewed by Ryosuke Niwa.

        * html/HTMLElement.cpp:
        (WebCore::elementAffectsDirectionality):

2014-02-27  Brian Burg  <bburg@apple.com>

        Web Inspector: model tests should use a special Test.html inspector page
        https://bugs.webkit.org/show_bug.cgi?id=129190

        Reviewed by Timothy Hatcher.

        Convert InspectorController::isUnderTest() into a flag, and expose an
        Internals method so it can be set by the test before opening the inspector.

        Test: inspector/test-harness-trivially-works.html

        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::evaluateForTestInFrontend):
        * inspector/InspectorController.h:
        * testing/Internals.cpp:
        (WebCore::Internals::setInspectorIsUnderTest): Added.
        * testing/Internals.h:
        * testing/Internals.idl:

2014-02-27  Joseph Pecoraro  <pecoraro@apple.com>

        Unreviewed build fix after r164824.

        Accidentally re-added some code that was removed.

        * page/ContentSecurityPolicy.cpp:

2014-02-26  Alex Christensen  <achristensen@webkit.org>

        Compile fix when not using TEXTURE_MAPPER_GL.
        https://bugs.webkit.org/show_bug.cgi?id=129417

        Reviewed by Darin Adler.

        * platform/graphics/texmap/TextureMapperGL.cpp:
        Protect platformCreateAccelerated with USE(TEXTURE_MAPPER_GL).

2014-02-27  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: JSContext inspection should report exceptions in the console
        https://bugs.webkit.org/show_bug.cgi?id=128776

        Reviewed by Timothy Hatcher.

        Include some clean up of ConsoleMessage and ScriptCallStack construction.

        Covered by existing tests.

        * bindings/js/JSDOMBinding.cpp:
        (WebCore::reportException):
        Simplify code now that createStackTraceFromException handles it.

        * page/ContentSecurityPolicy.cpp:
        (WebCore::gatherSecurityPolicyViolationEventData):
        (WebCore::ContentSecurityPolicy::reportViolation):
        ScriptCallStack can give us the first non-native callframe.

        * inspector/InspectorResourceAgent.cpp:
        (WebCore::InspectorResourceAgent::buildInitiatorObject):
        * inspector/PageDebuggerAgent.cpp:
        (WebCore::PageDebuggerAgent::breakpointActionLog):
        * inspector/TimelineRecordFactory.cpp:
        (WebCore::TimelineRecordFactory::createGenericRecord):
        * page/Console.cpp:
        (WebCore::internalAddMessage):
        (WebCore::Console::profile):
        (WebCore::Console::profileEnd):
        (WebCore::Console::timeEnd):
        * page/ContentSecurityPolicy.cpp:
        (WebCore::gatherSecurityPolicyViolationEventData):
        (WebCore::ContentSecurityPolicy::reportViolation):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::postMessage):

2014-02-27  Andreas Kling  <akling@apple.com>

        Remove FeatureObserver.
        <https://webkit.org/b/129439>

        This code was only used by the Chromium port and nobody else is
        making use of it.

        Reviewed by Anders Carlsson.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/EventTarget.cpp:
        (WebCore::EventTarget::fireEventListeners):
        * dom/EventTarget.h:
        * html/ColorInputType.cpp:
        * html/ColorInputType.h:
        * html/DateInputType.cpp:
        * html/DateInputType.h:
        * html/DateTimeInputType.cpp:
        * html/DateTimeInputType.h:
        * html/DateTimeLocalInputType.cpp:
        * html/DateTimeLocalInputType.h:
        * html/EmailInputType.cpp:
        * html/EmailInputType.h:
        * html/HTMLDataListElement.cpp:
        (WebCore::HTMLDataListElement::create):
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::parseAttribute):
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::parseAttribute):
        * html/HTMLTextFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::parseAttribute):
        * html/InputType.cpp:
        * html/InputType.h:
        * html/MonthInputType.cpp:
        * html/MonthInputType.h:
        * html/NumberInputType.cpp:
        * html/NumberInputType.h:
        * html/RangeInputType.cpp:
        * html/RangeInputType.h:
        * html/SearchInputType.cpp:
        * html/SearchInputType.h:
        * html/TelephoneInputType.cpp:
        * html/TelephoneInputType.h:
        * html/TextInputType.cpp:
        * html/TextInputType.h:
        * html/TimeInputType.cpp:
        * html/TimeInputType.h:
        * html/URLInputType.cpp:
        * html/URLInputType.h:
        * html/WeekInputType.cpp:
        * html/WeekInputType.h:
        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::responseReceived):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::shouldInterruptLoadForXFrameOptions):
        (WebCore::FrameLoader::dispatchDidCommitLoad):
        * page/ContentSecurityPolicy.cpp:
        (WebCore::ContentSecurityPolicy::didReceiveHeader):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::selectCursor):
        * page/FeatureObserver.cpp: Removed.
        * page/FeatureObserver.h: Removed.
        * page/Page.h:
        * rendering/RenderDeprecatedFlexibleBox.cpp:
        (WebCore::RenderDeprecatedFlexibleBox::RenderDeprecatedFlexibleBox):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::calculateClipRects):
        * workers/SharedWorker.cpp:
        (WebCore::SharedWorker::create):
        * workers/Worker.cpp:
        (WebCore::Worker::create):

2014-02-27  Chris Fleizach  <cfleizach@apple.com>

        speechSynthesis.speak of a zero length utterance kills future speech
        https://bugs.webkit.org/show_bug.cgi?id=129403

        Reviewed by Mario Sanchez Prada.

        Empty length strings may choke a synthesizer and result in didFinishSpeaking not being called. 
        The WebKit code should be proactive about screening out empty length strings.

        Test: platform/mac/fast/speechsynthesis/speech-synthesis-speak-empty-string.html

        * Modules/speech/SpeechSynthesis.cpp:
        (WebCore::SpeechSynthesis::startSpeakingImmediately):

2014-02-27  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r164783.
        http://trac.webkit.org/changeset/164783
        https://bugs.webkit.org/show_bug.cgi?id=129425

        Broke number of multicol tests (Requested by anttik on
        #webkit).

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::containingColumnsBlock):

2014-02-27  Antoine Quint  <graouts@webkit.org>

        Respect SVG fragment identifiers in <img> src attribute
        https://bugs.webkit.org/show_bug.cgi?id=129387

        Reviewed by Antti Koivisto.

        Test: svg/css/svg-resource-fragment-identifier-img-src.html

        When providing an SVG image for a given renderer, check that the URL used to load
        that image is taken into account in case it featured a fragment identifier, ensuring
        that the CSS :target pseudo-class is correctly handled for SVG resources. This patch
        is specific to <img> elements, specific support will also need to be added for various
        CSS properties that support SVG images.

        * svg/graphics/SVGImageCache.cpp:
        (WebCore::SVGImageCache::imageForRenderer):
        Check if the provided renderer is attached to an <img> element and, if so, pass the
        resolved <img> source URL, taking into account srcset, to the SVGImageForContainer.

        * svg/graphics/SVGImageForContainer.cpp:
        (WebCore::SVGImageForContainer::setURL):
        Trigger the FrameView machinery to ensure that the :target pseudo-class is respected
        should the provided URL feature a fragment identifier.

        * svg/graphics/SVGImageForContainer.h:
        Declare the new setURL() method.

2014-02-27  Krzysztof Czech  <k.czech@samsung.com>

        [ATK] Fix style errors in enum members
        https://bugs.webkit.org/show_bug.cgi?id=129421

        Reviewed by Mario Sanchez Prada.

        No new tests. No new functionality.

        Enum members should use InterCaps with an initial capital letter.

        * accessibility/atk/WebKitAccessibleWrapperAtk.cpp:
        (getInterfaceMaskFromObject):

2014-02-27  Mihai Tica  <mitica@adobe.com>

        [CSS Blending] Parse and implement the -webkit-isolation CSS property.

        https://bugs.webkit.org/show_bug.cgi?id=128958

        Reviewed by Dirk Schulze.

        Parse and implement -webkit-isolation, part of the CSS Blending and Compositing spec.
        This patch adds functionality for HTML and SVG.
        -webkit-isolation: isolate restricts any child elements from blending with any of the content outside the isolated parent element.

        Tests: css3/compositing/isolation-isolate-blended-child.html
               css3/compositing/isolation-parsing.html
               css3/compositing/svg-isolation-default.html
               css3/compositing/svg-isolation-isolated-group.html
               css3/compositing/svg-isolation-simple.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::ComputedStyleExtractor::propertyValue):
        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue):
        (WebCore::isKeywordPropertyID):
        (WebCore::CSSParser::parseValue):
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        (WebCore::CSSPrimitiveValue::operator Isolation):
        * css/CSSPropertyNames.in: Add -webkit-isolation.
        * css/CSSValueKeywords.in: Add the isolate value.
        * css/DeprecatedStyleBuilder.cpp:
        (WebCore::DeprecatedStyleBuilder::DeprecatedStyleBuilder):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::adjustRenderStyle): Explicitly set isolation:isolate to create a stacking context.
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::changeRequiresLayerRepaint): Changing isolation should trigger a repaint.
        * rendering/style/RenderStyle.h: Setters and getters for isolation.
        * rendering/style/RenderStyleConstants.h: Add Isolation enum.
        * rendering/style/StyleRareNonInheritedData.cpp: Add m_isolation.
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        (WebCore::StyleRareNonInheritedData::operator==):
        * rendering/style/StyleRareNonInheritedData.h:
        * rendering/svg/SVGRenderingContext.cpp:
        (WebCore::SVGRenderingContext::prepareToRenderSVGContent): If isolated, paint in a transparency layer.

2014-02-27  Krzysztof Czech  <k.czech@samsung.com>

        [ATK] Utilize AtkTableCell to expose directly AccessibilityTableCell to AT
        https://bugs.webkit.org/show_bug.cgi?id=129250

        Reviewed by Mario Sanchez Prada.

        Test: accessibility/table-scope.html

        Exposing AtkTableCell to AT. Implementing possibility to get column headers and row headers
        as an array of cells.

        * GNUmakefile.list.am:
        * PlatformEfl.cmake:
        * accessibility/atk/WebKitAccessibleInterfaceTableCell.cpp: Added.
        (convertToGPtrArray):
        (core):
        (webkitAccessibleTableCellGetColumnHeaderCells):
        (webkitAccessibleTableCellGetRowHeaderCells):
        (webkitAccessibleTableCellInterfaceInit):
        * accessibility/atk/WebKitAccessibleInterfaceTableCell.h: Added.
        * accessibility/atk/WebKitAccessibleWrapperAtk.cpp:
        (getInterfaceMaskFromObject):

2014-02-27  Renata Hodovan  <rhodovan.u-szeged@partner.samsung.com>

        Improving containing column block determination
        https://bugs.webkit.org/show_bug.cgi?id=125449

        Reviewed by Darin Adler.

        Making sure that the containing column block of any elements
        can not be oneself.

        Test: fast/css/crash-on-column-splitting.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::containingColumnsBlock):
        (WebCore::RenderBlock::splitFlow):

2014-02-27  Xabier Rodriguez Calvar  <calvaris@igalia.com>

        [GTK] Improve JavaScript multimedia controls
        https://bugs.webkit.org/show_bug.cgi?id=129044

        Reviewed by Jer Noble.

        After webkit.org/b/123097 a follow up was needed to improve
        accessibily and some other cosmetic problems, like cleaner CSS and
        new missing baselines.

        No new tests because of no new functionality.

        * Modules/mediacontrols/mediaControlsApple.js:
        Added hiding class name.
        * Modules/mediacontrols/mediaControlsGtk.js:
        (ControllerGtk.prototype.createControls): Set remaining time as
        hidden by default and turned volumebox hidden into hiding.
        (ControllerGtk.prototype.updateTime): Simplified the hiding and
        showing by removing the show class and using hidden only.
        (ControllerGtk.prototype.handleMuteButtonMouseOver):
        (ControllerGtk.prototype.handleVolumeBoxMouseOut): Turned hidden
        into hiding.
        (ControllerGtk.prototype.updateReadyState): Changed coding style
        and added down class for the panel too.
        (ControllerGtk.prototype.updatePlaying): Change for coding style
        coherence.
        (ControllerGtk.prototype.handleCaptionButtonClicked): Call
        handleCaptionButtonShowMenu.
        (ControllerGtk.prototype.handleCaptionButtonMouseOver): Call
        handleCaptionButtonShowMenu.
        (ControllerGtk.prototype.handleCaptionButtonShowMenu): Created
        with the former behavior of handleCaptionButtonMouseOver.
        * css/mediaControlsGtk.css:
        (.hidden): Set display none for all objects with hidden class.
        (audio::-webkit-media-controls-panel *:focus):
        (audio::-webkit-media-controls-panel.down *:focus): Added gradient
        for the active and focus status.
        (audio::-webkit-media-controls-time-remaining-display)
        (video::-webkit-media-controls-time-remaining-display): Set
        display block.
        (audio::-webkit-media-controls-volume-slider-container)
        (video::-webkit-media-controls-volume-slider-container): Set
        display flex.
        (video::-webkit-media-controls-volume-slider-container.hiding):
        Changed from hidden.
        (video::-webkit-media-controls-panel .hiding.down): Changed from
        hidden.
        * platform/gtk/RenderThemeGtk.cpp:
        (WebCore::RenderThemeGtk::paintMediaButton): Returning true to
        allow CSS painting the gradient.

2014-02-27  Zan Dobersek  <zdobersek@igalia.com>

        Unreviewed. Fixing the GTK build fix after r164757.

        * platform/network/NetworkStateNotifier.cpp: r164757 introduced a layering violation by including
        the Settings.h header. The use of that class is guarded by PLATFORM(IOS), so the header inclusion
        should be guarded as well.

2014-02-26  Ryosuke Niwa  <rniwa@webkit.org>

        Extract named items caches in HTMLCollection as a class
        https://bugs.webkit.org/show_bug.cgi?id=129365

        Reviewed by Antti Koivisto.

        Extracted CollectionNamedElementCache, like CollectionIndexCache, out of HTMLCollection.
        We can move more named item related functions into this class in the future.

        HTMLCollection's member variables m_isNameCacheValid, m_idCache, and m_nameCache were replaced by
        a single unique_ptr that holds an instance of CollectionNamedElementCache since this object rarely
        exists in most HTMLCollections.

        Also removed m_isItemRefElementsCacheValid since it was only used by Microdata API removed in r153772
        and renamed a whole bunch of member functions and variables for consistency.

        * dom/Document.cpp:
        (WebCore::Document::collectionCachedIdNameMap):
        (WebCore::Document::collectionWillClearIdNameMap):
        * dom/Document.h:
        * dom/NodeRareData.h:
        (WebCore::NodeListsNodeData::adoptDocument):
        * html/HTMLAllCollection.cpp:
        (WebCore::HTMLAllCollection::namedItemWithIndex):
        * html/HTMLCollection.cpp:
        (WebCore::HTMLCollection::HTMLCollection):
        (WebCore::HTMLCollection::~HTMLCollection):
        (WebCore::HTMLCollection::invalidateCache):
        (WebCore::HTMLCollection::invalidateNamedElementCache): Renamed from invalidateIdNameCacheMaps.
        (WebCore::HTMLCollection::namedItem):
        (WebCore::HTMLCollection::updateNamedElementCache): Renamed from updateNameCache.
        (WebCore::HTMLCollection::namedItems):

        * html/HTMLCollection.h:
        (WebCore::CollectionNamedElementCache::findElementsWithId): Renamed from HTMLCollection::idCache.
        (WebCore::CollectionNamedElementCache::findElementsWithName): Renamed from HTMLCollection::nameCache.
        (WebCore::CollectionNamedElementCache::appendIdCache): Moved from HTMLCollection.
        (WebCore::CollectionNamedElementCache::appendNameCache): Ditto.
        (WebCore::CollectionNamedElementCache::find): Ditto.
        (WebCore::CollectionNamedElementCache::append): Ditto.

        (WebCore::HTMLCollection::invalidateCache):
        (WebCore::HTMLCollection::hasNamedElementCache): Renamed from hasIdNameCache.
        (WebCore::HTMLCollection::createNameItemCache): Added.
        (WebCore::HTMLCollection::namedItemCaches): Added.

        * html/HTMLFormControlsCollection.cpp:
        (WebCore::HTMLFormControlsCollection::updateNamedElementCache):
        * html/HTMLFormControlsCollection.h:

2014-02-26  Ryosuke Niwa  <rniwa@webkit.org>

        Indenting an indented image element resulted in an extra indentation
        https://bugs.webkit.org/show_bug.cgi?id=129201

        Reviewed by Enrica Casucci.

        The bug was caused by endOfParagraph returning a position at the beginning of a block when the position
        passed into the function was at the beginning of the block. Consider the following DOM:
        <blockquote><img></blockquote>

        When endOfParagraph is called on (blockquote, 0), the condition r->isBR() || isBlock(n) in endOfParagraph
        matches immediately on startNode and it returns (blockquote, 0) again.

        This resulted in moveParagraphWithClones invoked by indentIntoBlockquote to erroneously clone the inner
        blockquote. Worked around this bug in ApplyBlockElementCommand::formatSelection by checking this specific
        condition and moving the position to the end of the block. Unfortunately, a lot of existing code depends
        on the current behavior of endOfParagraph so fixing the function itself was not possible.

        There was another bug in indentIntoBlockquote to incorrectly insert a new blockquote into the existing
        blockquote due to the code introduced in r99594 to avoid inserting before the root editable element.
        Since this happens only if outerBlock is the root editable element, which is nodeToSplitTo or an ancestor
        of nodeToSplitTo, explicitly look for this condition.

        Test: editing/execCommand/indent-img-twice.html

        * editing/ApplyBlockElementCommand.cpp:
        (WebCore::ApplyBlockElementCommand::formatSelection):
        (WebCore::isNewLineAtPosition):
        * editing/IndentOutdentCommand.cpp:
        (WebCore::IndentOutdentCommand::indentIntoBlockquote):
        * editing/VisibleUnits.cpp:
        (WebCore::endOfParagraph): Added a FIXME.

2014-02-26  Simon Fraser  <simon.fraser@apple.com>

        Fix two assertions/crashes in compositing code
        https://bugs.webkit.org/show_bug.cgi?id=129414

        Reviewed by Dean Jackson.

        Fix two issues introduced in r164759.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::removeFromScrollCoordinatedLayers): Don't call
        ourselves recursively!
        (WebCore::RenderLayerCompositor::detachScrollCoordinatedLayer): We call this
        function unconditionally on layer teardown, so this assertion is bogus.

2014-02-26  Simon Fraser  <simon.fraser@apple.com>

        Fix the build with some compiler configurations.

        * platform/mac/ScrollAnimatorMac.mm:
        (WebCore::ScrollAnimatorMac::ScrollAnimatorMac):
        (WebCore::ScrollAnimatorMac::didAddVerticalScrollbar):
        (WebCore::ScrollAnimatorMac::didAddHorizontalScrollbar):

2014-02-26  Myles C. Maxfield  <mmaxfield@apple.com>

        Ranges given to createMarkupInternal might not be canonicalized
        https://bugs.webkit.org/show_bug.cgi?id=129408

        Reviewed by Ryosuke Niwa.

        When WebKit clients (such as Mail) call WKWebArchiveCreateFromRange() with a range,
        that range is not necessarily canonicalized. Therefore, comparing it for equality
        with a canonicalized range might return a false negative. Instead, we should compare
        canonicalized ranges.

        No new tests because this codepath will only be reached via SPI.

        * editing/markup.cpp:
        (WebCore::createMarkupInternal):

2014-02-26  Enrica Casucci  <enrica@apple.com>

        [iOS WebKit2] Form controls handling: implement date and time controls.
        https://bugs.webkit.org/show_bug.cgi?id=129344

        Reviewed by Simon Fraser and Joseph Pecoraro.

        Adding one localizable string.

        * English.lproj/Localizable.strings:

2014-02-26  Simon Fraser  <simon.fraser@apple.com>

        Prepare for overflow scrolling nodes in the scrolling tree
        https://bugs.webkit.org/show_bug.cgi?id=129398

        Reviewed by Tim Horton.

        Lay some groundwork for overflow:scrolling nodes in the scrolling tree.
        Change terminology to refer to "scroll-coordinatored" layers now, not just viewport-constrained
        layers.
        
        A given layer can be both viewport-constrained and overflow-scrolling (e.g. position:fixed,
        overflow:scroll), so handle that in RenderLayerBacking, and use some "reason" flags
        in RenderLayerCompositor.

        * page/FrameView.cpp:
        (WebCore::FrameView::scrollLayerID): Rename
        * page/scrolling/ScrollingStateTree.cpp:
        (WebCore::ScrollingStateTree::attachNode): Remove invalid assertion.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::RenderLayerBacking):
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        (WebCore::RenderLayerBacking::updateScrollingLayers): Simplify the logic with
        an early return.
        (WebCore::RenderLayerBacking::detachFromScrollingCoordinator):
        Allow a layer to play both viewport-constrained and scrolling roles
        in the scrolling tree.
        * rendering/RenderLayerBacking.h:
        (WebCore::RenderLayerBacking::viewportConstrainedNodeID):
        (WebCore::RenderLayerBacking::setViewportConstrainedNodeID):
        (WebCore::RenderLayerBacking::scrollingNodeID):
        (WebCore::RenderLayerBacking::setScrollingNodeID):
        (WebCore::RenderLayerBacking::scrollingNodeIDForChildren):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges):
        (WebCore::RenderLayerCompositor::didFlushChangesForLayer):
        (WebCore::RenderLayerCompositor::updateBacking):
        (WebCore::RenderLayerCompositor::layerWillBeRemoved):
        (WebCore::RenderLayerCompositor::fixedRootBackgroundLayerChanged):
        (WebCore::RenderLayerCompositor::clearBackingForLayerIncludingDescendants):
        (WebCore::RenderLayerCompositor::requiresCompositingLayer):
        (WebCore::RenderLayerCompositor::requiresOwnBackingStore):
        (WebCore::RenderLayerCompositor::reasonsForCompositing):
        (WebCore::RenderLayerCompositor::requiresCompositingForScrolling):
        (WebCore::isViewportConstrainedFixedOrStickyLayer):
        (WebCore::isMainFrameScrollingOrOverflowScrolling):
        (WebCore::RenderLayerCompositor::rootLayerAttachmentChanged):
        (WebCore::RenderLayerCompositor::updateScrollCoordinatedStatus):
        (WebCore::RenderLayerCompositor::removeFromScrollCoordinatedLayers):
        (WebCore::nearestScrollCoordinatedAncestor):
        (WebCore::RenderLayerCompositor::updateScrollCoordinatedLayer):
        (WebCore::RenderLayerCompositor::detachScrollCoordinatedLayer):
        (WebCore::RenderLayerCompositor::registerAllViewportConstrainedLayers):
        (WebCore::RenderLayerCompositor::willRemoveScrollingLayer):
        (WebCore::RenderLayerCompositor::didAddScrollingLayer):
        * rendering/RenderLayerCompositor.h:

2014-02-26  Andy Estes  <aestes@apple.com>

        [iOS] Support network state notification using CPNetworkObserver
        https://bugs.webkit.org/show_bug.cgi?id=129358

        Reviewed by Dan Bernstein.

        Add iOS support for navigator.onLine and online/offline events. Since
        it can be expensive to query CPNetworkObserver, wait to do so until
        someone calls NetworkStateObserver::onLine() or
        NetworkStateObserver::addNetworkStateChangeListener(). For clients that
        don't wish to observe network reachability at all, add a global opt-out.
        These clients will only pay the cost of CPNetworkObserver if they load
        a page that explicitly accesses navigator.onLine.

        No new tests. Covered by existing tests.

        * WebCore.exp.in: Stopped exporting NetworkStateNotifier::setIsOnLine()
        and started exporting Settings::gShouldOptOutOfNetworkStateObservation.
        * WebCore.xcodeproj/project.pbxproj: Renamed NetworkStateNotifierIOS.cpp
        to NetworkStateNotifierIOS.mm.
        * page/Settings.cpp: Defaulted gShouldOptOutOfNetworkStateObservation
        to false.
        * page/Settings.h:
        (WebCore::Settings::setShouldOptOutOfNetworkStateObservation):
        (WebCore::Settings::shouldOptOutOfNetworkStateObservation):
        * platform/network/NetworkStateNotifier.cpp:
        (WebCore::NetworkStateNotifier::addNetworkStateChangeListener): Ignored
        the listener if Settings::shouldOptOutOfNetworkStateObservation().
        Called registerObserverIfNecessary() and added the listener otherwise.
        (WebCore::NetworkStateNotifier::notifyNetworkStateChange): Const qualified.
        * platform/network/NetworkStateNotifier.h
        (NetworkStateNotifier::onLine):
        * platform/network/ios/NetworkStateNotifierIOS.cpp: Removed.
        * platform/network/ios/NetworkStateNotifierIOS.mm: Added.
        (-[NetworkStateObserver initWithNotifier:WebCore::]): Registered self
        as a network reachable observer on CPNetworkObserver.
        (-[NetworkStateObserver dealloc]): Removed self as a network reachable
        observer.
        (-[NetworkStateObserver networkStateChanged:]): Called setOnLine() on
        the web thread, passing the reachability value from the notification.
        (WebCore::NetworkStateNotifier::NetworkStateNotifier):
        (WebCore::NetworkStateNotifier::~NetworkStateNotifier): Cleared
        m_observer's pointer back to us.
        (WebCore::NetworkStateNotifier::registerObserverIfNecessary): Initialized
        m_observer if necessary.
        (WebCore::NetworkStateNotifier::onLine): Called
        registerObserverIfNecessary() and set an initial value for m_isOnLine
        if m_isOnLineInitialized is false. Returned m_isOnLine.
        (WebCore::setOnLine): Set m_isOnLine and called
        notifyNetworkStateChange() if needed. Unconditionally set
        m_isOnLineInitialized to true.

2014-02-26  Brian Burg  <bburg@apple.com>

        Unreviewed build fix for !ENABLE(CONTEXT_MENUS).

        I forgot to add guards to handleContextMenuEvent().

        * replay/UserInputBridge.cpp:
        * replay/UserInputBridge.h:

2014-02-26  Dean Jackson  <dino@apple.com>

        [WebGL] Only skip context error retrieval if a pending context
        https://bugs.webkit.org/show_bug.cgi?id=129397

        Reviewed by Tim Horton.

        A lost context should still ask the GC3D what the error is. Only
        a pending context should return early.

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore::WebGLRenderingContext::getError):

2014-02-26  Brian Burg  <bburg@apple.com>

        Web Replay: route through UserInputBridge when delivering user inputs to WebCore
        https://bugs.webkit.org/show_bug.cgi?id=128150

        Reviewed by Timothy Hatcher.

        Add an UserInputBridge instance to each Page. WebKit2 routes a page's user inputs through
        the WebCore page's user input bridge so that the inputs can be selectively captured, filtered,
        and replayed using instrumentation inside the UserInputBridge.

        For now, the routing methods of UserInputBridge have no replay-specific code paths, and just
        put the input delivery code inside WebCore rather than its external clients. Replay-specific
        code paths will be added once https://bugs.webkit.org/show_bug.cgi?id=128782 is fixed. However,
        once complete the code will work as follows:

        - When neither capturing or replaying, behavior is unchanged.

        - When capturing user inputs, each external input is saved into a replay log as it crosses
        the bridge from outside WebCore.

        - When replaying, the bridge closes and user inputs from WebKit2 are not accepted. Instead,
        the saved inputs from the replay log are re-dispatched as if they had crossed the bridge.

        * CMakeLists.txt:
        * GNUmakefile.am:
        * GNUmakefile.list.am:
        * WebCore.exp.in: Add symbols for input routing methods.
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * page/Page.cpp:
        (WebCore::Page::Page): Initialize the owned UserInputBridge in the Page constructor.
        * page/Page.h:
        (WebCore::Page::inputBridge): Added a by-reference getter.
        * replay/UserInputBridge.cpp: Added.
        (WebCore::UserInputBridge::UserInputBridge):
        (WebCore::UserInputBridge::~UserInputBridge):
        (WebCore::UserInputBridge::handleContextMenuEvent):
        (WebCore::UserInputBridge::handleMousePressEvent):
        (WebCore::UserInputBridge::handleMouseReleaseEvent):
        (WebCore::UserInputBridge::handleMouseMoveEvent):
        (WebCore::UserInputBridge::handleMouseMoveOnScrollbarEvent):
        (WebCore::UserInputBridge::handleKeyEvent):
        (WebCore::UserInputBridge::handleAccessKeyEvent):
        (WebCore::UserInputBridge::handleWheelEvent):
        (WebCore::UserInputBridge::focusSetActive):
        (WebCore::UserInputBridge::focusSetFocused):
        (WebCore::UserInputBridge::scrollRecursively):
        (WebCore::UserInputBridge::logicalScrollRecursively):
        (WebCore::UserInputBridge::loadRequest):
        (WebCore::UserInputBridge::reloadFrame):
        (WebCore::UserInputBridge::stopLoadingFrame):
        (WebCore::UserInputBridge::tryClosePage):
        * replay/UserInputBridge.h: Added.

2014-02-26  Dean Jackson  <dino@apple.com>

        [WebGL] Protect more WebGL entry points for pending contexts
        https://bugs.webkit.org/show_bug.cgi?id=129386

        Reviewed by Tim Horton.

        There are entry points into a WebGLRenderingContext that don't
        come from the web-exposed API directly, such as drawImage with
        the WebGL canvas. Protect these by returning early if we're
        a pending context.

        Also a bunch of drive-by 0 -> nullptr changes.

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore::WebGLRenderingContext::markLayerComposited):
        (WebCore::WebGLRenderingContext::paintRenderingResultsToCanvas):
        (WebCore::WebGLRenderingContext::paintRenderingResultsToImageData):
        (WebCore::WebGLRenderingContext::reshape):
        (WebCore::WebGLRenderingContext::createBuffer):
        (WebCore::WebGLRenderingContext::createFramebuffer):
        (WebCore::WebGLRenderingContext::createTexture):
        (WebCore::WebGLRenderingContext::createProgram):
        (WebCore::WebGLRenderingContext::createRenderbuffer):
        (WebCore::WebGLRenderingContext::createShader):
        (WebCore::WebGLRenderingContext::getActiveAttrib):
        (WebCore::WebGLRenderingContext::getActiveUniform):
        (WebCore::WebGLRenderingContext::getContextAttributes):
        (WebCore::WebGLRenderingContext::getError):
        (WebCore::WebGLRenderingContext::getExtension):
        (WebCore::WebGLRenderingContext::getShaderPrecisionFormat):
        (WebCore::WebGLRenderingContext::getUniformLocation):
        (WebCore::WebGLRenderingContext::drawImageIntoBuffer):
        (WebCore::WebGLRenderingContext::videoFrameToImage):
        (WebCore::WebGLRenderingContext::validateBufferDataParameters):
        (WebCore::WebGLRenderingContext::LRUImageBufferCache::imageBuffer):

2014-02-26  Bem Jones-Bey  <bjonesbe@adobe.com>

        [CSS Shapes] inset and inset-rectangle trigger assert with replaced element and large percentage dimension
        https://bugs.webkit.org/show_bug.cgi?id=129060

        Reviewed by Simon Fraser.

        A bounds check was omitted when computing the width and height for inset
        rectangles, making it possible for the width or height to end up being
        negative. This patch adds in that check for both. It seems that only
        replaced elements like iframe and img trigger this problem.

        Tests: fast/shapes/shape-outside-floats/shape-outside-floats-img-inset-negative-width-crash.html
               fast/shapes/shape-outside-floats/shape-outside-floats-img-inset-rectangle-negative-width-crash.html

        * rendering/shapes/Shape.cpp:
        (WebCore::Shape::createShape):

2014-02-26  Myles C. Maxfield  <mmaxfield@apple.com>

        Underlines are too thick when zoomed in
        https://bugs.webkit.org/show_bug.cgi?id=129352

        Reviewed by Dean Jackson.

        The input to the underline drawing code is in user-space, not device-space.
        The underlines were getting scaled twice, once in InlineTextBox and the other
        in GraphicsContext.

        Test: fast/css3-text/css3-text-decoration/text-decoration-scaled.html

        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paintDecoration):

2014-02-26  Andreas Kling  <akling@apple.com>

        Remove unused InspectorCounters.
        <https://webkit.org/b/129367>

        The InspectorCounters code was only used to implement two layout test
        APIs (window.internals.numberOfLive{Nodes,Documents}) yet it had hooks
        in crazy places like Node construction and destruction.

        Rewrote the internals APIs to iterate over all live Documents instead,
        totaling up their referencing Node count. Added a process-global
        Document::allDocuments() HashSet to make this whole thing possible.

        Reviewed by Sam Weinig.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * WebCore.exp.in:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSEventListener.cpp:
        * dom/Document.cpp:
        (WebCore::Document::allDocuments):
        (WebCore::Document::Document):
        (WebCore::Document::~Document):
        * dom/Document.h:
        (WebCore::Node::Node):
        * dom/Node.cpp:
        (WebCore::Node::~Node):
        * inspector/InspectorAllInOne.cpp:
        * inspector/InspectorCounters.cpp: Removed.
        * inspector/InspectorCounters.h: Removed.
        * inspector/InspectorTimelineAgent.cpp:
        (WebCore::InspectorTimelineAgent::start):
        (WebCore::InspectorTimelineAgent::innerAddRecordToTimeline):
        (WebCore::InspectorTimelineAgent::InspectorTimelineAgent):
        * inspector/InspectorTimelineAgent.h:
        * inspector/protocol/Timeline.json:
        * platform/ThreadGlobalData.cpp:
        * testing/Internals.cpp:
        (WebCore::Internals::numberOfLiveNodes):
        (WebCore::Internals::numberOfLiveDocuments):
        * testing/Internals.h:
        * testing/Internals.idl:

2014-02-26  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: Remove console.profiles from window.console API
        https://bugs.webkit.org/show_bug.cgi?id=116883

        Reviewed by Timothy Hatcher.

        console.profiles has been removed or never implemented by other
        browsers. We should remove it as well. However, since tests
        rely on it, keep it as window.internals.consoleProfiles.

        * WebCore.exp.in:
        * page/Console.idl:
        * testing/Internals.cpp:
        (WebCore::Internals::consoleProfiles):
        * testing/Internals.h:
        * testing/Internals.idl:

2014-02-26  Martin Hock  <mhock@apple.com>

        Create SessionID value-style class for session IDs.
        https://bugs.webkit.org/show_bug.cgi?id=129141

        Reviewed by Sam Weinig.

        * GNUmakefile.list.am:
        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * page/Page.cpp: Add SessionID member.
        (WebCore::Page::Page):
        (WebCore::Page::sessionID): Retrieve sessionID or use settings if not set.
        * page/Page.h:
        (WebCore::Page::isSessionIDSet):
        (WebCore::Page::setSessionID):
        * page/SessionID.h: Session ID class consisting solely of its uint64_t session ID.
        (WebCore::SessionID::SessionID):
        (WebCore::SessionID::isValid): Not empty.
        (WebCore::SessionID::isEphemeral):
        (WebCore::SessionID::sessionID):
        (WebCore::SessionID::operator==): Value-based equality.
        (WebCore::SessionID::operator!=):
        (WebCore::SessionID::emptySessionID): Zero value also used for HashTraits emptyValue.
        (WebCore::SessionID::defaultSessionID):
        (WebCore::SessionID::legacyPrivateSessionID):
        * page/SessionIDHash.h:
        (WTF::SessionIDHash::hash): Just the casted session ID (low order bytes)
        (WTF::SessionIDHash::equal):
        (WTF::HashTraits<WebCore::SessionID>::emptyValue): Equal to emptySessionID.
        (WTF::HashTraits<WebCore::SessionID>::constructDeletedValue): -1 value.
        (WTF::HashTraits<WebCore::SessionID>::isDeletedValue):

2014-02-26  Eric Carlson  <eric.carlson@apple.com>

        Fix builds that don't define IMAGE_CONTROLS.

        * page/ContextMenuContext.cpp:
        (WebCore::ContextMenuContext::ContextMenuContext):

2014-02-26  Eric Carlson  <eric.carlson@apple.com>

        Build fix for OS X after r164720.

        * page/ContextMenuContext.cpp:

2014-02-26  Brady Eidson  <beidson@apple.com>

        Pipe experimental image controls menu up to WebKit2
        https://bugs.webkit.org/show_bug.cgi?id=129339

        Reviewed by Simon Fraser.

        Handle events for the image control, starting down the context menu code path if appropriate:
        * html/shadow/mac/ImageControlsRootElementMac.cpp:
        (WebCore::ImageControlsRootElementMac::defaultEventHandler):
        * html/shadow/mac/ImageControlsRootElementMac.h:

        Add a class to hold a HitTestResult and addition info about the current ContextMenu invocation:
        * page/ContextMenuContext.cpp: Added.
        (WebCore::ContextMenuContext::ContextMenuContext):
        * page/ContextMenuContext.h: Added.
        (WebCore::ContextMenuContext::hitTestResult):
        (WebCore::ContextMenuContext::isImageControl):

        Update ContextMenuController to work with ContextMenuContext instead of HitTestResult directly:
        * page/ContextMenuController.cpp:
        (WebCore::ContextMenuController::showContextMenu):
        (WebCore::ContextMenuController::createContextMenu):
        (WebCore::ContextMenuController::contextMenuItemSelected):
        (WebCore::ContextMenuController::populate):
        (WebCore::ContextMenuController::addInspectElementItem):
        (WebCore::ContextMenuController::checkOrEnableIfNeeded):
        (WebCore::ContextMenuController::showImageControlsMenu):
        * page/ContextMenuController.h:
        (WebCore::ContextMenuController::contextMenu):
        (WebCore::ContextMenuController::setContextMenuContext):
        (WebCore::ContextMenuController::context):
        (WebCore::ContextMenuController::hitTestResult):

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.xcodeproj/project.pbxproj:

2014-02-26  Zan Dobersek  <zdobersek@igalia.com>

        REGRESSION(r162947): Document::topDocument() returns an incorrect reference for cached Documents
        https://bugs.webkit.org/show_bug.cgi?id=128175

        Reviewed by Antti Koivisto.

        * dom/Document.cpp:
        (WebCore::Document::topDocument): Fall back to pre-r162947 way of determining the top document
        when the Document is in page cache or is in the middle of having its render tree destroyed.
        In the first case, the determined top document is actually the document currently loaded in the
        Frame to which the cached document is still connected, which is obviously not desired. In the
        second case the top document is similarly incorrectly deduced, leading to non-deletion of the
        proper top document's AXObjectCache. Because of this AccessibilityRenderObjects are not detached
        which results in assertions in RenderObject destructor where the objects are found to be still
        flagged as in use by the AX cache.

2014-02-26  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Remove unused method RenderFlowThread::updateLayerToRegionMappings()
        https://bugs.webkit.org/show_bug.cgi?id=129368

        Reviewed by Andrei Bucur.

        Remove unused code, no new tests.

        * rendering/RenderFlowThread.h:

2014-02-26  Xabier Rodriguez Calvar  <calvaris@igalia.com>

        [GTK] Regression when showing the captions menu
        https://bugs.webkit.org/show_bug.cgi?id=129106

        Reviewed by Martin Robinson.

        In some cases, when clicking the captions button the menu was not
        shown.

        Updated test: media/video-controls-captions-trackmenu.html

        * Modules/mediacontrols/mediaControlsGtk.js:
        (ControllerGtk.prototype.buildCaptionMenu):
        (ControllerGtk.prototype.showCaptionMenu): Specify sizes in
        pixels.

2014-02-26  Ryosuke Niwa  <rniwa@webkit.org>

        Avoid unnecessary HTML Collection invalidations for id and name attribute changes
        https://bugs.webkit.org/show_bug.cgi?id=129361

        Reviewed by Benjamin Poulain.

        Before this patch, setting id and name attributes resulted in traversing all the ancestors to invalidate
        HTML collections on those nodes whenever we had more than one HTMLCollection alive.

        Avoid the traversal when HTMLCollections don't have any valid id and name map caches by making each
        HTMLCollection explicitly call collectionCachedIdNameMap and collectionWillClearIdNameMap when it caches
        or clears the id and name map.

        Inspired by https://chromium.googlesource.com/chromium/blink/+/5b06b91b79098f7d42e480f85be32198315d2440

        * dom/Document.cpp:
        (WebCore::Document::registerCollection): Takes a boolean to indicate whether collection has a valid cache
        for the id and name map.
        (WebCore::Document::unregisterCollection): Ditto.
        (WebCore::Document::collectionCachedIdNameMap): Added.
        (WebCore::Document::collectionWillClearIdNameMap): Added.
        * dom/Document.h:

        * dom/NodeRareData.h:
        (WebCore::NodeListsNodeData::adoptDocument): Call invalidateCache on HTML collections after, not before,
        calling unregisterCollection and registerCollection since collections' owner nodes have already been
        moved to the new document here and invalidateCache uses owner node's document to call
        collectionWillClearIdNameMap. So calling invalidateCache before calling unregister/registerCollection
        would result in collectionWillClearIdNameMap getting called on a wrong document.

        * html/HTMLCollection.cpp:
        (WebCore::HTMLCollection::HTMLCollection):
        (WebCore::HTMLCollection::~HTMLCollection):
        (WebCore::HTMLCollection::invalidateCache):
        (WebCore::HTMLCollection::invalidateIdNameCacheMaps): Added the code to uncount itself from the number
        of live node lists and HTML collections that need to be invalidated upon id and name attribute changes.
        (WebCore::HTMLCollection::updateNameCache):

        * html/HTMLCollection.h:
        (WebCore::HTMLCollection::invalidateCache):
        (WebCore::HTMLCollection::hasIdNameCache): Renamed from hasNameCache.
        (WebCore::HTMLCollection::setHasIdNameCache): Renamed from setHasIdNameCache.

        * html/HTMLFormControlsCollection.cpp:
        (WebCore::HTMLFormControlsCollection::updateNameCache):

2014-02-25  Frédéric Wang  <fred.wang@free.fr>

        Add support for minsize/maxsize attributes.
        https://bugs.webkit.org/show_bug.cgi?id=122567

        Reviewed by Chris Fleizach.

        This change implements the minsize/maxsize attributes of the mo element.
        We also switch stretch sizes from int to LayoutUnit to improve accuracy.

        Tests: mathml/presentation/stretchy-minsize-maxsize-dynamic.html
               mathml/presentation/stretchy-minsize-maxsize.html

        * rendering/mathml/RenderMathMLOperator.cpp:
        (WebCore::RenderMathMLOperator::SetOperatorProperties):
        (WebCore::RenderMathMLOperator::stretchTo):
        * rendering/mathml/RenderMathMLOperator.h:
        * rendering/mathml/RenderMathMLRow.cpp:
        (WebCore::RenderMathMLRow::layout):

2014-02-25  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Small clean-up of flow threads accelerated compositing code
        https://bugs.webkit.org/show_bug.cgi?id=129312

        Reviewed by Andrei Bucur.

        Some clean-up for the code used for regions in accelerated compositing functionality:
        1. Rename updateRenderFlowThreadLayersIfNeeded -> updateFlowThreadsLayerToRegionMappingsIfNeeded
        as the function updates the mapping between the flow threads layers and their corresponding regions
        2. Remove RenderLayerCompositor::updateRenderFlowThreadLayersIfNeeded and move the code in place
        at call site since the function body does not require a dedicated function.

        No new functionality, no new tests.

        * rendering/FlowThreadController.cpp:
        (WebCore::FlowThreadController::updateFlowThreadsLayerToRegionMappingsIfNeeded):
        Now that the regions are always layers, we do not need to iterate backwards.
        * rendering/FlowThreadController.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateCompositingLayers):
        * rendering/RenderLayerCompositor.h:

2014-02-25  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Ensure consistent border painting width.
        https://bugs.webkit.org/show_bug.cgi?id=129259

        Reviewed by Simon Fraser.

        Border edges are painted as (semi)independent rectangles. When snapping an edge rectangle
        to device pixels, its painted dimensions depend on its size and its fractional position.
        Specific combination of position and border width can result in painting edges sized differently.
        Using device snapped border width to calculate inner/outer rectangles helps to maintain
        uniform border width.

        Currently not testable.

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::BorderEdge::BorderEdge):
        (WebCore::BorderEdge::shouldRender):
        (WebCore::BorderEdge::presentButInvisible):
        (WebCore::BorderEdge::widthForPainting):
        (WebCore::BorderEdge::getDoubleBorderStripeWidths):
        (WebCore::RenderBoxModelObject::paintOneBorderSide):
        (WebCore::calculateSideRect):
        (WebCore::RenderBoxModelObject::paintBorderSides):
        (WebCore::RenderBoxModelObject::paintBorder):
        (WebCore::RenderBoxModelObject::drawBoxSideFromPath):
        (WebCore::calculateSideRectIncludingInner):

2014-02-25  Zalan Bujtas  <zalan@apple.com>

        Subpixel layout: Remove explicit static_cast<LayoutUnit> conversions.
        https://bugs.webkit.org/show_bug.cgi?id=129359

        Reviewed by Simon Fraser.

        No testable change in behavior.

        * css/LengthFunctions.cpp:
        (WebCore::minimumValueForLength):
        * page/FrameView.cpp:
        (WebCore::FrameView::forceLayoutForPagination):
        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::paintFillLayer):
        * rendering/InlineFlowBox.h:
        (WebCore::InlineFlowBox::logicalLeftVisualOverflow):
        (WebCore::InlineFlowBox::logicalRightVisualOverflow):
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::isSelected):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::computeColumnCountAndWidth):
        (WebCore::getBPMWidth):
        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::adjustForBorderFit):
        * rendering/RenderDeprecatedFlexibleBox.cpp:
        (WebCore::RenderDeprecatedFlexibleBox::layoutVerticalBox):
        * rendering/RenderFieldset.cpp:
        (WebCore::RenderFieldset::paintBoxDecorations):
        * rendering/RenderTable.h:
        (WebCore::RenderTable::borderSpacingInRowDirection):
        * rendering/RenderTextControlMultiLine.cpp:
        (WebCore::RenderTextControlMultiLine::preferredContentLogicalWidth):
        * rendering/RenderTextControlSingleLine.cpp:
        (WebCore::RenderTextControlSingleLine::preferredContentLogicalWidth):
        * rendering/RootInlineBox.cpp:
        (WebCore::RootInlineBox::beforeAnnotationsAdjustment):
        (WebCore::RootInlineBox::ascentAndDescentForBox):
        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::resolveLengthAttributeForSVG):

2014-02-25  Anders Carlsson  <andersca@apple.com>

        Build fixes.

        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:

2014-02-25  Benjamin Poulain  <bpoulain@apple.com>

        Build fix for OS X after r164690

        * WebCore.exp.in:

2014-02-25  Anders Carlsson  <andersca@apple.com>

        Rename WebCore::VisitedLinkProvider to WebCore::VisitedLinkStore
        https://bugs.webkit.org/show_bug.cgi?id=129357

        Reviewed by Sam Weinig.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/VisitedLinkState.cpp:
        (WebCore::VisitedLinkState::determineLinkStateSlowCase):
        * loader/HistoryController.cpp:
        (WebCore::addVisitedLink):
        * page/DefaultVisitedLinkStore.cpp: Renamed from Source/WebCore/page/DefaultVisitedLinkProvider.cpp.
        (WebCore::DefaultVisitedLinkStore::create):
        (WebCore::DefaultVisitedLinkStore::DefaultVisitedLinkStore):
        (WebCore::DefaultVisitedLinkStore::~DefaultVisitedLinkStore):
        (WebCore::DefaultVisitedLinkStore::isLinkVisited):
        (WebCore::DefaultVisitedLinkStore::addVisitedLink):
        * page/DefaultVisitedLinkStore.h: Renamed from Source/WebCore/page/DefaultVisitedLinkProvider.h.
        * page/Page.cpp:
        (WebCore::Page::Page):
        (WebCore::Page::visitedLinkStore):
        * page/Page.h:
        * page/PageGroup.cpp:
        (WebCore::PageGroup::visitedLinkStore):
        * page/PageGroup.h:
        * page/VisitedLinkStore.cpp: Renamed from Source/WebCore/page/VisitedLinkProvider.cpp.
        (WebCore::VisitedLinkStore::VisitedLinkStore):
        (WebCore::VisitedLinkStore::~VisitedLinkStore):
        * page/VisitedLinkStore.h: Renamed from Source/WebCore/page/VisitedLinkProvider.h.

2014-02-25  Enrica Casucci  <enrica@apple.com>

        [WebKit2] Form controls handling.
        https://bugs.webkit.org/show_bug.cgi?id=129344
        <rdar://problem/16053643>

        Reviewed by Simon Fraser and Joseph Pecoraro.

        Adding some exports.
        
        * WebCore.exp.in:

2014-02-25  Samuel White  <samuel_white@apple.com>

        Add accessibility search predicate support for AXOutlines
        https://bugs.webkit.org/show_bug.cgi?id=123748

        Reviewed by Chris Fleizach.

        Added new AXOutlineSearchKey to support finding elements with aria role=tree.

        No new tests, updated existing search-predicate.html test to cover AXOutlineSearchKey.

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::isAccessibilityObjectSearchMatchAtIndex):
        * accessibility/AccessibilityObject.h:
        * accessibility/mac/WebAccessibilityObjectWrapperMac.mm:
        (createAccessibilitySearchKeyMap):

2014-02-25  Mark Lam  <mark.lam@apple.com>

        Need to initialize VM stack data even when the VM is on an exclusive thread.
        <https://webkit.org/b/129265>

        Not reviewed.

        No new tests.

        Relanding r164627 now that <https://webkit.org/b/129341> is fixed.

        * bindings/js/JSDOMBinding.cpp:
        (WebCore::reportException):
        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::commonVM):

2014-02-25  Mark Lam  <mark.lam@apple.com>

        JSDOMPromise methods should acquire VM lock before calling into JS.
        <https://webkit.org/b/129341>

        Reviewed by Geoffrey Garen.

        No new tests.

        * bindings/js/JSDOMPromise.h:
        (WebCore::DeferredWrapper::resolve):
        (WebCore::DeferredWrapper::reject):
        (WebCore::DeferredWrapper::resolve<String>):
        (WebCore::DeferredWrapper::resolve<bool>):
        (WebCore::char>>):
        (WebCore::DeferredWrapper::reject<String>):

2014-02-25  Anders Carlsson  <andersca@apple.com>

        Simplify visited link style invalidation
        https://bugs.webkit.org/show_bug.cgi?id=129340

        Reviewed by Dan Bernstein.

        Get rid of the static Page::allVisitedStateChanged and Page::visitedStateChanged
        member functions and add functions to invalidate all styles on a single page or the style
        for a single link hash on a single page.

        * WebCore.exp.in:
        * page/Page.cpp:
        (WebCore::Page::invalidateStylesForAllLinks):
        (WebCore::Page::invalidateStylesForLink):
        * page/Page.h:
        * page/PageGroup.cpp:
        (WebCore::PageGroup::addVisitedLink):
        (WebCore::PageGroup::removeVisitedLink):
        (WebCore::PageGroup::removeVisitedLinks):

2014-02-25  Andreas Kling  <akling@apple.com>

        Remove unused ThreadSpecificInspectorCounters.
        <https://webkit.org/b/129337>

        We were keeping count of all the JS event listeners in every thread
        to support an old Chromium feature that's no longer relevant.

        Removing this gets rid of expensive thread-local storage lookups.

        Reviewed by Anders Carlsson.

        * bindings/js/JSEventListener.cpp:
        (WebCore::JSEventListener::JSEventListener):
        (WebCore::JSEventListener::~JSEventListener):
        * inspector/InspectorCounters.cpp:
        * inspector/InspectorCounters.h:
        * inspector/InspectorTimelineAgent.cpp:
        (WebCore::InspectorTimelineAgent::setDOMCounters):
        * inspector/protocol/Timeline.json:
        * platform/ThreadGlobalData.cpp:
        (WebCore::ThreadGlobalData::ThreadGlobalData):
        (WebCore::ThreadGlobalData::destroy):
        * platform/ThreadGlobalData.h:

2014-02-25  Laszlo Vidacs  <lvidacs.u-szeged@partner.samsung.com>

        display:table with padding and/or borders in border-box calculates height incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=126576

        Reviewed by David Hyatt.

        Based on blink issue https://codereview.chromium.org/25206002/

        Tests: fast/box-sizing/css-table-collapse.html
               fast/box-sizing/css-table-no-collapse.html
               fast/box-sizing/table-collapse.html
               fast/box-sizing/table-no-collapse.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computePositionedLogicalHeightUsing):

2014-02-25  Anders Carlsson  <andersca@apple.com>

        Get rid of VisitedLinkStrategy
        https://bugs.webkit.org/show_bug.cgi?id=129324

        Reviewed by Dan Bernstein.

        * GNUmakefile.list.am:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/PlatformStrategies.h:
        (WebCore::PlatformStrategies::PlatformStrategies):
        * platform/VisitedLinkStrategy.h: Removed.

2014-02-25  Alexey Proskuryakov  <ap@apple.com>

        Rolling out http://trac.webkit.org/changeset/164611, because it broke
        WebKit2.PrivateBrowsingPushStateNoHistoryCallback API test

        The change was for:

        https://bugs.webkit.org/show_bug.cgi?id=129141
        Create SessionID class

2014-02-25  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r164627.
        http://trac.webkit.org/changeset/164627
        https://bugs.webkit.org/show_bug.cgi?id=129325

        Broke SubtleCrypto tests (Requested by ap on #webkit).

        * bindings/js/JSDOMBinding.cpp:
        (WebCore::reportException):
        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::commonVM):

2014-02-25  Anders Carlsson  <andersca@apple.com>

        DefaultVisitedLinkProvider can just call into the page group directly
        https://bugs.webkit.org/show_bug.cgi?id=129320

        Reviewed by Andreas Kling.

        * page/DefaultVisitedLinkProvider.cpp:
        (WebCore::DefaultVisitedLinkProvider::isLinkVisited):
        (WebCore::DefaultVisitedLinkProvider::addVisitedLink):

2014-02-25  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r164638.
        http://trac.webkit.org/changeset/164638
        https://bugs.webkit.org/show_bug.cgi?id=129321

        Broke Windows build. (Requested by bfulgham on #webkit).

        * dom/ContainerNode.h:
        (WebCore::ChildNodesLazySnapshot::takeSnapshot):
        (WebCore::ChildNodesLazySnapshot::hasSnapshot):
        * dom/Element.cpp:
        (WebCore::ensureAttrNodeListForElement):
        (WebCore::Element::attributes):
        * dom/ElementIteratorAssertions.h:
        (WebCore::ElementIteratorAssertions::ElementIteratorAssertions):
        * dom/ElementRareData.h:
        (WebCore::ElementRareData::create):
        (WebCore::ElementRareData::setAttributeMap):
        * dom/MutationObserverRegistration.cpp:
        (WebCore::MutationObserverRegistration::create):
        (WebCore::MutationObserverRegistration::observedSubtreeNodeWillDetach):
        (WebCore::MutationObserverRegistration::clearTransientRegistrations):
        (WebCore::MutationObserverRegistration::addRegistrationNodesToSet):
        * dom/MutationObserverRegistration.h:
        * dom/NamedNodeMap.h:
        (WebCore::NamedNodeMap::create):
        (WebCore::NamedNodeMap::NamedNodeMap):
        * dom/Node.cpp:
        (WebCore::Node::ensureRareData):
        (WebCore::Node::didMoveToNewDocument):
        (WebCore::Node::ensureEventTargetData):
        (WebCore::Node::mutationObserverRegistry):
        (WebCore::Node::registerMutationObserver):
        (WebCore::Node::unregisterMutationObserver):
        (WebCore::Node::notifyMutationObserversNodeWillDetach):
        * dom/Node.h:
        * dom/NodeRareData.h:
        (WebCore::NodeListsNodeData::create):
        (WebCore::NodeListsNodeData::NodeListsNodeData):
        (WebCore::NodeMutationObserverData::create):
        (WebCore::NodeMutationObserverData::NodeMutationObserverData):
        (WebCore::NodeRareData::create):
        (WebCore::NodeRareData::clearNodeLists):
        (WebCore::NodeRareData::ensureNodeLists):
        (WebCore::NodeRareData::ensureMutationObserverData):
        (WebCore::NodeRareData::NodeRareData):
        * dom/StyledElement.cpp:
        (WebCore::StyledElement::rebuildPresentationAttributeStyle):

2014-02-25  Eric Carlson  <eric.carlson@apple.com>

        [iOS] Show status image when playing video to external device
        https://bugs.webkit.org/show_bug.cgi?id=129277

        Reviewed by Jer Noble.

        * Modules/mediacontrols/mediaControlsApple.js:
        (Controller.prototype.handleEvent): Restructure the code so it is possible to handle events
            that target the video element which aren't in the HandledVideoEvents array.

        * Modules/mediacontrols/mediaControlsiOS.js:
        (ControllerIOS.prototype.currentPlaybackTargetIsWireless): webkitCurrentPlaybackTargetIsWireless
            is an attribute, not a function.
        (ControllerIOS.prototype.updateWirelessPlaybackStatus): Fix style.
        (ControllerIOS.prototype.updateWirelessTargetAvailable): Ditto.
        (ControllerIOS.prototype.updateProgress): Ditto.
        (ControllerIOS.prototype.handleWrapperTouchStart): Show the controls if the wireless status
            display is touched.
        (ControllerIOS.prototype.handleFullscreenButtonClicked): Fix style
        (ControllerIOS.prototype.handleWirelessPlaybackChange): Ditto.
        (ControllerIOS.prototype.handleWirelessTargetAvailableChange):
        (ControllerIOS.prototype.handleWirelessPickerButtonClicked): Ditto. Stop even propagation.

        Move "playback target" logic into HTMLMediaSession.
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::~HTMLMediaElement): Call media session.
        (WebCore::HTMLMediaElement::loadResource): Tell media session to apply media player
            restrictions now that it has a url.
        (WebCore::HTMLMediaElement::invalidateCachedTime): Only log when cached time is not 
            already invalie.
        (WebCore::HTMLMediaElement::webkitShowPlaybackTargetPicker): Call media session.
        (WebCore::HTMLMediaElement::webkitCurrentPlaybackTargetIsWireless): Ditto.
        (WebCore::HTMLMediaElement::mediaPlayerCurrentPlaybackTargetIsWirelessChanged): Ditto.
        (WebCore::HTMLMediaElement::addEventListener): Ditto.
        (WebCore::HTMLMediaElement::removeEventListen): Ditto.
        (WebCore::HTMLMediaElement::enqueuePlaybackTargetAvailabilityChangedEvent): Ditto.
        (WebCore::HTMLMediaElement::createMediaPlayer): Ditto.

        * html/HTMLMediaSession.cpp:
        (WebCore::restrictionName): Log new WirelessVideoPlaybackDisabled restriction.
        (WebCore::HTMLMediaSession::showingPlaybackTargetPickerPermitted): Return false if there
            is no page, or if wireless playback is disabled.
        (WebCore::HTMLMediaSession::currentPlaybackTargetIsWireless): New, logic from HTMLMediaElement.
        (WebCore::HTMLMediaSession::showPlaybackTargetPicker): Ditto.
        (WebCore::HTMLMediaSession::hasWirelessPlaybackTargets): Ditto.
        (WebCore::HTMLMediaSession::wirelessVideoPlaybackDisabled): Ditto.
        (WebCore::HTMLMediaSession::setWirelessVideoPlaybackDisabled): Ditto.
        (WebCore::HTMLMediaSession::setHasPlaybackTargetAvailabilityListeners): Ditto.
        (WebCore::HTMLMediaSession::applyMediaPlayerRestrictions): New, apply media player specific
            restriction.
        * html/HTMLMediaSession.h:

        Move "playback target" logic into HTMLMediaSession.
        * html/HTMLVideoElement.cpp:
        (WebCore::HTMLVideoElement::parseAttribute): Call media session.
        (WebCore::HTMLVideoElement::webkitWirelessVideoPlaybackDisabled): Call media session.

        * platform/audio/MediaSessionManager.h:
        (WebCore::MediaSessionManager::showPlaybackTargetPicker): New method, does nothing in base class.

        * platform/audio/ios/MediaSessionManagerIOS.h:
        * platform/audio/ios/MediaSessionManagerIOS.mm:
        (WebCore::MediaSessionManageriOS::showPlaybackTargetPicker): Add non-functional stub.

        Implement wireless playback control and status API.
        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.cpp:
        (WebCore::MediaPlayerPrivateAVFoundation::dispatchNotification): Dispatch TargetIsWirelessChanged.
        (WebCore::MediaPlayerPrivateAVFoundation::playbackTargetIsWirelessChanged): Pass through to
            media element.
        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.h:

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::MediaPlayerPrivateAVFoundationObjC): Initialize
            m_allowsWirelessVideoPlayback.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::cancelLoad): Remove "externalPlaybackActive" observer.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::destroyVideoLayer): Fix broken logging.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::createAVPlayer): Add "externalPlaybackActive" observer,
            set initial wireless playback.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::createPixelBuffer):  Fix broken logging.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::languageOfPrimaryAudioTrack): Ditto.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::isCurrentPlaybackTargetWireless): New.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::wirelessVideoPlaybackDisabled): New.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::setWirelessVideoPlaybackDisabled): New.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::playbackTargetIsWirelessDidChange): New.
        (-[WebCoreAVFMovieObserver observeValueForKeyPath:ofObject:change:context:]): Deal with 
            externalPlaybackActive.

2014-02-24  Brent Fulgham  <bfulgham@apple.com>

        [Win] Gracefully recover from missing 'naturalSize' parameter for media
        https://bugs.webkit.org/show_bug.cgi?id=129278

        Reviewed by Eric Carlson.

        * platform/graphics/avfoundation/cf/AVFoundationCFSoftLinking.h: Add declaration for
        missing function call.
        * platform/graphics/avfoundation/cf/MediaPlayerPrivateAVFoundationCF.cpp:
        (WebCore::MediaPlayerPrivateAVFoundationCF::assetStatus): Don't treat missing 'naturalSize'
        as a fatal error.
        (WebCore::MediaPlayerPrivateAVFoundationCF::tracksChanged): Handle case of asset track
        not being available yet. 
        (WebCore::MediaPlayerPrivateAVFoundationCF::sizeChanged): If the 'naturalSize' is empty,
        use the Player Item's 'presentationSize' instead.
        (WebCore::AVFWrapper::processNotification): Add missing handler for duration changed.

2014-02-25  Sergio Villar Senin  <svillar@igalia.com>

        [CSS Grid Layout] Add ENABLE flag
        https://bugs.webkit.org/show_bug.cgi?id=129153

        Reviewed by Simon Fraser.

        Added ENABLE_CSS_GRID_LAYOUT feature flag.

        * Configurations/FeatureDefines.xcconfig:
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::isLayoutDependent):
        (WebCore::ComputedStyleExtractor::propertyValue):
        * css/CSSGridTemplateAreasValue.cpp:
        * css/CSSGridTemplateAreasValue.h:
        * css/CSSParser.cpp:
        (WebCore::CSSParserContext::CSSParserContext):
        (WebCore::operator==):
        (WebCore::isValidKeywordPropertyAndValue):
        (WebCore::isKeywordPropertyID):
        (WebCore::CSSParser::parseValue):
        * css/CSSParser.h:
        * css/CSSParserMode.h:
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        * css/CSSPropertyNames.in:
        * css/CSSValue.cpp:
        (WebCore::CSSValue::equals):
        (WebCore::CSSValue::cssText):
        (WebCore::CSSValue::destroy):
        * css/DeprecatedStyleBuilder.cpp:
        (WebCore::DeprecatedStyleBuilder::DeprecatedStyleBuilder):
        * css/StyleProperties.cpp:
        (WebCore::StyleProperties::getPropertyValue):
        * css/StylePropertyShorthand.cpp:
        (WebCore::shorthandForProperty):
        (WebCore::matchingShorthandsForLonghand):
        * css/StyleResolver.cpp:
        (WebCore::equivalentBlockDisplay):
        (WebCore::StyleResolver::adjustRenderStyle):
        (WebCore::StyleResolver::applyProperty):
        * css/StyleResolver.h:
        * dom/Document.cpp:
        * dom/Document.h:
        * rendering/RenderElement.cpp:
        (WebCore::RenderElement::createFor):
        * rendering/RenderGrid.cpp:
        * rendering/RenderGrid.h:
        * rendering/style/GridCoordinate.h:
        * rendering/style/GridLength.h:
        * rendering/style/GridPosition.h:
        * rendering/style/GridTrackSize.h:
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::changeRequiresLayout):
        * rendering/style/RenderStyle.h:
        * rendering/style/RenderStyleConstants.h:
        * rendering/style/StyleAllInOne.cpp:
        * rendering/style/StyleGridData.cpp:
        * rendering/style/StyleGridData.h:
        * rendering/style/StyleGridItemData.cpp:
        * rendering/style/StyleGridItemData.h:
        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        (WebCore::StyleRareNonInheritedData::operator==):
        * rendering/style/StyleRareNonInheritedData.h:

2014-02-25  Jer Noble  <jer.noble@apple.com>

        [EME][Mac] Fix a few issues in CDMSessionMediaSourceAVFObjC.
        https://bugs.webkit.org/show_bug.cgi?id=129310

        Reviewed by Eric Carlson.

        Only send a 'keyerror' event if an actual error code was returned, not just
        when no key was added:
        * Modules/encryptedmedia/MediaKeySession.cpp:
        (WebCore::MediaKeySession::addKeyTimerFired):

        The 'length' parameter to a typed ArrayBufferView is the number of entries
        in the array, not the byte length:
        * platform/graphics/avfoundation/objc/CDMSessionMediaSourceAVFObjC.mm:
        (WebCore::CDMSessionMediaSourceAVFObjC::generateKeyRequest):

        The return value of streamingContentKeyRequestDataForApp:contentIdentifier:trackId:options:error
        is autoreleased; do not wrap it in an adoptNS:
        * platform/graphics/avfoundation/objc/CDMSessionMediaSourceAVFObjC.mm:
        (WebCore::CDMSessionMediaSourceAVFObjC::update):

2014-02-25  Thiago de Barros Lacerda  <thiago.lacerda@openbossa.org>

        [MediaStream] Adding mock implementation of UserMediaClient
        https://bugs.webkit.org/show_bug.cgi?id=129274

        Reviewed by Eric Carlson.

        * platform/mock/UserMediaClientMock.h: Added.
        (WebCore::UserMediaClientRequestNotifier::UserMediaClientRequestNotifier):
        * testing/Internals.cpp:
        (WebCore::Internals::Internals):

2014-02-25  Ryosuke Niwa  <rniwa@webkit.org>

        Tighten bitfields in live NodeLists and HTMLCollections
        https://bugs.webkit.org/show_bug.cgi?id=129300

        Reviewed by Geoffrey Garen.

        Reduce the number of bits used for m_rootType and m_type in LiveNodeList.
        Also use enum class for LiveNodeList types. We keep "Type" suffix not to
        confuse old-ish compilers.

        * dom/ClassNodeList.cpp:
        (WebCore::ClassNodeList::ClassNodeList):
        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::getElementsByTagName):
        (WebCore::ContainerNode::getElementsByName):
        (WebCore::ContainerNode::getElementsByClassName):
        (WebCore::ContainerNode::radioNodeList):
        * dom/LiveNodeList.cpp:
        (WebCore::LiveNodeList::collectionFirst):
        (WebCore::LiveNodeList::collectionTraverseForward):
        * dom/LiveNodeList.h:
        (WebCore::LiveNodeList::LiveNodeList):
        * dom/NameNodeList.cpp:
        (WebCore::NameNodeList::NameNodeList):
        * dom/NameNodeList.h:
        (WebCore::NameNodeList::create):
        * dom/NodeRareData.h:
        (WebCore::NodeListsNodeData::namedNodeListKey):
        * dom/TagNodeList.cpp:
        (WebCore::HTMLTagNodeList::HTMLTagNodeList):
        * dom/TagNodeList.h:
        (WebCore::TagNodeList::create):
        (WebCore::HTMLTagNodeList::create):
        * html/HTMLCollection.h:
        * html/LabelableElement.cpp:
        (WebCore::LabelableElement::labels):
        * html/LabelsNodeList.cpp:
        (WebCore::LabelsNodeList::LabelsNodeList):
        * html/LabelsNodeList.h:
        * html/RadioNodeList.cpp:
        (WebCore::RadioNodeList::RadioNodeList):
        * html/RadioNodeList.h:
        (WebCore::RadioNodeList::create):

2014-02-24  Anders Carlsson  <andersca@apple.com>

        Make it possible to set the visited link provider on a per page basis
        https://bugs.webkit.org/show_bug.cgi?id=129288

        Reviewed by Andreas Kling.

        * WebCore.exp.in:
        Export symbols needed by WebKit2.

        * WebCore.xcodeproj/project.pbxproj:
        Make VisitedLinkProvider a private header.

        * page/Page.cpp:
        (WebCore::Page::Page):
        Take the visited link provider from the PageClients object.

        (WebCore::Page::visitedLinkProvider):
        If the page has a visited link provider set, return it.

        * page/Page.h:
        Add VisitedLinkProvider to Page and PageClients.

2014-02-25  Morten Stenshorne  <mstensho@opera.com>

        [New Multicolumn] -webkit-column-break-inside:avoid doesn't work
        https://bugs.webkit.org/show_bug.cgi?id=129299

        Reviewed by Andrei Bucur.

        adjustForUnsplittableChild() simply forgot to check whether we
        were inside flow thread based multicol.

        Test: fast/multicol/newmulticol/avoid-column-break-inside.html

        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::adjustForUnsplittableChild):

2014-02-25  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Remove unused function RenderFlowThread::regionForCompositedLayer
        https://bugs.webkit.org/show_bug.cgi?id=129303

        Reviewed by Andrei Bucur.

        Cleanup, no funtionality change, no new tests.

        * rendering/RenderFlowThread.h:

2014-02-25  Mihai Tica  <mitica@adobe.com>

        [CSS Blending] -webkit-mix-blend-mode should force transform-style: flat.
        https://bugs.webkit.org/show_bug.cgi?id=126158

        Reviewed by Mihnea Ovidenie.

        As stated in the http://www.w3.org/TR/css3-transforms/#propdef-transform-style, an element with blending
        should force transform-style: flat.

        Test: css3/compositing/blend-mode-transform-style.html

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::adjustRenderStyle): If blending is detected, set transform-style to flat.

2014-02-25  Zan Dobersek  <zdobersek@igalia.com>

        Move to using std::unique_ptr for Element, Node and related classes
        https://bugs.webkit.org/show_bug.cgi?id=129058

        Reviewed by Anders Carlsson.

        Replace uses of OwnPtr and PassOwnPtr in Element, Node and the related
        classes with std::unique_ptr and move semantics.

        * dom/ContainerNode.h:
        (WebCore::ChildNodesLazySnapshot::takeSnapshot):
        (WebCore::ChildNodesLazySnapshot::hasSnapshot):
        * dom/Element.cpp:
        (WebCore::ensureAttrNodeListForElement):
        (WebCore::Element::attributes):
        * dom/ElementIteratorAssertions.h:
        (WebCore::ElementIteratorAssertions::ElementIteratorAssertions):
        * dom/ElementRareData.h:
        (WebCore::ElementRareData::setAttributeMap):
        * dom/MutationObserverRegistration.cpp:
        (WebCore::MutationObserverRegistration::observedSubtreeNodeWillDetach):
        (WebCore::MutationObserverRegistration::clearTransientRegistrations):
        (WebCore::MutationObserverRegistration::addRegistrationNodesToSet):
        * dom/MutationObserverRegistration.h:
        * dom/NamedNodeMap.h:
        (WebCore::NamedNodeMap::NamedNodeMap):
        * dom/Node.cpp:
        (WebCore::Node::ensureRareData):
        (WebCore::Node::didMoveToNewDocument):
        (WebCore::Node::ensureEventTargetData):
        (WebCore::Node::mutationObserverRegistry):
        (WebCore::Node::registerMutationObserver):
        (WebCore::Node::unregisterMutationObserver):
        (WebCore::Node::notifyMutationObserversNodeWillDetach):
        * dom/Node.h:
        * dom/NodeRareData.h:
        (WebCore::NodeListsNodeData::NodeListsNodeData):
        (WebCore::NodeRareData::NodeRareData):
        (WebCore::NodeRareData::clearNodeLists):
        (WebCore::NodeRareData::ensureNodeLists):
        (WebCore::NodeRareData::ensureMutationObserverData):
        * dom/StyledElement.cpp:
        (WebCore::StyledElement::rebuildPresentationAttributeStyle):

2014-02-25  Andreas Kling  <akling@apple.com>

        Prune dead code for Web Inspector memory instrumentation.
        <https://webkit.org/b/129286>

        This was leftover code from Chromium's inspector. It's not used by
        today's WebKit inspector.

        Reviewed by Sam Weinig.

        * CMakeLists.txt:
        * DerivedSources.make:
        * GNUmakefile.am:
        * GNUmakefile.list.am:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * inspector/InspectorAllInOne.cpp:
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::InspectorController):
        * inspector/InspectorController.h:
        * inspector/InspectorMemoryAgent.cpp: Removed.
        * inspector/InspectorMemoryAgent.h: Removed.
        * inspector/InspectorTimelineAgent.cpp:
        (WebCore::InspectorTimelineAgent::InspectorTimelineAgent):
        * inspector/InspectorTimelineAgent.h:
        * inspector/WorkerInspectorController.cpp:
        (WebCore::WorkerInspectorController::WorkerInspectorController):
        * inspector/protocol/Memory.json: Removed.

2014-02-24  Chris Fleizach  <cfleizach@apple.com>

        AX: Support abbr, acronym
        https://bugs.webkit.org/show_bug.cgi?id=128860

        Reviewed by Mario Sanchez Prada.

        Expose the data in <abbr>, <acronym> and <th abbr=""> as an 
        alternateTextValue() parameter.

        Test: platform/mac/accessibility/abbr-acronym-tags.html

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::hasTagName):
        * accessibility/AccessibilityObject.h:
        (WebCore::AccessibilityObject::alternateTextValue):
        (WebCore::AccessibilityObject::supportsAlternateTextValue):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::alternateTextValue):
        (WebCore::AccessibilityRenderObject::supportsAlternateTextValue):
        * accessibility/AccessibilityRenderObject.h:
        * accessibility/AccessibilityTableCell.cpp:
        (WebCore::AccessibilityTableCell::alternateTextValue):
        (WebCore::AccessibilityTableCell::supportsAlternateTextValue):
        * accessibility/AccessibilityTableCell.h:
        * accessibility/mac/WebAccessibilityObjectWrapperMac.mm:
        (AXAttributeStringSetAlternateTextValue):
        (AXAttributedStringAppendText):
        (-[WebAccessibilityObjectWrapper additionalAccessibilityAttributeNames]):
        (-[WebAccessibilityObjectWrapper accessibilityAttributeValue:]):

2014-02-24  Martin Robinson  <mrobinson@igalia.com>

        [GTK] generate-gtkdoc should not generate documentation for source files for unbuilt source files
        https://bugs.webkit.org/show_bug.cgi?id=128417

        Reviewed by Carlos Garcia Campos.

        * bindings/gobject/GNUmakefile.am: Generate a config file for webkitdom documentation generation.

2014-02-24  Mark Lam  <mark.lam@apple.com>

        Need to initialize VM stack data even when the VM is on an exclusive thread.
        <https://webkit.org/b/129265>

        Reviewed by Geoffrey Garen.

        No new tests.

        * bindings/js/JSDOMBinding.cpp:
        (WebCore::reportException):
        - Added an assertion to ensure that we are holding the JSLock.
        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::commonVM):
        - Updated to use the new VM::setExclusiveThread().

2014-02-24  Anders Carlsson  <andersca@apple.com>

        Add a DefaultVisitedLinkProvider and route visited link actions through it
        https://bugs.webkit.org/show_bug.cgi?id=129285

        Reviewed by Dan Bernstein.

        DefaultVisitedLinkProvider currently just forwards everything to the visited link strategy,
        but will soon take over the responsibilities of visited link handling from PageGroup.
        
        * CMakeLists.txt:
        * GNUmakefile.list.am:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/VisitedLinkState.cpp:
        (WebCore::VisitedLinkState::determineLinkStateSlowCase):
        * loader/HistoryController.cpp:
        (WebCore::addVisitedLink):
        (WebCore::HistoryController::updateForStandardLoad):
        (WebCore::HistoryController::updateForRedirectWithLockedBackForwardList):
        (WebCore::HistoryController::updateForClientRedirect):
        (WebCore::HistoryController::updateForSameDocumentNavigation):
        (WebCore::HistoryController::pushState):
        (WebCore::HistoryController::replaceState):
        * page/DefaultVisitedLinkProvider.cpp: Copied from Source/WebCore/page/VisitedLinkProvider.h.
        (WebCore::DefaultVisitedLinkProvider::create):
        (WebCore::DefaultVisitedLinkProvider::DefaultVisitedLinkProvider):
        (WebCore::DefaultVisitedLinkProvider::~DefaultVisitedLinkProvider):
        (WebCore::DefaultVisitedLinkProvider::isLinkVisited):
        (WebCore::DefaultVisitedLinkProvider::addVisitedLink):
        * page/DefaultVisitedLinkProvider.h: Copied from Source/WebCore/page/VisitedLinkProvider.h.
        * page/Page.cpp:
        (WebCore::Page::visitedLinkProvider):
        * page/Page.h:
        * page/PageGroup.cpp:
        (WebCore::PageGroup::PageGroup):
        (WebCore::PageGroup::visitedLinkProvider):
        * page/PageGroup.h:
        * page/VisitedLinkProvider.h:

2014-02-24  Jeremy Jones  <jeremyj@apple.com>

        WK2 AVKit fullscreen doesn't display video.
        https://bugs.webkit.org/show_bug.cgi?id=128564

        Reviewed by Simon Fraser.

        * WebCore.exp.in:
        Export WebCore::PlatformCALayer::platformCALayer()

        * platform/ios/WebVideoFullscreenInterface.h:
        * platform/ios/WebVideoFullscreenInterfaceAVKit.h:
        Remove SetVideoLayerID(). 

        * platform/ios/WebVideoFullscreenInterfaceAVKit.mm:
        (WebVideoFullscreenInterfaceAVKit::setVideoLayer):
        Wrap make video layer look like an AVAVPlayerLayer with WebAVPlayerLayer

        * platform/ios/WebVideoFullscreenModelMediaElement.mm:
        (WebVideoFullscreenModelMediaElement::setMediaElement):
        Pass along the videoLayer before borrowing it so the interface will be ready to
        catch the transaction that removes it.

2014-02-24  Samuel White  <samuel_white@apple.com>

        AX: AccessibilityObject::findMatchingObjects should never include 'this' in results.
        https://bugs.webkit.org/show_bug.cgi?id=129243

        Reviewed by Chris Fleizach.

        Fix removes the container object from the search results when searching backwards. This
        makes backwards & forwards search results consistent with each other.

        Test: platform/mac/accessibility/search-predicate-container-not-included.html

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::findMatchingObjects):

2014-02-24  Samuel White  <samuel_white@apple.com>

        AX: findMatchingObjects backwards start position inconsistent with forwards start position when startObject == nullptr.
        https://bugs.webkit.org/show_bug.cgi?id=129266

        Reviewed by Chris Fleizach.

        When searching forward with no start object, the first thing considered is the first child of
        the container. However, when searching backwards with no start object nothing in the container
        is considered; this basically negates the search. This patch makes backwards searching without
        a start object start from the last child of the container to match forward search expectations.

        Test: platform/mac/accessibility/search-predicate-start-not-specified.html

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::findMatchingObjects):

2014-02-24  Andreas Kling  <akling@apple.com>

        Prune dead code for Web Inspector canvas instrumentation.
        <https://webkit.org/b/129269>

        This was leftover code from Chromium's inspector. It's not used by
        today's WebKit inspector.

        Reviewed by Timothy Hatcher.

        * CMakeLists.txt:
        * DerivedSources.make:
        * GNUmakefile.am:
        * GNUmakefile.list.am:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSHTMLCanvasElementCustom.cpp:
        (WebCore::JSHTMLCanvasElement::getContext):
        * inspector/InjectedScriptCanvasModule.cpp: Removed.
        * inspector/InjectedScriptCanvasModule.h: Removed.
        * inspector/InspectorAllInOne.cpp:
        * inspector/InspectorCanvasAgent.cpp: Removed.
        * inspector/InspectorCanvasAgent.h: Removed.
        * inspector/InspectorCanvasInstrumentation.h: Removed.
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::InspectorController):
        (WebCore::InspectorController::didBeginFrame):
        * inspector/InspectorInstrumentation.cpp:
        (WebCore::InspectorInstrumentation::frameDetachedFromParentImpl):
        (WebCore::InspectorInstrumentation::didCommitLoadImpl):
        * inspector/InspectorInstrumentation.h:
        * inspector/InstrumentingAgents.cpp:
        (WebCore::InstrumentingAgents::InstrumentingAgents):
        (WebCore::InstrumentingAgents::reset):
        * inspector/InstrumentingAgents.h:

2014-02-24  Zoltan Horvath  <zoltan@webkit.org>

        [CSS Shapes] Adjust lineTop position to the next available wrapping location at shape-outsides
        https://bugs.webkit.org/show_bug.cgi?id=128693

        Reviewed by David Hyatt.

        When we don't have space next to the floating container, but we have space inside the floating-container next
        to the defined shape-outside, we should wrap around the shape-outside. This patch fixes the behavior both for
        cases when there is no space to fit at the first line, and for the additional lines cases.

        Test: fast/shapes/shape-outside-floats/shape-outside-floats-linetop-adjustment.html

        * rendering/line/BreakingContextInlineHeaders.h:
        (WebCore::BreakingContext::handleText):
        (WebCore::BreakingContext::commitAndUpdateLineBreakIfNeeded):
        * rendering/line/LineWidth.cpp:
        (WebCore::availableWidthAtOffset):
        (WebCore::LineWidth::updateLineDimension): Added new helper.
        (WebCore::isWholeLineFit): Added new helper.
        (WebCore::LineWidth::wrapNextToShapeOutside): Added new helper.
        (WebCore::LineWidth::fitBelowFloats): Add optional parameter for the function.
        * rendering/line/LineWidth.h:

2014-02-24  Martin Hock  <mhock@apple.com>

        Create SessionID value-style class for session IDs.
        https://bugs.webkit.org/show_bug.cgi?id=129141

        Reviewed by Brady Eidson.

        * GNUmakefile.list.am:
        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * page/Page.cpp: Add SessionID member.
        (WebCore::Page::Page):
        (WebCore::Page::sessionID): Retrieve sessionID or use settings if not set.
        * page/Page.h:
        (WebCore::Page::setSessionID):
        * page/SessionID.h: Session ID class consisting solely of its uint64_t session ID.
        (WebCore::SessionID::SessionID):
        (WebCore::SessionID::isValid): Not empty.
        (WebCore::SessionID::isEphemeral):
        (WebCore::SessionID::sessionID):
        (WebCore::SessionID::operator==): Value-based equality.
        (WebCore::SessionID::operator!=):
        (WebCore::SessionID::emptySessionID): Zero value also used for HashTraits emptyValue.
        (WebCore::SessionID::defaultSessionID):
        (WebCore::SessionID::legacyPrivateSessionID):
        * page/SessionIDHash.h:
        (WTF::SessionIDHash::hash): Just the casted session ID (low order bytes)
        (WTF::SessionIDHash::equal):
        (WTF::HashTraits<WebCore::SessionID>::emptyValue): Equal to emptySessionID.
        (WTF::HashTraits<WebCore::SessionID>::constructDeletedValue): -1 value.
        (WTF::HashTraits<WebCore::SessionID>::isDeletedValue):

2014-02-24  Javier Fernandez  <jfernandez@igalia.com>

        [CSS Grid Layout] handle undefined RemainingSpace in computeUsedBreadthOfGridTracks algorithm
        https://bugs.webkit.org/show_bug.cgi?id=128372

        Reviewed by David Hyatt.

        From Blink r165692 by <svillar@igalia.com>

        The spec defines a different code path for the computeUsedBreadthOfGridTracks algorithm
        http://dev.w3.org/csswg/css-grid/#function-ComputeUsedBreadthOfGridTracks.

        Basically the track breadth is different when the available size is undefined and thus,
        cannot be taken into account during the computations.
        The available size is undefined whenever the height is auto or the grid element has a
        shrink-to-fit behavior.

        It was also renamed the function to match the specs so the function name starts with
        'compute' instead of 'computed'.

        No new tests, but added new cases to some of them.

        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::computeIntrinsicLogicalWidths):
        (WebCore::RenderGrid::computeUsedBreadthOfGridTracks):
        (WebCore::gridElementIsShrinkToFit):
        (WebCore::RenderGrid::computeNormalizedFractionBreadth):
        (WebCore::RenderGrid::layoutGridItems):
        * rendering/RenderGrid.h:

2014-02-24  Roger Fong  <roger_fong@apple.com>

        [Windows] Unreviewed pre-emptive build fix.

        * WebCore.vcxproj/WebCoreCommon.props: Add replay directory to include path.

2014-02-24  Brady Eidson  <beidson@apple.com>

        Break out ImageControls style into an external stylesheet
        https://bugs.webkit.org/show_bug.cgi?id=129273

        Reviewed by Jer Noble.

        * DerivedSources.make:
        * WebCore.xcodeproj/project.pbxproj:

        * css/CSSDefaultStyleSheets.cpp:
        (WebCore::CSSDefaultStyleSheets::ensureDefaultStyleSheetsForElement):
        * css/CSSDefaultStyleSheets.h:

        * html/shadow/mac/ImageControlsRootElementMac.cpp:
        (WebCore::ImageControlsRootElementMac::maybeCreate):

        * html/shadow/mac/imageControlsMac.css:
        (.x-webkit-imagemenu):
        (.x-webkit-imagemenu:hover):

        * rendering/RenderTheme.h:
        (WebCore::RenderTheme::mediaControlsScript):
        (WebCore::RenderTheme::imageControlsStyleSheet):
        * rendering/RenderThemeMac.h:
        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::imageControlsStyleSheet):

2014-02-24  Thiago de Barros Lacerda  <thiago.lacerda@openbossa.org>

        [WebRTC] Validating RTCConfiguration according to the spec
        https://bugs.webkit.org/show_bug.cgi?id=129182

        Reviewed by Eric Carlson.

        Spec states that:
            - iceServers should not be an empty list
            - the entry in the configuration dictionary is "urls", instead of "url"
            - urls can be either a list or a string
        Fixing all that in RTCConfiguration validation when creating a RTCPeerConnection

        Existing tests were updated.

        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::appendIceServer): Added.
        (WebCore::processIceServer): Added.
        (WebCore::RTCPeerConnection::parseConfiguration):

2014-02-24  Radu Stavila  <stavila@adobe.com>

        [CSS Regions] Relative positioned elements overflowing the region do not get painted into the next tile
        https://bugs.webkit.org/show_bug.cgi?id=129254

        Reviewed by Antti Koivisto.

        The painting of the region's layer should not be aborted so early if the region's fragment shouldn't be painted
        because that would prevent all the layer's children from being painted.

        Another problem this patch addresses is that clipping should also be performed when the clip rect is empty,
        which is what happens when painting in a tile in which the flowed element would normally be painted
        if it wasn't clipped by the region.

        Test: fast/regions/content-relative-next-tile.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintFlowThreadIfRegionForFragments):

2014-02-24  Renata Hodovan  <rhodovan.u-szeged@partner.samsung.com>
        
        Get rid of the unused 'immediate' parameters from repaint related functions
        https://bugs.webkit.org/show_bug.cgi?id=129111

        Reviewed by Simon Fraser.

        Removing the 'immediate' parameters from repaint related functions - accoring
        to the FIXME in RenderView::repaintViewRectangle() - since they have no effect.

        No new tests are necessary because there is no behavior change

        * dom/Element.cpp:
        (WebCore::Element::setActive):
        * loader/EmptyClients.h:
        * page/Chrome.cpp:
        (WebCore::Chrome::invalidateRootView):
        (WebCore::Chrome::invalidateContentsAndRootView):
        (WebCore::Chrome::invalidateContentsForSlowScroll):
        * page/Chrome.h:
        * page/ChromeClient.h:
        * page/Frame.cpp:
        (WebCore::Frame::tiledBackingStorePaintEnd):
        * page/FrameView.cpp:
        (WebCore::FrameView::invalidateRect):
        (WebCore::FrameView::scrollContentsFastPath):
        (WebCore::FrameView::repaintContentRectangle):
        (WebCore::FrameView::shouldUpdate):
        * page/FrameView.h:
        * platform/HostWindow.h:
        * platform/ScrollView.cpp:
        (WebCore::ScrollView::scrollContents):
        (WebCore::ScrollView::scrollContentsSlowPath):
        (WebCore::ScrollView::repaintContentRectangle):
        (WebCore::ScrollView::updateOverhangAreas):
        (WebCore::ScrollView::addPanScrollIcon):
        (WebCore::ScrollView::removePanScrollIcon):
        (WebCore::ScrollView::platformRepaintContentRectangle):
        * platform/ScrollView.h:
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::repaintLayerRectsForImage):
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::repaintRectangleInRegions):
        * rendering/RenderFlowThread.h:
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::setFilterBackendNeedsRepaintingInRect):
        * rendering/RenderLayer.h:
        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::repaintFlowThreadContent):
        * rendering/RenderMultiColumnSet.h:
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::repaintUsingContainer):
        (WebCore::RenderObject::repaint):
        (WebCore::RenderObject::repaintRectangle):
        (WebCore::RenderObject::repaintSlowRepaintObject):
        * rendering/RenderObject.h:
        * rendering/RenderRegion.cpp:
        (WebCore::RenderRegion::repaintFlowThreadContent):
        (WebCore::RenderRegion::repaintFlowThreadContentRectangle):
        * rendering/RenderRegion.h:
        * rendering/RenderView.cpp:
        (WebCore::RenderView::repaintViewRectangle):
        (WebCore::RenderView::flushAccumulatedRepaintRegion):
        (WebCore::RenderView::repaintRectangleInViewAndCompositedLayers):
        * rendering/RenderView.h:
        * svg/graphics/SVGImageChromeClient.h:

2014-02-24  Tamas Gergely  <tgergely.u-szeged@partner.samsung.com>

        Code cleanup: remove leftover ENABLE(WORKERS) macros and support.
        https://bugs.webkit.org/show_bug.cgi?id=129255

        Reviewed by Csaba Osztrogonác.

        ENABLE_WORKERS macro was removed in r159679, but r161589 added back some occurrences.
        Support is now also removed from xcconfig files.

        No new tests needed.

        * Configurations/FeatureDefines.xcconfig:
        * platform/ThreadGlobalData.cpp:
        * platform/ThreadGlobalData.h:
        * platform/Timer.h:
        (WebCore::TimerBase::isActive):
        * platform/ios/wak/WebCoreThread.mm:
        (RunWebThread):
        (StartWebThread):

2014-02-24  Tibor Meszaros  <tmeszaros.u-szeged@partner.samsung.com>

        [CMake] Get rid of "FIXME: The Blackberry port ..." from WebCore/CmakeLists.txt
        https://bugs.webkit.org/show_bug.cgi?id=129152

        Reviewed by Gyuyoung Kim.

        * CMakeLists.txt:

2014-02-24  David Kilzer  <ddkilzer@apple.com>

        Remove redundant setting in FeatureDefines.xcconfig

        * Configurations/FeatureDefines.xcconfig:

2014-02-24  Mihai Tica  <mitica@adobe.com>

        [CSS Blending] An element having -webkit-mix-blend-mode should only blend with the contents of the parent stacking context
        https://bugs.webkit.org/show_bug.cgi?id=129154

        Reviewed by Dean Jackson.

        The blending operation of an element having -webkit-mix-blend-mode should be restricted to the parent stacking context.
        This change isolates blending, preventing it from blending with other underlying elements besides the parent stacking context.

        Tests: css3/compositing/blend-mode-isolated-group-1.html
               css3/compositing/blend-mode-isolated-group-2.html
               css3/compositing/blend-mode-isolated-group-3.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::RenderLayer): Initialize added members to false.
        (WebCore::RenderLayer::updateBlendMode): Check if a blend mode was set or unset. If so, set the m_updateParentStackingContextShouldIsolateBlendingDirty to true.
        (WebCore::RenderLayer::updateParentStackingContextShouldIsolateBlending): Traverse to the parent stacking context and update the
        m_isolatesBlending member accordingly.
        * rendering/RenderLayer.h:
        - Add isolatesBlending() as a condition for creating a transparency layer in the paintsWithTransparency method.
        - Add m_updateParentStackingContextShouldIsolateBlendingDirty member.
        - Add m_isolatesBlending member and getter.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::computeCompositingRequirements): Call updateParentStackingContextShouldIsolateBlending. 

2014-02-24  Krzysztof Czech  <k.czech@samsung.com>

        [ATK] Wrong selected element at a given index in a list box.
        https://bugs.webkit.org/show_bug.cgi?id=129039

        Reviewed by Chris Fleizach.

        Test: accessibility/select-element-at-index.html

        The selected element at a given index was wrong. One should be considered among the
        all children of a list box, not only selected ones.

        * accessibility/atk/WebKitAccessibleInterfaceSelection.cpp:
        (core):
        (listObjectForSelection):
        (optionFromList):
        (optionFromSelection):
        (webkitAccessibleSelectionRefSelection):

2014-02-23  Dean Jackson  <dino@apple.com>

        [WebGL] Allow ANGLE to initialize unused varyings
        https://bugs.webkit.org/show_bug.cgi?id=129240
        <rdar://problem/15203342>

        Reviewed by Sam Weinig.

        Covered by: conformance/glsl/misc/shaders-with-varyings.html

        * platform/graphics/opengl/Extensions3DOpenGLCommon.cpp:
        (WebCore::Extensions3DOpenGLCommon::getTranslatedShaderSourceANGLE):
        Add SH_INIT_VARYINGS_WITHOUT_STATIC_USE to compiler flags.

2014-02-23  Sam Weinig  <sam@webkit.org>

        Update FeatureDefines.xcconfig

        Rubber-stamped by Anders Carlsson.

        * Configurations/FeatureDefines.xcconfig:

2014-02-23  Dean Jackson  <dino@apple.com>

        Sort the project file with sort-Xcode-project-file.

        Rubber-stamped by Sam Weinig.

        * WebCore.xcodeproj/project.pbxproj:

2014-02-23  Sam Weinig  <sam@webkit.org>

        Fix incorrectly commented out code.

        * platform/TelephoneNumberDetector.h:

2014-02-23  Sam Weinig  <sam@webkit.org>

        Extract platform specific parts of telephone number detection 
        https://bugs.webkit.org/show_bug.cgi?id=129238

        Reviewed by Dean Jackson.

        * WebCore.xcodeproj/project.pbxproj:
        Add new files.

        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::HTMLTreeBuilder::linkifyPhoneNumbers):
        (WebCore::HTMLTreeBuilder::processCharacterBufferForInBody):
        * platform/TelephoneNumberDetector.h: Added.
        * platform/cocoa/TelephoneNumberDetectorCocoa.cpp: Added.
        (WebCore::TelephoneNumberDetector::phoneNumbersScanner):
        (WebCore::TelephoneNumberDetector::isSupported):
        (WebCore::TelephoneNumberDetector::find):
        Move code to TelephoneNumberDetector.

2014-02-23  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        Change a url parameter type with URL in NavigatorContentUtils
        https://bugs.webkit.org/show_bug.cgi?id=129202

        Reviewed by Sam Weinig.

        It would be good if we use *URL* for url parameters instead of using String.

        Merge from blink. https://src.chromium.org/viewvc/blink?view=rev&revision=165458.

        * Modules/navigatorcontentutils/NavigatorContentUtils.cpp:
        (WebCore::verifyCustomHandlerURL):
        (WebCore::NavigatorContentUtils::registerProtocolHandler):
        (WebCore::NavigatorContentUtils::isProtocolHandlerRegistered):
        (WebCore::NavigatorContentUtils::unregisterProtocolHandler):
        * Modules/navigatorcontentutils/NavigatorContentUtilsClient.h:

2014-02-23  Dean Jackson  <dino@apple.com>

        Update ANGLE to 836bd2176e5607b14846cf1fbc5932dbc91318f4
        https://bugs.webkit.org/show_bug.cgi?id=129232

        Reviewed by Brent Fulgham.

        New files added, derived sources compiled directly, and generated
        steps removed for both EFL and GTK, with much-needed help from
        Sergio Correia.

        * CMakeLists.txt:
        * GNUMakefile.am:

2014-02-23  Sam Weinig  <sam@webkit.org>

        Move RenderMathMLMenclose.h/cpp to the right place in the Xcode project and sort.

        Rubber-stamped by Anders Carlsson.

        * WebCore.xcodeproj/project.pbxproj:

2014-02-23  Sam Weinig  <sam@webkit.org>

        Move telephone number detection behind its own ENABLE macro
        https://bugs.webkit.org/show_bug.cgi?id=129236

        Reviewed by Dean Jackson.

        * Configurations/FeatureDefines.xcconfig:
        Add ENABLE_TELEPHONE_NUMBER_DETECTION.

        * dom/Document.cpp:
        (WebCore::Document::Document):
        * dom/Document.h:
        * html/parser/HTMLConstructionSite.h:
        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::HTMLTreeBuilder::processCharacterBufferForInBody):
        * html/parser/HTMLTreeBuilder.h:
        Use ENABLE(TELEPHONE_NUMBER_DETECTION).

        * platform/mac/SoftLinking.h:
        Remove PLATOFORM(IOS) from SOFT_LINK_PRIVATE_FRAMEWORK_OPTIONAL, it is not iOS specific.

2014-02-23  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Fix bleed avoidance subpixel calculation.
        https://bugs.webkit.org/show_bug.cgi?id=129225

        Reviewed by Simon Fraser.
        
        static_cast<LayoutUnit>(int value) only produces the desired result when subpixel is off.

        Currently not testable.

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::getBackgroundRoundedRect):
        (WebCore::shrinkRectByOneDevicePixel):
        (WebCore::RenderBoxModelObject::borderInnerRectAdjustedForBleedAvoidance):
        (WebCore::RenderBoxModelObject::backgroundRoundedRectAdjustedForBleedAvoidance):
        (WebCore::RenderBoxModelObject::paintFillLayerExtended):
        * rendering/RenderBoxModelObject.h:

2014-02-23  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Add devicepixel based computation to BorderEdge class.
        https://bugs.webkit.org/show_bug.cgi?id=129224

        Reviewed by Simon Fraser.

        To produce correct width (and type) results, BorderEdge class needs to take device pixel ratio into account.

        Currently not testable.

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::BorderEdge::BorderEdge):
        (WebCore::BorderEdge::obscuresBackgroundEdge):
        (WebCore::BorderEdge::getDoubleBorderStripeWidths): this does not always produce the same
        result as before, but the sum of inner and outer is not different.
        (WebCore::BorderEdge::borderWidthInDevicePixel):
        (WebCore::RenderBoxModelObject::getBorderEdgeInfo):

2014-02-22  Dan Bernstein  <mitz@apple.com>

        REGRESSION (r164507): Crash beneath JSGlobalObjectInspectorController::reportAPIException at facebook.com, twitter.com, youtube.com
        https://bugs.webkit.org/show_bug.cgi?id=129227

        Reviewed by Eric Carlson.

        Reverted r164507.

        * bindings/js/JSDOMBinding.cpp:
        (WebCore::reportException):
        * inspector/InspectorResourceAgent.cpp:
        (WebCore::InspectorResourceAgent::buildInitiatorObject):
        * inspector/PageDebuggerAgent.cpp:
        (WebCore::PageDebuggerAgent::breakpointActionLog):
        * inspector/TimelineRecordFactory.cpp:
        (WebCore::TimelineRecordFactory::createGenericRecord):
        * page/Console.cpp:
        (WebCore::internalAddMessage):
        (WebCore::Console::profile):
        (WebCore::Console::profileEnd):
        (WebCore::Console::timeEnd):
        * page/ContentSecurityPolicy.cpp:
        (WebCore::gatherSecurityPolicyViolationEventData):
        (WebCore::ContentSecurityPolicy::reportViolation):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::postMessage):

2014-02-22  Joseph Pecoraro  <pecoraro@apple.com>

        Remove some unreachable code (-Wunreachable-code)
        https://bugs.webkit.org/show_bug.cgi?id=129220

        Reviewed by Eric Carlson.

        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::HTMLTreeBuilder::processCharacterBuffer):
        (WebCore::HTMLTreeBuilder::processEndTag):
        The only tricky case. Here there was a break inside the
        #if, but not the #else, and a break after the #endif.
        Remove the break inside the #if, and always use the
        break after the #endif.

        * Modules/indexeddb/IDBTransaction.cpp:
        (WebCore::IDBTransaction::modeToString):
        * bindings/js/JSTrackCustom.cpp:
        (WebCore::toJS):
        * bindings/js/JSWebGLRenderingContextCustom.cpp:
        (WebCore::functionForUniform):
        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkOne):
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute):
        * page/CaptionUserPreferencesMediaAF.cpp:
        (WebCore::CaptionUserPreferencesMediaAF::captionDisplayMode):

2014-02-22  Dean Jackson  <dino@apple.com>

        Letterpress effect disabled for synthetic italic
        https://bugs.webkit.org/show_bug.cgi?id=129218
        <rdar://problem/15997846>

        Reviewed by Dan Bernstein.

        There was no need to guard against synthetic italics and letterpress.

        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::drawGlyphs): Remove !useLetterpressEffect from conditional.

2014-02-21  Sam Weinig  <sam@webkit.org>

        Expose phase and momentum phase as SPI on DOMWheelEvent
        <rdar://problem/16110871>
        https://bugs.webkit.org/show_bug.cgi?id=129184

        Reviewed by Anders Carlsson.

        * WebCore.exp.in:
        Export core(DOMWheelEvent).

        * WebCore.xcodeproj/project.pbxproj:
        Make DOMWheelEventInternal.h available in WebKit.

        * dom/Element.cpp:
        (WebCore::Element::dispatchWheelEvent):
        * dom/WheelEvent.cpp:
        (WebCore::determineDeltaMode):
        (WebCore::WheelEvent::WheelEvent):
        (WebCore::WheelEvent::initWheelEvent):
        (WebCore::WheelEvent::initWebKitWheelEvent):
        Move PlatformWheelEvent -> DOMWheelEvent conversion to DOMWheelEvent.

        * dom/WheelEvent.h:
        (WebCore::WheelEvent::create):
        (WebCore::WheelEvent::phase):
        (WebCore::WheelEvent::momentumPhase):
        Store phase and momentumPhase on the WheelEvent.

2014-02-22  Alexey Proskuryakov  <ap@apple.com>

        Rename JWK key_ops values from wrap/unwrap to wrapKey/unwrapKey
        https://bugs.webkit.org/show_bug.cgi?id=129121

        Reviewed by Sam Weinig.

        * bindings/js/JSCryptoKeySerializationJWK.cpp:
        (WebCore::JSCryptoKeySerializationJWK::reconcileUsages): Updated to newer names.
        (WebCore::addUsagesToJSON): Ditto.
        (WebCore::JSCryptoKeySerializationJWK::serialize): rsa-oaep-key-manipulation test
        started ot fail, because RSA-OAEP with 2048 bit key and sha-1 can only encrypt
        214 bytes, and the new longer names made JSON serialization slightly longer.
        Compensate by not doing any indentation in JSON.

2014-02-22  Frédéric Wang  <fred.wang@free.fr>

        Only skip stretchy operators when determining the stretch height.
        https://bugs.webkit.org/show_bug.cgi?id=126842

        Reviewed by Chris Fleizach.

        The MathML code only takes into account non-mo children for the computation of the stretch size. This change includes non-stretchy mo in that computation. A new test is added into mathml/presentation/stretchy-depth-height.html.

        * rendering/mathml/RenderMathMLRow.cpp:
        (WebCore::RenderMathMLRow::layout):

2014-02-22  Frédéric Wang  <fred.wang@free.fr>

        Implement asymmetric/symmetric stretching of vertical operators.
        https://bugs.webkit.org/show_bug.cgi?id=124827.

        Reviewed by Chris Fleizach.

        The MathML code stretches vertical operators asymmetrically by default. This patch takes into account the symmetric attribute or the symmetric property of the operator dictionary to stretch operators symmetrically.

        Test: mathml/presentation/stretchy-depth-height-symmetric.html

        * rendering/mathml/RenderMathMLOperator.cpp:
        (WebCore::RenderMathMLOperator::stretchTo):
        (WebCore::RenderMathMLOperator::updateFromElement):
        (WebCore::RenderMathMLOperator::updateStyle):

2014-02-22  Frédéric Wang  <fred.wang@free.fr>

        Bug 119043 - Large stretch size error for MathML operators.
        https://bugs.webkit.org/show_bug.cgi?id=119043

        Reviewed by Chris Fleizach.

        The MathML code used some arbitrary gOperatorExpansion factor for the
        stretch size and 2/3 1/2 constants for the baseline. This change tries
        to consider height/depth of siblings of the stretchy operator so that
        the stretchy operator now matches its target.

        Test: mathml/presentation/stretchy-depth-height.html

        * rendering/RenderObject.h:
        (WebCore::RenderObject::isRenderMathMLTable):
        * rendering/mathml/RenderMathMLBlock.h:
        * rendering/mathml/RenderMathMLOperator.cpp:
        (WebCore::RenderMathMLOperator::RenderMathMLOperator):
        (WebCore::RenderMathMLOperator::stretchTo):
        (WebCore::RenderMathMLOperator::findAcceptableStretchyCharacter):
        (WebCore::RenderMathMLOperator::updateStyle):
        (WebCore::RenderMathMLOperator::firstLineBaseline):
        (WebCore::RenderMathMLOperator::computeLogicalHeight):
        * rendering/mathml/RenderMathMLOperator.h:
        * rendering/mathml/RenderMathMLRow.cpp:
        (WebCore::RenderMathMLRow::layout):

2014-02-22  Frédéric Wang  <fred.wang@free.fr>

        Unreviewed, rolling out r164534.
        http://trac.webkit.org/changeset/164534
        https://bugs.webkit.org/show_bug.cgi?id=119043

        missing tests

        * rendering/RenderObject.h:
        * rendering/mathml/RenderMathMLBlock.h:
        * rendering/mathml/RenderMathMLOperator.cpp:
        (WebCore::RenderMathMLOperator::RenderMathMLOperator):
        (WebCore::RenderMathMLOperator::expandedStretchHeight):
        (WebCore::RenderMathMLOperator::stretchToHeight):
        (WebCore::RenderMathMLOperator::findAcceptableStretchyCharacter):
        (WebCore::RenderMathMLOperator::updateStyle):
        (WebCore::RenderMathMLOperator::firstLineBaseline):
        (WebCore::RenderMathMLOperator::computeLogicalHeight):
        * rendering/mathml/RenderMathMLOperator.h:
        * rendering/mathml/RenderMathMLRow.cpp:
        (WebCore::RenderMathMLRow::layout):

2014-02-22  Frédéric Wang  <fred.wang@free.fr>

        Bug 119043 - Large stretch size error for MathML operators.
        https://bugs.webkit.org/show_bug.cgi?id=119043

        Reviewed by Chris Fleizach.

        The MathML code used some arbitrary gOperatorExpansion factor for the
        stretch size and 2/3 1/2 constants for the baseline. This change tries
        to consider height/depth of siblings of the stretchy operator so that
        the stretchy operator now matches its target.

        Test: mathml/presentation/stretchy-depth-height.html

        * rendering/RenderObject.h:
        (WebCore::RenderObject::isRenderMathMLTable):
        * rendering/mathml/RenderMathMLBlock.h:
        * rendering/mathml/RenderMathMLOperator.cpp:
        (WebCore::RenderMathMLOperator::RenderMathMLOperator):
        (WebCore::RenderMathMLOperator::stretchTo):
        (WebCore::RenderMathMLOperator::findAcceptableStretchyCharacter):
        (WebCore::RenderMathMLOperator::updateStyle):
        (WebCore::RenderMathMLOperator::firstLineBaseline):
        (WebCore::RenderMathMLOperator::computeLogicalHeight):
        * rendering/mathml/RenderMathMLOperator.h:
        * rendering/mathml/RenderMathMLRow.cpp:
        (WebCore::RenderMathMLRow::layout):

2014-02-21  Zalan Bujtas  <zalan@apple.com>

        REGRESSION(r164412): Pixel cracks when zooming in to any web content.
        https://bugs.webkit.org/show_bug.cgi?id=129195

        Reviewed by Simon Fraser.

        Integral clipping of the repaint rect was prematurely removed in RenderLayerBacking::paintContents().
        Repaint rects needs a uniform, device pixel precise clipping across the painting flow including RenderLayer,
        RenderView and TileController.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::paintContents):
        (WebCore::RenderLayerBacking::compositedBoundsIncludingMargin):

2014-02-21  Jer Noble  <jer.noble@apple.com>

        Unreviewed Mac build fix after r164529.

        Replace the string-to-array algorithm with a archictecture-independant
        one.

        * platform/graphics/avfoundation/objc/CDMSessionMediaSourceAVFObjC.mm:
        (WebCore::CDMSessionMediaSourceAVFObjC::generateKeyRequest):

2014-02-21  Jer Noble  <jer.noble@apple.com>

        [EME] Add a CDMSession for MediaPlayerPrivateMediaSourceAVFObjC
        https://bugs.webkit.org/show_bug.cgi?id=129166

        Reviewed by Eric Carlson.

        Add a new CDMSession, cerated by MediaPlayerPrivateMediaSourceAVFObjC allowing
        media-source-backed media elements to play protected content.

        Add a new CDMSessionMediaSourceAVFObjC class:
        * platform/graphics/avfoundation/objc/CDMSessionMediaSourceAVFObjC.h: Added.
        (WebCore::CDMSessionMediaSourceAVFObjC::~CDMSessionMediaSourceAVFObjC):
        * platform/graphics/avfoundation/objc/CDMSessionMediaSourceAVFObjC.mm: Added.
        (WebCore::CDMSessionMediaSourceAVFObjC::CDMSessionMediaSourceAVFObjC):
        (WebCore::CDMSessionMediaSourceAVFObjC::generateKeyRequest): Do not actually generate a
            key request until the certificate data has been added via update();
        (WebCore::CDMSessionMediaSourceAVFObjC::releaseKeys): No-op.
        (WebCore::CDMSessionMediaSourceAVFObjC::update): If no certificate data has yet been
            added, assume the incoming message contains it.

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateMediaSourceAVFObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateMediaSourceAVFObjC.mm:
        (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::registerMediaEngine): Add supportsKeySystem.
        (WebCore::keySystemIsSupported): Use "com.apple.fps.2_0" to distinguish from the not-media-source scheme.
        (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::supportsType): Check the keySystem type.
        (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::supportsKeySystem): Added.
        (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::createSession): Added, pass through to MediaSourcePrivate.
        * platform/graphics/avfoundation/objc/MediaSourcePrivateAVFObjC.h:
        * platform/graphics/avfoundation/objc/MediaSourcePrivateAVFObjC.mm:
        (WebCore::MediaSourcePrivateAVFObjC::createSession): Added.
        (WebCore::MediaSourcePrivateAVFObjC::sourceBufferKeyNeeded): Pass through to MediaPlayer.
        * platform/graphics/avfoundation/objc/SourceBufferPrivateAVFObjC.h:
        * platform/graphics/avfoundation/objc/SourceBufferPrivateAVFObjC.mm:
        (-[WebAVStreamDataParserListener streamDataParser:didProvideContentKeyRequestInitializationData:forTrackID:]):
            Added, pass through to SourceBufferPrivate.
        (WebCore::SourceBufferPrivateAVFObjC::SourceBufferPrivateAVFObjC):
        (WebCore::SourceBufferPrivateAVFObjC::didProvideContentKeyRequestInitializationDataForTrackID): Remember
            which track is requesting the key, and pass the request to MediaSourcePrivate.

        Add new files to the project.
        * WebCore.xcodeproj/project.pbxproj:

2014-02-21  Alexey Proskuryakov  <ap@apple.com>

        CryptoAlgorithmRSASSA_PKCS1_v1_5::platformVerify contains seemingly accidental unreachable code
        https://bugs.webkit.org/show_bug.cgi?id=129193

        Reviewed by Joseph Pecoraro.

        * crypto/mac/CryptoAlgorithmRSASSA_PKCS1_v1_5Mac.cpp:
        (WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::platformVerify): Fix the accidental code.

2014-02-21  Brent Fulgham  <bfulgham@apple.com>

        Extend media support for WebVTT sources
        https://bugs.webkit.org/show_bug.cgi?id=129156

        Reviewed by Eric Carlson.

        * Configurations/FeatureDefines.xcconfig: Add new feature define for AVF_CAPTIONS
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::outOfBandTrackSources): Added.
        * html/HTMLMediaElement.h:
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::outOfBandTrackSources): Added.
        * platform/graphics/MediaPlayer.h:
        (WebCore::MediaPlayerClient::outOfBandTrackSources): Added.
        * platform/graphics/PlatformTextTrack.h:
        (WebCore::PlatformTextTrack::create): Update for new constructor signature.
        (WebCore::PlatformTextTrack::createOutOfBand): Added.
        (WebCore::PlatformTextTrack::url): Added.
        (WebCore::PlatformTextTrack::isDefault): Added.
        (WebCore::PlatformTextTrack::PlatformTextTrack): Revised to take new URL and
        'isDefault' arguments.
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::mediaDescriptionForKind): Added.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::createAVAssetForURL): Tell AVFoundation about any
        WebVTT tracks supplied by the web page.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::processMediaSelectionOptions): Filter out any out-of-band
        WebVTT tracks returned by the media engine to avoid double-counting tracks.

2014-02-21  Ryosuke Niwa  <rniwa@webkit.org>

        Inner text element should not use -webkit-user-modify
        https://bugs.webkit.org/show_bug.cgi?id=129035

        Reviewed by Andreas Kling.

        To eliminate the internal use of -webkit-user-modify, use contenteditable attribute in the inner text elements
        instead of manually inspecting disabled-ness and readonly-ness in RenderTextControl.

        Unfortunately, we still have to manually set UserModify value in RenderTextControl::adjustInnerTextStyle since
        RenderTextControl::styleDidChange creates RenderStyle for its inner text from scratch via createInnerTextStyle.    

        * html/HTMLFieldSetElement.cpp:
        (WebCore::HTMLFieldSetElement::disabledStateChanged): Don't use childrenOfType iterator which asserts that DOM
        isn't mutated during the traversal since we now set contenteditable attribute inside disabledStateChanged via
        updateFromControlElementsAncestorDisabledStateUnder.

        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::parseAttribute): Extracted readOnlyAttributeChanged out of this function so
        that HTMLTextFormControl could override it to call updateInnerTextElementEditability.
        (WebCore::HTMLFormControlElement::readOnlyAttributeChanged): Ditto.
        * html/HTMLFormControlElement.h:

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::didAddUserAgentShadowRoot): Call updateInnerTextElementEditability after creating
        shadow DOM for the current input type.
        (WebCore::HTMLInputElement::updateType): Ditto.
        (WebCore::HTMLInputElement::parseAttribute): Ditto.

        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::didAddUserAgentShadowRoot): Call updateInnerTextElementEditability.

        * html/HTMLTextFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::disabledStateChanged): Added to update contenteditable attribute since
        the editability of the inner text element depends on disabled-ness of the element.
        (WebCore::HTMLTextFormControlElement::readOnlyAttributeChanged): Ditto for the readonly-ness of the element.
        (WebCore::HTMLTextFormControlElement::updateInnerTextElementEditability): Added.
        * html/HTMLTextFormControlElement.h:

        * rendering/RenderTextControl.cpp:
        (WebCore::RenderTextControl::adjustInnerTextStyle): Use the inner text element's presentationAttributeStyle() to
        compute the appropriate EUserModify value instead of hard-coding it here.
        * rendering/RenderTextControl.h:

2014-02-21  ChangSeok Oh  <changseok.oh@collabora.com>

        [GTK] Support WEBGL_draw_buffers extension.
        https://bugs.webkit.org/show_bug.cgi?id=129143

        Reviewed by Dean Jackson.

        Support the WEBGL_draw_buffers WebGL extension for gtk port. Relevant opengl APIs
        are exposed for WebGLRenderingContext to access them properly.

        Covered by fast/canvas/webgl/webgl-draw-buffers.html

        * platform/graphics/OpenGLShims.cpp:
        (WebCore::initializeOpenGLShims):
        * platform/graphics/OpenGLShims.h:
        * platform/graphics/opengl/Extensions3DOpenGL.cpp:
        (WebCore::Extensions3DOpenGL::supportsExtension):
        (WebCore::Extensions3DOpenGL::drawBuffersEXT):

2014-02-21  ChangSeok Oh  <changseok.oh@collabora.com>

        Mac port uses ANGLE_instanced_arrays related apis through those in GraphicsContext3DCommon.cpp
        https://bugs.webkit.org/show_bug.cgi?id=128803

        Reviewed by Dean Jackson.

        Merge mac port implementation of ANGLE_instanced_arrays into common code.

        No new tests, no functionality changed.

        * platform/graphics/mac/GraphicsContext3DMac.mm:
        * platform/graphics/opengl/Extensions3DOpenGL.cpp:
        (WebCore::Extensions3DOpenGL::drawArraysInstanced):
        (WebCore::Extensions3DOpenGL::drawElementsInstanced):
        (WebCore::Extensions3DOpenGL::vertexAttribDivisor):
        * platform/graphics/opengl/GraphicsContext3DOpenGLCommon.cpp:
        (WebCore::GraphicsContext3D::vertexAttribDivisor):

2014-02-21  Myles C. Maxfield  <mmaxfield@apple.com>

        After copy and paste, cursor may appear to be above the bottom of content
        https://bugs.webkit.org/show_bug.cgi?id=129167

        Reviewed by Ryosuke Niwa.

        Adding a clear:both to the end of content.

        I can't handle the case of the cursor appearing above the bottom of
        absolutely positioned divs (of the case of floats inside absolutely
        positioned divs) because you can't know where the bottom of a div
        will end up being rendered (it is affected by things like browser
        window width and text size settings). Therefore, the only case I
        can handle is the case where there is a floating div in the same
        level as the document itself.

        Test: editing/pasteboard/copy-paste-inserts-clearing-div.html

        * editing/EditingStyle.cpp:
        (WebCore::EditingStyle::isFloating):
        * editing/EditingStyle.h:
        * editing/markup.cpp:
        (WebCore::StyledMarkupAccumulator::StyledMarkupAccumulator):
        (WebCore::StyledMarkupAccumulator::appendElement):
        (WebCore::createMarkupInternal):

2014-02-21  Dean Jackson  <dino@apple.com>

        [iOS Media] Wireless target UI
        https://bugs.webkit.org/show_bug.cgi?id=129189
        <rdar://problem/15349928>
        <rdar://problem/16100060>

        Reviewed by Eric Carlson.

        Implement a prototype UI for wireless playback targets. The UI
        doesn't currently work, but can be simulated via a class variable
        in ControllerIOS.

        * Modules/mediacontrols/mediaControlsiOS.css:
        (audio::-webkit-media-controls-panel button): Reset the default style of
        button elements, to avoid getting a border.
        (audio::-webkit-media-controls-wireless-playback-status): Holds the UI showing
        the user that the media is playing on another target.
        (audio::-webkit-media-controls-wireless-playback-status.hidden):
        (audio::-webkit-media-controls-wireless-playback-picker-button): The button to
        trigger selection of targets.
        (audio::-webkit-media-controls-wireless-playback-picker-button.active):
        (audio::-webkit-media-controls-panel): This needs to be position absolute for
        the wireless playback status to fill the viewport.
        * Modules/mediacontrols/mediaControlsiOS.js:
        (ControllerIOS): Check for targets.
        (ControllerIOS.prototype.addVideoListeners):
        (ControllerIOS.prototype.removeVideoListeners):
        (ControllerIOS.prototype.UIString): New method to return localized strings (with
        a FIXME).
        (ControllerIOS.prototype.shouldHaveAnyUI): Needs to display if there is a wireless
        target.
        (ControllerIOS.prototype.currentPlaybackTargetIsWireless):
        (ControllerIOS.prototype.updateWirelessPlaybackStatus): Create the status content,
        replacing the device name if it is available.
        (ControllerIOS.prototype.updateWirelessTargetAvailable):
        (ControllerIOS.prototype.createControls):
        (ControllerIOS.prototype.configureInlineControls):
        (ControllerIOS.prototype.handleWirelessPlaybackChange):
        (ControllerIOS.prototype.handleWirelessTargetAvailableChange):
        (ControllerIOS.prototype.handleWirelessPickerButtonClicked):

2014-02-21  Jer Noble  <jer.noble@apple.com>

        Make a generic CDMPrivateMediaPlayer and move its CDMSession into platform/.
        https://bugs.webkit.org/show_bug.cgi?id=129164

        Reviewed by Eric Carlson.

        Move the session created by CDMPrivateAVFoundation into platform, and rename
        CDMPrivateAVFoundation to CDMPrivateMediaPlayer. Future media engines who want
        to support a keysystem from within the media engine can create their own
        CDMSession as part of the MediaPlayerPrivate interface.

        * Modules/encryptedmedia/CDM.cpp:
        (WebCore::installedCDMFactories):
        (WebCore::CDM::createSession):
        * Modules/encryptedmedia/CDM.h:
        * Modules/encryptedmedia/CDMPrivate.h:
        * Modules/encryptedmedia/MediaKeySession.cpp:
        * Modules/encryptedmedia/MediaKeySession.h:
        * Modules/encryptedmedia/CDMPrivateAVFoundation.mm: Removed.
        * Modules/encryptedmedia/CDMPrivateMediaPlayer.cpp: Renamed from Source/WebCore/Modules/encryptedmedia/CDMPrivateAVFoundation.cpp.
        (WebCore::CDMPrivateMediaPlayer::supportsKeySystem):
        (WebCore::CDMPrivateMediaPlayer::supportsKeySystemAndMimeType):
        (WebCore::CDMPrivateMediaPlayer::supportsMIMEType):
        (WebCore::CDMPrivateMediaPlayer::createSession):
        * Modules/encryptedmedia/CDMPrivateMediaPlayer.h: Renamed from Source/WebCore/Modules/encryptedmedia/CDMPrivateAVFoundation.h.
        (WebCore::CDMPrivateMediaPlayer::create):
        (WebCore::CDMPrivateMediaPlayer::~CDMPrivateMediaPlayer):
        (WebCore::CDMPrivateMediaPlayer::cdm):
        (WebCore::CDMPrivateMediaPlayer::CDMPrivateMediaPlayer):
        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/CDMSession.h: Extracted from CDMPrivateAVFoundation.h.
        (WebCore::CDMSessionClient::~CDMSessionClient):
        (WebCore::CDMSession::CDMSession):
        (WebCore::CDMSession::~CDMSession):
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::createSession):
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::createSession):
        * platform/graphics/avfoundation/objc/CDMSessionAVFoundationObjC.h: Renamed from Source/WebCore/Modules/encryptedmedia/CDMPrivateAVFoundation.h.
        (WebCore::CDMSessionAVFoundationObjC::~CDMSessionAVFoundationObjC):
        * platform/graphics/avfoundation/objc/CDMSessionAVFoundationObjC.mm: Renamed from Source/WebCore/Modules/encryptedmedia/CDMPrivateAVFoundation.mm.
        (WebCore::CDMSessionAVFoundationObjC::CDMSessionAVFoundationObjC):
        (WebCore::CDMSessionAVFoundationObjC::generateKeyRequest):
        (WebCore::CDMSessionAVFoundationObjC::releaseKeys):
        (WebCore::CDMSessionAVFoundationObjC::update):
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::createSession):
        * testing/MockCDM.cpp:
        (WebCore::MockCDMSession::setClient):
        (WebCore::MockCDM::createSession):
        * testing/MockCDM.h:

2014-02-21  Jer Noble  <jer.noble@apple.com>

        Add a supportsKeySystem media engine factory parameter.
        https://bugs.webkit.org/show_bug.cgi?id=129161

        Reviewed by Eric Carlson.

        Add a new parameter to the MediaPlayerFactory to allow registered media
        engines to be queried for keySystem support:
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayerFactory::MediaPlayerFactory):
        (WebCore::MediaPlayer::supportsKeySystem):
        * platform/graphics/MediaPlayer.h:

        Support this new field in MediaPlayerPrivateAVFoundationObjC:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::registerMediaEngine):
        (WebCore::keySystemIsSupported):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::supportsKeySystem):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::shouldWaitForLoadingOfResource):

        Add an empty field for SupportsKeySystem to the remaining media engines:
        * platform/graphics/avfoundation/cf/MediaPlayerPrivateAVFoundationCF.cpp:
        (WebCore::MediaPlayerPrivateAVFoundationCF::registerMediaEngine):
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateMediaSourceAVFObjC.mm:
        (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::registerMediaEngine):
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::registerMediaEngine):
        * platform/graphics/ios/MediaPlayerPrivateIOS.mm:
        (WebCore::MediaPlayerPrivateIOS::registerMediaEngine):
        * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
        (WebCore::MediaPlayerPrivateQTKit::registerMediaEngine):
        * platform/graphics/win/MediaPlayerPrivateQuickTimeVisualContext.cpp:
        (WebCore::MediaPlayerPrivateQuickTimeVisualContext::registerMediaEngine):
        * platform/mock/mediasource/MockMediaPlayerMediaSource.cpp:
        (WebCore::MockMediaPlayerMediaSource::registerMediaEngine):

2014-02-21  Benjamin Poulain  <bpoulain@apple.com>

        Fix WebCore's internals after r164505

        * testing/Internals.cpp:
        (WebCore::Internals::findEditingDeleteButton): The call became ambiguous after r164505.

2014-02-21  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: JSContext inspection should report exceptions in the console
        https://bugs.webkit.org/show_bug.cgi?id=128776

        Reviewed by Timothy Hatcher.

        Include some clean up of ConsoleMessage and ScriptCallStack construction.

        Covered by existing tests.

        * bindings/js/JSDOMBinding.cpp:
        (WebCore::reportException):
        Simplify code now that createStackTraceFromException handles it.

        * page/ContentSecurityPolicy.cpp:
        (WebCore::gatherSecurityPolicyViolationEventData):
        (WebCore::ContentSecurityPolicy::reportViolation):
        ScriptCallStack can give us the first non-native callframe.

        * inspector/InspectorResourceAgent.cpp:
        (WebCore::InspectorResourceAgent::buildInitiatorObject):
        * inspector/PageDebuggerAgent.cpp:
        (WebCore::PageDebuggerAgent::breakpointActionLog):
        * inspector/TimelineRecordFactory.cpp:
        (WebCore::TimelineRecordFactory::createGenericRecord):
        * page/Console.cpp:
        (WebCore::internalAddMessage):
        (WebCore::Console::profile):
        (WebCore::Console::profileEnd):
        (WebCore::Console::timeEnd):
        * page/ContentSecurityPolicy.cpp:
        (WebCore::gatherSecurityPolicyViolationEventData):
        (WebCore::ContentSecurityPolicy::reportViolation):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::postMessage):

2014-02-21  Benjamin Poulain  <benjamin@webkit.org>

        jsDocumentPrototypeFunctionGetElementById should not create an AtomicString for the function argument
        https://bugs.webkit.org/show_bug.cgi?id=128893

        Reviewed by Darin Adler.

        The declaration of TreeScope::getElementById() was taking an AtomicString as the parameter.
        Because of this, all the call sites manipulating String were creating and keeping alive an AtomicString
        to make the call.

        This had two negative consequences:
        -The call sites were ref-ing the ID's atomic string for no reason.
        -When there is no ID associated with the input string, an atomic string was created for the sole
         purpose of failing the query. Since IDs are stored as AtomicString, if there is not an existing
         AtomicString for the input, there is no reason to query anything.

        * WebCore.exp.in:
        * bindings/js/JSDOMBinding.cpp:
        (WebCore::findAtomicString): Update this after the rename.

        * bindings/scripts/CodeGeneratorObjC.pm:
        (GenerateImplementation):
        * bindings/scripts/IDLAttributes.txt:
        Now that there are two overloads for TreeScope::getElementById(), the conversion from NSString*
        is ambiguous. I add the keyword ObjCExplicitAtomicString to force an explicit conversion to AtomicString.

        * dom/Document.idl:
        * dom/TreeScope.cpp:
        (WebCore::TreeScope::getElementById):
        When getting an AtomicString, the case of a empty string is not important, use isNull() instead.
        When getting a String, get the corresponding AtomicString if any and use that for getting the element.

        * dom/TreeScope.h:
        * html/FTPDirectoryDocument.cpp:
        (WebCore::FTPDirectoryDocumentParser::loadDocumentTemplate):
        Solve the ambiguous call.

        * svg/SVGAElement.cpp:
        (WebCore::SVGAElement::defaultEventHandler):
        This is a wonderful candidate for substringSharingImpl. The substring does not survive the call since
        the new getElementById never create any AtomicString.

        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::getElementById):
        It looks like there are opportunities to get faster here, Ryosuke should have a look.

        * svg/SVGSVGElement.h:
        * xml/XMLTreeViewer.cpp:
        (WebCore::XMLTreeViewer::transformDocumentToTreeView):
        Unrelated cleanup: noStyleMessage was useless.

2014-02-21  Daniel Bates  <dabates@apple.com>

        COL element in table has 0 for offsetWidth
        https://bugs.webkit.org/show_bug.cgi?id=15277

        Reviewed by David Hyatt.

        Implements offset{Left, Top, Width, Height} for table columns and column groups
        per section Extensions to the HTMLElement Interface of the CSSOM View spec,
        <http://www.w3.org/TR/cssom-view/#extensions-to-the-htmlelement-interface> (Draft 17 December 2013).

        For now, we fail almost all of the offset{Height, Top} sub-tests in the included test
        for the separate border model as we need to fix <https://bugs.webkit.org/show_bug.cgi?id=128988>.

        Test: fast/table/col-and-colgroup-offsets.html

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::RenderTable): Initialize cached column offset top and offset height.
        We cache these offsets since they are the same for all columns in the table.
        (WebCore::RenderTable::invalidateCachedColumns): Clear cached effective column index map.
        (WebCore::RenderTable::invalidateCachedColumnOffsets): Added.
        (WebCore::RenderTable::layout): Invalidate cached column offsets as the location or height
        of one or more sections may have changed.
        (WebCore::RenderTable::updateColumnCache): Modified to build effective column index map.
        (WebCore::RenderTable::effectiveIndexOfColumn): Added.
        (WebCore::RenderTable::offsetTopForColumn): Added.
        (WebCore::RenderTable::offsetLeftForColumn): Added.
        (WebCore::RenderTable::offsetWidthForColumn): Added.
        (WebCore::RenderTable::offsetHeightForColumn): Added.
        * rendering/RenderTable.h: Make isTableColumnGroupWithColumnChildren() const.
        * rendering/RenderTableCol.cpp:
        (WebCore::RenderTableCol::offsetLeft): Added; turns around and calls RenderTable::offsetLeftForColumn().
        (WebCore::RenderTableCol::offsetTop): Added; turns around and calls RenderTable::offsetTopForColumn().
        (WebCore::RenderTableCol::offsetWidth): Added; turns around and calls RenderTable::offsetWidthForColumn().
        (WebCore::RenderTableCol::offsetHeight): Added; turns around and calls RenderTable::offsetHeightForColumn().
        * rendering/RenderTableCol.h:

2014-02-21  Enrica Casucci  <enrica@apple.com>

        Build fix for iOS after r164498.

        Unreviewed.

        * platform/graphics/ios/MediaPlayerPrivateIOS.mm:
        (WebCore::MediaPlayerPrivateIOS::buffered):

2014-02-21  Ryosuke Niwa  <rniwa@webkit.org>

        Disallow the use of -webkit-user-modify on shadow pseudo elements
        https://bugs.webkit.org/show_bug.cgi?id=129144

        Reviewed by Geoffrey Garen.

        Completely disallow -webkit-user-modify on user agent (builtin) pseudo elements.

        We've already had rules to do this in html.css but just hard code it into the engine
        in order to eliminate the all uses of -webkit-user-modify in html.css.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::adjustRenderStyle):
        * css/html.css:
        (input::-webkit-textfield-decoration-container):
        (input::-webkit-clear-button):
        (input[type="search"]::-webkit-search-cancel-button):
        (input[type="search"]::-webkit-search-decoration):
        (input[type="search"]::-webkit-search-results-decoration):
        (input[type="search"]::-webkit-search-results-button):
        (input::-webkit-inner-spin-button):
        (input::-webkit-input-speech-button):
        (input::-webkit-input-placeholder, isindex::-webkit-input-placeholder):
        (input[type="file"]::-webkit-file-upload-button):
        (input[type="range"]::-webkit-slider-container, input[type="range"]::-webkit-media-slider-container):
        (input[type="range"]::-webkit-slider-runnable-track):
        (input[type="range"]::-webkit-slider-thumb, input[type="range"]::-webkit-media-slider-thumb):
        (input[type="color"]::-webkit-color-swatch-wrapper):
        (input[type="color"]::-webkit-color-swatch):
        (::-webkit-validation-bubble):
        (::-webkit-validation-bubble-message):
        (::-webkit-validation-bubble-text-block):
        (::-webkit-validation-bubble-heading):
        (::-webkit-validation-bubble-arrow):
        (::-webkit-validation-bubble-arrow-clipper):
        (meter::-webkit-meter-inner-element):
        (meter::-webkit-meter-bar):
        (meter::-webkit-meter-optimum-value):
        (meter::-webkit-meter-suboptimum-value):
        (meter::-webkit-meter-even-less-good-value):
        (progress::-webkit-progress-inner-element):
        (progress::-webkit-progress-bar):
        (progress::-webkit-progress-value):

2014-02-21  Eric Carlson  <eric.carlson@apple.com>

        Fix TimeRanges layering violations
        https://bugs.webkit.org/show_bug.cgi?id=128717

        Reviewed by Jer Noble.

        No new tests, no functionality changed.

        * CMakeLists.txt:
        * GNUmakefile.list.am: Add PlatformTimeRanges.

        * Modules/mediasource/MediaSource.cpp:
        (WebCore::MediaSource::buffered): TimeRanges -> PlatformTimeRanges.
        * Modules/mediasource/MediaSource.h:

        * Modules/mediasource/SourceBuffer.cpp:
        (WebCore::SourceBuffer::sourceBufferPrivateDidReceiveSample): TimeRanges* -> TimeRanges&.

        * WebCore.exp.in: Update for signature changes.

        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj: Add PlatformTimeRanges.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::percentLoaded): Create TimeRanges from PlatformTimeRanges.
        (WebCore::HTMLMediaElement::buffered): Ditto.
        (WebCore::HTMLMediaElement::seekable): Ditto.

        * html/MediaController.cpp:
        (MediaController::buffered): TimeRanges* -> TimeRanges&.
        (MediaController::seekable): Ditto.
        (MediaController::played): Ditto.

        Move all of the logic into PlatformTimeRanges. Change API to take TimeRanges& instead of TimeRanges*.
        * html/TimeRanges.cpp:
        (WebCore::TimeRanges::create): Move to .cpp from .h.
        (WebCore::TimeRanges::TimeRanges): Initialize the PlatformTimeRanges member variable.
        (WebCore::TimeRanges::start): Passthrough to PlatformTimeRanges.
        (WebCore::TimeRanges::end): Ditto.
        (WebCore::TimeRanges::invert): Ditto.
        (WebCore::TimeRanges::copy): Ditto.
        (WebCore::TimeRanges::intersectWith): Ditto.
        (WebCore::TimeRanges::unionWith): Ditto.
        (WebCore::TimeRanges::length): Ditto.
        (WebCore::TimeRanges::add): Ditto.
        (WebCore::TimeRanges::contain): Ditto.
        (WebCore::TimeRanges::find): Ditto.
        (WebCore::TimeRanges::nearest): Ditto.
        (WebCore::TimeRanges::totalDuration): Ditto.
        * html/TimeRanges.h:

        * platform/graphics/MediaPlayer.cpp:
        (WebCore::NullMediaPlayerPrivate::buffered): TimeRanges -> PlatformTimeRanges.
        (WebCore::MediaPlayer::buffered): Ditto.
        (WebCore::MediaPlayer::seekable): Ditto.
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/MediaPlayerPrivate.h:

        * platform/graphics/MediaSourcePrivateClient.h:

        * platform/graphics/PlatformTimeRanges.cpp: Added.
        * platform/graphics/PlatformTimeRanges.h: Added.

        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.cpp:
        (WebCore::MediaPlayerPrivateAVFoundation::buffered): TimeRanges -> PlatformTimeRanges.
        (WebCore::MediaPlayerPrivateAVFoundation::loadedTimeRangesChanged): Drive-by fix to log
            FunctionType notifications. ASSERT when passed an unknown notification.

        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.h:
        * platform/graphics/avfoundation/cf/MediaPlayerPrivateAVFoundationCF.cpp:
        (WebCore::MediaPlayerPrivateAVFoundationCF::platformBufferedTimeRanges):  TimeRanges -> PlatformTimeRanges.
        * platform/graphics/avfoundation/cf/MediaPlayerPrivateAVFoundationCF.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::currentTime): Ditto.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::platformBufferedTimeRanges): Ditto.

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateMediaSourceAVFObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateMediaSourceAVFObjC.mm:
        (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::seekable): Ditto.
        (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::buffered): Ditto.

        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::buffered): Ditto.
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h:

        * platform/graphics/ios/MediaPlayerPrivateIOS.h:
        * platform/graphics/ios/MediaPlayerPrivateIOS.mm:
        (WebCore::MediaPlayerPrivateIOS::buffered): Ditto.

        * platform/graphics/mac/MediaPlayerPrivateQTKit.h:
        * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
        (WebCore::MediaPlayerPrivateQTKit::buffered): Ditto.

        * platform/graphics/win/MediaPlayerPrivateQuickTimeVisualContext.cpp:
        (WebCore::MediaPlayerPrivateQuickTimeVisualContext::buffered): Ditto.
        * platform/graphics/win/MediaPlayerPrivateQuickTimeVisualContext.h:

        * platform/graphics/wince/MediaPlayerPrivateWinCE.h:

        * platform/mock/mediasource/MockMediaPlayerMediaSource.cpp:
        (WebCore::MockMediaPlayerMediaSource::buffered): Ditto.
        (WebCore::MockMediaPlayerMediaSource::advanceCurrentTime): Ditto.
        * platform/mock/mediasource/MockMediaPlayerMediaSource.h:

2014-02-21  Enrica Casucci  <enrica@apple.com>

        Support WebSelections in WK2 on iOS.
        https://bugs.webkit.org/show_bug.cgi?id=127015
        <rdar://problem/15211964>

        Reviewed by Benjamin Poulain.

        Adding some exports.

        * WebCore.exp.in:

2014-02-21  Benjamin Poulain  <bpoulain@apple.com>

        'mouseenter' mouse compat event not fired when listeners for touch events
        https://bugs.webkit.org/show_bug.cgi?id=128534

        Reviewed by Andreas Kling.

        The code dispatching mouseenter and mouseleave events was making the assumption that
        only mouse move would cause Document::updateHoverActiveState.

        This is not true in some cases. In the case of this bug, the first touch handler sets
        the hover state. From there, the code handling enter/leave is in an inconsistent state.

        This patch changes the delivery of mouse enter/leave events to be done through the regular
        processing of mouse events. The update is done with the mouseover and mouseout events.

        * dom/Document.cpp:
        (WebCore::Document::prepareMouseEvent):
        (WebCore::Document::updateHoverActiveState):
        * dom/Document.h:
        * page/EventHandler.cpp:
        (WebCore::nearestCommonHoverAncestor):
        (WebCore::hierarchyHasCapturingEventListeners):
        (WebCore::EventHandler::updateMouseEventTargetNode):

2014-02-21  Jon Honeycutt  <jhoneycutt@apple.com>

        Crash reloading page with position: fixed content
        https://bugs.webkit.org/show_bug.cgi?id=129119
        <rdar://problem/16127090>

        Reviewed by Brent Fulgham.

        Test: platform/mac-wk2/tiled-drawing/crash-reloading-with-position-fixed-content.html

        * page/scrolling/ScrollingTree.cpp:
        (WebCore::ScrollingTree::removeDestroyedNodes):
        Check the node's ID against the latched node's ID before the node is
        removed from the tree.

2014-02-21  Joseph Pecoraro  <pecoraro@apple.com>

        Revert r164486, causing a number of test failures.

        Unreviewed rollout.

2014-02-21  David Kilzer  <ddkilzer@apple.com>

        StyleResolver::loadPendingImage() should take a reference to StylePendingImage
        <http://webkit.org/b/129021>

        Reviewed by Brent Fulgham.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::loadPendingImage): Change pendingImage
        parameter to a reference.
        (WebCore::StyleResolver::loadPendingShapeImage): Update to use
        references.
        (WebCore::StyleResolver::loadPendingImages): Ditto.
        * css/StyleResolver.h:
        (WebCore::StyleResolver::loadPendingImage): Change pendingImage
        parameter to a reference.

2014-02-21  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: JSContext inspection should report exceptions in the console
        https://bugs.webkit.org/show_bug.cgi?id=128776

        Reviewed by Timothy Hatcher.

        Include some clean up of ConsoleMessage and ScriptCallStack construction.

        Covered by existing tests.

        * bindings/js/JSDOMBinding.cpp:
        (WebCore::reportException):
        Simplify code now that createStackTraceFromException handles it.

        * page/ContentSecurityPolicy.cpp:
        (WebCore::gatherSecurityPolicyViolationEventData):
        (WebCore::ContentSecurityPolicy::reportViolation):
        ScriptCallStack can give us the first non-native callframe.

        * inspector/InspectorResourceAgent.cpp:
        (WebCore::InspectorResourceAgent::buildInitiatorObject):
        * inspector/PageDebuggerAgent.cpp:
        (WebCore::PageDebuggerAgent::breakpointActionLog):
        * inspector/TimelineRecordFactory.cpp:
        (WebCore::TimelineRecordFactory::createGenericRecord):
        * page/Console.cpp:
        (WebCore::internalAddMessage):
        (WebCore::Console::profile):
        (WebCore::Console::profileEnd):
        (WebCore::Console::timeEnd):
        * page/ContentSecurityPolicy.cpp:
        (WebCore::gatherSecurityPolicyViolationEventData):
        (WebCore::ContentSecurityPolicy::reportViolation):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::postMessage):

2014-02-21  Martin Hodovan  <mhodovan@inf.u-szeged.hu>

        Fixing the !ENABLE(SVG_FONTS) build
        https://bugs.webkit.org/show_bug.cgi?id=129150

        Reviewed by Anders Carlsson.

        No new tests required.

        * svg/SVGAltGlyphElement.cpp:
        * svg/SVGAltGlyphElement.h:
        * svg/svgtags.in:

2014-02-21  Radu Stavila  <stavila@adobe.com>

        [CSS Regions] Use the named-flow-specific object RenderNamedFlowFragment instead of the generic RenderRegion whenever possible
        https://bugs.webkit.org/show_bug.cgi?id=128599

        Reviewed by Andrei Bucur.

        Use the named flow specific RenderNamedFlowFragment instead of the generic RenderRegion, whenever possible.
        Move named flow specific methods from RenderRegion to RenderNamedFlowFragment.

        No new tests required.

        * dom/Element.cpp:
        (WebCore::Element::renderNamedFlowFragment):
        (WebCore::Element::webkitRegionOverset):
        (WebCore::Element::webkitGetRegionFlowRanges):
        * dom/Element.h:
        * inspector/InspectorCSSAgent.cpp:
        (WebCore::InspectorCSSAgent::buildArrayForRegions):
        * rendering/PaintInfo.h:
        (WebCore::PaintInfo::PaintInfo):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::paint):
        (WebCore::RenderBlock::paintObject):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::paintBoxDecorations):
        (WebCore::RenderBox::pushContentsClip):
        (WebCore::RenderBox::layoutOverflowRectForPropagation):
        * rendering/RenderBox.h:
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintMaskForTextFillBox):
        (WebCore::RenderBoxModelObject::paintFillLayerExtended):
        * rendering/RenderBoxModelObject.h:
        * rendering/RenderInline.h:
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paint):
        (WebCore::RenderLayer::paintLayer):
        (WebCore::RenderLayer::paintLayerContents):
        (WebCore::RenderLayer::paintLayerByApplyingTransform):
        (WebCore::RenderLayer::updatePaintingInfoForFragments):
        (WebCore::RenderLayer::paintTransformedLayerIntoFragments):
        (WebCore::RenderLayer::paintBackgroundForFragments):
        (WebCore::RenderLayer::paintForegroundForFragmentsWithPhase):
        (WebCore::RenderLayer::paintOutlineForFragments):
        (WebCore::RenderLayer::paintMaskForFragments):
        (WebCore::RenderLayer::mapLayerClipRectsToFragmentationLayer):
        (WebCore::RenderLayer::calculateClipRects):
        * rendering/RenderLayer.h:
        * rendering/RenderNamedFlowFragment.cpp:
        (WebCore::RenderNamedFlowFragment::getRanges):
        * rendering/RenderNamedFlowFragment.h:
        * rendering/RenderNamedFlowThread.cpp:
        (WebCore::RenderNamedFlowThread::updateWritingMode):
        (WebCore::compareRenderNamedFlowFragments):
        (WebCore::addFragmentToList):
        (WebCore::RenderNamedFlowThread::addFragmentToNamedFlowThread):
        (WebCore::RenderNamedFlowThread::addRegionToThread):
        (WebCore::RenderNamedFlowThread::removeRegionFromThread):
        (WebCore::RenderNamedFlowThread::computeOversetStateForRegions):
        (WebCore::RenderNamedFlowThread::checkInvalidRegions):
        (WebCore::RenderNamedFlowThread::getRanges):
        (WebCore::RenderNamedFlowThread::checkRegionsWithStyling):
        (WebCore::RenderNamedFlowThread::clearRenderObjectCustomStyle):
        * rendering/RenderNamedFlowThread.h:
        * rendering/RenderRegion.cpp:
        * rendering/RenderRegion.h:
        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::shouldPaint):
        * rendering/RenderReplica.cpp:
        (WebCore::RenderReplica::paint):
        * rendering/RootInlineBox.cpp:
        (WebCore::RootInlineBox::paint):
        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::paintReplaced):

2014-02-21  Andrei Bucur  <abucur@adobe.com>

        [CSS Regions] Regions don't paint correctly in new-multicol elements
        https://bugs.webkit.org/show_bug.cgi?id=120711

        Reviewed by David Hyatt.

        This patch implements basic support for regions inside multi-column elements.
        Currently, the painting and hit-testing logic of CSS Regions is not aware of
        enclosing multi-column elements. The change is integrated at a layer level by
        making use of the pre-computed layer fragments during the painting and hit-testing
        phases for regions.

        There are limitations such that self painting layers found inside the named flow
        thread layer will not be correctly processed because they don't go through the
        layer fragment collection step. This is not trivial to implement because the enclosing
        pagination layer provided by the multi-column element is not visibile from inside
        the named flow thread layer and they reside in different coordinate systems.

        A side effect of this patch is the fix of regions incorrect clipping in certain
        cases (when both a region and its container clip their overflow, the region's
        content is visible outside the container).

        Tests: fast/regions/region-clipping.html
               fast/regions/regions-in-multicol-bt.html
               fast/regions/regions-in-multicol-hover-overflow.html
               fast/regions/regions-in-multicol-hover.html
               fast/regions/regions-in-multicol-lr.html
               fast/regions/regions-in-multicol-rl.html
               fast/regions/regions-in-multicol.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayerContents):
        (WebCore::RenderLayer::hitTestLayer):
        (WebCore::RenderLayer::paintFlowThreadIfRegionForFragments):
        (WebCore::RenderLayer::hitTestFlowThreadIfRegionForFragments):
        * rendering/RenderLayer.h:

2014-02-21  Mihai Tica  <mitica@adobe.com>

        [CSS Blending] Refactor -webkit-blend-mode to -webkit-mix-blend-mode
        https://bugs.webkit.org/show_bug.cgi?id=128805

        Reviewed by Dean Jackson.

        The spec defines the mix-blend-mode property. This means that the
        prefixed version should be -webkit-mix-blend-mode, instead of
        -webkit-blend-mode.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::ComputedStyleExtractor::propertyValue):
        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue):
        (WebCore::isKeywordPropertyID):
        (WebCore::CSSParser::parseValue):
        * css/CSSPropertyNames.in:
        * css/DeprecatedStyleBuilder.cpp:
        (WebCore::DeprecatedStyleBuilder::DeprecatedStyleBuilder):

2014-02-21  Ryosuke Niwa  <rniwa@webkit.org>

        Bindings tests rebaseline after r164473.

        * bindings/scripts/test/ObjC/DOMTestObj.mm:
        (-[DOMTestObj mutablePoint]):
        (-[DOMTestObj immutablePoint]):
        (-[DOMTestObj mutablePointFunction]):
        (-[DOMTestObj immutablePointFunction]):
        * bindings/scripts/test/ObjC/DOMTestTypedefs.mm:
        (-[DOMTestTypedefs immutablePointFunction]):

2014-02-21  Tim Horton  <timothy_horton@apple.com>

        Remove removed symbol from exports list.

        * WebCore.exp.in:

2014-02-20  ChangSeok Oh  <changseok.oh@collabora.com>

        Rename EXT_draw_buffers to WEBGL_draw_buffers
        https://bugs.webkit.org/show_bug.cgi?id=128894

        Reviewed by Dean Jackson.

        I noticed the related spec has changed. Accordingly chromium also changed its implementation
        to meet the spec. So here I'd like to apply it to webkit as well.

        Merged from Blink (patch by bajones):
        https://src.chromium.org/viewvc/blink?revision=152065&view=revision

        Test: fast/canvas/webgl/webgl-draw-buffers.html

        * CMakeLists.txt:
        * DerivedSources.cpp:
        * DerivedSources.make:
        * GNUmakefile.list.am:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSWebGLRenderingContextCustom.cpp:
        (WebCore::toJS):
        * html/canvas/EXTDrawBuffers.idl: Removed.
        * html/canvas/WebGLDrawBuffers.cpp: Renamed from Source/WebCore/html/canvas/EXTDrawBuffers.cpp.
        (WebCore::WebGLDrawBuffers::WebGLDrawBuffers):
        (WebCore::WebGLDrawBuffers::~WebGLDrawBuffers):
        (WebCore::WebGLDrawBuffers::getName):
        (WebCore::WebGLDrawBuffers::create):
        (WebCore::WebGLDrawBuffers::supported):
        (WebCore::WebGLDrawBuffers::drawBuffersWEBGL):
        (WebCore::WebGLDrawBuffers::satisfiesWebGLRequirements):
        * html/canvas/WebGLDrawBuffers.h: Renamed from Source/WebCore/html/canvas/EXTDrawBuffers.h.
        * html/canvas/WebGLDrawBuffers.idl: Added.
        * html/canvas/WebGLExtension.h:
        * html/canvas/WebGLFramebuffer.cpp:
        (WebCore::WebGLFramebuffer::drawBuffersIfNecessary):
        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore::WebGLRenderingContext::getExtension):
        (WebCore::WebGLRenderingContext::getParameter):
        (WebCore::WebGLRenderingContext::getSupportedExtensions):
        (WebCore::WebGLRenderingContext::validateFramebufferFuncParameters):
        (WebCore::WebGLRenderingContext::supportsDrawBuffers):
        * html/canvas/WebGLRenderingContext.h:

2014-02-20  Ryosuke Niwa  <rniwa@webkit.org>

        m_ancestorDisabledState should never be unknown
        https://bugs.webkit.org/show_bug.cgi?id=129084

        Reviewed by Benjamin Poulain.

        In order to resolve the bug 129035, a text form control elements needs to synchronously change
        its inner text element's editability by setting or unsetting contenteditable content attribute.
        Before this patch, we could not do this because editability of a text form control dependent on
        its disabled-ness which was only computed lazily via updateAncestorDisabledState().

        This patch makes HTMLFieldSetElement and HTMLFormControlElement update this state synchronously.
        To avoid O(k) DOM traversal, where k is the depth of the tree, in insertedInto and removedFrom of
        HTMLFormControlElement on most pages, a new document-level flag, m_disabledFieldsetElementsCount,
        has been added to indicate whether the document contains any disabled fieldset or not.

        Also renamed the misleadingly named disabledAttributeChanged to disabledStateChanged, and added
        new function of the same name (disabledAttributeChanged) to be used by HTMLFieldSetElement
        for keeping the document-level flag up-to-date upon disabled attribute changes.

        Tests: fast/forms/fieldset/fieldset-disabled-2.html

        * dom/Document.cpp:
        (WebCore::Document::Document): Initializes newly added m_disabledFieldsetElementsCount.
        (WebCore::Document::~Document): Assert that we've done house keeping right.
        * dom/Document.h:
        (WebCore::Document::hasDisabledFieldsetElement): Added.
        (WebCore::Document::addDisabledFieldsetElement): Added.
        (WebCore::Document::removeDisabledFieldsetElement): Added.

        * html/HTMLFieldSetElement.cpp:
        (WebCore::HTMLFieldSetElement::~HTMLFieldSetElement): Removes itself from the owner document.

        (WebCore::updateFromControlElementsAncestorDisabledStateUnder): Added. Updates startNode and
        its descendants' ancestor disabled flag. We don't update controls under another disabled
        fieldset element since disabled-ness of those controls aren't affected by startNode.

        (WebCore::HTMLFieldSetElement::disabledAttributeChanged): Call addDisabledFieldsetElement and
        removeDisabledFieldsetElement to update the owner document's flag.

        (WebCore::HTMLFieldSetElement::disabledStateChanged): Renamed from disabledAttributeChanged. 
        Enable form control elements under the first legend element and disable or enable other
        descendent form controls in accordance with the presence of disabled content attribute.

        (WebCore::HTMLFieldSetElement::childrenChanged): Update disabled-ness of form controls under
        child legend elements because controls aren't disabled in the first legend element, and adding
        or removing child elements may have changed the first legend element.

        (WebCore::HTMLFieldSetElement::didMoveToNewDocument): Update the flag on the owner document.
        * html/HTMLFieldSetElement.h:

        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::HTMLFormControlElement):
        (WebCore::HTMLFormControlElement::computeIsDisabledByFieldsetAncestor): Returns boolean instead of
        updating m_ancestorDisabledState internally. Also renamed from updateAncestorDisabledState.

        (WebCore::HTMLFormControlElement::setAncestorDisabled): Replaced ancestorDisabledStateWasChanged.
        This function updates m_disabledByAncestorFieldset and calls disabledAttributeChanged as needed.

        (WebCore::HTMLFormControlElement::disabledAttributeChanged): Added. Calls disabledStateChanged.
        (WebCore::HTMLFormControlElement::disabledStateChanged): Renamed from disabledAttributeChanged.

        (WebCore::HTMLFormControlElement::insertedInto): Update m_disabledByAncestorFieldset if there is
        a possibility (i.e. the document contains any disabled fieldset element) that this form control
        is inserted under a disabled fieldset element.

        (WebCore::HTMLFormControlElement::removedFrom): If this form control element is not disabled by
        a fieldset ancestor, then there is nothing to do. If it is, then check to see if the element is
        still disabled now that we've lost some ancestors.

        (WebCore::HTMLFormControlElement::isDisabledFormControl): No longer updates m_ancestorDisabledState
        lazily since m_disabledByAncestorFieldset is never ambiguous now.

        * html/HTMLFormControlElement.h:
        (WebCore::HTMLFormControlElement::disabledByAncestorFieldset): Added.

2014-02-20  Zalan Bujtas  <zalan@apple.com>

        Remove redundant deviceScaleFactor() functions and make callers use Document::deviceScaleFactor() when accessible.
        https://bugs.webkit.org/show_bug.cgi?id=129137

        Reviewed by Simon Fraser.

        No change in behavior.

        * editing/DeleteButtonController.cpp:
        (WebCore::DeleteButtonController::createDeletionUI):
        * page/Page.cpp:
        * page/Page.h:
        * platform/graphics/GraphicsContext.cpp:
        (WebCore::GraphicsContext::GraphicsContext):
        * platform/graphics/GraphicsContext.h:
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::platformInit):
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintFillLayerExtended):
        (WebCore::RenderBoxModelObject::drawBoxSideFromPath):
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::imageSizeForError):
        (WebCore::RenderImage::paintReplaced):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::drawPlatformResizerImage):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::drawLineForBoxSide):
        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::paintProgressBar):
        * rendering/svg/SVGRenderingContext.cpp:
        (WebCore::SVGRenderingContext::calculateTransformationToOutermostCoordinateSystem):

2014-02-20  David Kilzer  <ddkilzer@apple.com>

        Stop generating Objective-C bindings for the SVG DOM
        <http://webkit.org/b/129107>

        Reviewed by Timothy Hatcher.

        Bug 114076 stopped compiling the Objective-C bindings for the
        SVG DOM, but we continued to generate the header and source
        files after that landed in r147822.  This patch also stops
        generating the unused header and source files.

        * DerivedSources.make:
        - Split BINDING_IDLS into NON_SVG_BINDING_IDLS and
          SVG_BINDING_IDLS so that they may operated on separately.
        - Define BINDING_IDLS again as the full list of IDL files.
        - Rename DOM_CLASSES to JS_DOM_CLASSES so that JavaScript
          bindings are still generated for all IDL files.
        - Add OBJC_DOM_CLASSES so that Objective-C bindings are only
          generated for non-SVG IDL files.

        * bindings/scripts/CodeGeneratorObjC.pm:
        (GetBaseClass):
        (GetPropertyAttributes):
        (AddIncludesForType):
        (GenerateHeader):
        (GenerateImplementation):
        - Remove support for SVG classes.

2014-02-20  Simon Fraser  <simon.fraser@apple.com>

        RenderBox::updateShapeOutsideInfoAfterStyleChange shows up on profiles
        https://bugs.webkit.org/show_bug.cgi?id=129075

        Reviewed by Dean Jackson.

        updateShapeOutsideInfoAfterStyleChange() showed up on profiles in content
        with no shapes. Avoid calling this if no style has shapeOutside().

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::styleDidChange):

2014-02-20  ChangSeok Oh  <changseok.oh@collabora.com>

        Remove unused chromium stuff in Extensions3D
        https://bugs.webkit.org/show_bug.cgi?id=129086

        Reviewed by Anders Carlsson.

        Remove GL_CHROMIUM_copy_texture and GL_CHROMIUM_flipy interfaces since they are used nowhere.

        No new tests since no functionality changed.

        * platform/graphics/Extensions3D.h:
        * platform/graphics/opengl/Extensions3DOpenGL.cpp:
        * platform/graphics/opengl/Extensions3DOpenGL.h:
        * platform/graphics/opengl/Extensions3DOpenGLES.cpp:
        * platform/graphics/opengl/Extensions3DOpenGLES.h:

2014-02-20  Joseph Pecoraro  <pecoraro@apple.com>

        [iOS] Assert / crash trying to draw empty checked input
        https://bugs.webkit.org/show_bug.cgi?id=129138

        Reviewed by Simon Fraser.

        Test: fast/forms/checkbox-empty-size.html

        * rendering/RenderThemeIOS.mm:
        (WebCore::shortened):
        Avoid a divide by 0, but checking for the condition upfront.

2014-02-20  Benjamin Poulain  <bpoulain@apple.com>

        Start fixing the view states driven by the WKScrollView
        https://bugs.webkit.org/show_bug.cgi?id=129140

        Reviewed by Tim Horton and Simon Fraser.

        * platform/graphics/ca/mac/TileController.mm:
        (WebCore::TileController::scaledExposedRect):
        That comment was more confusing than helping. FrameView-relative coordinates should not need
        scaling.

2014-02-20  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        Start to use std::unique_ptr for DragImageLoader
        https://bugs.webkit.org/show_bug.cgi?id=129078

        Reviewed by Ryosuke Niwa.

        As a step to use std::unique_ptr, this patch replace uses of OwnPtr and PassOwnPtr
        in the DragImageLoader class with std::unique_ptr. Besides DragImageLoader is set to
        non-copyable class.

        * dom/Clipboard.cpp:
        (WebCore::Clipboard::setDragImage):
        * dom/Clipboard.h:

2014-02-20  Brady Eidson  <beidson@apple.com>

        Move the image controls setting to Settings.in
        https://bugs.webkit.org/show_bug.cgi?id=129126

        Reviewed by Tim Horton.

        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        * page/Settings.in:

2014-02-20  Brady Eidson  <beidson@apple.com>

        Add very basic image control rendering
        https://bugs.webkit.org/show_bug.cgi?id=129080

        Reviewed by Tim Horton.

        Test: fast/images/image-controls-basic.html

        This patch is groundwork that adds a very basic image control that can render on top of images.

        * dom/Node.h:
        (WebCore::Node:: isImageControlsRootElement): Returns false, unless you are an ImageControls object.
        * html/HTMLAttributeNames.in:

        Teach HTMLImageElement how to understand an experimental attribute to install controls,
        how to actually build the DOM to attach to the shadow root, how to tear that DOM down,
        and how to make sure that Renderers are created for that DOM:
        * html/HTMLImageElement.cpp:
        (WebCore::HTMLImageElement::HTMLImageElement):
        (WebCore::HTMLImageElement::parseAttribute):
        (WebCore::HTMLImageElement::didAttachRenderers):
        (WebCore::HTMLImageElement::updateImageControls):
        (WebCore::HTMLImageElement::createImageControls):
        (WebCore::HTMLImageElement::destroyImageControls):
        (WebCore::HTMLImageElement::hasImageControls):
        (WebCore::HTMLImageElement::childShouldCreateRenderer):
        * html/HTMLImageElement.h:
        (WebCore::HTMLImageElement::hasShadowControls): For RenderImage to query when it is constructed. 

        Add a generic, platform independent ImageControls root element that does nothing:
        * html/shadow/ImageControlsRootElement.cpp: Added.
        (WebCore::ImageControlsRootElement::maybeCreate):
        (WebCore::ImageControlsRootElement::ImageControlsRootElement):
        (WebCore::ImageControlsRootElement::~ImageControlsRootElement):
        * html/shadow/ImageControlsRootElement.h: Added.

        Add a Mac-specific ImageControls root element that renders a 20x20 red box (for now):
        * html/shadow/mac/ImageControlsRootElementMac.cpp: Added.
        (WebCore::ImageControlsRootElementMac::ImageControlsRootElementMac):
        (WebCore::ImageControlsRootElementMac::~ImageControlsRootElementMac):
        (WebCore::ImageControlsRootElement::maybeCreate):
        (WebCore::ImageControlsRootElementMac::maybeCreate):
        * html/shadow/mac/ImageControlsRootElementMac.h: Added.

        Since much of the RenderMedia::layout() method is now required for RenderImage as well,
        move the logic to RenderImage. The extra work is controlled by a bool flag that will always
        be set for RenderMedias but will only be set for certain RenderImages:
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::RenderImage):
        (WebCore::RenderImage::canHaveChildren):
        (WebCore::RenderImage::layout):
        (WebCore::RenderImage::layoutShadowControls):
        * rendering/RenderImage.h:
        (WebCore::RenderImage::setHasShadowControls):
        (WebCore::RenderImage::shadowControlsNeedCustomLayoutMetrics):

        * rendering/RenderMedia.cpp:
        (WebCore::RenderMedia::RenderMedia):
        * rendering/RenderMedia.h:
        (WebCore::RenderMedia::shadowControlsNeedCustomLayoutMetrics):

        * WebCore.xcodeproj/project.pbxproj:

== Rolled over to ChangeLog-2014-02-20 ==
