2014-05-06  Alex Christensen  <achristensen@webkit.org>

        Removed unnecessary notImplemented.h includes.
        https://bugs.webkit.org/show_bug.cgi?id=132587

        Reviewed by Anders Carlsson.

        * Modules/webdatabase/Database.cpp:
        * accessibility/AccessibilityObject.cpp:
        * bindings/js/Dictionary.h:
        * bindings/js/SerializedScriptValue.cpp:
        * html/HTMLMediaSession.cpp:
        * html/ImageDocument.cpp:
        * html/parser/HTMLFormattingElementList.cpp:
        * loader/appcache/ApplicationCacheStorage.cpp:
        * page/mac/EventHandlerMac.mm:
        * platform/NotImplemented.cpp:
        * platform/audio/ios/MediaSessionManagerIOS.mm:
        * platform/graphics/avfoundation/objc/MediaSourcePrivateAVFObjC.mm:
        * platform/graphics/mac/GraphicsContext3DMac.mm:
        * platform/graphics/opengl/GraphicsContext3DOpenGLCommon.cpp:
        * platform/ios/PlatformScreenIOS.mm:
        * platform/mac/PlatformScreenMac.mm:
        * platform/mac/WidgetMac.mm:
        * platform/mediastream/MediaStreamTrackPrivate.cpp:
        * platform/mediastream/mac/AVCaptureDeviceManager.mm:
        * platform/mediastream/mac/AVMediaCaptureSource.mm:
        * rendering/RenderGrid.cpp:
        * workers/SharedWorkerGlobalScope.cpp:
        * workers/WorkerGlobalScope.cpp:
        * workers/WorkerMessagingProxy.cpp:
        Removed notImplemented from list of includes.

2014-05-06  Enrica Casucci  <enrica@apple.com>

        Unreviewed build fix after http://trac.webkit.org/changeset/168364

        * rendering/RenderLineBreak.cpp:

2014-05-06  Christophe Dumez  <ch.dumez@samsung.com>

        [HTML] Default argument to HTMLTableSectionElement.insertRow() should be -1
        https://bugs.webkit.org/show_bug.cgi?id=132570

        Reviewed by Darin Adler.

        HTMLTableSectionElement.insertRow()'s argument default value should be -1, not
        0, as per the specification:
        http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#the-tbody-element

        The new behavior matches the one of Firefox 29 and IE11, and soon Blink:
        https://code.google.com/p/chromium/issues/detail?id=369803

        Test: fast/dom/HTMLTableSectionElement/insertRow-default-argument.html

        * html/HTMLTableSectionElement.h:
        * html/HTMLTableSectionElement.idl:

2014-05-05  Enrica Casucci  <enrica@apple.com>

        REGRESSION(r155957): Selection rects are incorrect when the selection contains BR elements.
        https://bugs.webkit.org/show_bug.cgi?id=132596
        <rdar://problem/16692206>

        Reviewed by Antti Koivisto.

        This patch adds an implementation of collectSelectionRects to RenderLineBreak.
        It uses the same logic used by RenderText to compute and annotate the returned rect
        which is computed, like the caret rect, using information from the rootline box.

        * rendering/RenderLineBreak.cpp:
        (WebCore::RenderLineBreak::collectSelectionRects):
        * rendering/RenderLineBreak.h:

2014-05-06  Andrei Bucur  <abucur@adobe.com>

        [CSS Regions] Optimize the number of regions invalidations
        https://bugs.webkit.org/show_bug.cgi?id=132611

        Reviewed by David Hyatt.

        It is possible to invalidate the region chain of a flow thread
        during the layout of the region when its height is not final.

        This patch places the check after the height of the region
        is determined, reducing the number of invalidations.

        Tests: Less invalidations and repaints in the repaint tests for
        the flow threads.

        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::updateLogicalHeight):
        * rendering/RenderNamedFlowFragment.cpp:
        (WebCore::RenderNamedFlowFragment::layoutBlock):
        (WebCore::RenderNamedFlowFragment::invalidateRegionIfNeeded):
        * rendering/RenderNamedFlowFragment.h:

2014-05-03  Sam Weinig  <sam@webkit.org>

        [Extended Background] Respect repeat-x/repeat-y when creating margin tiles
        https://bugs.webkit.org/show_bug.cgi?id=132534

        Reviewed by Beth Dakin.

        If the background image that is causing margin tiles only repeats in dimension only create
        the tiles in that dimension.

        * page/FrameView.cpp:
        (WebCore::FrameView::updateExtendBackgroundIfNecessary):
        (WebCore::FrameView::calculateExtendedBackgroundMode):
        (WebCore::FrameView::updateTilesForExtendedBackgroundMode):
        (WebCore::FrameView::setBackgroundExtendsBeyondPage): Deleted.
        (WebCore::FrameView::needsExtendedBackgroundRectForPainting): Deleted.
        (WebCore::FrameView::setHasExtendedBackgroundRectForPainting): Deleted.
        * page/FrameView.h:
        * page/Settings.cpp:
        (WebCore::Settings::setBackgroundShouldExtendBeyondPage):
        * platform/graphics/TiledBacking.h:
        * platform/graphics/ca/mac/TileController.h:
        * platform/graphics/ca/mac/TileController.mm:
        (WebCore::TileController::hasHorizontalMargins):
        (WebCore::TileController::hasVerticalMargins):
        * rendering/RenderElement.cpp:
        (WebCore::RenderElement::styleWillChange):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::setTiledBackingHasMargins):
        * rendering/RenderLayerBacking.h:

2014-05-06  Chris Fleizach  <cfleizach@apple.com>

        AX: VoiceOver does not announce text changes for content editable regions in Safari
        https://bugs.webkit.org/show_bug.cgi?id=132577

        Reviewed by Mario Sanchez Prada.

        When text or children are changed inside of a contenteditable region, we need to 
        convert those actions into AXValueChange notifications.

        Test: accessibility/content-editable-set-inner-text-generates-axvalue-notification.html

        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::childrenChanged):
        (WebCore::AccessibilityNodeObject::hasContentEditableAttributeSet): Deleted.
        * accessibility/AccessibilityNodeObject.h:
        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::hasContentEditableAttributeSet):
        * accessibility/AccessibilityObject.h:
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::textChanged):

2014-05-06  Dirk Schulze  <krit@webkit.org>

        [SVG2] Share "on"- event attributes with HTMLElement
        https://bugs.webkit.org/show_bug.cgi?id=132604

        Reviewed by Mihnea Ovidenie.

        Share "on" event attribute parsing between SVGElement and HTMLElement.

        Tests: fast/dom/script-tests/event-attribute-availability.js:

        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::populateEventNameForAttributeLocalNameMap):
        (WebCore::populateEventNameForAttributeLocalNameMap): Deleted.
        * html/HTMLElement.h: Make populateEventNameForAttributeLocalNameMap
            public for use in SVGElement.
        * svg/SVGElement.cpp: Use HTMLElement code to parse "on" event
            attributes.
        (WebCore::SVGElement::parseAttribute):

2014-05-05  Zan Dobersek  <zdobersek@igalia.com>

        [Soup] Use std::unique_ptr<char[]> for the read buffer in SocketStreamHandle
        https://bugs.webkit.org/show_bug.cgi?id=132559

        Reviewed by Carlos Garcia Campos.

        Manage the read buffer array through a std::unique_ptr<char[]> object.
        This avoids handling with the raw pointer and also ensures that the memory
        allocated with the new[] operator is deleted with the delete[] operator,
        a problem exposed by the AddressSanitizer in WebSocket tests.

        * platform/network/soup/SocketStreamHandle.h:
        * platform/network/soup/SocketStreamHandleSoup.cpp:
        (WebCore::SocketStreamHandle::SocketStreamHandle):
        (WebCore::SocketStreamHandle::connected):
        (WebCore::SocketStreamHandle::readBytes):
        (WebCore::SocketStreamHandle::platformClose):

2014-05-05  Dirk Schulze  <krit@webkit.org>

        Adapt inline SVG sizing behavior to Firefox and Blink
        https://bugs.webkit.org/show_bug.cgi?id=132569

        Reviewed by Dean Jackson.

        This patch is ported from Blink CR 308992. Thanks to David Vest for helping
        with back porting his Blink patch. From the commit message:

        "The basis of this change is to map explicit width and height
        attributes to CSS properties, essentially promoting them to
        presentation attributes. Note that implicit "100%" width and height
        are not mapped.
        
        This enables us to remove the concept of "percentage intrinsic size"
        and rely on normal CSS rules to resolve percentage values.
        
        The change has been approved by the SVG WG and the spec is being
        updated. Minutes here:
        
        http://www.w3.org/2014/04/07-svg-minutes.html#item03"

        The new model was indeed approved by the SVG WG and is basically following
        the CSS 2.1 model for replaced elements.

        With this patch WebKit, Firefox and Blink have the same behavior for inline SVG.
        This is the first successful approach to unify the sizing behavior of SVG
        across UAs.

        Tests: svg/as-object/sizing/svg-in-object-placeholder-height-auto.html
               svg/as-object/sizing/svg-in-object-placeholder-height-fixed.html
               svg/as-object/sizing/svg-in-object-placeholder-height-percentage.html
               svg/in-html/sizing/svg-inline.html

        * css/svg.css: Root SVG elements still need to be sized with height: 100% and
            width: 100%. This is necessary since width and height are presentation
            attributes now.
        (svg:root):
        * rendering/RenderBox.h:
        (WebCore::RenderBox::computeIntrinsicRatioInformation): Remove all special
            behavior for intrinsic and percentage based sizes in SVG. This simplifies and
            unifies the code a lot. Most of the logic that is used is in RenderBox and
            RenderReplaced now. RenderSVGRoot was cleaned up a lot and is much lighter. 
            And so it SVGSVGElement.
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::hasAutoHeightOrContainingBlockWithAutoHeight):
        (WebCore::RenderBoxModelObject::calculateImageIntrinsicDimensions):
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::computeIntrinsicRatioInformation):
        * rendering/RenderImage.h:
        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::computeAspectRatioInformationForRenderBox):
        (WebCore::RenderReplaced::computeIntrinsicRatioInformation):
        (WebCore::RenderReplaced::computeReplacedLogicalWidth):
        (WebCore::RenderReplaced::computeReplacedLogicalHeight):
        (WebCore::RenderReplaced::computePreferredLogicalWidths):
        * rendering/RenderReplaced.h:
        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::computeIntrinsicRatioInformation):
        (WebCore::RenderSVGRoot::computeReplacedLogicalWidth):
        (WebCore::RenderSVGRoot::computeReplacedLogicalHeight):
        (WebCore::RenderSVGRoot::hasRelativeDimensions):
        (WebCore::RenderSVGRoot::hasRelativeIntrinsicLogicalWidth): Deleted.
        (WebCore::RenderSVGRoot::hasRelativeLogicalHeight): Deleted.
        * rendering/svg/RenderSVGRoot.h:
        * svg/SVGElement.h:
        (WebCore::SVGElement::invalidateSVGPresentationAttributeStyle):
        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::isPresentationAttribute):
        (WebCore::SVGSVGElement::collectStyleForPresentationAttribute):
        (WebCore::SVGSVGElement::svgAttributeChanged):
        (WebCore::SVGSVGElement::currentViewportSize):
        (WebCore::SVGSVGElement::hasIntrinsicWidth):
        (WebCore::SVGSVGElement::hasIntrinsicHeight):
        (WebCore::SVGSVGElement::intrinsicWidth):
        (WebCore::SVGSVGElement::intrinsicHeight):
        (WebCore::SVGSVGElement::widthAttributeEstablishesViewport): Deleted.
        (WebCore::SVGSVGElement::heightAttributeEstablishesViewport): Deleted.
        * svg/SVGSVGElement.h:
        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::containerSize):
        * xml/XMLErrors.cpp: If an error occurs in a stand alone SVG file, we create
            an XHTML document with the error message and append the SVG file.
            This SVG file now follows the CSS sizing behavior as inline SVG.
            Therefore, we need to set width and height to 100% explicitly.
        (WebCore::XMLErrors::insertErrorMessageBlock):

2014-05-05  Ryuan Choi  <ryuan.choi@samsung.com>

        [EFL] REGRESSION(167145): JavaScript media controls are broken
        https://bugs.webkit.org/show_bug.cgi?id=131573

        Reviewed by Brent Fulgham.

        * PlatformEfl.cmake: Add the localized strings file to the list of user agent scripts.
        * platform/efl/RenderThemeEfl.cpp:
        (WebCore::RenderThemeEfl::mediaControlsScript): Include the localized strings file in the script body.

2014-05-05  Jeremy Jones  <jeremyj@apple.com>

        Implement scan backward and forward in video fullscreen.
        https://bugs.webkit.org/show_bug.cgi?id=132517

        Reviewed by Simon Fraser.

        Implement scanning forward and backward. This implements methods in 
        WebAVPlayerController and forwards them through WebVideoFullscreenModelMediaElement
        and on to HTMLMediaElement.

        * WebCore.exp.in: necessary exports.
        * platform/ios/WebVideoFullscreenInterfaceAVKit.mm:
        (-[WebAVPlayerController seekToTime:]):
        Use fastSeek in this case.
        (-[WebAVPlayerController canScanForward]): If you can play, you can scan.
        (+[WebAVPlayerController keyPathsForValuesAffectingCanScanForward]): ditto
        (-[WebAVPlayerController beginScanningForward:]): ditto
        (-[WebAVPlayerController endScanningForward:]): ditto
        (-[WebAVPlayerController canScanBackward]): If you can play, you can scan.
        (+[WebAVPlayerController keyPathsForValuesAffectingCanScanBackward]): ditto
        (-[WebAVPlayerController beginScanningBackward:]): ditto
        (-[WebAVPlayerController endScanningBackward:]): ditto
        (-[WebAVPlayerController canSeekToBeginning]):
        This looks at seekableRanges to determine if any seeking is possible.
        (+[WebAVPlayerController keyPathsForValuesAffectingCanSeekToBeginning]):
        depends on seekableRanges.
        (-[WebAVPlayerController seekToBeginning:]): seek to -ininity
        (-[WebAVPlayerController canSeekToEnd]):
        This looks at seekableRanges to determine if any seeking is possible.
        (+[WebAVPlayerController keyPathsForValuesAffectingCanSeekToEnd]):
        depends on seekableRanges.
        (-[WebAVPlayerController seekToEnd:]): seek to INFINITY.
        * platform/ios/WebVideoFullscreenModel.h:
        Add 4 new functions.
        * platform/ios/WebVideoFullscreenModelMediaElement.h:
        ditto
        * platform/ios/WebVideoFullscreenModelMediaElement.mm:
        (WebVideoFullscreenModelMediaElement::fastSeek): forwards to HTMLMediaEelement
        (WebVideoFullscreenModelMediaElement::beginScanningForward): forwards to HTMLMediaEelement
        (WebVideoFullscreenModelMediaElement::beginScanningBackward): forwards to HTMLMediaEelement
        (WebVideoFullscreenModelMediaElement::endScanning): forwards to HTMLMediaEelement

2014-05-05  Benjamin Poulain  <bpoulain@apple.com>

        [iOS][WK2] Prefetch DNS hostnames on tap highlight
        https://bugs.webkit.org/show_bug.cgi?id=132509

        Reviewed by Alexey Proskuryakov.

        * WebCore.exp.in:
        * dom/Element.cpp:
        * dom/Element.h:
        (WebCore::Element::absoluteLinkURL()):

2014-05-05  Simon Fraser  <simon.fraser@apple.com>

        [iOS WK2] Flickery scrolling inside overflow-scrolling: touch
        https://bugs.webkit.org/show_bug.cgi?id=132591
        <rdar://problem/16760466>

        Reviewed by Tim Horton.

        Avoid triggering layer tree commits that touch the layer's boundsOrigin
        while the user is scrolling in the UI process.
        
        Fix the WKOverflowScrollViewDelegate to pass along an "inUserInteration"
        flag to the ScrollingTree to say that we're in the middle of a user interaction
        (and also to send a final non-interactive update). That gets passed along
        to the web process, and turned into "SyncScrollingLayerPosition" update.
        AsyncScrollingCoordinator::updateScrollPositionAfterAsyncScroll() consults
        this, and uses it to set a flag on the ScrollableArea to say that the scroll
        is a user scroll.
        
        RenderLayerBacking then makes use of this (in existing code, shared with WK1)
        to avoid triggering layer bounds setting. Instead, it now just calls syncBoundsOrigin(),
        which updates the GraphicsLayer without touching platform layers. This is necessary
        so that GraphicsLayer geometry is up-to-date (used for tiled layer visibility
        computations).
        
        Finally, a hack in GraphicsLayerCA::computeVisibleRect() is conditionalized
        for WebKit1 by checking the type of platform layer.

        * WebCore.exp.in:
        * page/scrolling/AsyncScrollingCoordinator.cpp:
        (WebCore::AsyncScrollingCoordinator::updateScrollPositionAfterAsyncScroll):
        * page/scrolling/ScrollingTree.cpp:
        (WebCore::ScrollingTree::scrollPositionChangedViaDelegatedScrolling):
        * page/scrolling/ScrollingTree.h:
        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::syncBoundsOrigin):
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::computeVisibleRect):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):

2014-05-05  Alexey Proskuryakov  <ap@apple.com>

        Stop using BlobData on client side
        https://bugs.webkit.org/show_bug.cgi?id=132582

        Reviewed by Sam Weinig.

        Blob registration now uses either a single file path, or a vector of much simpler
        BlobPart objects, not an array with arbitrarily sliced blobs or files, which can't happen.

        * Modules/websockets/WebSocket.cpp:(WebCore::WebSocket::didReceiveBinaryData):
        Use a new simpler Blob constructor.

        * WebCore.xcodeproj/project.pbxproj: Added BlobPart, removed BlobRegistrationData.

        * bindings/js/JSBlobCustom.cpp: (WebCore::JSBlobConstructor::constructJSBlob):
        Use Vector<BlobPart> instead of BlobData (1 line of code instead of 5).

        * dom/DataTransfer.cpp: (WebCore::DataTransfer::hasFileOfType): Updated for
        File::contentTypeFromFilePathOrName rename.

        * fileapi/Blob.cpp: (WebCore::Blob::Blob):
        * fileapi/Blob.h:
        (WebCore::Blob::create):
        (WebCore::Blob::deserialize):
        * fileapi/File.cpp:
        (WebCore::File::File):
        (WebCore::File::contentTypeFromFilePathOrName):
        (WebCore::createBlobDataForFileWithType): Deleted.
        (WebCore::createBlobDataForFile): Deleted.
        (WebCore::createBlobDataForFileWithName): Deleted.
        (WebCore::File::contentTypeFromFilePath): Deleted.
        * fileapi/File.h: (WebCore::File::deserialize): Deleted.
        Added and updated constructors to not use BlobData. Changed special case constructors
        to use name tags instead of non-enforced comments.

        * fileapi/ThreadableBlobRegistry.h:
        * fileapi/ThreadableBlobRegistry.cpp:
        (WebCore::BlobRegistryContext::BlobRegistryContext): Updated with new data members
        that were split out of BlobData.
        (WebCore::ThreadableBlobRegistry::registerFileBlobURL): Added.
        (WebCore::ThreadableBlobRegistry::registerBlobURL): Updated to pass Content-Type
        explicitly, as it's no longer hidden in BlobData.

        * fileapi/WebKitBlobBuilder.h:
        * fileapi/WebKitBlobBuilder.cpp:
        (WebCore::BlobBuilder::append):
        (WebCore::BlobBuilder::finalize):
        (WebCore::BlobBuilder::appendBytesData): Deleted.
        Updated to use BlobPart. There is no longer any need to special case Files,
        the registry takes care of that.

        * platform/network/BlobData.h:
        * platform/network/BlobData.cpp:
        (WebCore::BlobDataItem::detachFromCurrentThread): Deleted.
        (WebCore::BlobData::detachFromCurrentThread): Deleted.
        BlobData will only be used on main thread by the registry.

        * platform/network/BlobPart.h: Added. A new class to encapsulate a list of blobs
        that are combined into a new blob, as exposed to JS via Blob constructor.

        * platform/network/BlobRegistry.h:
        * platform/network/BlobRegistryImpl.cpp:
        (WebCore::BlobRegistryImpl::registerFileBlobURL):
        (WebCore::BlobRegistryImpl::registerBlobURL):
        * platform/network/BlobRegistryImpl.h:
        Updated for the new registration methods. We no longer have arbitrary BlobDatas
        coming in.

        * platform/network/FormData.cpp: Don't include BlobData for now (but really,
        BlobStorageData is the same thing, and they will be merged soon).
        Unfortunately, FormData is used by both client and registry side, and there is
        no clear delimitation at the time.
 
        * xml/XMLHttpRequest.cpp: (WebCore::XMLHttpRequest::responseBlob): Use the new simpler
        way to create a Blob.

2014-05-05  Benjamin Poulain  <benjamin@webkit.org>

        Clean up Image Document and tweak the layout and viewport
        https://bugs.webkit.org/show_bug.cgi?id=132552

        Reviewed by Sam Weinig.

        The #ifdef in every function was making quite a mess. A lot of that code does
        not make sense on iOS.

        This patch make a clean split between mouse related stuff and iOS.

        Also:
        -Change the viewport to be only width based, and avoid scaling in portrait.
        -Center the image horizontally in the view.

        * html/ImageDocument.cpp:
        (WebCore::ImageDocument::ImageDocument):
        (WebCore::ImageDocument::createDocumentStructure):
        (WebCore::ImageDocument::imageUpdated):
        (WebCore::ImageDocument::scale):
        (WebCore::ImageDocument::resizeImageToFit):
        (WebCore::ImageDocument::imageFitsInWindow):
        (WebCore::ImageDocument::windowSizeChanged):
        (WebCore::ImageDocument::imageClicked):
        * html/ImageDocument.h:

2014-05-05  Beth Dakin  <bdakin@apple.com>

        Need a delegate that informs the UI process when the page's pin state changes
        https://bugs.webkit.org/show_bug.cgi?id=132583
        -and corresponding-
        <rdar://problem/16806231>

        Reviewed by Anders Carlsson.

        We should default all of these pin-state value to true.
        * page/scrolling/ScrollingTree.cpp:
        (WebCore::ScrollingTree::ScrollingTree):

2014-05-05  Christophe Dumez  <ch.dumez@samsung.com>

        Named element cache can become invalid during HTMLCollection::updateNamedElementCache()
        https://bugs.webkit.org/show_bug.cgi?id=132575

        Reviewed by Ryosuke Niwa.

        Make sure the named element cache object stays valid in
        HTMLCollection::updateNamedElementCache() while it is populating it.

        The method was previously creating and setting the cache first, and then start
        traversing the DOM tree to populate it. As a consequence, hasNamedElementCache()
        would start returning true before the cache is actually populated.
        The issue is that finding matches in the DOM tree can cause
        HTMLCollection::invalidateCache() to be called under certain circumstances and
        thus the named element cache object can become invalid while
        updateNamedElementCache() is populating it.

        To avoid the issue, this patch updates updateNamedElementCache() so that the
        named element cache map is set *after* traversing the DOM tree. This way,
        hasNamedElementCache() returns false while the cache is being populated and
        there is no chance of it being invalidated too early.

        Test: fast/dom/htmlcollection-selectedOptions-namedItem-crash.html

        * html/HTMLCollection.cpp:
        (WebCore::HTMLCollection::updateNamedElementCache):
        * html/HTMLCollection.h:
        (WebCore::HTMLCollection::setNameItemCache):
        (WebCore::HTMLCollection::createNameItemCache): Deleted.
        * html/HTMLFormControlsCollection.cpp:
        (WebCore::HTMLFormControlsCollection::updateNamedElementCache):

2014-05-05  Benjamin Poulain  <benjamin@webkit.org>

        [iOS][WK2] Special case ViewGestureGeometryCollector::collectGeometryForSmartMagnificationGesture() for image documents
        https://bugs.webkit.org/show_bug.cgi?id=132553

        Reviewed by Tim Horton.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * html/ImageDocument.cpp:
        (WebCore::ImageDocument::imageElement):
        * html/ImageDocument.h:

2014-05-05  Ion Rosca  <rosca@adobe.com>

        [CSS Blending] Webkit-blend-mode fails for accelerated parent with overflow:hidden
        https://bugs.webkit.org/show_bug.cgi?id=126160

        When the isolating layer has overflow:hidden, it will create a descendant clipping layer
        (m_childContainmentLayer), which will restrict the bleding layer to reading the backdrop
        from the isolating layer.
        The solution in this patch is to forbid the isolating layer to create a descendant clipping
        layer and make all the children to get their own ancestor clipping layers instead.

        Reviewed by Dean Jackson.

        Tests: css3/compositing/blend-mode-accelerated-parent-overflow-hidden.html
               css3/compositing/blend-mode-clip-accelerated-blending-canvas.html
               css3/compositing/blend-mode-clip-accelerated-blending-child.html
               css3/compositing/blend-mode-clip-accelerated-blending-double.html
               css3/compositing/blend-mode-clip-accelerated-blending-with-siblings.html
               css3/compositing/blend-mode-clip-accelerated-transformed-blending.html
               css3/compositing/blend-mode-clip-rect-accelerated-blending.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        when the compositing ancestor isolates blending we take it into account for computing
        the clipping rect for this layer, because it was not allowed to create the descendant
        clipping layer. 
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::clippedByAncestor):
        when the compositing ancestor isolates blending we decide if a layer is clipped by ancestor
        by computing the clipping rect taking into account all the ancestors up to and including
        the compositing ancestor.
        (WebCore::RenderLayerCompositor::clipsCompositingDescendants):
        if a layer isolates blending, it is not allowed to create a descendant clipping layer.

2014-05-05  Dirk Schulze  <krit@webkit.org>

        AX: tabindex support in SVG2
        https://bugs.webkit.org/show_bug.cgi?id=130212

        Reviewed by Chris Fleizach.

        The patch is mainly based on a patch for Blink by Erik Dahlström.
        https://src.chromium.org/viewvc/blink?revision=172964&view=revision

        It adds support for tabindex to SVG by reusing the HTML code.

        Spec: https://svgwg.org/svg2-draft/interact.html#sequential-focus-navigation-and-the-tabindex-attribute
        IDL attribute: https://svgwg.org/svg2-draft/types.html#__svg__SVGElement__tabIndex

        Test: svg/custom/tabindex-order.html

        * dom/Element.cpp:
        (WebCore::Element::setTabIndex): Moved from HTMLElement and shared with all elements.
        * dom/Element.h:
        * html/HTMLAnchorElement.cpp: Remove outdated comment.
        (WebCore::HTMLAnchorElement::canStartSelection):
        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::setTabIndex): Deleted.
        * html/HTMLElement.h:
        * svg/SVGAElement.cpp: Uses the same logic as HTMLAnchorElement now.
        (WebCore::SVGAElement::tabIndex):
        (WebCore::SVGAElement::supportsFocus):
        (WebCore::SVGAElement::isMouseFocusable):
        (WebCore::SVGAElement::isKeyboardFocusable):
        (WebCore::SVGAElement::canStartSelection):
        * svg/SVGAElement.h:
        * svg/SVGCircleElement.h:
        * svg/SVGClipPathElement.h:
        * svg/SVGDefsElement.h:
        * svg/SVGElement.cpp:
        (WebCore::SVGElement::tabIndex): Return -1 if element can not be focused.
        (WebCore::SVGElement::parseAttribute):
        (WebCore::SVGElement::isMouseFocusable):
        (WebCore::SVGElement::isKeyboardFocusable): Deleted. Use function on Element.
        * svg/SVGElement.h:
        * svg/SVGElement.idl:
        * svg/SVGEllipseElement.h:
        * svg/SVGGElement.h:
        * svg/SVGGraphicsElement.h: Remove supportsFocus() from inheriting functions.
            Don't just return true. SVG elements should not be focusable by default.
            Instead check if tabindex was set explicitly.
        * svg/SVGImageElement.h:
        * svg/SVGLineElement.h:
        * svg/SVGPathElement.h:
        * svg/SVGPolyElement.h:
        * svg/SVGRectElement.h:
        * svg/SVGSVGElement.h:
        * svg/SVGSwitchElement.h:
        * svg/SVGSymbolElement.h:
        * svg/SVGTextElement.h:

2014-05-05  Jeremy Jones  <jeremyj@apple.com>

        Implement beginScrubbing and endScrubbing for video fullscreen.
        https://bugs.webkit.org/show_bug.cgi?id=132520

        Reviewed by Eric Carlson.

        Plumb through beginScrubbing and endScrubbing from AVKit down to HTMLMediaElement.
        This keeps the playback state consistent while scrubbing and allows playback state
        to return to the original state when scrubbing is complete.

        * WebCore.exp.in:
        * platform/ios/WebVideoFullscreenInterfaceAVKit.mm:
        (-[WebAVPlayerController beginScrubbing:]):
        (-[WebAVPlayerController endScrubbing:]):
        * platform/ios/WebVideoFullscreenModel.h:
        * platform/ios/WebVideoFullscreenModelMediaElement.h:
        * platform/ios/WebVideoFullscreenModelMediaElement.mm:
        (WebVideoFullscreenModelMediaElement::beginScrubbing):
        (WebVideoFullscreenModelMediaElement::endScrubbing):

2014-05-05  Tim Horton  <timothy_horton@apple.com>

        More long hangs under IOSurfacePool::evict
        https://bugs.webkit.org/show_bug.cgi?id=132576
        <rdar://problem/16769469>

        Reviewed by Simon Fraser.

        * platform/graphics/cg/IOSurfacePool.cpp:
        (WebCore::IOSurfacePool::evict):
        If the pool is too full, we should be evicting in-use surfaces
        even if the size of the in-use surfaces has dropped below maximumInUseBytes,
        otherwise we can get stuck in an infinite loop with 0 cached surfaces
        and 1+ in-use surfaces.

2014-05-05  Radu Stavila  <stavila@adobe.com>

        [CSS Regions] Remove regionLayoutUpdate event
        https://bugs.webkit.org/show_bug.cgi?id=132564

        Reviewed by Simon Fraser.

        The regionLayoutUpdate event was removed from the regions spec and was replaced by two other events: 
        regionOversetChange and regionFragmentChange.

        No new tests needed, this patch removes a feature.

        * dom/EventNames.h:
        * dom/WebKitNamedFlow.cpp:
        (WebCore::WebKitNamedFlow::dispatchRegionLayoutUpdateEvent): Deleted.
        * dom/WebKitNamedFlow.h:
        * inspector/InspectorCSSAgent.cpp:
        (WebCore::InspectorCSSAgent::resetNonPersistentData):
        (WebCore::InspectorCSSAgent::willRemoveNamedFlow):
        (WebCore::UpdateRegionLayoutTask::UpdateRegionLayoutTask): Deleted.
        (WebCore::UpdateRegionLayoutTask::scheduleFor): Deleted.
        (WebCore::UpdateRegionLayoutTask::unschedule): Deleted.
        (WebCore::UpdateRegionLayoutTask::reset): Deleted.
        (WebCore::UpdateRegionLayoutTask::timerFired): Deleted.
        (WebCore::InspectorCSSAgent::didUpdateRegionLayout): Deleted.
        (WebCore::InspectorCSSAgent::regionLayoutUpdated): Deleted.
        * inspector/InspectorCSSAgent.h:
        * inspector/InspectorInstrumentation.cpp:
        (WebCore::InspectorInstrumentation::didUpdateRegionLayoutImpl): Deleted.
        * inspector/InspectorInstrumentation.h:
        (WebCore::InspectorInstrumentation::didUpdateRegionLayout): Deleted.
        * inspector/protocol/CSS.json:
        * rendering/RenderNamedFlowFragment.cpp:
        (WebCore::RenderNamedFlowFragment::updateOversetState):
        * rendering/RenderNamedFlowThread.cpp:
        (WebCore::RenderNamedFlowThread::RenderNamedFlowThread):
        (WebCore::RenderNamedFlowThread::removeRegionFromThread):
        (WebCore::RenderNamedFlowThread::layout):
        (WebCore::RenderNamedFlowThread::dispatchRegionLayoutUpdateEventIfNeeded): Deleted.
        (WebCore::RenderNamedFlowThread::regionLayoutUpdateEventTimerFired): Deleted.
        * rendering/RenderNamedFlowThread.h:

2014-05-05  Rik Cabanier  <cabanier@adobe.com>

        Enhance IDL compiler so it supports unrestricted float and double
        https://bugs.webkit.org/show_bug.cgi?id=132460

        Reviewed by Dirk Schulze.

        Updated IDL compiler so it supports unrestricted types.
        Also updated the IDL files so they use unrestricted float and
        double.

        Tests:
        * canvas/philip/tests/2d.gradient.linear.nonfinite.html:
        * canvas/philip/tests/2d.gradient.object.invalidoffset.html:
        * canvas/philip/tests/2d.gradient.radial.nonfinite.html:
        * canvas/philip/tests/2d.imageData.get.nonfinite.html:
        * canvas/philip/tests/2d.imageData.put.nonfinite.html:
        * canvas/philip/tests/2d.missingargs.html:
        * fast/canvas/canvas-getImageData-invalid-expected.txt:
        * fast/canvas/canvas-putImageData-expected.txt:
        * fast/canvas/canvas-putImageData.js:

        * Modules/battery/BatteryManager.idl:
        * Modules/gamepad/Gamepad.idl:
        * Modules/geolocation/Coordinates.idl:
        * Modules/mediasource/MediaSource.idl:
        * Modules/mediasource/SourceBuffer.idl:
        * Modules/mediasource/VideoPlaybackQuality.idl:
        * Modules/mediastream/MediaSourceStates.idl:
        * Modules/proximity/DeviceProximityEvent.idl:
        * Modules/speech/SpeechGrammar.idl:
        * Modules/speech/SpeechGrammarList.idl:
        * Modules/speech/SpeechRecognitionAlternative.idl:
        * Modules/speech/SpeechSynthesisEvent.idl:
        * Modules/speech/SpeechSynthesisUtterance.idl:
        * Modules/webaudio/AnalyserNode.idl:
        * Modules/webaudio/AudioBuffer.idl:
        * Modules/webaudio/AudioBufferSourceNode.idl:
        * Modules/webaudio/AudioContext.idl:
        * Modules/webaudio/AudioListener.idl:
        * Modules/webaudio/AudioParam.idl:
        * Modules/webaudio/AudioProcessingEvent.idl:
        * Modules/webaudio/OfflineAudioContext.idl:
        * Modules/webaudio/OscillatorNode.idl:
        * Modules/webaudio/PannerNode.idl:
        * bindings/scripts/CodeGenerator.pm:
        * bindings/scripts/CodeGeneratorGObject.pm:
        (GetGValueTypeName):
        (GetGlibTypeName):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):
        (GenerateParametersCheck):
        (JSValueToNative):
        * bindings/scripts/CodeGeneratorObjC.pm:
        (GetObjCType):
        (GenerateHeader):
        * bindings/scripts/test/TestObj.idl:
        * bindings/scripts/test/TestTypedefs.idl:
        * css/CSSPrimitiveValue.idl:
        * css/WebKitCSSMatrix.idl:
        * dom/ClientRect.idl:
        * dom/DeviceMotionEvent.idl:
        * dom/DeviceOrientationEvent.idl:
        * dom/Document.idl:
        * dom/RequestAnimationFrameCallback.idl:
        * dom/Touch.idl:
        * dom/TransitionEvent.idl:
        * dom/WebKitAnimationEvent.idl:
        * dom/WebKitTransitionEvent.idl:
        * dom/WheelEvent.idl:
        * html/HTMLInputElement.idl:
        * html/HTMLMediaElement.idl:
        * html/HTMLMeterElement.idl:
        * html/HTMLProgressElement.idl:
        * html/MediaController.idl:
        * html/TextMetrics.idl:
        * html/TimeRanges.idl:
        * html/canvas/CanvasRenderingContext2D.idl:
        * html/canvas/WebGLRenderingContext.idl:
        * html/track/DataCue.idl:
        * html/track/TextTrackCue.idl:
        * html/track/VTTCue.idl:
        * html/track/VTTRegion.idl:
        * inspector/InspectorFrontendHost.idl:
        * inspector/ScriptProfile.idl:
        * inspector/ScriptProfileNode.idl:
        * page/DOMWindow.idl:
        * page/Performance.idl:
        * page/PerformanceEntry.idl:
        * page/PerformanceResourceTiming.idl:
        * page/SpeechInputResult.idl:
        * page/WebKitPoint.idl:
        * svg/SVGAngle.idl:
        * svg/SVGAnimatedNumber.idl:
        * svg/SVGAnimationElement.idl:
        * svg/SVGFEDropShadowElement.idl:
        * svg/SVGFEGaussianBlurElement.idl:
        * svg/SVGFEMorphologyElement.idl:
        * svg/SVGGlyphRefElement.idl:
        * svg/SVGLength.idl:
        * svg/SVGMatrix.idl:
        * svg/SVGNumber.idl:
        * svg/SVGPathElement.idl:
        * svg/SVGPathSegArcAbs.idl:
        * svg/SVGPathSegArcRel.idl:
        * svg/SVGPathSegCurvetoCubicAbs.idl:
        * svg/SVGPathSegCurvetoCubicRel.idl:
        * svg/SVGPathSegCurvetoCubicSmoothAbs.idl:
        * svg/SVGPathSegCurvetoCubicSmoothRel.idl:
        * svg/SVGPathSegCurvetoQuadraticAbs.idl:
        * svg/SVGPathSegCurvetoQuadraticRel.idl:
        * svg/SVGPathSegCurvetoQuadraticSmoothAbs.idl:
        * svg/SVGPathSegCurvetoQuadraticSmoothRel.idl:
        * svg/SVGPathSegLinetoAbs.idl:
        * svg/SVGPathSegLinetoHorizontalAbs.idl:
        * svg/SVGPathSegLinetoHorizontalRel.idl:
        * svg/SVGPathSegLinetoRel.idl:
        * svg/SVGPathSegLinetoVerticalAbs.idl:
        * svg/SVGPathSegLinetoVerticalRel.idl:
        * svg/SVGPathSegMovetoAbs.idl:
        * svg/SVGPathSegMovetoRel.idl:
        * svg/SVGPoint.idl:
        * svg/SVGRect.idl:
        * svg/SVGSVGElement.idl:
        * svg/SVGTextContentElement.idl:
        * svg/SVGTransform.idl:
        * svg/SVGZoomEvent.idl:
        * testing/InternalSettings.idl:
        * testing/Internals.idl:
        * xml/XPathResult.idl:

2014-05-05  Tim Horton  <timothy_horton@apple.com>

        Use a layer delegate instead of web_disableAllActions wherever possible
        https://bugs.webkit.org/show_bug.cgi?id=132560
        <rdar://problem/16459284>

        Reviewed by Simon Fraser.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayerMac::commonInit):
        If we own the platform layer, set its delegate to the action-disabling WebActionDisablingCALayerDelegate.
        If we don't, its actual owner might want to control the delegate, so continue using web_disableAllActions.

        * platform/graphics/cocoa/WebActionDisablingCALayerDelegate.h: Added.
        * platform/graphics/cocoa/WebActionDisablingCALayerDelegate.mm: Added.
        (+[WebActionDisablingCALayerDelegate shared]):
        (-[WebActionDisablingCALayerDelegate actionForLayer:forKey:]):
        Add a class that can act as the delegate of a CALayer, and disables all actions.

        * platform/graphics/cocoa/WebCoreCALayerExtras.h: Renamed from Source/WebCore/platform/graphics/mac/WebCoreCALayerExtras.h.
        * platform/graphics/cocoa/WebCoreCALayerExtras.mm: Renamed from Source/WebCore/platform/graphics/mac/WebCoreCALayerExtras.mm.
        (-[CALayer web_disableAllActions]):
        Move WebCoreCALayerExtras from mac/ to cocoa/.

2014-05-05  Martin Hock  <mhock@apple.com>

        Session-aware plugin autostart data
        https://bugs.webkit.org/show_bug.cgi?id=131758
        <rdar://problem/15906540>

        Reviewed by Alexey Proskuryakov.

        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::userDidClickSnapshot):
        * page/PlugInClient.h:

2014-05-05  Radu Stavila  <stavila@adobe.com>

        [CSS Regions] Elements with overflow:auto are not painted inside regions when following a float
        https://bugs.webkit.org/show_bug.cgi?id=131161

        Reviewed by David Hyatt.

        When a float-avoiding element (such as overflow:auto) is flowed into a flow thread after a float, its 
        logical left is not set on its frameRect or its layer's topLeft, but is instead kept in its RenderBoxRegionInfo
        structure. In some situation, this causes paint rejection to kick-in because intersecting the layer's rect
        (which DOESN'T contain the logical left from the region info object) with the computed background rect 
        (which contains the logical left from the region info object) results in an empty rect.

        Test: fast/regions/overflow-auto-after-float.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::calculateClipRects):

2014-05-05  Andrei Bucur  <abucur@adobe.com>

        [CSSRegions] Slider displayed wrong in regions
        https://bugs.webkit.org/show_bug.cgi?id=132243

        Reviewed by Mihnea Ovidenie.

        In case a box didn't have a range, getRegionRangeForBox was searching for
        the top-most unplittable ancestor. This is not correct in every case. It's
        possible to have a box with range that has children without ranges (e.g. an
        absolutely positioned inline box with shadow descendants).

        I've modified getRegionRangeForBox to search for the first ancestor that
        has a cached range and use that instead of looking for an unsplittable box.
        The range of the box is the region at the top of the box, clamped by the
        range of the ancestor. This will be correct all the time once all the layout
        systems are region range aware and are able to cache it.

        Test: fast/regions/positioned-slider-in-regions.html

        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::hasRegionRangeForBox):
        (WebCore::RenderFlowThread::getRegionRangeForBox):
        * rendering/RenderFlowThread.h:

2014-05-05  Andrei Bucur  <abucur@adobe.com>

        [CSS Regions] ASSERT when hovering over region
        https://bugs.webkit.org/show_bug.cgi?id=128809

        Reviewed by Mihnea Ovidenie.

        There's no point in hit-testing a box for a region if it's not contained inside
        that region.

        Test: fast/regions/hit-test-box-non-containing-region.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::nodeAtPoint):

2014-05-04  Andreas Kling  <akling@apple.com>

        Optimize JSRopeString for resolving directly to AtomicString.
        <https://webkit.org/b/132548>

        Add two bindings generator attributes for parameters to influence
        the way that JS rope strings are resolved:

        - AtomicString

            Generates code that avoids allocating a new StringImpl if there
            is already an existing AtomicString we can reuse.

        - RequiresExistingAtomicString

            Generates code that fails immediately if the provided string
            is not found in the AtomicString table. This is now used for
            document.getElementById(), and works because any existing ID
            is guaranteed to be in the table.

        Reviewed by Filip Pizlo.

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateParametersCheck):
        (JSValueToNative):
        * bindings/scripts/IDLAttributes.txt:
        * dom/Document.idl:

2014-05-04  Simon Fraser  <simon.fraser@apple.com>

        [iOS WK2] Compositing layers in iframes are misplaced
        https://bugs.webkit.org/show_bug.cgi?id=132554
        <rdar://problem/16203027>

        Reviewed by Benjamin Poulain.

        Have requiresScrollLayer() only consider frameView.delegatesScrolling()
        for the main frame, so that iframes get scroll layers (even though they
        will never scroll), so that the rest of geometry code works as on other
        platforms.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::requiresScrollLayer):

2014-05-04  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        Use std::unique_ptr in m_taskTimer of Notification class
        https://bugs.webkit.org/show_bug.cgi?id=132544

        Reviewed by Andreas Kling.

        No new tests, no behavior change.

        * Modules/notifications/Notification.cpp:
        (WebCore::Notification::Notification):
        * Modules/notifications/Notification.h: Use std::unique_ptr instead of OwnPtr.

2014-05-04  Tim Horton  <timothy_horton@apple.com>

        Long hangs under IOSurfacePool::evict
        https://bugs.webkit.org/show_bug.cgi?id=132549
        <rdar://problem/16769469>

        Reviewed by Simon Fraser.

        * platform/graphics/cg/IOSurfacePool.cpp:
        (WebCore::IOSurfacePool::willAddSurface):
        Run eviction before adding the new surface to m_bytesCached/m_inUseBytesCached.
        We use the additionalSize parameter to make space for the new surface.

        (WebCore::IOSurfacePool::evict):
        If we want to free up the entire pool, we can do so by throwing away everything.
        This also avoids an underflow if additionalSize is larger than the maximum pool size.

2014-05-04  Pratik Solanki  <psolanki@apple.com>

        Shortcircuit shouldUseCredentialStorage callback
        https://bugs.webkit.org/show_bug.cgi?id=132308
        <rdar://problem/16806708>

        Reviewed by Alexey Proskuryakov.

        If we are going to return true from the shouldUseCredentialStorage callback then we don't
        really need to have CFNetwork/Foundation call us. We can just disable the callback and
        CFNetwork will assume true. Add a separate subclass that implements this callback when we
        need to return false. We can also eliminate the corresponding async callbacks. This avoids
        pingponging between dispatch queue and main thread in the common case.

        No new tests because no change in functionality.

        * WebCore.exp.in:
        * platform/network/ResourceHandle.cpp:
        * platform/network/ResourceHandle.h:
        * platform/network/ResourceHandleClient.cpp:
        * platform/network/ResourceHandleClient.h:
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::ResourceHandle::createCFURLConnection):
        (WebCore::ResourceHandle::shouldUseCredentialStorage):
        * platform/network/cf/ResourceHandleCFURLConnectionDelegate.h:
        * platform/network/cf/ResourceHandleCFURLConnectionDelegateWithOperationQueue.cpp:
        (WebCore::ResourceHandleCFURLConnectionDelegateWithOperationQueue::shouldUseCredentialStorage):
        * platform/network/cf/ResourceHandleCFURLConnectionDelegateWithOperationQueue.h:
        * platform/network/cf/SynchronousResourceHandleCFURLConnectionDelegate.cpp:
        * platform/network/cf/SynchronousResourceHandleCFURLConnectionDelegate.h:
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start):
        (WebCore::ResourceHandle::makeDelegate):
        (WebCore::ResourceHandle::delegate):
        (WebCore::ResourceHandle::platformLoadResourceSynchronously):
        (WebCore::ResourceHandle::shouldUseCredentialStorage):
        * platform/network/mac/WebCoreResourceHandleAsOperationQueueDelegate.h:
        * platform/network/mac/WebCoreResourceHandleAsOperationQueueDelegate.mm:
        (-[WebCoreResourceHandleWithCredentialStorageAsOperationQueueDelegate connectionShouldUseCredentialStorage:]):
        * platform/network/soup/ResourceHandleSoup.cpp:

2014-05-04  Brent Fulgham  <bfulgham@apple.com>

        [iOS] deviceScaleFactor is being double-applied when rendering captions in full screen mode 
        https://bugs.webkit.org/show_bug.cgi?id=132481
        <rdar://problem/16507482>

        Reviewed by Jer Noble.

        Add a new 'syncTextTrackBounds' method (and relaying functions) to keep the text track container in sync
        with changes to the video player's display layer.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::syncTextTrackBounds: Added.
        * html/HTMLMediaElement.h:
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlTextTrackContainerElement::updateDisplay): Don't set the platform scale factor here. It is already
        being accounted for in the createTextTrackRepresentationImage method.
        (WebCore::MediaControlTextTrackContainerElement::updateSizes): Synchronize the text track representation
        with any new video layer changes.
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::syncTextTrackBounds): Added.
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::syncTextTrackBounds): Added.
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::setVideoFullscreenLayer): Use new sync function.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::setVideoFullscreenFrame): Ditto.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::syncTextTrackBounds): Added. Keep the text track layer size in sync with
        the current video layer size. This may change during animations, rotations, etc.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::setTextTrackRepresentation): Use new sync function.

2014-05-04  Beth Dakin  <bdakin@apple.com>

        Top content inset: Margin tiles should not display in the inset area when pinned 
        to the top of the page
        https://bugs.webkit.org/show_bug.cgi?id=132535
        -and corresponding-
        <rdar://problem/16613039>

        Reviewed by Simon Fraser.

        Prior to this change, topContentInset was implemented by positioning 
        RenderLayerCompositor’s m_rootContentLayer based on the inset value. In order to 
        ensure that no content is displayed in the inset area when we are pinned to the 
        top of the page, we’ll have to take a different approach. In this patch, when you 
        are pinned to the top of the page, the m_rootContentLayer is positioned at (0,0), 
        much like it would be without an inset, but the m_clip layer IS positioned at (0, 
        topContentInset). Then for all y-scroll values between 0 and topContentInset, the 
        positions of the clip layer and the contents layer are adjusted so that the clip 
        layer approaches a position of (0,0), and the root layer approaches a position of 
        (0, topContentInset). This makes sure that any content above the top the document 
        is aways clipped out of the inset area.

        In order to achieve this, the scrolling thread needs to know about the 
        topContentInset, the clip layer, and the root contents layer.

        AsyncScrollingCoordinator::updateScrollingNode() now takes an additional parameter 
        for the clip layer. Also export the topContentInset symbol for UI-side 
        compositing.
        * WebCore.exp.in:

        Here is the new computation. Implemented in one spot that can be called from the 
        scrolling thread, AsyncScrollingCoordinator and RenderLayerCompositor.
        * page/FrameView.cpp:
        (WebCore::FrameView::yPositionForInsetClipLayer):
        (WebCore::FrameView::yPositionForRootContentLayer):
        * page/FrameView.h:

        Set the topContentInset, the insetClipLayer, and the scrolledContentsLayer when 
        appropriate.
        * page/scrolling/AsyncScrollingCoordinator.cpp:
        (WebCore::AsyncScrollingCoordinator::frameViewLayoutUpdated):
        (WebCore::AsyncScrollingCoordinator::frameViewRootLayerDidChange):

        Set or sync the positions for the inset layer and the contents layer.
        (WebCore::AsyncScrollingCoordinator::updateScrollPositionAfterAsyncScroll):
        (WebCore::AsyncScrollingCoordinator::updateScrollingNode):
        * page/scrolling/AsyncScrollingCoordinator.h:

        Convenience functions for getting the clipLayer() and the rootContentLayer() from 
        the RenderLayerCompositor.
        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::insetClipLayerForFrameView):
        (WebCore::ScrollingCoordinator::rootContentLayerForFrameView):
        * page/scrolling/ScrollingCoordinator.h:
        (WebCore::ScrollingCoordinator::updateScrollingNode):

        ScrollingStateScrolling nodes have two new members now. m_insetClipLayer and 
        m_topContentInset. We can use m_scrolledContentsLayer for the rootContentsLayer 
        since previously that member was not used for FrameViews; it was only used for 
        accelerated overflow:scroll nodes.
        * page/scrolling/ScrollingStateScrollingNode.cpp:
        (WebCore::ScrollingStateScrollingNode::ScrollingStateScrollingNode):
        (WebCore::ScrollingStateScrollingNode::setTopContentInset):
        (WebCore::ScrollingStateScrollingNode::setInsetClipLayer):
        * page/scrolling/ScrollingStateScrollingNode.h:

        Similarly, ScrollingTreeScrollingNode has two new members for m_topContentInset 
        and m_clipLayer.
        * page/scrolling/ScrollingTreeScrollingNode.cpp:
        (WebCore::ScrollingTreeScrollingNode::ScrollingTreeScrollingNode):
        (WebCore::ScrollingTreeScrollingNode::updateBeforeChildren):
        * page/scrolling/ScrollingTreeScrollingNode.h:
        (WebCore::ScrollingTreeScrollingNode::topContentInset):
        * page/scrolling/mac/ScrollingTreeScrollingNodeMac.h:
        * page/scrolling/mac/ScrollingTreeScrollingNodeMac.mm:
        (WebCore::ScrollingTreeScrollingNodeMac::updateBeforeChildren):

        Compute positions for the two new layers.
        (WebCore::ScrollingTreeScrollingNodeMac::setScrollLayerPosition):

        Now use the static FrameView functions to compute the positions for these layers.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::frameViewDidChangeSize):
        (WebCore::RenderLayerCompositor::positionForClipLayer):
        (WebCore::RenderLayerCompositor::clipLayer):
        (WebCore::RenderLayerCompositor::rootContentLayer):
        (WebCore::RenderLayerCompositor::updateRootLayerPosition):
        (WebCore::RenderLayerCompositor::updateOverflowControlsLayers):
        (WebCore::RenderLayerCompositor::ensureRootLayer):
        (WebCore::RenderLayerCompositor::updateScrollCoordinatedLayer):
        * rendering/RenderLayerCompositor.h:

2014-05-04  Benjamin Poulain  <benjamin@webkit.org>

        Clear the Selector Query caches on memory pressure
        https://bugs.webkit.org/show_bug.cgi?id=132545

        Reviewed by Andreas Kling.

        The Selector Query Cache can use quite a bit of memory if many
        complex selectors are compiled. This patch makes sure the cache gets
        cleared on memory pressure.

        * dom/Document.cpp:
        (WebCore::Document::clearSelectorQueryCache):
        (WebCore::Document::setCompatibilityMode):
        (WebCore::Document::updateBaseURL):
        * dom/Document.h:
        * dom/SelectorQuery.cpp:
        (WebCore::SelectorQueryCache::invalidate): Deleted.
        * dom/SelectorQuery.h:
        * platform/MemoryPressureHandler.cpp:
        (WebCore::MemoryPressureHandler::releaseMemory):

2014-05-04  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        Convert OwnPtr to std::unique_ptr in CDM
        https://bugs.webkit.org/show_bug.cgi?id=132467

        Reviewed by Andreas Kling.

        Use std::unique_ptr in CDM class.

        No new tests, no behavior change.

        * Modules/encryptedmedia/CDM.cpp:
        (WebCore::CDM::create):
        (WebCore::CDM::CDM):
        * Modules/encryptedmedia/CDM.h:
        * Modules/encryptedmedia/CDMPrivateMediaPlayer.h:
        (WebCore::CDMPrivateMediaPlayer::CDMPrivateMediaPlayer):
        (WebCore::CDMPrivateMediaPlayer::create):
        * Modules/encryptedmedia/MediaKeys.cpp:
        (WebCore::MediaKeys::create):
        (WebCore::MediaKeys::MediaKeys):
        * Modules/encryptedmedia/MediaKeys.h:
        * WebCore.exp.in:

2014-05-03  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r168232.
        https://bugs.webkit.org/show_bug.cgi?id=132543

        broke ~15 tests on WK2 debug (Requested by kling on #webkit).

        Reverted changeset:

        "Shortcircuit shouldUseCredentialStorage callback"
        https://bugs.webkit.org/show_bug.cgi?id=132308
        http://trac.webkit.org/changeset/168232

2014-05-03  Andreas Kling  <akling@apple.com>

        RenderSVGResourcePattern should deal in RenderElement&.
        <https://webkit.org/b/132536>

        Tweak buildPattern() and buildTileImageTransform() to take RenderElement&
        instead of RenderObject* since we know that these functions will always
        be called with non-null RenderElement subclasses.

        Reviewed by Sam Weinig.

        * rendering/svg/RenderSVGResourceContainer.cpp:
        (WebCore::RenderSVGResourceContainer::shouldTransformOnTextPainting):
        * rendering/svg/RenderSVGResourceContainer.h:
        * rendering/svg/RenderSVGResourceGradient.cpp:
        (WebCore::RenderSVGResourceGradient::applyResource):
        * rendering/svg/RenderSVGResourcePattern.cpp:
        (WebCore::RenderSVGResourcePattern::buildPattern):
        (WebCore::RenderSVGResourcePattern::applyResource):
        (WebCore::RenderSVGResourcePattern::buildTileImageTransform):
        * rendering/svg/RenderSVGResourcePattern.h:

2014-05-03  Yusuke Suzuki  <utatane.tea@gmail.com>

        CSS JIT: optimize direct / indirect adjacent's traversal backtracking
        https://bugs.webkit.org/show_bug.cgi?id=132319

        Reviewed by Benjamin Poulain.

        Since adjacent backtracking stack reference is pre-allocated
        in prologue in http://trac.webkit.org/changeset/166834,
        clearing stack phase is not needed. So we can drop
        JumpToClearAdjacentTail from backtracking action and simplify
        backtracking handling.
        And optimize direct / indirect adjacent's traversal backtracking by
        using appropriate backtracking height.

        When solving adjacent traversal backtracking action,
        1) When there's no descendant relation on the right, traversal
        failure becomes global failure.
        2) When `tagNameMatchedBacktrackingStartHeightFromDescendant` ==
        `heightFromDescendant` + 1, the descendant backtracking starts with
        the parent of the current element. So we can use the current element
        and the backtracking action is JumpToDescendantTreeWalkerEntryPoint.
        3) Otherwise, currently we take the conservative approach,
        JumpToDescendantTail.

        NOTE:
        And if `hasDescendantRelationOnTheRight` is true and there's no child
        fragment on the right, the backtracking element register is not
        effective. So we should ensure that fragment doesn't use the
        backtracking element register. Such a fragment fulfills the following
        conditions. 1. tagNameMatchedBacktrackingStartHeightFromDescendant is
        always 1 (tagNames.size(), that contains only descendant fragment) 2.
        heightFromDescendant is always 0 (-- See
        computeBacktrackingHeightFromDescendant implementation) Therefore such
        a fragment's action always becomes
        JumpToDescendantTreeWalkerEntryPoint. So we can ensure that the
        backtracking element register is not used.

        Test: fast/selectors/backtracking-adjacent.html

        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::solveDescendantBacktrackingActionForChild):
        (WebCore::SelectorCompiler::solveAdjacentTraversalBacktrackingAction):
        (WebCore::SelectorCompiler::solveBacktrackingAction):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::computeBacktrackingInformation):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::linkFailures):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateAdjacentBacktrackingTail):
        (WebCore::SelectorCompiler::isAfterChildRelation): Deleted.

2014-05-03  Andreas Kling  <akling@apple.com>

        Clear the JSString cache when under memory pressure.
        <https://webkit.org/b/132539>

        The WeakGCMap used for fast mapping from StringImpl* to JSString*
        can actually get pretty big, and if we find ourselves under memory
        pressure, it's entirely inessential.

        1.1 MB progression on Membuster3.

        Reviewed by Sam Weinig.

        * platform/MemoryPressureHandler.cpp:
        (WebCore::MemoryPressureHandler::releaseMemory):

2014-05-03  Benjamin Poulain  <benjamin@webkit.org>

        [iOS][WK2] Support disabling speculative tiling
        https://bugs.webkit.org/show_bug.cgi?id=132512

        Reviewed by Tim Horton.

        Move ScrollView::setScrollVelocity() and ScrollView::computeCoverageRect() to FrameView.
        When speculative tiling is disabled, return an unmodified exposed rect.

        Time/velocity adjusments are completely unnecessary at the moment since speculative tiling
        is enabled as soon as the view scrolls.

        * WebCore.exp.in:
        * page/FrameView.cpp:
        (WebCore::FrameView::setScrollVelocity):
        (WebCore::FrameView::computeCoverageRect):
        * page/FrameView.h:
        * platform/ScrollView.h:
        * platform/ios/ScrollViewIOS.mm:
        (WebCore::ScrollView::setScrollVelocity): Deleted.
        (WebCore::ScrollView::computeCoverageRect): Deleted.

2014-05-02  Pratik Solanki  <psolanki@apple.com>

        Shortcircuit shouldUseCredentialStorage callback
        https://bugs.webkit.org/show_bug.cgi?id=132308
        <rdar://problem/16806708>

        Reviewed by Alexey Proskuryakov.

        If we are going to return true from the shouldUseCredentialStorage callback then we don't
        really need to have CFNetwork/Foundation call us. We can just disable the callback and
        CFNetwork will assume true. Add a separate subclass that implements this callback when we
        need to return false. We can also eliminate the corresponding async callbacks. This avoids
        pingponging between dispatch queue and main thread in the common case.

        No new tests because no change in functionality.

        * WebCore.exp.in:
        * platform/network/ResourceHandle.cpp:
        * platform/network/ResourceHandle.h:
        * platform/network/ResourceHandleClient.cpp:
        * platform/network/ResourceHandleClient.h:
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::ResourceHandle::createCFURLConnection):
        (WebCore::ResourceHandle::shouldUseCredentialStorage):
        * platform/network/cf/ResourceHandleCFURLConnectionDelegate.h:
        * platform/network/cf/ResourceHandleCFURLConnectionDelegateWithOperationQueue.cpp:
        (WebCore::ResourceHandleCFURLConnectionDelegateWithOperationQueue::shouldUseCredentialStorage):
        * platform/network/cf/ResourceHandleCFURLConnectionDelegateWithOperationQueue.h:
        * platform/network/cf/SynchronousResourceHandleCFURLConnectionDelegate.cpp:
        * platform/network/cf/SynchronousResourceHandleCFURLConnectionDelegate.h:
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start):
        (WebCore::ResourceHandle::makeDelegate):
        (WebCore::ResourceHandle::delegate):
        (WebCore::ResourceHandle::platformLoadResourceSynchronously):
        (WebCore::ResourceHandle::shouldUseCredentialStorage):
        * platform/network/mac/WebCoreResourceHandleAsOperationQueueDelegate.h:
        * platform/network/mac/WebCoreResourceHandleAsOperationQueueDelegate.mm:
        (-[WebCoreResourceHandleWithCredentialStorageAsOperationQueueDelegate connectionShouldUseCredentialStorage:]):
        * platform/network/soup/ResourceHandleSoup.cpp:

2014-05-03  Andreas Kling  <akling@apple.com>

        Invalidate scrollbars when custom scrollbar style changes dynamically.
        <https://webkit.org/b/132529>

        Add a ScrollView::styleDidChange() and call that from RenderView::styleDidChange()
        so that the scrollbars are sure to get repainted with potentially different style.

        Reviewed by Antti Koivisto.

        Test: fast/css/scrollbar-dynamic-style-change.html

        * platform/ScrollView.cpp:
        (WebCore::ScrollView::styleDidChange):
        * platform/ScrollView.h:
        * rendering/RenderView.cpp:
        (WebCore::RenderView::styleDidChange):

2014-05-03  Simon Fraser  <simon.fraser@apple.com>

        Very fuzzy layers under non-decompasable matrices
        https://bugs.webkit.org/show_bug.cgi?id=132516
        <rdar://problem/16717478>

        Reviewed by Sam Weinig.
        
        r155977 added code to modify layer contentsScale based on a root-relative
        scale, so that scaled-up layers remained sharp. It does this by decomposing
        an accumulated matrix, but failed to test whether the decomposition
        succeeded. This would result in contentsScale of 0, which is clamped to 0.1,
        resulting in very fuzzy layers.
        
        Fix by testing for success of decomposition.

        Test: compositing/contents-scale/non-decomposable-matrix.html

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::maxScaleFromTransform):
        * platform/graphics/transforms/TransformationMatrix.cpp:
        (WebCore::TransformationMatrix::decompose2): Return early for identity matrices,
        with fix for m11 and m22.
        (WebCore::TransformationMatrix::decompose4): Return early for identity matrices.
        * platform/graphics/transforms/TransformationMatrix.h:
        Make Decomposed2Type and Decomposed4Type into C++ structs.
        (WebCore::TransformationMatrix::Decomposed2Type::operator==): Added to make it easier
        to write code that asserts that decomposition is correct.
        (WebCore::TransformationMatrix::Decomposed4Type::operator==): Ditto.

2014-05-03  Simon Fraser  <simon.fraser@apple.com>

        Fix crash in WebKit client app when zooming
        https://bugs.webkit.org/show_bug.cgi?id=132475
        <rdar://problem/16703405>

        Reviewed by Tim Horton.

        It's possible for a WebTiledBackingLayer CALayer to remain in the CALayer
        hierarchy after we've called -invalidate on it, which clears the _tileController.
        Project the getters against null derefs to handle this.

        * platform/graphics/ca/mac/WebTiledBackingLayer.mm:
        (-[WebTiledBackingLayer isOpaque]):
        (-[WebTiledBackingLayer acceleratesDrawing]):
        (-[WebTiledBackingLayer contentsScale]):

2014-05-03  Carlos Garcia Campos  <cgarcia@igalia.com>

        Unreviewed. Fix GTK+ build after r168209.

        * platform/leveldb/LevelDBDatabase.cpp:
        (WebCore::LevelDBDatabase::write):

2014-05-03  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Fieldset legend has a horizontal line through, when the fieldset is painted on odd device pixel position.
        https://bugs.webkit.org/show_bug.cgi?id=132521
        <rdar://problem/16803305>

        Reviewed by Simon Fraser.

        Use device pixel snapping when the fieldset's border gets clipped out for the legend's text. It ensures that
        the device pixel snapped border gets properly clipped out.

        Existing fieldset tests cover it.

        * rendering/RenderFieldset.cpp:
        (WebCore::RenderFieldset::paintBoxDecorations):

2014-05-02  Zalan Bujtas  <zalan@apple.com>

        CodeCleanup: Remove *MaintainsPixelAlignment from GraphicsLayer*.
        https://bugs.webkit.org/show_bug.cgi?id=132501

        Reviewed by Simon Fraser.

        * WebCore.exp.in:
        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::GraphicsLayer):
        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::setMaintainsPixelAlignment): Deleted.
        (WebCore::GraphicsLayer::maintainsPixelAlignment): Deleted.
        (WebCore::GraphicsLayer::pixelAlignmentOffset): Deleted.
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::updateGeometry):
        (WebCore::GraphicsLayerCA::computePixelAlignment):
        (WebCore::GraphicsLayerCA::setMaintainsPixelAlignment): Deleted.
        * platform/graphics/ca/GraphicsLayerCA.h:
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::createGraphicsLayer):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::keepLayersPixelAligned): Deleted.
        * rendering/RenderLayerCompositor.h:

2014-05-02  Simon Fraser  <simon.fraser@apple.com>

        [iOS WK2] Tiled layer content missing on pages with animated tiled layers
        https://bugs.webkit.org/show_bug.cgi?id=132507
        <rdar://problem/16765740>

        Reviewed by Tim Horton.

        Updating the tiling area of content TileControllers while
        CSS animations are running depends on GraphicsLayerUpdater
        triggering repeated layer flushes. With UI-side compositing, those
        flushes were happening, but nothing triggered RemoteLayerTreeDrawingArea
        to flush changes to the UI process.
        
        Fix by having RenderLayerCompositor schedule a flush, rather
        than just doing a flush, in response to GraphicsLayerUpdater.
        
        Also change the name of the GraphicsLayerUpdaterClient function
        to indicate that it suggests that a flush is required soon, rather than
        that the flushing has to be synchronous.

        * platform/graphics/GraphicsLayerUpdater.cpp:
        (WebCore::GraphicsLayerUpdater::displayRefreshFired):
        * platform/graphics/GraphicsLayerUpdater.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::flushLayersSoon):
        (WebCore::RenderLayerCompositor::flushLayers): Deleted.
        * rendering/RenderLayerCompositor.h:

2014-05-02  Jeremy Jones  <jeremyj@apple.com>

        Use displayNameForTrack instead of textTrack->label() for captions.
        https://bugs.webkit.org/show_bug.cgi?id=131311

        Reviewed by Darin Adler.

        Use the same mechanism as the desktop to build the captions list so it has the correct
        names in the correct order including none and automatic.

        * platform/ios/WebVideoFullscreenModelMediaElement.h:
        * platform/ios/WebVideoFullscreenModelMediaElement.mm:
        (WebVideoFullscreenModelMediaElement::setMediaElement):
        move legible track code into updateLegibleOptions()

        (WebVideoFullscreenModelMediaElement::handleEvent):
        updateLegibleOptions on addTrack and removeTrack

        (WebVideoFullscreenModelMediaElement::selectLegibleMediaOption):
        select the corresponding TextTrack on HTMLMediaElement.

        (WebVideoFullscreenModelMediaElement::updateLegibleOptions):
        use the same mechanism as desktop to build the captions menu.

2014-05-02  Jeremy Jones  <jeremyj@apple.com>

        CSS-based Media Controls Show Different times content longer than 1 hour.
        https://bugs.webkit.org/show_bug.cgi?id=132443

        Reviewed by Jer Noble.

        * Modules/mediacontrols/mediaControlsApple.css:
        (audio::-webkit-media-controls-timeline-container .hour-long-time):
        This class has a wider width for longer duration times.

        * Modules/mediacontrols/mediaControlsApple.js:
        (Controller.prototype.updateDuration):
        Apply .hour-long-time class as appropriate.

        (Controller.prototype.formatTime):
        More robust formatting to handle hours.

        * Modules/mediacontrols/mediaControlsiOS.css:
        (audio::-webkit-media-controls-timeline-container .hour-long-time):
        This class has a wider width for longer duration times.

        * Modules/mediacontrols/mediaControlsiOS.js:
        (ControllerIOS.prototype.formatTime):
        More robust formatting to handle hours.

2014-05-02  Jer Noble  <jer.noble@apple.com>

        [MSE][Mac] AVAssetTrack returns incorrect track size
        https://bugs.webkit.org/show_bug.cgi?id=132469

        Reviewed by Brent Fulgham.

        * platform/graphics/avfoundation/objc/SourceBufferPrivateAVFObjC.h:
        * platform/graphics/avfoundation/objc/SourceBufferPrivateAVFObjC.mm:
        (WebCore::SourceBufferPrivateAVFObjC::didParseStreamDataAsAsset):  Remove the sizeChanged() notification.
        (WebCore::SourceBufferPrivateAVFObjC::processCodedFrame): Cache the last parsed video frame size.
        (WebCore::SourceBufferPrivateAVFObjC::naturalSize): Return the cached value.

2014-05-02  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering[iOS]: Use pixelSnappedRoundedRectForPainting() to clip text area rect.
        https://bugs.webkit.org/show_bug.cgi?id=132499
        <rdar://problem/16631050>

        Reviewed by Simon Fraser.

        Snap to device pixels properly instead of relying on float arithmetics while converting from RoundedRect
        to FloatRoundedRect. This is the second, cleanup part of the text-area decoration is off-by-one painting issue.

        Currently not testable.

        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::paintTextFieldDecorations):

2014-05-02  Andreas Kling  <akling@apple.com>

        Remove HistogramSupport.
        <https://webkit.org/b/132354>

        Prune some leftover Chromium gunk that no other ports ever used.

        Reviewed by Simon Fraser.

        * CMakeLists.txt:
        * Modules/indexeddb/IDBDatabase.cpp:
        (WebCore::IDBDatabase::createObjectStore):
        (WebCore::IDBDatabase::deleteObjectStore):
        (WebCore::IDBDatabase::transaction):
        * Modules/indexeddb/IDBFactory.cpp:
        (WebCore::IDBFactory::openInternal):
        (WebCore::IDBFactory::deleteDatabase):
        * Modules/indexeddb/IDBHistograms.h: Removed.
        * Modules/indexeddb/leveldb/IDBBackingStoreLevelDB.cpp:
        (WebCore::IDBBackingStoreLevelDB::open):
        (WebCore::IDBBackingStoreLevelDB::openInMemory):
        (WebCore::recordInternalError): Deleted.
        * Modules/indexeddb/leveldb/IDBBackingStoreTransactionLevelDB.cpp:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSParser.cpp:
        (WebCore::cssPropertyID):
        * dom/Document.cpp:
        (WebCore::Document::~Document):
        (WebCore::histogramMutationEventUsage): Deleted.
        * dom/ShadowRoot.cpp:
        * fileapi/Blob.cpp:
        * fileapi/WebKitBlobBuilder.cpp:
        (WebCore::BlobBuilder::append):
        * history/PageCache.cpp:
        (WebCore::logCanCacheFrameDecision):
        (WebCore::logCanCachePageDecision):
        * platform/HistogramSupport.cpp: Removed.
        * platform/HistogramSupport.h: Removed.
        * platform/leveldb/LevelDBDatabase.cpp:
        (WebCore::LevelDBDatabase::open):
        (WebCore::histogramLevelDBError): Deleted.
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateNeedsCompositedScrolling):
        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::send):

2014-05-02  Brady Eidson  <beidson@apple.com>

        Stop flipping the ImageControlsButton
        <rdar://problem/16773238> and https://bugs.webkit.org/show_bug.cgi?id=132502

        Reviewed by Tim Horton.

        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::paintImageControlsButton):

2014-05-02  Jeremy Jones  <jeremyj@apple.com>

        Fullscreen UI does not appear after WebProcess has crashed
        https://bugs.webkit.org/show_bug.cgi?id=132442

        Reviewed by Darin Adler.

        Clean up immediately when there is a WebProcess crash.

        * WebCore.exp.in:
        * platform/ios/WebVideoFullscreenInterfaceAVKit.h:
        * platform/ios/WebVideoFullscreenInterfaceAVKit.mm:
        (WebVideoFullscreenInterfaceAVKit::invalidate):
        Clean-up resources immediately.

2014-05-02  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r168192.
        https://bugs.webkit.org/show_bug.cgi?id=132498

        Was not the correct fix (blurry!) (Requested by bfulgham_ on
        #webkit).

        Reverted changeset:

        "[iOS] deviceScaleFactor is being double-applied when
        rendering captions in full screen mode"
        https://bugs.webkit.org/show_bug.cgi?id=132481
        http://trac.webkit.org/changeset/168192

2014-05-02  Alexey Proskuryakov  <ap@apple.com>

        Remove Blob contentDisposition handling
        https://bugs.webkit.org/show_bug.cgi?id=132490

        Reviewed by Sam Weinig.

        Dead code.

        * platform/network/BlobData.h:
        (WebCore::BlobData::contentDisposition): Deleted.
        (WebCore::BlobData::setContentDisposition): Deleted.
        * platform/network/BlobRegistryImpl.cpp:
        (WebCore::BlobRegistryImpl::registerBlobURL):
        (WebCore::BlobRegistryImpl::registerBlobURLForSlice):
        * platform/network/BlobResourceHandle.cpp:
        (WebCore::BlobResourceHandle::notifyResponseOnSuccess):
        * platform/network/BlobStorageData.h:
        (WebCore::BlobStorageData::create):
        (WebCore::BlobStorageData::contentType):
        (WebCore::BlobStorageData::BlobStorageData):
        (WebCore::BlobStorageData::contentDisposition): Deleted.

2014-05-02  Anders Carlsson  <andersca@apple.com>

        Implement FormData decoding using KeyedDecoder
        https://bugs.webkit.org/show_bug.cgi?id=132494

        Reviewed by Tim Horton.

        * platform/KeyedCoding.h:
        (WebCore::KeyedDecoder::decodeEnum):
        * platform/network/FormData.cpp:
        (WebCore::decodeElement):
        (WebCore::FormData::decode):
        * platform/network/FormData.h:

2014-05-02  Brent Fulgham  <bfulgham@apple.com>

        [iOS] deviceScaleFactor is being double-applied when rendering captions in full screen mode
        https://bugs.webkit.org/show_bug.cgi?id=132481

        Reviewed by Jer Noble.

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlTextTrackContainerElement::updateDisplay): Don't set the platform scale factor here. It is already
        being accounted for in the createTextTrackRepresentationImage method.

2014-05-02  Simon Fraser  <simon.fraser@apple.com>

        [iOS WK2] Don't create backing store for -webkit-overflow-scrolling:touch that can't scroll
        https://bugs.webkit.org/show_bug.cgi?id=132487
        <rdar://problem/16758041>

        Reviewed by Sam Weinig.

        Previously, -webkit-overflow-scrolling:touch would cause us to make compositing
        layers for any element that had overflow: auto or scroll on either axis. This
        created lots of backing store when not required.
        
        Improve this to only create compositing for scrolling when there is actually
        scrollable overflow. This makes things slightly more complex, because we can
        only know when layout is up to date.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computeRectForRepaint): usesCompositedScrolling() tells
        us if we're actually doing composited overflow.
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::hasTouchScrollableOverflow):
        (WebCore::RenderLayer::handleTouchEvent):
        * rendering/RenderLayer.h:
        * rendering/RenderLayerBacking.cpp:
        (WebCore::layerOrAncestorIsTransformedOrUsingCompositedScrolling):
        (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration): Only update
        scrolling and clipping layers if layout is not pending.
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        (WebCore::RenderLayerBacking::updateScrollingLayers): The caller calls
        updateInternalHierarchy(), so no need to do it here.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::requiresCompositingForScrolling): We
        can only determine that we're scrollable after layout.
        (WebCore::isStickyInAcceleratedScrollingLayerOrViewport):
        (WebCore::isMainFrameScrollingOrOverflowScrolling):

2014-05-02  Anders Carlsson  <andersca@apple.com>

        Clean up FormDataElement
        https://bugs.webkit.org/show_bug.cgi?id=132483

        Reviewed by Sam Weinig.

        * platform/network/FormData.cpp:
        (WebCore::FormData::FormData):
        (WebCore::FormData::deepCopy):
        (WebCore::FormData::expandDataStore):
        (WebCore::FormData::flatten):
        (WebCore::FormData::resolveBlobReferences):
        (WebCore::FormData::generateFiles):
        (WebCore::FormData::hasGeneratedFiles):
        (WebCore::FormData::hasOwnedGeneratedFiles):
        (WebCore::FormData::removeGeneratedFilesIfNeeded):
        (WebCore::encodeElement):
        (WebCore::decodeElement):
        * platform/network/FormData.h:
        (WebCore::FormDataElement::FormDataElement):
        (WebCore::operator==):
        * platform/network/cf/FormDataStreamCFNet.cpp:
        (WebCore::advanceCurrentStream):
        (WebCore::setHTTPBody):
        * platform/network/curl/FormDataStreamCurl.cpp:
        (WebCore::FormDataStream::read):
        * platform/network/curl/ResourceHandleManager.cpp:
        (WebCore::setupFormData):
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::addFormElementsToSoupMessage):

2014-05-02  Jer Noble  <jer.noble@apple.com>

        [iOS] Wireless playback button not blue when active
        https://bugs.webkit.org/show_bug.cgi?id=132473

        Reviewed by Simon Fraser.

        The playback button's class was being set to 'undefined', due to Controller.ClassNames.active being undefined.

        * Modules/mediacontrols/mediaControlsApple.js:

2014-05-02  Alexey Proskuryakov  <ap@apple.com>

        Don't abuse Blob deserialization constructor in WebSocket
        https://bugs.webkit.org/show_bug.cgi?id=132478

        Reviewed by Sam Weinig.

        * Modules/websockets/WebSocketChannel.cpp:
        (WebCore::WebSocketChannel::send):
        (WebCore::WebSocketChannel::enqueueBlobFrame): This is the important change -
        Blob::create was called for no reason. If the blob came from a worker, it was
        already cloned for cross-thread messaging, otherwise there is no reason to make
        a new one.

        * fileapi/Blob.h:
        (WebCore::Blob::deserialize):
        (WebCore::Blob::create): Deleted.
        * fileapi/File.h:
        (WebCore::File::deserialize):
        (WebCore::File::create): Deleted.
        Renamed a special case of "create" function to avoid explaining what it is for.

        * Modules/websockets/ThreadableWebSocketChannel.h:
        * Modules/websockets/WebSocket.cpp:
        (WebCore::WebSocket::send):
        * Modules/websockets/WebSocketChannel.h:
        * Modules/websockets/WorkerThreadableWebSocketChannel.cpp:
        (WebCore::WorkerThreadableWebSocketChannel::send): Print a full URL in LOG(),
        not one shortened to 1024 characters.
        (WebCore::WorkerThreadableWebSocketChannel::Peer::send):
        (WebCore::WorkerThreadableWebSocketChannel::mainThreadSendBlob):
        (WebCore::WorkerThreadableWebSocketChannel::Bridge::send):
        * Modules/websockets/WorkerThreadableWebSocketChannel.h:
        * bindings/js/SerializedScriptValue.cpp:
        (WebCore::CloneDeserializer::readFile):
        (WebCore::CloneDeserializer::readTerminal):

2014-05-02  Anders Carlsson  <andersca@apple.com>

        Add and implement KeyedDecoder::decodeBytes
        https://bugs.webkit.org/show_bug.cgi?id=132479

        Reviewed by Tim Horton.

        * platform/KeyedCoding.h:
        (WebCore::KeyedDecoder::decodeBytes):

2014-05-02  Joseph Pecoraro  <pecoraro@apple.com>

        [iOS] WebKit2 File Upload Support
        https://bugs.webkit.org/show_bug.cgi?id=132024

        Reviewed by Enrica Casucci.

        * English.lproj/Localizable.strings:
        New localized strings for <input type="file"> on iOS.

2014-05-02  Chris Fleizach  <cfleizach@apple.com>

        AX: WK2: iOS web page scrolling doesn't work with VoiceOver
        https://bugs.webkit.org/show_bug.cgi?id=132028

        Reviewed by Mario Sanchez Prada.

        With the AX tree residing in the WebProcess, scrolling needs to be implemented in
        WebCore using accessibilityScroll: in order for accessibility clients to scroll through the AX API.

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::scrollViewAncestor):
        (WebCore::AccessibilityObject::scrollToMakeVisibleWithSubFocus):
        * accessibility/AccessibilityObject.h:
        * accessibility/ios/WebAccessibilityObjectWrapperIOS.h:
        * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper _accessibilityConvertPointToViewSpace:]):
        (-[WebAccessibilityObjectWrapper _accessibilityScrollToVisible]):
        (-[WebAccessibilityObjectWrapper accessibilityScroll:]):
        (-[WebAccessibilityObjectWrapper postScrollStatusChangeNotification]):
        (-[WebAccessibilityObjectWrapper _accessibilityScrollPosition]):
        (-[WebAccessibilityObjectWrapper _accessibilityScrollSize]):
        (-[WebAccessibilityObjectWrapper _accessibilityScrollVisibleRect]):

2014-05-02  Jeremy Jones  <jeremyj@apple.com>

        Pause playback on exit fullscreen when inline playback not allowed.
        https://bugs.webkit.org/show_bug.cgi?id=132450

        Reviewed by Jer Noble.

        Use correct method of determining if inline playback is allowed.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute):
        Use m_mediaSession->requiresFullscreenForVideoPlayback to detect if inline playback is allowed.

        * platform/ios/WebVideoFullscreenModelMediaElement.mm:
        (WebVideoFullscreenModelMediaElement::requestExitFullscreen):
        Prevent duplicate exit requests.

2014-05-02  Ion Rosca  <rosca@adobe.com>

        [CSS Blending] Remove support for non-separable blend modes from background-blend-mode
        https://bugs.webkit.org/show_bug.cgi?id=132327

        Reviewed by Dean Jackson.

        Removed support for non-separable background blend modes from the CSS parser.
        Covered by existing tests.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseFillProperty):

2014-05-02  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        Clean up #include <OwnPtr.h>|<PassOwnPtr.h> in Supplementable classes
        https://bugs.webkit.org/show_bug.cgi?id=132466

        Reviewed by Tim Horton.

        Since r168144, Supplementable classes don't need to include OwnPtr.h or PassOwnPtr.h.
        Clean up those inclusions.

        No new tests, just clean up patch.

        * Modules/encryptedmedia/CDMPrivate.h:
        * Modules/gamepad/NavigatorGamepad.cpp:
        * Modules/geolocation/GeolocationController.cpp:
        (WebCore::GeolocationController::create): Deleted. Don't need to have a factory function.
        * Modules/geolocation/GeolocationController.h:
        * Modules/mediasource/MediaSource.h:
        * Modules/mediastream/UserMediaController.h:
        * Modules/notifications/NotificationCenter.h:
        * Modules/notifications/NotificationController.cpp:
        * Modules/quota/StorageErrorCallback.h:
        * Modules/vibration/Vibration.h:
        * Modules/webdatabase/Database.cpp:
        * Modules/websockets/ThreadableWebSocketChannelClientWrapper.h:
        * Modules/websockets/WebSocket.cpp:
        * Modules/websockets/WebSocket.h:

2014-05-01  Ryuan Choi  <ryuan.choi@samsung.com>

        Remove TiledBackingStore stuff from Frame
        https://bugs.webkit.org/show_bug.cgi?id=132458

        Reviewed by Andreas Kling.

        Although TiledBackingStore is using for the CoordinatedGraphics,
        CoordinatedGraphics does not use tiledBackingStore of Frame.

        This patch removed TiledBackingStore related code of the Frame.

        * page/Frame.cpp:
        (WebCore::Frame::Frame):
        (WebCore::Frame::setView):
        (WebCore::Frame::setTiledBackingStoreEnabled): Deleted.
        (WebCore::Frame::tiledBackingStorePaintBegin): Deleted.
        (WebCore::Frame::tiledBackingStorePaint): Deleted.
        (WebCore::Frame::tiledBackingStorePaintEnd): Deleted.
        (WebCore::Frame::tiledBackingStoreContentsRect): Deleted.
        (WebCore::Frame::tiledBackingStoreVisibleRect): Deleted.
        (WebCore::Frame::tiledBackingStoreBackgroundColor): Deleted.
        * page/Frame.h:
        (WebCore::Frame::tiledBackingStore): Deleted.
        * page/FrameView.cpp:
        (WebCore::FrameView::repaintContentRectangle):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        (WebCore::Settings::setTiledBackingStoreEnabled): Deleted.
        * page/Settings.h:
        (WebCore::Settings::tiledBackingStoreEnabled): Deleted.

2014-05-01  Myles C. Maxfield  <mmaxfield@apple.com>

        Migrate all uses of DeviceMotionController and DeviceOrientationController to std::unique_ptr
        https://bugs.webkit.org/show_bug.cgi?id=132461

        Unreviewed build fix.

        No new tests.

        * dom/Document.cpp:
        (WebCore::Document::Document):
        * dom/Document.h:
        * platform/ios/DeviceMotionClientIOS.h:
        (WebCore::DeviceMotionClientIOS::create): Deleted.
        * platform/ios/DeviceOrientationClientIOS.h:
        (WebCore::DeviceOrientationClientIOS::create): Deleted.

2014-05-01  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        Convert OwnPtr and PassOwnPtr uses to std::unique_ptr in Supplement
        https://bugs.webkit.org/show_bug.cgi?id=132165

        Reviewed by Darin Adler.

        According to convert from PassOwnPtr to std::unique_ptr, provideTo() callers also begin
        to use std::make_unique.

        * Modules/battery/BatteryController.cpp:
        (WebCore::provideBatteryTo):
        * Modules/battery/BatteryController.h:
        * Modules/battery/NavigatorBattery.cpp:
        (WebCore::NavigatorBattery::from):
        * Modules/gamepad/NavigatorGamepad.cpp:
        (WebCore::NavigatorGamepad::from):
        * Modules/geolocation/GeolocationController.cpp:
        (WebCore::provideGeolocationTo):
        * Modules/geolocation/GeolocationController.h:
        * Modules/geolocation/NavigatorGeolocation.cpp:
        (WebCore::NavigatorGeolocation::from):
        * Modules/indexeddb/DOMWindowIndexedDatabase.cpp:
        (WebCore::DOMWindowIndexedDatabase::from):
        * Modules/indexeddb/PageGroupIndexedDatabase.cpp:
        (WebCore::PageGroupIndexedDatabase::from):
        * Modules/indexeddb/WorkerGlobalScopeIndexedDatabase.cpp:
        (WebCore::WorkerGlobalScopeIndexedDatabase::from):
        * Modules/mediastream/UserMediaController.cpp:
        (WebCore::provideUserMediaTo):
        (WebCore::UserMediaController::create): Deleted.
        * Modules/mediastream/UserMediaController.h:
        * Modules/navigatorcontentutils/NavigatorContentUtils.cpp:
        (WebCore::provideNavigatorContentUtilsTo):
        (WebCore::NavigatorContentUtils::create): Deleted.
        * Modules/navigatorcontentutils/NavigatorContentUtils.h:
        * Modules/notifications/DOMWindowNotifications.cpp:
        (WebCore::DOMWindowNotifications::from):
        * Modules/notifications/NotificationController.cpp:
        (WebCore::provideNotification):
        (WebCore::NotificationController::create): Deleted.
        * Modules/notifications/NotificationController.h:
        * Modules/notifications/WorkerGlobalScopeNotifications.cpp:
        (WebCore::WorkerGlobalScopeNotifications::from):
        * Modules/proximity/DeviceProximityController.cpp:
        (WebCore::provideDeviceProximityTo):
        (WebCore::DeviceProximityController::create): Deleted.
        * Modules/proximity/DeviceProximityController.h:
        * Modules/quota/DOMWindowQuota.cpp:
        (WebCore::DOMWindowQuota::from):
        * Modules/quota/NavigatorStorageQuota.cpp:
        (WebCore::NavigatorStorageQuota::from):
        * Modules/quota/WorkerNavigatorStorageQuota.cpp:
        (WebCore::WorkerNavigatorStorageQuota::from):
        * Modules/speech/DOMWindowSpeechSynthesis.cpp:
        (WebCore::DOMWindowSpeechSynthesis::from):
        * Modules/speech/SpeechRecognitionController.cpp:
        (WebCore::provideSpeechRecognitionTo):
        * Modules/vibration/Vibration.cpp:
        (WebCore::provideVibrationTo):
        (WebCore::Vibration::create): Deleted.
        * Modules/vibration/Vibration.h:
        * dom/DeviceMotionController.cpp:
        (WebCore::provideDeviceMotionTo):
        (WebCore::DeviceMotionController::create): Deleted.
        * dom/DeviceMotionController.h:
        * dom/DeviceOrientationController.cpp:
        (WebCore::provideDeviceOrientationTo):
        (WebCore::DeviceOrientationController::create): Deleted.
        * dom/DeviceOrientationController.h:
        * page/SpeechInput.cpp:
        (WebCore::provideSpeechInputTo):
        (WebCore::SpeechInput::create): Deleted.
        * page/SpeechInput.h:
        * platform/Supplementable.h:
        (WebCore::Supplement::provideTo):
        (WebCore::Supplementable::provideSupplement):
        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::from):

2014-05-01  Andreas Kling  <akling@apple.com>

        HTMLMediaElement: Remove two unnecessary virtual overrides.
        <https://webkit.org/b/132445>

        Now that ENABLE_PLUGIN_PROXY_FOR_VIDEO is gone, we can remove
        these overrides:

            - defaultEventHandler()
            - willRespondToMouseClickEvents()

        Reviewed by Darin Adler.

        * html/HTMLMediaElement.cpp:
        * html/HTMLMediaElement.h:

2014-05-01  Benjamin Poulain  <bpoulain@apple.com>

        ViewportConfiguration::minimumScale() uses the initial scale as initial value
        https://bugs.webkit.org/show_bug.cgi?id=132451
        <rdar://problem/16780111>

        Reviewed by Enrica Casucci.

        * page/ViewportConfiguration.cpp:
        (WebCore::ViewportConfiguration::minimumScale):
        The initial minimum scale was set to the initial scale, preventing some pages from zooming
        out.

2014-05-01  Alexey Proskuryakov  <ap@apple.com>

        Build fix for !ENABLE(BLOB) builds.

        * fileapi/ThreadableBlobRegistry.cpp:
        (WebCore::ThreadableBlobRegistry::registerBlobURL):
        (WebCore::ThreadableBlobRegistry::registerBlobURLForSlice):

2014-05-01  Alexey Proskuryakov  <ap@apple.com>

        Move size computation for Blob constructor into BlobRegistryImpl
        https://bugs.webkit.org/show_bug.cgi?id=132439

        Reviewed by Sam Weinig.

        * Modules/websockets/WebSocket.cpp: (WebCore::WebSocket::didReceiveBinaryData):
        Don't pass the size, anyone who cares can get it from BlobData.

        * bindings/js/JSBlobCustom.cpp: (WebCore::JSBlobConstructor::constructJSBlob):
        Updated for BlobBuilder changes.

        * fileapi/Blob.cpp: (WebCore::Blob::Blob):
        * fileapi/Blob.h: (WebCore::Blob::create):
        No longer take a precomputed size with BlobData, BlobRegistry will compute it as
        part of registration.

        * fileapi/File.h:
        * fileapi/File.cpp:
        (WebCore::File::File): Don't pass a size (that's unknown anyway).
        (WebCore::File::captureSnapshot): Deleted. Finally, only the registry is responsible
        for snapshot tracking now (I doubt that either new or old code is particularly compliant).

        * fileapi/ThreadableBlobRegistry.cpp:
        (WebCore::ThreadableBlobRegistry::registerBlobURL):
        * fileapi/ThreadableBlobRegistry.h:
        Plumbing to make this version of registerBlobURL return a size. I may make size
        calculation lazy and the function async later, but this is needed to move the behavior
        to the right place first.

        * fileapi/WebKitBlobBuilder.h:
        * fileapi/WebKitBlobBuilder.cpp:
        (WebCore::BlobBuilder::BlobBuilder):
        (WebCore::BlobBuilder::append):
        (WebCore::BlobBuilder::appendBytesData):
        (WebCore::BlobBuilder::finalize):
        (WebCore::BlobBuilder::getBlob): Deleted.
        Don't track sizes or modification times, registry will do that with appropriate laziness.
        Cleaned up the API - now that BlobBuilder is not exposed to JS as an object, it
        does not need to be reusable.

        * platform/network/BlobRegistry.h: Made this version of registerBlobURL return a size.
        * platform/network/BlobRegistryImpl.h:
        * platform/network/BlobRegistryImpl.cpp:
        (WebCore::BlobRegistryImpl::appendStorageItems): Assert that length computations are accurate.
        (WebCore::BlobRegistryImpl::registerBlobURL): Compute a size to return, and record
        modification time as necessary.

        * xml/XMLHttpRequest.cpp: (WebCore::XMLHttpRequest::responseBlob): Don't pass the
        size, which can be computed from data. Soon, I want to add a constructor that doesn't
        require wrapping a single Vector as BlobData to construct a Blob.

2014-05-01  Eric Carlson  <eric.carlson@apple.com>

        [iOS] audio and video should automatically play to active external device
        https://bugs.webkit.org/show_bug.cgi?id=132428

        Reviewed by Jer Noble.

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::createAVPlayer): Set 
            AVPlayer.usesExternalPlaybackWhileExternalScreenIsActive.

2014-05-01  David Hyatt  <hyatt@apple.com>

        REGRESSION (r168046): [New Multicolumn] Selection into and out of column-span elements doesn't work
        https://bugs.webkit.org/show_bug.cgi?id=132066

        Reviewed by Oliver Hunt.

        Make a new SelectionIterator struct that knows how to drill into and out of
        column span placeholders. Also change spans to be selection roots (in the painting
        sense).

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::isSelectionRoot):
        (WebCore::RenderBlock::selectionGaps):
        * rendering/RenderView.cpp:
        (WebCore::SelectionIterator::SelectionIterator):
        (WebCore::SelectionIterator::checkForSpanner):
        (WebCore::SelectionIterator::current):
        (WebCore::SelectionIterator::next):
        (WebCore::RenderView::subtreeSelectionBounds):
        (WebCore::RenderView::repaintSubtreeSelection):
        (WebCore::RenderView::setSubtreeSelection):

2014-05-01  Simon Fraser  <simon.fraser@apple.com>

        Don't always make backing store for -webkit-backface-visibility:hidden
        https://bugs.webkit.org/show_bug.cgi?id=132420

        Reviewed by Sam Weinig.
        
        Previously, -webkit-backface-visibility:hidden unconditionally created
        compositing layers with backing store. This results in high memory use
        on pages with this style applied to many elements (a cargo-cult "optimization").
        
        Fix by only having -webkit-backface-visibility:hidden create compositing layers
        if some ancestor has a 3D transform. That's the only scenario in which the
        element can be flipped around to reveal the back side, so the only time we need
        to do compositing for this property. In future, we could be smarter, and only
        consider 3D transforms in the current preserve-3d context.

        Tests: compositing/backing/backface-visibility-in-3dtransformed.html
               compositing/backing/backface-visibility-in-transformed.html
               compositing/backing/backface-visibility.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::RenderLayer):
        (WebCore::RenderLayer::updateLayerPositions):
        (WebCore::RenderLayer::hitTestLayer):
        * rendering/RenderLayer.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::requiresCompositingLayer):
        (WebCore::RenderLayerCompositor::requiresOwnBackingStore):
        (WebCore::RenderLayerCompositor::requiresCompositingForBackfaceVisibility):
        * rendering/RenderLayerCompositor.h:

2014-05-01  Alex Christensen  <achristensen@webkit.org>

        Finish updating ANGLE.
        https://bugs.webkit.org/show_bug.cgi?id=132434

        Reviewed by Dean Jackson.

        * CMakeLists.txt:
        Removed Uniform.cpp which is no longer in ANGLE.

2014-05-01  David Hyatt  <hyatt@apple.com>

        REGRESSION (new multi-column): WebKit2.ResizeReversePaginatedWebView fails on debug bots
        https://bugs.webkit.org/show_bug.cgi?id=132429

        Reviewed by Alexey Proskuryakov.
        
        Make sure to get the column count directly from the column set.
        I was returning the theoretical column count from the flow thread,
        and that wasn't the right value.

        * rendering/RenderMultiColumnSet.h:
        * rendering/RenderView.cpp:
        (WebCore::RenderView::pageCount):

2014-05-01  Brent Fulgham  <bfulgham@apple.com>

        Fix handling of attributes prior to compiling shader
        https://bugs.webkit.org/show_bug.cgi?id=132430

        Reviewed by Dean Jackson.

        WebGL programs that called bindAttribLocations prior to compiling shader sources
        would perform the bind using the non-hashed symbol name, but would later create
        the attributes as hashed names. Consequently, the program would refer to
        attributes that were never actually part of any shader, resulting in some amazing
        display artifacts.

        This patch adds a dictionary of hashed symbol names so that we can tell the WebGL
        program the proper name that will be used when the shader is eventually compiled,
        allowing the WebGL program to link against the proper symbol after compiling and
        linking completes.

        * platform/graphics/GraphicsContext3D.h:
        * platform/graphics/opengl/GraphicsContext3DOpenGLCommon.cpp:
        (WebCore::generateHashedName): Function uses the ANGLE hashing
        function to generate correct symbol.
        (WebCore::GraphicsContext3D::mappedSymbolName): If we haven't compiled shaders yet, look
        in our set of potentially unused attributes.
        (WebCore::GraphicsContext3D::originalSymbolName): Ditto, for reverse lookup.

2014-05-01  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Make selection gaps painting subpixel aware.
        https://bugs.webkit.org/show_bug.cgi?id=132169

        Reviewed by Simon Fraser.

        Push selection gaps painting to device pixel boundaries instead of integral CSS pixel positions.

        Test: fast/inline/hidpi-selection-gap-on-subpixel-position.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::blockSelectionGap):
        (WebCore::RenderBlock::logicalLeftSelectionGap):
        (WebCore::RenderBlock::logicalRightSelectionGap):

2014-05-01  David Kilzer  <ddkilzer@apple.com>

        Really remove ENABLE_PLUGIN_PROXY_FOR_VIDEO
        <http://webkit.org/b/132432>

        Reviewed by Tim Horton.

        * platform/graphics/wince/MediaPlayerPrivateWinCE.h: Remove
        methods and ivar in ENABLE(PLUGIN_PROXY_FOR_VIDEO).

2014-05-01  Javier Fernandez  <jfernandez@igalia.com>

        [CSS Grid Layout] Clamping the number of repetitions in repeat()
        https://bugs.webkit.org/show_bug.cgi?id=131023

        Reviewed by Brent Fulgham.

        The ED suggests now to be able to clamp the number of repetitions when
        using the repeat() function, taking precautions about excessive memory
        usage.

        The implemented max repetitions is 10K.

        Test: fast/css-grid-layout/grid-element-repeat-max-repetitions.html

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseGridTrackRepeatFunction):

2014-04-30  Jer Noble  <jer.noble@apple.com>

        [MSE] Seeking between two buffered ranges enquues incorrect buffers.
        https://bugs.webkit.org/show_bug.cgi?id=132416

        Reviewed by Eric Carlson.

        std::equal_range(begin, end, value) will return an empty range if equal values cannot
        be found. But the range is not necessarily [end, end).  It may be some other value n,
        such that the empty range is [n, n). Check to see if the returned range is empty in
        findSampleContainingPresentationTime() and its reverse version, and if so, explicitly
        return presentationEnd() or reversePresentationEnd() respectively.

        Drive-by fix: make the comparator functions take const& arguments to minimize object
        creation.

        * Modules/mediasource/SampleMap.cpp:
        (WebCore::SampleIsLessThanMediaTimeComparator::operator()):
        (WebCore::SampleIsGreaterThanMediaTimeComparator::operator()):
        (WebCore::SampleMap::findSampleContainingPresentationTime):
        (WebCore::SampleMap::reverseFindSampleContainingPresentationTime):

2014-05-01  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Inline text selection painting should not snap to integral CSS pixel position.
        https://bugs.webkit.org/show_bug.cgi?id=132164

        Reviewed by Darin Adler.

        Inline text selection painting now snaps to device pixels. It uses the same rounding logic as
        other painting functions.

        Test: fast/inline/hidpi-select-inline-on-subpixel-position.html

        * rendering/EllipsisBox.cpp:
        (WebCore::EllipsisBox::paintSelection):
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paintSelection):
        (WebCore::alignSelectionRectToDevicePixels): Deleted.
        * rendering/InlineTextBox.h:

2014-05-01  Ryuan Choi  <ryuan.choi@samsung.com>

        [EFL] There are many warnings with software backend
        https://bugs.webkit.org/show_bug.cgi?id=132422

        Reviewed by Gyuyoung Kim.

        ecore_evas_gl_x11_window_get should be called when only engine is opengl_x11.

        This patch refactors not to call unnecessary API by checking engine type.
        In addition, removed unnecessary isUsingEcoreX().

        * platform/efl/EflScreenUtilities.cpp:
        (WebCore::applyFallbackCursor):
        (WebCore::getEcoreXWindow):
        (WebCore::isUsingEcoreX): Deleted.
        * platform/efl/EflScreenUtilities.h:

2014-05-01  Rik Cabanier  <cabanier@adobe.com>

        Calling createPattern with a broken image must throw an invalidstate error
        https://bugs.webkit.org/show_bug.cgi?id=132407

        Reviewed by Dirk Schulze.

        Per the WebIDL spec, passing non-finite parameter to a method that
        takes doubles, should generate a type error.

        Tests:
        * canvas/philip/tests/2d.imageData.create2.nonfinite.html:
        * fast/canvas/canvas-2d-imageData-create-nonfinite.html:

        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::createImageData):

2014-04-30  David Hyatt  <hyatt@apple.com>

        REGRESSION (r168046): [New Multicolumn] LeftToRight-rl.html (and all the other reversed/block-axis pagination tests) fail
        https://bugs.webkit.org/show_bug.cgi?id=132419

        Reviewed by Andreas Kling.

        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::initialBlockOffsetForPainting):
        Don't flip here. The old code needed to do that, but the new code doesn't.

2014-04-30  Alexey Proskuryakov  <ap@apple.com>

        Roll out fix for https://bugs.webkit.org/show_bug.cgi?id=131637:
        Clean up unnecessary methods in the BackForwardClient interface

        It broke a regression test and an API test.

        * WebCore.exp.in:
        * history/BackForwardClient.h:
        (WebCore::BackForwardClient::backItem):
        (WebCore::BackForwardClient::currentItem):
        (WebCore::BackForwardClient::forwardItem):
        * history/BackForwardController.cpp:
        (WebCore::BackForwardController::BackForwardController):
        * history/BackForwardController.h:
        (WebCore::BackForwardController::client):
        * history/BackForwardList.cpp:
        (WebCore::BackForwardList::BackForwardList):
        (WebCore::BackForwardList::close):
        * history/BackForwardList.h:
        (WebCore::BackForwardList::create):
        (WebCore::BackForwardList::page):
        * page/Page.cpp:
        (WebCore::Page::Page):
        (WebCore::Page::PageClients::PageClients):
        * page/Page.h:

2014-04-30  Simon Fraser  <simon.fraser@apple.com>

        More iOS build fixing. MediaPlayerPrivateIOS is defunct and can be removed.
        Fix some build errors in other media files.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/MediaPlayer.cpp:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        * platform/graphics/ios/MediaPlayerPrivateIOS.h: Removed.
        * platform/graphics/ios/MediaPlayerPrivateIOS.mm: Removed.

2014-04-30  Simon Fraser  <simon.fraser@apple.com>

        Fix the iOS build, which no longer needs these calls
        to enter/exitFullscreen.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute):

2014-04-30  Simon Fraser  <simon.fraser@apple.com>

        Remove ENABLE_PLUGIN_PROXY_FOR_VIDEO
        https://bugs.webkit.org/show_bug.cgi?id=132396

        Reviewed by Eric Carlson.

        Remove ENABLE_PLUGIN_PROXY_FOR_VIDEO and related code.

        * Configurations/FeatureDefines.xcconfig:
        * WebCore.exp.in:
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::canShareStyleWithElement):
        * dom/DOMImplementation.cpp:
        (WebCore::DOMImplementation::createDocument):
        * editing/TextIterator.cpp:
        (WebCore::isRendererReplacedElement):
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement):
        (WebCore::HTMLMediaElement::parseAttribute):
        * html/HTMLMediaElement.h:
        (WebCore::HTMLMediaElement::setNeedWidgetUpdate): Deleted.
        * html/HTMLMediaSession.cpp:
        (WebCore::HTMLMediaSession::showPlaybackTargetPicker):
        (WebCore::HTMLMediaSession::hasWirelessPlaybackTargets):
        (WebCore::HTMLMediaSession::setHasPlaybackTargetAvailabilityListeners):
        * html/HTMLVideoElement.cpp:
        (WebCore::HTMLVideoElement::createElementRenderer):
        (WebCore::HTMLVideoElement::didAttachRenderers):
        (WebCore::HTMLVideoElement::parseAttribute):
        (WebCore::HTMLVideoElement::setDisplayMode):
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlTextTrackContainerElement::updateSizes):
        * loader/EmptyClients.cpp:
        (WebCore::EmptyFrameLoaderClient::createMediaPlayerProxyPlugin): Deleted.
        * loader/EmptyClients.h:
        * loader/FrameLoaderClient.h:
        * loader/SubframeLoader.cpp:
        (WebCore::SubframeLoader::loadPlugin):
        (WebCore::SubframeLoader::loadMediaPlayerProxyPlugin): Deleted.
        * loader/SubframeLoader.h:
        * page/FrameView.cpp:
        (WebCore::FrameView::updateEmbeddedObject):
        * page/Settings.cpp:
        (WebCore::Settings::setVideoPluginProxyEnabled): Deleted.
        * page/Settings.h:
        (WebCore::Settings::isVideoPluginProxyEnabled): Deleted.
        * platform/graphics/GraphicsLayerClient.h:
        (WebCore::GraphicsLayerClient::mediaLayerMustBeUpdatedOnMainThread): Deleted.
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::installedMediaEngines):
        (WebCore::MediaPlayer::MediaPlayer):
        (WebCore::MediaPlayer::loadWithNextMediaEngine):
        (WebCore::NullMediaPlayerPrivate::deliverNotification): Deleted.
        (WebCore::NullMediaPlayerPrivate::setMediaPlayerProxy): Deleted.
        (WebCore::NullMediaPlayerPrivate::setControls): Deleted.
        (WebCore::MediaPlayer::deliverNotification): Deleted.
        (WebCore::MediaPlayer::setMediaPlayerProxy): Deleted.
        (WebCore::MediaPlayer::setControls): Deleted.
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::deliverNotification): Deleted.
        (WebCore::MediaPlayerPrivateInterface::setMediaPlayerProxy): Deleted.
        (WebCore::MediaPlayerPrivateInterface::setControls): Deleted.
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::updateGeometry):
        (WebCore::GraphicsLayerCA::updateContentsRects):
        (WebCore::GraphicsLayerCA::mediaLayerMustBeUpdatedOnMainThread): Deleted.
        * platform/graphics/ca/GraphicsLayerCA.h:
        * rendering/RenderEmbeddedObject.cpp:
        (WebCore::RenderEmbeddedObject::canHaveChildren):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::mediaLayerMustBeUpdatedOnMainThread): Deleted.
        * rendering/RenderLayerBacking.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::requiresCompositingForVideo):

2014-04-30  Simon Fraser  <simon.fraser@apple.com>

        [iOS WK2] Some accerated overflow-scroll doesn't scroll correctly
        https://bugs.webkit.org/show_bug.cgi?id=132375

        Reviewed by Tim Horton.
        
        We set the size of the scrolling layer (which becomes the bounds of
        the UIScrollView) to a non-pixel-snapped padding box size, but the
        size of the contents layer is an integral-snapped scroll size.
        This would result in a fractional difference between the two, which
        makes us thing that the element is scrollable when it really is not.
        
        Fix by setting the size of the scroll layer to pixel snapped client size,
        which is what we also use for scrollability computation.
        
        Added some FIXMEs in code that requires pixel snapping.
        
        Also use #if PLATFORM(IOS)/#else to bracket some code that never runs on iOS
        but tries to do something similar to iOS-only code.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):

2014-04-30  David Hyatt  <hyatt@apple.com>

        REGRESSION (r168046): [New Multicolumn] Painting order is wrong for columns and fixed positioned elements
        https://bugs.webkit.org/show_bug.cgi?id=132377

        Reviewed by Simon Fraser.

        Added fast/multicol/fixed-stack.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::shouldBeSelfPaintingLayer):
        (WebCore::RenderLayer::shouldBeNormalFlowOnly):
        Change the flow thread layer for multicolumn layout to be normal flow only and to
        stay self-painting. This has the effect of keeping the flow thread layer grouped
        with the enclosing multicolumn layer, and this keeps the paint order correct when
        compositing kicks in (or when something would otherwise try to get between the
        two layers).

2014-04-30  Eric Carlson  <eric.carlson@apple.com>

        [iOS] do not pause video when entering background while playing to external device
        https://bugs.webkit.org/show_bug.cgi?id=132374

        Reviewed by Jer Noble.

        * WebCore.exp.in: Update beginInterruption signature.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::canOverrideBackgroundPlaybackRestriction): New, return true when
            playing to external device.
        * html/HTMLMediaElement.h:

        * platform/audio/MediaSession.cpp:
        (WebCore::MediaSession::beginInterruption): Add interruption type to beginInterruption.
        * platform/audio/MediaSession.h:

        * platform/audio/MediaSessionManager.cpp:
        (WebCore::MediaSessionManager::beginInterruption): Ditto.
        (WebCore::MediaSessionManager::applicationWillEnterBackground): Ditto.
        (WebCore::MediaSessionManager::systemWillSleep): Ditto.
        * platform/audio/MediaSessionManager.h:

        * platform/audio/ios/AudioDestinationIOS.h:
        * platform/audio/ios/MediaSessionManagerIOS.mm:
        (-[WebMediaSessionHelper interruption:]): Ditto.

        * platform/audio/mac/AudioDestinationMac.h: Make most methods private. Add 
            canOverrideBackgroundPlaybackRestriction. Add missing overrides.
        * testing/Internals.cpp:
        (WebCore::Internals::beginMediaSessionInterruption): Pass interruption type.

2014-04-30  Manuel Rego Casasnovas  <rego@igalia.com>

        Unreviewed, rolling out r167879 and r167942.
        https://bugs.webkit.org/show_bug.cgi?id=132408

        OrderIterator changes caused regressions in flexbox (Requested
        by rego on #webkit).

        We're keeping the new layout test introduced in r167942
        (fast/flexbox/order-iterator-crash.html) to avoid similar
        regressions in the future.

        Reverted changesets:

        "OrderIterator refactoring to avoid extra loops"
        https://bugs.webkit.org/show_bug.cgi?id=119061
        http://trac.webkit.org/changeset/167879

        "REGRESSION (r167879): Heap-use-after-free in
        WebCore::RenderFlexibleBox"
        https://bugs.webkit.org/show_bug.cgi?id=132337
        http://trac.webkit.org/changeset/167942

2014-04-30  Enrica Casucci  <enrica@apple.com>

        Cursor gets thinner on empty lines.
        https://bugs.webkit.org/show_bug.cgi?id=132411
        <rdar://problem/15994556>

        Reviewed by Benjamin Poulain.

        RenderLineBreak::localCaretRect should not define
        locally the constant caretWidth, but use the one from
        RenderObject.h which knows about the differences between
        iOS and the other platforms.

        * rendering/RenderLineBreak.cpp:
        (WebCore::RenderLineBreak::localCaretRect):

2014-04-30  Víctor Manuel Jáquez Leal  <vjaquez@igalia.com>

        [GStreamer] Use GstMetaVideo
        https://bugs.webkit.org/show_bug.cgi?id=132247

        Reviewed by Philippe Normand.

        In WebKitVideoSink we announce the usage of GstMetaVideo, but we do
        not use it when handling the video frames. This might break
        some decoders and filters that rely on buffer's meta, rather
        that in the caps structures.

        This patch enables the use of GstMetaVideo through the GstVideoFrame
        API. And it is used everywhere the buffer mapping is required.

        Also this patch changes to nullptr where zeros were used.

        Also, compile conditionally the video buffer conversion when it is
        ARGB/BGRA, since it is only required for the Cairo backend.

        No new tests, already covered by current tests.

        * platform/graphics/gstreamer/GStreamerUtilities.cpp:
        (WebCore::getVideoSizeAndFormatFromCaps): init the GstVideoInfo before
        used and remove caps fixate check since it is done by
        gst_video_info_from_caps().
        * platform/graphics/gstreamer/ImageGStreamer.h:
        * platform/graphics/gstreamer/ImageGStreamerCairo.cpp:
        (ImageGStreamer::ImageGStreamer): use GstVideoFrame for buffer mapping
        and unmapping.
        (ImageGStreamer::~ImageGStreamer): ditto.
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.cpp:
        (WebCore::MediaPlayerPrivateGStreamerBase::updateTexture): ditto.
        (WebCore::MediaPlayerPrivateGStreamerBase::currentVideoSinkCaps):
        return nullptr if failed.
        * platform/graphics/gstreamer/VideoSinkGStreamer.cpp:
        (webkitVideoSinkRender): rely on GstVideoInfo rather than on the
        caps. Use GstVideoFrame for buffer mapping and unmapping. Add guards
        for buffer transformation, since it's only used by Cairo.
        (webkitVideoSinkDispose): remove glib version guards.
        (webkitVideoSinkSetCaps): update the value of the private
        GstVideoInfo.

2014-04-30  Víctor Manuel Jáquez Leal  <vjaquez@igalia.com>

        [GTK][GStreamer] Remove unnecessary GLIB_CHECK_VERSION #ifdefs
        https://bugs.webkit.org/show_bug.cgi?id=132390

        Reviewed by Philippe Normand.

        Since EFL port use GLib 2.38 and GTK+, 2.33.2, I assume it is OK
        remove, in GTK+ and GST, the existing glib version guards.

        No new tests, already covered by current tests.

        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.cpp:
        (WebCore::MediaPlayerPrivateGStreamerBase::MediaPlayerPrivateGStreamerBase):
        (WebCore::MediaPlayerPrivateGStreamerBase::~MediaPlayerPrivateGStreamerBase):
        * platform/graphics/gstreamer/VideoSinkGStreamer.cpp:
        (webkitVideoSinkDispose):
        (webkitVideoSinkFinalize): Deleted.

2014-04-30  Alex Christensen  <achristensen@webkit.org>

        Updated ANGLE.
        https://bugs.webkit.org/show_bug.cgi?id=132367
        <rdar://problem/16211451>

        Reviewed by Dean Jackson.

        * CMakeLists.txt
        Fixed ANGLE compiling with the update.
        * platform/graphics/opengl/Extensions3DOpenGLCommon.cpp:
        (WebCore::Extensions3DOpenGLCommon::getTranslatedShaderSourceANGLE):
        Removed SH_MAP_LONG_VARIABLE_NAMES which is no longer defined in ANGLE.
        See https://chromium.googlesource.com/angle/angle/+/3cdfcce86b38ef31a0afd71855887193a7924468
        * platform/graphics/opengl/Extensions3DOpenGLES.h:
        * platform/graphics/opengl/Extensions3DOpenGLES.cpp:
        Updated type names from ANGLE.

2014-04-30  Alexey Proskuryakov  <ap@apple.com>

        Move Blob.slice() implementation into BlobRegistryImpl
        https://bugs.webkit.org/show_bug.cgi?id=132402

        Reviewed by Anders Carlsson.

        Part or centralizing the responsibility for file size tracking.

        * fileapi/Blob.cpp:
        (WebCore::Blob::Blob):
        (WebCore::Blob::slice): Deleted.
        * fileapi/Blob.h:
        (WebCore::Blob::slice):
        * fileapi/ThreadableBlobRegistry.cpp:
        (WebCore::ThreadableBlobRegistry::registerBlobURL):
        (WebCore::ThreadableBlobRegistry::registerBlobURLForSlice):
        (WebCore::registerBlobURLTask): Deleted.
        (WebCore::registerBlobURLFromTask): Deleted.
        * fileapi/ThreadableBlobRegistry.h:
        * platform/network/BlobRegistry.h:
        * platform/network/BlobRegistryImpl.cpp:
        (WebCore::BlobRegistryImpl::appendStorageItems):
        (WebCore::BlobRegistryImpl::registerBlobURLForSlice):
        (WebCore::BlobRegistryImpl::blobSize):
        * platform/network/BlobRegistryImpl.h:

2014-04-30  Brent Fulgham  <bfulgham@apple.com>

        Unreviewed build fix after r168041.

        * WebCore.exp.in: Add missing iOS exports.

2014-04-30  Beth Dakin  <bdakin@apple.com>

        Always-visible scrollbars continuously repaint after non-momentum scrollling
        https://bugs.webkit.org/show_bug.cgi?id=132403
        -and corresponding-
        <rdar://problem/16553878>

        Reviewed by Simon Fraser.

        No longer universally opt into presentation value mode whenever the scroll 
        position changes on the scrolling thread. We really only want it for momentum 
        scrolls, and this will ensure that we always set it to NO once we have set it to 
        YES.
        * page/scrolling/mac/ScrollingTreeScrollingNodeMac.mm:
        (WebCore::ScrollingTreeScrollingNodeMac::handleWheelEvent):
        (WebCore::ScrollingTreeScrollingNodeMac::setScrollLayerPosition):

        Expose shouldUsePresentationValue.
        * platform/mac/NSScrollerImpDetails.h:

2014-04-30  Anders Carlsson  <andersca@apple.com>

        Move the legacy WebKit API into WebKitLegacy.framework and move it inside WebKit.framework
        https://bugs.webkit.org/show_bug.cgi?id=132399
        <rdar://problem/15920046>

        Reviewed by Dan Bernstein.

        Allow WebKitLegacy to link against WebCore.

        * Configurations/WebCore.xcconfig:

2014-04-30  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] ASSERTs in fast/dynamic/continuation-detach-crash.html
        https://bugs.webkit.org/show_bug.cgi?id=132392

        Reviewed by Dean Jackson.

        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::setRegionRangeForBox):
        Add ASSERTs in case we ever try to set regions from the wrong flow thread
        as part of the box's region range.

        * rendering/RenderMultiColumnFlowThread.cpp:
        (WebCore::RenderMultiColumnFlowThread::flowThreadDescendantInserted):
        Add a bunch of code that handles the discovery of a span from an outer flow thread
        being inserted into an inner flow thread. This forces us to delete that placeholder
        and shift the outer spanning content into the inner flow thread in order to get a new
        mapping/placeholder created in the inner flow thread.

        (WebCore::RenderMultiColumnFlowThread::flowThreadRelativeWillBeRemoved):
        Tighten this code to use the parent() just in case we change the invariant of
        parent = containingBlock later.

        * rendering/RenderMultiColumnFlowThread.h:
        Add a static guard when shifting a spanner to prevent the outer flow thread from
        thinking the spanner belongs to it when it gets punted out of the inner flow thread.
        A better long-term solution might be to make the spanner map global instead of
        per-flow thread.

        * rendering/RenderMultiColumnSpannerPlaceholder.cpp:
        (WebCore::RenderMultiColumnSpannerPlaceholder::RenderMultiColumnSpannerPlaceholder):
        * rendering/RenderMultiColumnSpannerPlaceholder.h:
        Cache the flow thread so that we can get back to it in order to detect if the
        placeholder belongs to us or not.

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::insertedIntoTree):
        Notifications from insertedIntoTree are problematic, since this can be called during
        the layout of the outer flow thread for content inside an inner flow thread that is
        not getting a layout yet. This makes the currentFlowThread in the flow thread controller
        inaccurate, so we have to add code to clear it out and put it back.

2014-04-29  Chris Fleizach  <cfleizach@apple.com>

        AX: Make "contenteditable" regions into AXTextAreas
        https://bugs.webkit.org/show_bug.cgi?id=132379

        Reviewed by Mario Sanchez Prada.

        Make contenteditable regions into AXTextAreas. This will allow for a more standardized
        interface for interaction with assistive technologies.

        Test: accessibility/content-editable-as-textarea.html

        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::hasContentEditableAttributeSet):
        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::contentEditableAttributeIsEnabled):
        * accessibility/AccessibilityObject.h:
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::documentBasedSelectedTextRange):
        (WebCore::AccessibilityRenderObject::selectedText):
        (WebCore::AccessibilityRenderObject::selectedTextRange):
        (WebCore::AccessibilityRenderObject::renderObjectIsObservable):
        (WebCore::AccessibilityRenderObject::determineAccessibilityRole):
        (WebCore::AccessibilityRenderObject::ariaSelectedTextRange): Deleted.
        * accessibility/AccessibilityRenderObject.h:

2014-04-30  Brian J. Burg  <burg@cs.washington.edu>

        Clean up unnecessary methods in the BackForwardClient interface
        https://bugs.webkit.org/show_bug.cgi?id=131637

        Reviewed by Andreas Kling.

        Demote back/current/forwardItem and iOS-specific methods from the
        BackForwardClient interface. Convert the class to not be refcounted.

        No new tests, no behavior was changed.

        * WebCore.exp.in:
        * history/BackForwardClient.h:
        (WebCore::BackForwardClient::~BackForwardClient): Deleted.
        (WebCore::BackForwardClient::backItem): Deleted.
        (WebCore::BackForwardClient::currentItem): Deleted.
        (WebCore::BackForwardClient::forwardItem): Deleted.
        * history/BackForwardController.cpp:
        (WebCore::BackForwardController::BackForwardController):
        * history/BackForwardController.h: Take ownership of the passed BackForwardClient.
        (WebCore::BackForwardController::client): Return a reference.
        * history/BackForwardList.h: Remove the Page field, since it isn't used any more.
        (WebCore::BackForwardList::create): Deleted.
        * page/Page.h: Remove RefPtr from PageClient.
        * page/Page.cpp:
        (WebCore::PageClients::PageClients): Initialize client to nullptr.

2014-04-30  Brent Fulgham  <bfulgham@apple.com>

        [Mac, iOS] Support caption activation via JS webkitHasClosedCaptions method
        https://bugs.webkit.org/show_bug.cgi?id=132320

        Reviewed by Eric Carlson.

        * Modules/mediacontrols/mediaControlsApple.css:
        (video::-webkit-media-text-track-container .hidden): Added.
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::configureTextTrackGroup): Added call to
        new 'updateCaptionsContainer'.
        (WebCore::HTMLMediaElement::updateCaptionContainer): Added.
        * html/HTMLMediaElement.h:

2014-04-30  Alexey Proskuryakov  <ap@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=132363
        Make Blob RawData immutable

        Reviewed by Anders Carlsson.

        * Modules/websockets/WebSocket.cpp: (WebCore::WebSocket::didReceiveBinaryData):
        Create RawData in one step.

        * WebCore.exp.in: Don't export a constructor that we no longer have (and the new one is inline).

        * fileapi/Blob.cpp: Removed entirely dead code.

        * fileapi/WebKitBlobBuilder.cpp:
        * fileapi/WebKitBlobBuilder.h:
        Updated to collect data in a plain Vector, so that we don't have to modify RawData.
        Removed FIXMEs about renaming - there used to be a BlobBuilder exposed to JS, but
        now this is just a helper to implement JS Blob constructor. We should probably
        still rename it, but not how the FIXME suggested.

        * platform/network/BlobData.cpp:
        (WebCore::BlobDataItem::detachFromCurrentThread): RawData::detachFromCurrentThread()
        was a no-op.
        (WebCore::BlobDataHandle::BlobDataHandle): Deleted. This was entirely dead code.
        (WebCore::BlobDataHandle::~BlobDataHandle): Ditto.

        * platform/network/BlobData.h: Made RawData immutable.

        * xml/XMLHttpRequest.cpp: (WebCore::XMLHttpRequest::responseBlob):
        Create RawData in one step.

2014-04-30  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Region offset not factored in when mapping to local coords
        https://bugs.webkit.org/show_bug.cgi?id=132383

        Reviewed by Anders Carlsson.

        Make sure to cache the offset of the multicolumn set from its parent and then
        add that in to the translation offset.

        * rendering/RenderMultiColumnFlowThread.cpp:
        (WebCore::RenderMultiColumnFlowThread::mapAbsoluteToLocalPoint):

2014-04-30  Zsolt Borbely  <zsborbely.u-szeged@partner.samsung.com>

        Move removeEquivalentProperties functions to EditingStyle
        https://bugs.webkit.org/show_bug.cgi?id=131093

        Reviewed by Csaba Osztrogonác.

        A follow-up to r167967. Use single line declaration for template methods.

        * editing/EditingStyle.h:

2014-04-30  Manuel Rego Casasnovas  <rego@igalia.com>

        [CSS Grid Layout] Enable runtime feature by default
        https://bugs.webkit.org/show_bug.cgi?id=132189

        Reviewed by Benjamin Poulain.

        * page/Settings.in: Set cssGridLayoutEnabled to true.

2014-04-30  Manuel Rego Casasnovas  <rego@igalia.com>

        [CSS Grid Layout] Wrap some specific grid code under compilation flag
        https://bugs.webkit.org/show_bug.cgi?id=132341

        Reviewed by Benjamin Poulain.

        Some static variables in RenderBox are only used for CSS Grid Layout code. Wrap them and the related methods
        under ENABLE_CSS_GRID_LAYOUT compilation flag.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::willBeDestroyed):
        (WebCore::RenderBox::containingBlockLogicalWidthForContent):
        (WebCore::RenderBox::containingBlockLogicalHeightForContent):
        (WebCore::RenderBox::perpendicularContainingBlockLogicalHeight):
        (WebCore::RenderBox::computePercentageLogicalHeight):
        * rendering/RenderBox.h:

2014-04-29  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167962 and r167975.
        https://bugs.webkit.org/show_bug.cgi?id=132376

        Mysteriously broke many tests (Requested by ap on #webkit).

        Reverted changesets:

        "[Mac, iOS] Support caption activation via JS
        webkitHasClosedCaptions method"
        https://bugs.webkit.org/show_bug.cgi?id=132320
        http://trac.webkit.org/changeset/167962

        "Unreviewed test fix after r167962."
        http://trac.webkit.org/changeset/167975

2014-04-29  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Multiple tests assert in RenderGeometryMap
        https://bugs.webkit.org/show_bug.cgi?id=132285

        Reviewed by Simon Fraser.

        Implement offsetFromContainer for RenderMultiColumnFlowThread so that the
        geometry map gets the right offsets. This is really only relevant for the 
        geometry map, since I already overrode mapAbsoluteToLocalPoint and multicolumn
        flow threads are repaint containers (so mapLocalToAbsolute never needs offsetFromContainer).

        * rendering/RenderMultiColumnFlowThread.cpp:
        (WebCore::RenderMultiColumnFlowThread::offsetFromContainer):
        * rendering/RenderMultiColumnFlowThread.h:

2014-04-29  Benjamin Poulain  <bpoulain@apple.com>

        [iOS][WK2] When pageScaleFactor * deviceScaleFactor = 1, the tile grid is completely messed up
        https://bugs.webkit.org/show_bug.cgi?id=132368

        Reviewed by Simon Fraser.

        * platform/graphics/ca/mac/TileController.mm:
        (WebCore::TileController::TileController):
        The initial device scale factor was initialized to 1. We were returning the wrong zoomedOutContentsScale() and
        contentsScale() on retina devices until the next successful scale update.

2014-04-29  Alexey Proskuryakov  <ap@apple.com>

        Remove an unused override of BlobRegistryImpl::appendStorageItems
        https://bugs.webkit.org/show_bug.cgi?id=132365

        Reviewed by Andreas Kling.

        * platform/network/BlobRegistryImpl.cpp:
        (WebCore::BlobRegistryImpl::appendStorageItems): Deleted.
        * platform/network/BlobRegistryImpl.h:

2014-04-29  Eric Carlson  <eric.carlson@apple.com>

        [Mac] tag the video layers with descriptive name to aid debugging
        https://bugs.webkit.org/show_bug.cgi?id=132371

        Reviewed by Darin Adler.

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::createVideoLayer): Set the AVPlayerLayer
            name in a debug build.

2014-04-29  Nikos Andronikos  <nikos.andronikos-webkit@cisra.canon.com.au>

        [GTK][cmake] CMake variable (non)expansion causing 'File name too long' build error.
        https://bugs.webkit.org/show_bug.cgi?id=132244

        Reviewed by Martin Robinson.

        Removing quotes around include directory variable ${WebCore_INCLUDE_DIRECTORIES} in
        the include_directories cmake macro enables the variable to be expanded correctly.

        No tests created as this fixes a platform specific build issue.

        * PlatformGTK.cmake:

2014-04-29  Brent Fulgham  <bfulgham@apple.com>

        Unreviewed test fix after r167962.
        * Modules/mediacontrols/mediaControlsApple.css:
        (.hidden): Use common '.hidden' class for controls.
        (video::-webkit-media-text-track-container .hidden): Deleted.

2014-04-29  Brady Eidson  <beidson@apple.com>

        Handle selection services menu.
        <rdar://problem/16727798> and https://bugs.webkit.org/show_bug.cgi?id=132362

        Reviewed by Tim Horton.

        * WebCore.exp.in:

2014-04-29  Myles C. Maxfield  <mmaxfield@apple.com>

        Removing unused argument in InlineFlowBox::placeBoxesInInlineDirection()
        https://bugs.webkit.org/show_bug.cgi?id=132369

        Reviewed by Darin Adler.

        This was not caught by our compiler because placeBoxesInInlineDirection()
        is mutually-recursive with placeBoxRangeInInlineDirection().

        No new tests are necessary because there should be no behavior change.

        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::placeBoxesInInlineDirection):
        (WebCore::InlineFlowBox::placeBoxRangeInInlineDirection):
        * rendering/InlineFlowBox.h:
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlockFlow::computeInlineDirectionPositionsForLine):

2014-04-29  Alex Christensen  <achristensen@webkit.org>

        [WinCairo] Switch video from GStreamer to Media Foundation.
        https://bugs.webkit.org/show_bug.cgi?id=132358

        Reviewed by Brent Fulgham.

        * WebCore.vcxproj/WebCore.vcxproj:
        Removed dependencies on GStreamer.

2014-04-29  Simon Fraser  <simon.fraser@apple.com>

        Remove some PLATFORM(IOS) #ifdefs related to hasAcceleratedTouchScrolling()
        https://bugs.webkit.org/show_bug.cgi?id=132353

        Reviewed by Tim Horton & Darin Adler.

        Minor cleanup and refactoring to remove #idefs.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::scrollTo): No need for this #ifdef, usesCompositedScrolling()
        gives the right answser already.
        (WebCore::RenderLayer::visibleContentRectInternal): Use showsOverflowControls() to
        avoid #ifdef.
        (WebCore::RenderLayer::invalidateScrollbarRect): Ditto.
        (WebCore::RenderLayer::invalidateScrollCornerRect): Ditto.
        (WebCore::RenderLayer::verticalScrollbarWidth): Ditto.
        (WebCore::RenderLayer::horizontalScrollbarHeight): Ditto.
        (WebCore::RenderLayer::showsOverflowControls): Return false on iOS.
        (WebCore::RenderLayer::paintOverflowControls): Ditto.
        (WebCore::RenderLayer::calculateClipRects): Ditto.
        * rendering/RenderLayer.h:
        * rendering/RenderLayerBacking.cpp:
        (WebCore::layerOrAncestorIsTransformedOrUsingCompositedScrolling):
        Just #ifdef in side of this function rather than having two similar functions.
        (WebCore::RenderLayerBacking::shouldClipCompositedBounds):
        (WebCore::hasNonZeroTransformOrigin):
        (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration): Use a local bool
        to reduce #ifdefs.
        (WebCore::layerOrAncestorIsTransformedOrScrolling): Deleted.

2014-04-29  Simon Fraser  <simon.fraser@apple.com>

        Remove Settings::compositedScrollingForFramesEnabled
        https://bugs.webkit.org/show_bug.cgi?id=132352

        Reviewed by Andreas Kling.

        The usesCompositedScrolling setting was only used by Chromium, so
        remove it and associated code.

        * page/FrameView.cpp:
        (WebCore::FrameView::usesCompositedScrolling): Deleted.
        * page/FrameView.h:
        * page/Settings.in:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateScrollLayerPosition):

2014-04-29  Zsolt Borbely  <zsborbely.u-szeged@partner.samsung.com>

        Move removeEquivalentProperties functions to EditingStyle
        https://bugs.webkit.org/show_bug.cgi?id=131093

        Reviewed by Darin Adler.

        Moved the removeEquivalentProperties functions
        from StyleProperties to EditingStyle class.

        * css/StyleProperties.cpp:
        (WebCore::MutableStyleProperties::removeEquivalentProperties): Deleted.
        * css/StyleProperties.h:
        * editing/EditingStyle.cpp:
        (WebCore::EditingStyle::removeStyleAddedByNode):
        (WebCore::EditingStyle::removeStyleConflictingWithStyleOfNode):
        (WebCore::EditingStyle::prepareToApplyAt):
        (WebCore::EditingStyle::removeEquivalentProperties):
        (WebCore::extractPropertiesNotIn):
        * editing/EditingStyle.h:

2014-04-29  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Implement support for compositing
        https://bugs.webkit.org/show_bug.cgi?id=132298

        Reviewed by Simon Fraser.

        * rendering/RenderLayer.cpp:
        (WebCore::accumulateOffsetTowardsAncestor):
        Add in a case for the new columns that calls into the multi-column flow thread
        to get an offset to adjust by.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::adjustAncestorCompositingBoundsForFlowThread):
        Make sure this code only runs for named flow threads.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::canBeComposited):
        Turn on compositing support for in-flow RenderFlowThreads instead of always returning
        false

        * rendering/RenderMultiColumnFlowThread.cpp:
        (WebCore::RenderMultiColumnFlowThread::physicalTranslationOffsetFromFlowToRegion):
        Changed this function to fix a couple of bugs exposed by compositing/columns tests. Its
        end goal is the same, but the approach is improved.

        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::endFlow):
        Don't pad out to a multiple of column height. You can't flip around a flow thread
        to get back to accurate physical coordinates if bogus padding is introduced. This
        seemed to have no effect on any layout tests when removed, so I don't think it 
        was really serving any useful purpose.

        (WebCore::RenderMultiColumnSet::columnTranslationForOffset):
        Don't factor in the overall flow thread portion, since this is handled by the callers
        now.

        (WebCore::RenderMultiColumnSet::adjustRegionBoundsFromFlowThreadPortionRect):
        * rendering/RenderMultiColumnSet.h:
        Change this function to be ASSERT_NOT_REACHED(), since we want to know if someone calls
        it. It only runs for named flow thread compositing code, so it would be a mistake if
        this ever gets invoked.

2014-04-29  Mark Hahnenberg  <mhahnenberg@apple.com>

        JSProxies should be cacheable
        https://bugs.webkit.org/show_bug.cgi?id=132351

        Reviewed by Geoffrey Garen.

        No new tests.

        Whenever we encounter a proxy in an inline cache we should try to cache on the 
        proxy's target instead of giving up.

        This patch adds support for a simple "recursive" inline cache if the base object
        we're accessing is a pure forwarding proxy. JSGlobalObject and its subclasses 
        are the only ones to benefit from this right now.

        This is performance neutral on the benchmarks we track. Currently we won't
        cache on JSDOMWindow due to HasImpureGetOwnPropertySlot, but this issue will be fixed soon.

        * bindings/js/JSDOMWindowShell.h:
        (WebCore::JSDOMWindowShell::createStructure):

2014-04-29  Brent Fulgham  <bfulgham@apple.com>

        [Mac, iOS] Support caption activation via JS webkitHasClosedCaptions method
        https://bugs.webkit.org/show_bug.cgi?id=132320

        Reviewed by Eric Carlson.

        * Modules/mediacontrols/mediaControlsApple.css:
        (video::-webkit-media-text-track-container .hidden): Added.
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::configureTextTrackGroup): Added call to
        new 'updateCaptionsContainer'.
        (WebCore::HTMLMediaElement::updateCaptionContainer): Added.
        * html/HTMLMediaElement.h:
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlTextTrackContainerElement::hide): Use CSS class .hidden instead of
        hard-coded "display:none".
        (WebCore::MediaControlTextTrackContainerElement::show): Ditto.
        * html/shadow/MediaControlElements.h:

2014-04-28  Roger Fong  <roger_fong@apple.com>

        Plugins hidden by images should autoplay.
        https://bugs.webkit.org/show_bug.cgi?id=132222.
        <rdar://problem/16653536>

        Reviewed by Jon Lee and Darin Adler.

        * WebCore.exp.in: Add exports needed by WK2.

2014-04-29  Filip Pizlo  <fpizlo@apple.com>

        Use LLVM as a backend for the fourth-tier DFG JIT (a.k.a. the FTL JIT)
        https://bugs.webkit.org/show_bug.cgi?id=112840

        Rubber stamped by Geoffrey Garen.

        It already has a lot of tests.

        * Configurations/FeatureDefines.xcconfig:

2014-04-29  Brady Eidson  <beidson@apple.com>

        Change Image Controls replacement to use selection and paste
        <rdar://problem/16302722> and https://bugs.webkit.org/show_bug.cgi?id=131992

        Reviewed by Tim Horton.

        * WebCore.exp.in: Remove deleted symbol.

        * html/shadow/mac/ImageControlsButtonElementMac.cpp:
        (WebCore::ImageControlsButtonElementMac::defaultEventHandler):

        * page/ContextMenuController.cpp:
        (WebCore::ContextMenuController::showImageControlsMenu): Select the image element
          before showing the menu.
        (WebCore::ContextMenuController::replaceControlledImage): Deleted.
        * page/ContextMenuController.h:

2014-04-29  Jer Noble  <jer.noble@apple.com>

        [iOS] Remove workaround for <rdar://problem/16578727>.
        https://bugs.webkit.org/show_bug.cgi?id=132338

        Reviewed by Darin Adler.

        Now that <rdar://problem/16578727> is fixed, remove the workaround by replacing the
        call to -_updatePlaybackControlsViewController with one to -layoutIfNeeded.

        * platform/ios/WebVideoFullscreenInterfaceAVKit.mm:
        (WebVideoFullscreenInterfaceAVKit::enterFullscreen):

2014-04-29  Zan Dobersek  <zdobersek@igalia.com>

        ScriptExecutionContext::Task should work well with C++11 lambdas
        https://bugs.webkit.org/show_bug.cgi?id=129795

        Reviewed by Darin Adler.

        Instead of having classes that subclass ScriptExecutionContext::Task and override
        the performTask(ScriptExecutionContext*) method, have the ScriptExecutionContext::Task
        take in a std::function<void (ScriptExecutionContext*)>-like object trough the constructor
        which would contain the code currently kept in the performTask() methods.

        This enables inlining C++11 lambdas into ScriptExecutionContext::postTask() calls. For
        cleanup tasks, the Task object can be implicitly constructed by using the initializer list
        constructor with the first argument being the ScriptExecutionContext::Task::CleanupTask tag.
        The ScriptExecutionContext class remains non-copyable and now stores the passed-in invokable
        object in the std::function wrapper, along with a boolean member that indicates whether the
        task is of cleanup nature.

        * Modules/quota/StorageErrorCallback.cpp:
        (WebCore::StorageErrorCallback::CallbackTask::CallbackTask):
        (WebCore::StorageErrorCallback::CallbackTask::performTask): Deleted.
        * Modules/quota/StorageErrorCallback.h:
        (WebCore::StorageErrorCallback::CallbackTask::create): Deleted.
        * Modules/webdatabase/Database.cpp:
        (WebCore::Database::~Database):
        (WebCore::Database::runTransaction):
        (WebCore::Database::scheduleTransactionCallback):
        (WebCore::DerefContextTask::create): Deleted.
        (WebCore::DerefContextTask::performTask): Deleted.
        (WebCore::DerefContextTask::isCleanupTask): Deleted.
        (WebCore::DerefContextTask::DerefContextTask): Deleted.
        (WebCore::callTransactionErrorCallback): Deleted.
        (WebCore::DeliverPendingCallbackTask::create): Deleted.
        (WebCore::DeliverPendingCallbackTask::performTask): Deleted.
        (WebCore::DeliverPendingCallbackTask::DeliverPendingCallbackTask): Deleted.
        * Modules/webdatabase/DatabaseManager.cpp:
        (WebCore::DatabaseManager::openDatabase):
        (WebCore::DatabaseCreationCallbackTask::create): Deleted.
        (WebCore::DatabaseCreationCallbackTask::performTask): Deleted.
        (WebCore::DatabaseCreationCallbackTask::DatabaseCreationCallbackTask): Deleted.
        * Modules/webdatabase/DatabaseSync.cpp:
        (WebCore::CloseSyncDatabaseOnContextThreadTask::create): Deleted.
        (WebCore::CloseSyncDatabaseOnContextThreadTask::performTask): Deleted.
        (WebCore::CloseSyncDatabaseOnContextThreadTask::CloseSyncDatabaseOnContextThreadTask): Deleted.
        * Modules/webdatabase/SQLCallbackWrapper.h:
        (WebCore::SQLCallbackWrapper::clear):
        (WebCore::SQLCallbackWrapper::SafeReleaseTask::create): Deleted.
        (WebCore::SQLCallbackWrapper::SafeReleaseTask::performTask): Deleted.
        (WebCore::SQLCallbackWrapper::SafeReleaseTask::isCleanupTask): Deleted.
        (WebCore::SQLCallbackWrapper::SafeReleaseTask::SafeReleaseTask): Deleted.
        * Modules/websockets/ThreadableWebSocketChannelClientWrapper.cpp:
        (WebCore::ThreadableWebSocketChannelClientWrapper::didConnect):
        (WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveMessage):
        (WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveBinaryData):
        (WebCore::ThreadableWebSocketChannelClientWrapper::didUpdateBufferedAmount):
        (WebCore::ThreadableWebSocketChannelClientWrapper::didStartClosingHandshake):
        (WebCore::ThreadableWebSocketChannelClientWrapper::didClose):
        (WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveMessageError):
        (WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks):
        * Modules/websockets/ThreadableWebSocketChannelClientWrapper.h:
        * Modules/websockets/WorkerThreadableWebSocketChannel.cpp:
        (WebCore::WorkerThreadableWebSocketChannel::Bridge::mainThreadInitialize):
        (WebCore::WorkerThreadableWebSocketChannel::mainThreadDestroy):
        (WebCore::WorkerThreadableWebSocketChannel::Bridge::disconnect):
        (WebCore::WorkerThreadableWebSocketChannel::WorkerGlobalScopeDidInitializeTask::create): Deleted.
        (WebCore::WorkerThreadableWebSocketChannel::WorkerGlobalScopeDidInitializeTask::~WorkerGlobalScopeDidInitializeTask): Deleted.
        (WebCore::WorkerThreadableWebSocketChannel::WorkerGlobalScopeDidInitializeTask::WorkerGlobalScopeDidInitializeTask): Deleted.
        * Modules/websockets/WorkerThreadableWebSocketChannel.h:
        * bindings/js/JSCallbackData.h:
        (WebCore::DeleteCallbackDataTask::DeleteCallbackDataTask):
        (WebCore::DeleteCallbackDataTask::create): Deleted.
        (WebCore::DeleteCallbackDataTask::performTask): Deleted.
        (WebCore::DeleteCallbackDataTask::isCleanupTask): Deleted.
        * bindings/js/JSDOMGlobalObjectTask.cpp:
        (WebCore::JSGlobalObjectTask::JSGlobalObjectTask):
        (WebCore::JSGlobalObjectTask::~JSGlobalObjectTask): Deleted.
        (WebCore::JSGlobalObjectTask::performTask): Deleted.
        * bindings/js/JSDOMGlobalObjectTask.h:
        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::queueTaskToEventLoop):
        * bindings/js/JSWorkerGlobalScopeBase.cpp:
        (WebCore::JSWorkerGlobalScopeBase::queueTaskToEventLoop):
        * bindings/scripts/CodeGeneratorJS.pm:
        * bindings/scripts/test/JS/JSTestCallback.cpp:
        (WebCore::JSTestCallback::~JSTestCallback):
        (GenerateCallbackImplementation):
        * dom/CrossThreadTask.h:
        (WebCore::CrossThreadTask1::performTask):
        (WebCore::CrossThreadTask2::performTask):
        (WebCore::CrossThreadTask3::performTask):
        (WebCore::CrossThreadTask4::performTask):
        (WebCore::CrossThreadTask5::performTask):
        (WebCore::CrossThreadTask6::performTask):
        (WebCore::CrossThreadTask7::performTask):
        (WebCore::CrossThreadTask8::performTask):
        (WebCore::createCallbackTask):
        (WebCore::CrossThreadTask1::create): Deleted.
        (WebCore::CrossThreadTask2::create): Deleted.
        (WebCore::CrossThreadTask3::create): Deleted.
        (WebCore::CrossThreadTask4::create): Deleted.
        (WebCore::CrossThreadTask5::create): Deleted.
        (WebCore::CrossThreadTask6::create): Deleted.
        (WebCore::CrossThreadTask7::create): Deleted.
        (WebCore::CrossThreadTask8::create): Deleted.
        * dom/Document.cpp:
        (WebCore::Document::addConsoleMessage):
        (WebCore::Document::addMessage):
        (WebCore::Document::postTask):
        (WebCore::Document::pendingTasksTimerFired):
        (WebCore::PerformTaskContext::PerformTaskContext): Deleted.
        (WebCore::Document::didReceiveTask): Deleted.
        * dom/Document.h:
        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::processMessagePortMessagesSoon):
        (WebCore::ScriptExecutionContext::timerAlignmentInterval):
        (WebCore::ProcessMessagesSoonTask::create): Deleted.
        (WebCore::ScriptExecutionContext::AddConsoleMessageTask::performTask): Deleted.
        (WebCore::ScriptExecutionContext::Task::~Task): Deleted.
        * dom/ScriptExecutionContext.h:
        (WebCore::ScriptExecutionContext::Task::Task):
        (WebCore::ScriptExecutionContext::Task::performTask):
        (WebCore::ScriptExecutionContext::Task::isCleanupTask):
        (WebCore::ScriptExecutionContext::AddConsoleMessageTask::AddConsoleMessageTask):
        (WebCore::ScriptExecutionContext::AddConsoleMessageTask::create): Deleted.
        * dom/StringCallback.cpp:
        (WebCore::StringCallback::scheduleCallback):
        * loader/appcache/ApplicationCacheGroup.cpp:
        (WebCore::ApplicationCacheGroup::postListenerTask):
        (WebCore::CallCacheListenerTask::create): Deleted.
        (WebCore::CallCacheListenerTask::CallCacheListenerTask): Deleted.
        * workers/DefaultSharedWorkerRepository.cpp:
        (WebCore::SharedWorkerProxy::postTaskToLoader):
        (WebCore::SharedWorkerProxy::postTaskForModeToWorkerGlobalScope):
        (WebCore::SharedWorkerConnectTask::SharedWorkerConnectTask):
        (WebCore::DefaultSharedWorkerRepository::workerScriptLoaded):
        (WebCore::DefaultSharedWorkerRepository::connectToWorker):
        (WebCore::SharedWorkerConnectTask::create): Deleted.
        (WebCore::SharedWorkerConnectTask::performTask): Deleted.
        * workers/WorkerEventQueue.cpp:
        (WebCore::WorkerEventQueue::EventDispatcher::EventDispatcher):
        (WebCore::WorkerEventQueue::EventDispatcher::~EventDispatcher):
        (WebCore::WorkerEventQueue::EventDispatcher::dispatch):
        (WebCore::WorkerEventQueue::enqueueEvent):
        (WebCore::WorkerEventQueue::cancelEvent):
        (WebCore::WorkerEventQueue::close):
        * workers/WorkerEventQueue.h:
        * workers/WorkerGlobalScope.cpp:
        (WebCore::WorkerGlobalScope::close):
        (WebCore::WorkerGlobalScope::postTask):
        (WebCore::WorkerGlobalScope::addConsoleMessage):
        (WebCore::WorkerGlobalScope::addMessage):
        (WebCore::CloseWorkerGlobalScopeTask::create): Deleted.
        (WebCore::CloseWorkerGlobalScopeTask::performTask): Deleted.
        (WebCore::CloseWorkerGlobalScopeTask::isCleanupTask): Deleted.
        * workers/WorkerGlobalScope.h:
        * workers/WorkerLoaderProxy.h:
        * workers/WorkerMessagingProxy.cpp:
        (WebCore::WorkerMessagingProxy::postMessageToWorkerObject):
        (WebCore::WorkerMessagingProxy::postMessageToWorkerGlobalScope):
        (WebCore::WorkerMessagingProxy::postTaskForModeToWorkerGlobalScope):
        (WebCore::WorkerMessagingProxy::postTaskToLoader):
        (WebCore::WorkerMessagingProxy::postExceptionToWorkerObject):
        (WebCore::WorkerMessagingProxy::workerThreadCreated):
        (WebCore::WorkerMessagingProxy::notifyNetworkStateChange):
        (WebCore::WorkerMessagingProxy::workerGlobalScopeDestroyed):
        (WebCore::WorkerMessagingProxy::workerGlobalScopeClosed):
        (WebCore::WorkerMessagingProxy::postMessageToPageInspector):
        (WebCore::WorkerMessagingProxy::confirmMessageFromWorkerObject):
        (WebCore::WorkerMessagingProxy::reportPendingActivity):
        (WebCore::MessageWorkerGlobalScopeTask::create): Deleted.
        (WebCore::MessageWorkerGlobalScopeTask::MessageWorkerGlobalScopeTask): Deleted.
        (WebCore::MessageWorkerGlobalScopeTask::performTask): Deleted.
        (WebCore::MessageWorkerTask::create): Deleted.
        (WebCore::MessageWorkerTask::MessageWorkerTask): Deleted.
        (WebCore::MessageWorkerTask::performTask): Deleted.
        (WebCore::WorkerExceptionTask::create): Deleted.
        (WebCore::WorkerExceptionTask::WorkerExceptionTask): Deleted.
        (WebCore::WorkerExceptionTask::performTask): Deleted.
        (WebCore::WorkerGlobalScopeDestroyedTask::create): Deleted.
        (WebCore::WorkerGlobalScopeDestroyedTask::WorkerGlobalScopeDestroyedTask): Deleted.
        (WebCore::WorkerGlobalScopeDestroyedTask::performTask): Deleted.
        (WebCore::WorkerTerminateTask::create): Deleted.
        (WebCore::WorkerTerminateTask::WorkerTerminateTask): Deleted.
        (WebCore::WorkerTerminateTask::performTask): Deleted.
        (WebCore::WorkerThreadActivityReportTask::create): Deleted.
        (WebCore::WorkerThreadActivityReportTask::WorkerThreadActivityReportTask): Deleted.
        (WebCore::WorkerThreadActivityReportTask::performTask): Deleted.
        (WebCore::PostMessageToPageInspectorTask::create): Deleted.
        (WebCore::PostMessageToPageInspectorTask::PostMessageToPageInspectorTask): Deleted.
        (WebCore::PostMessageToPageInspectorTask::performTask): Deleted.
        (WebCore::NotifyNetworkStateChangeTask::create): Deleted.
        (WebCore::NotifyNetworkStateChangeTask::NotifyNetworkStateChangeTask): Deleted.
        (WebCore::NotifyNetworkStateChangeTask::performTask): Deleted.
        * workers/WorkerMessagingProxy.h:
        * workers/WorkerRunLoop.cpp:
        (WebCore::WorkerRunLoop::postTask):
        (WebCore::WorkerRunLoop::postTaskAndTerminate):
        (WebCore::WorkerRunLoop::postTaskForMode):
        (WebCore::WorkerRunLoop::Task::create):
        (WebCore::WorkerRunLoop::Task::performTask):
        (WebCore::WorkerRunLoop::Task::Task):
        * workers/WorkerRunLoop.h:
        * workers/WorkerThread.cpp:
        (WebCore::WorkerThread::stop):
        (WebCore::WorkerThread::releaseFastMallocFreeMemoryInAllThreads):
        (WebCore::WorkerThreadShutdownFinishTask::create): Deleted.
        (WebCore::WorkerThreadShutdownFinishTask::performTask): Deleted.
        (WebCore::WorkerThreadShutdownFinishTask::isCleanupTask): Deleted.
        (WebCore::WorkerThreadShutdownStartTask::create): Deleted.
        (WebCore::WorkerThreadShutdownStartTask::performTask): Deleted.
        (WebCore::WorkerThreadShutdownStartTask::isCleanupTask): Deleted.

2014-04-29  Manuel Rego Casasnovas  <rego@igalia.com>

        REGRESSION (r167879): Heap-use-after-free in WebCore::RenderFlexibleBox
        https://bugs.webkit.org/show_bug.cgi?id=132337

        Reviewed by Simon Fraser.

        From Blink r154582 by <jchaffraix@chromium.org>

        This is a regression from the changes in OrderIterator. The issue is
        that we don't invalidate our iterator when a child is removed. This
        means that we could hold onto free'd memory until the next layout
        when we will recompute the iterator.

        The solution is simple: just clear the memory when we remove a child.

        Note that RenderGrid is not impacted by this bug as we don't use the
        iterator outside layout yet, but if we do it at some point the very same
        problem will arise, so the same treatment was applied to the class.

        Test: fast/flexbox/order-iterator-crash.html

        * rendering/OrderIterator.cpp:
        (WebCore::OrderIterator::invalidate): Clear m_children Vector.
        * rendering/OrderIterator.h:
        (WebCore::OrderIteratorPopulator::OrderIteratorPopulator): Use
        invalidate() method.
        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::removeChild): Invalidate m_orderIterator.
        * rendering/RenderFlexibleBox.h: Add removeChild() signature.
        * rendering/RenderGrid.cpp: Invalidate m_orderIterator.
        (WebCore::RenderGrid::removeChild):
        * rendering/RenderGrid.h: Add removeChild() header.

2014-04-29  Enrica Casucci  <enrica@apple.com>

        iOS build fix after http://trac.webkit.org/changeset/167937.
        Unreviewed.

        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::adjustButtonStyle):

2014-04-29  Hans Muller  <hmuller@adobe.com>

        [CSS Shapes] off-by-one error in Shape::createRasterShape()
        https://bugs.webkit.org/show_bug.cgi?id=132154

        Reviewed by Bem Jones-Bey.

        This is a port of a patch for a bug that was reported by and fixed in Blink by
        David Vest: https://codereview.chromium.org/237123002/.  Shape::createRasterShape()
        now consistently reports "end-point exclusive" intervals. Before the patch
        an entire row of pixels was above the shape-image-threshold, the interval's end
        index was reported as image.width. Now it's image.width + 1, which is consistent
        with the way the end index is reported if the last above threshold pixel is within
        an image row.

        Two existing tests were revised to account for this change.

        * rendering/shapes/RasterShape.cpp:
        (WebCore::RasterShape::getExcludedIntervals):
        * rendering/shapes/Shape.cpp:
        (WebCore::Shape::createRasterShape):

2014-04-29  Bem Jones-Bey  <bjonesbe@adobe.com>

        Wrap CSS length conversion arguments in an object
        https://bugs.webkit.org/show_bug.cgi?id=131552

        Reviewed by Andreas Kling.

        This patch introduces a class CSSToLengthConversionData to wrap the
        data required to convert CSS lengths to Lengths. This simplifies the
        plumbing that goes on whenever we need to resolve CSS lengths and
        makes it easier to update the arguments needed for resolving these (in
        particular adding a RenderView for resolving viewport units at style
        recalc time; removing the computingFontSize bool also appears
        possible).

        Note that the zoom argument, which was previously a float in some
        places and a double in others is now a float.

        This is a port of a Blink patch by timloh@chromium.org.

        No new tests, no behavior change.

        * CMakeLists.txt:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/BasicShapeFunctions.cpp:
        (WebCore::convertToLength):
        (WebCore::convertToLengthSize):
        (WebCore::convertToCenterCoordinate):
        (WebCore::cssValueToBasicShapeRadius):
        (WebCore::basicShapeForValue):
        * css/BasicShapeFunctions.h:
        * css/CSSCalculationValue.cpp:
        (WebCore::CSSCalcValue::computeLengthPx):
        (WebCore::determineCategory):
        * css/CSSCalculationValue.h:
        (WebCore::CSSCalcValue::createCalculationValue):
        * css/CSSGradientValue.cpp:
        (WebCore::CSSGradientValue::addStops):
        (WebCore::positionFromValue):
        (WebCore::CSSGradientValue::computeEndPoint):
        (WebCore::CSSLinearGradientValue::createGradient):
        (WebCore::CSSRadialGradientValue::resolveRadius):
        (WebCore::CSSRadialGradientValue::createGradient):
        * css/CSSGradientValue.h:
        * css/CSSPrimitiveValue.cpp:
        (WebCore::CSSPrimitiveValue::computeLength):
        (WebCore::CSSPrimitiveValue::computeLengthDouble):
        * css/CSSPrimitiveValue.h:
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::convertToLength):
        * css/CSSToLengthConversionData.cpp: Added.
        (WebCore::CSSToLengthConversionData::zoom):
        * css/CSSToLengthConversionData.h: Added.
        (WebCore::CSSToLengthConversionData::CSSToLengthConversionData):
        (WebCore::CSSToLengthConversionData::style):
        (WebCore::CSSToLengthConversionData::rootStyle):
        (WebCore::CSSToLengthConversionData::computingFontSize):
        (WebCore::CSSToLengthConversionData::copyWithAdjustedZoom):
        * css/CSSToStyleMap.cpp:
        (WebCore::CSSToStyleMap::CSSToStyleMap):
        (WebCore::CSSToStyleMap::mapFillSize):
        (WebCore::CSSToStyleMap::mapFillXPosition):
        (WebCore::CSSToStyleMap::mapFillYPosition):
        (WebCore::CSSToStyleMap::mapNinePieceImageQuad):
        * css/CSSToStyleMap.h:
        (WebCore::CSSToStyleMap::CSSToStyleMap): Deleted.
        * css/DeprecatedStyleBuilder.cpp:
        (WebCore::ApplyPropertyAuto::applyValue):
        (WebCore::ApplyPropertyClip::convertToLength):
        (WebCore::ApplyPropertyLength::applyValue):
        (WebCore::ApplyPropertyBorderRadius::applyValue):
        (WebCore::ApplyPropertyComputeLength::applyValue):
        (WebCore::ApplyPropertyFontSize::applyValue):
        (WebCore::csstoLengthConversionDataWithTextZoomFactor):
        (WebCore::ApplyPropertyMarqueeIncrement::applyValue):
        (WebCore::ApplyPropertyLineHeight::applyValue):
        (WebCore::ApplyPropertyLineHeightForIOSTextAutosizing::applyValue):
        (WebCore::ApplyPropertyWordSpacing::applyValue):
        (WebCore::ApplyPropertyPageSize::mmLength):
        (WebCore::ApplyPropertyPageSize::inchLength):
        (WebCore::ApplyPropertyPageSize::applyValue):
        (WebCore::ApplyPropertyVerticalAlign::applyValue):
        (WebCore::ApplyPropertyClipPath::applyValue):
        (WebCore::ApplyPropertyShape::applyValue):
        (WebCore::ApplyPropertyTextIndent::applyValue):
        * css/MediaQueryEvaluator.cpp:
        (WebCore::colorMediaFeatureEval):
        (WebCore::color_indexMediaFeatureEval):
        (WebCore::monochromeMediaFeatureEval):
        (WebCore::orientationMediaFeatureEval):
        (WebCore::aspect_ratioMediaFeatureEval):
        (WebCore::device_aspect_ratioMediaFeatureEval):
        (WebCore::device_pixel_ratioMediaFeatureEval):
        (WebCore::resolutionMediaFeatureEval):
        (WebCore::gridMediaFeatureEval):
        (WebCore::computeLength):
        (WebCore::device_heightMediaFeatureEval):
        (WebCore::device_widthMediaFeatureEval):
        (WebCore::heightMediaFeatureEval):
        (WebCore::widthMediaFeatureEval):
        (WebCore::min_colorMediaFeatureEval):
        (WebCore::max_colorMediaFeatureEval):
        (WebCore::min_color_indexMediaFeatureEval):
        (WebCore::max_color_indexMediaFeatureEval):
        (WebCore::min_monochromeMediaFeatureEval):
        (WebCore::max_monochromeMediaFeatureEval):
        (WebCore::min_aspect_ratioMediaFeatureEval):
        (WebCore::max_aspect_ratioMediaFeatureEval):
        (WebCore::min_device_aspect_ratioMediaFeatureEval):
        (WebCore::max_device_aspect_ratioMediaFeatureEval):
        (WebCore::min_device_pixel_ratioMediaFeatureEval):
        (WebCore::max_device_pixel_ratioMediaFeatureEval):
        (WebCore::min_heightMediaFeatureEval):
        (WebCore::max_heightMediaFeatureEval):
        (WebCore::min_widthMediaFeatureEval):
        (WebCore::max_widthMediaFeatureEval):
        (WebCore::min_device_heightMediaFeatureEval):
        (WebCore::max_device_heightMediaFeatureEval):
        (WebCore::min_device_widthMediaFeatureEval):
        (WebCore::max_device_widthMediaFeatureEval):
        (WebCore::min_resolutionMediaFeatureEval):
        (WebCore::max_resolutionMediaFeatureEval):
        (WebCore::animationMediaFeatureEval):
        (WebCore::transitionMediaFeatureEval):
        (WebCore::transform_2dMediaFeatureEval):
        (WebCore::transform_3dMediaFeatureEval):
        (WebCore::view_modeMediaFeatureEval):
        (WebCore::video_playable_inlineMediaFeatureEval):
        (WebCore::hoverMediaFeatureEval):
        (WebCore::pointerMediaFeatureEval):
        (WebCore::MediaQueryEvaluator::eval):
        * css/SVGCSSStyleSelector.cpp:
        (WebCore::StyleResolver::applySVGProperty):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::State::clear):
        (WebCore::StyleResolver::State::initForStyleResolve):
        (WebCore::StyleResolver::convertToIntLength):
        (WebCore::StyleResolver::convertToFloatLength):
        (WebCore::createGridTrackBreadth):
        (WebCore::StyleResolver::applyProperty):
        (WebCore::StyleResolver::createFilterOperations):
        * css/StyleResolver.h:
        (WebCore::StyleResolver::State::setStyle):
        (WebCore::StyleResolver::State::cssToLengthConversionData):
        * css/TransformFunctions.cpp:
        (WebCore::convertToFloatLength):
        (WebCore::transformsForValue):
        * css/TransformFunctions.h:
        * css/WebKitCSSMatrix.cpp:
        (WebCore::WebKitCSSMatrix::setMatrixValue):
        * rendering/RenderThemeIOS.mm:
        (WebCore::applyCommonButtonPaddingToStyle):
        (WebCore::RenderThemeIOS::adjustButtonStyle):

2014-04-29  Zoltan Horvath  <zoltan@webkit.org>

        [CSS Shapes] complex calc args for inset round vanish
        https://bugs.webkit.org/show_bug.cgi?id=132293

        Reviewed by Bem Jones-Bey.

        In order to use calc in the rounded parameters for inset shapes, we need
        to pass RenderStyle for the value creation as we did for the width arguments.
        Without taking RenderStyle into account, we hit an assert not reache
        in CSSPrimitiveValue::init in the debug builds.

        I've added new parsing test.

        * css/BasicShapeFunctions.cpp:
        (WebCore::valueForBasicShape):
        * css/CSSPrimitiveValue.cpp:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        (WebCore::CSSPrimitiveValue::init):
        * css/CSSPrimitiveValue.h:
        (WebCore::CSSPrimitiveValue::create):
        * css/CSSValuePool.h:
        (WebCore::CSSValuePool::createValue):

2014-04-29  Zoltan Horvath  <zoltan@webkit.org>

        [CSS Shapes] complex calc values for shape-margin return null for computed style
        https://bugs.webkit.org/show_bug.cgi?id=132313

        Reviewed by Bem Jones-Bey.

        We need to pass RenderStyle* to the cssValuePool when parsing
        shape-margin in order to use calc() as a parameter.

        I've added the new test case to parsing-shape-margin.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::ComputedStyleExtractor::propertyValue):

2014-04-29  Chris Fleizach  <cfleizach@apple.com>

        AX: Row span info is wrong for table cells when a footer section is placed above a body section
        https://bugs.webkit.org/show_bug.cgi?id=131832

        Reviewed by Mario Sanchez Prada.

        If a <footer> section is placed before the body, it renders AX row information and order incorrectly.
        This also affects ARIA tables because they add their children by looking at renderer children, instead
        interrogating the RenderTable directly.

        Test: accessibility/table-with-footer-section-above-body.html

        * accessibility/AccessibilityARIAGrid.cpp:
        (WebCore::AccessibilityARIAGrid::addTableCellChild):
        (WebCore::AccessibilityARIAGrid::addChildren):
        * accessibility/AccessibilityTable.cpp:
        (WebCore::AccessibilityTable::addChildren):
        (WebCore::AccessibilityTable::addChildrenFromSection):
        * accessibility/AccessibilityTable.h:
        * accessibility/AccessibilityTableCell.cpp:
        (WebCore::AccessibilityTableCell::rowIndexRange):
        (WebCore::AccessibilityTableCell::columnIndexRange):

2014-04-29  Chris Fleizach  <cfleizach@apple.com>

        AX: SpeechSynthesisUtterance cannot addEventListener
        https://bugs.webkit.org/show_bug.cgi?id=132321

        Reviewed by Mario Sanchez Prada.

        Modified an existing test (speech-synthesis-speak.html) to use addEventTarget.

        * Modules/speech/SpeechSynthesisUtterance.idl:

2014-04-29  Hans Muller  <hmuller@adobe.com>

        [CSS Shapes] shape-outside polygon fails when first vertex is 0,0
        https://bugs.webkit.org/show_bug.cgi?id=132132

        Reviewed by Bem Jones-Bey.

        ShapeInterval now distinguishes between x1==x2 - isEmpty() and x1,x2 haven't been
        set yet - isUndefined(). Removed the ShapeInterval setX1() and setX2() methods, since
        they're no longer used.

        The polygon algorithm for computing excluded intervals now ignores horizontal
        edges. It also ignores edges whose lower vertex matches the top of the line, if
        the edge's Y direction is upwards (away from the top of the line). The rationale
        for this was explained here:
        http://hansmuller-webkit.blogspot.com/2012/11/revised-horizontal-box-algorithm.html

        Test: fast/shapes/shape-outside-floats/shape-outside-polygon-zero-vertex.html

        * rendering/shapes/PolygonShape.cpp:
        (WebCore::OffsetPolygonEdge::clippedEdgeXRange):
        (WebCore::PolygonShape::getExcludedIntervals):
        * rendering/shapes/ShapeInterval.h:
        (WebCore::ShapeInterval::ShapeInterval):
        (WebCore::ShapeInterval::isUndefined):
        (WebCore::ShapeInterval::x1):
        (WebCore::ShapeInterval::x2):
        (WebCore::ShapeInterval::width):
        (WebCore::ShapeInterval::isEmpty):
        (WebCore::ShapeInterval::setX1):
        (WebCore::ShapeInterval::setX2):
        (WebCore::ShapeInterval::overlaps):
        (WebCore::ShapeInterval::contains):
        (WebCore::ShapeInterval::unite):

2014-04-29  Andrei Bucur  <abucur@adobe.com>

        [CSS Regions] Fix getClientRects() for content nodes
        https://bugs.webkit.org/show_bug.cgi?id=117407

        Reviewed by David Hyatt.

        This patch modifies getClientRects() to return a list of fragments
        for a fragmented box instead of a single rectangle positioned inside
        the region where the box center would appear.

        The approach is to split the border box of the element in regions using
        the layout positioning. Then each fragment is mapped to the view coordinates
        and the result added to the list of rectangles. To preserve the originating
        region when mapping the fragment through the ancestor tree I've introduced
        the concept of a current region. The current region is stored inside a
        CurrentRenderRegionMaintainer object, created whenever an algorithm needing
        it needs to run. When the maintainer is destroyed, the cleanup is made
        automatically. The RenderFlowThread holds a pointer to this structure for
        easy access.

        Tests: fast/regions/cssom/client-rects-fixed-content.html
               fast/regions/cssom/client-rects-forced-breaks.html
               fast/regions/cssom/client-rects-inline-complex.html
               fast/regions/cssom/client-rects-inline.html
               fast/regions/cssom/client-rects-nested-regions.html
               fast/regions/cssom/client-rects-positioned.html
               fast/regions/cssom/client-rects-relative-position.html
               fast/regions/cssom/client-rects-simple-block.html
               fast/regions/cssom/client-rects-transforms.html
               fast/regions/cssom/client-rects-unsplittable-float.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::absoluteQuads): Split the box in fragments.
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::absoluteQuads): Split the box in fragments.
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::RenderFlowThread):
        (WebCore::RenderFlowThread::mapFromFlowToRegion):
        (WebCore::RenderFlowThread::mapLocalToContainer):
        (WebCore::RenderFlowThread::currentRegion):
        * rendering/RenderFlowThread.h:
        * rendering/RenderNamedFlowFragment.cpp:
        (WebCore::RenderNamedFlowFragment::absoluteQuadsForBoxInRegion): Get
        the fragments for this box in the region.
        * rendering/RenderNamedFlowFragment.h:
        * rendering/RenderNamedFlowThread.cpp:
        (WebCore::RenderNamedFlowThread::absoluteQuadsForBox): Virtual function
        that can be used to implement fragments to client rects mapping.
        * rendering/RenderNamedFlowThread.h:
        * rendering/RenderRegion.cpp:
        (WebCore::RenderRegion::rectFlowPortionForBox): Small change to correctly
        map empty rectangles to containers.
        (WebCore::CurrentRenderRegionMaintainer::CurrentRenderRegionMaintainer):
        (WebCore::CurrentRenderRegionMaintainer::~CurrentRenderRegionMaintainer):
        * rendering/RenderRegion.h:
        (WebCore::RenderRegion::absoluteQuadsForBoxInRegion):
        (WebCore::CurrentRenderRegionMaintainer::region):

2014-04-29  Andrei Bucur  <abucur@adobe.com>

        Store the containing region map inside the flow thread
        https://bugs.webkit.org/show_bug.cgi?id=131647

        Reviewed by Mihnea Ovidenie.

        The patch moves the containing region map inside the flow thread where
        it can be better handled in case the region chain changes and the map
        needs to be cleared.

        As a result of this move we are able to also cleanup the lines region
        information of a block flow when it is removed from the tree.

        Test: fast/regions/inline-strike-through.html

        * rendering/InlineFlowBox.h:
        (WebCore::InlineFlowBox::InlineFlowBox):
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlockFlow::addOverflowFromInlineChildren):
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::removeFlowChildInfo):
        (WebCore::RenderFlowThread::invalidateRegions):
        (WebCore::RenderFlowThread::removeLineRegionInfo):
        (WebCore::RenderFlowThread::checkLinesConsistency):
        (WebCore::RenderFlowThread::containingRegionMap):
        * rendering/RenderFlowThread.h:
        * rendering/RootInlineBox.cpp:
        (WebCore::containingRegionMap):
        (WebCore::RootInlineBox::~RootInlineBox):
        (WebCore::RootInlineBox::paint):
        (WebCore::RootInlineBox::containingRegion):
        (WebCore::RootInlineBox::clearContainingRegion):
        (WebCore::RootInlineBox::setContainingRegion):

2014-04-28  Benjamin Poulain  <benjamin@webkit.org>

        SelectorCodeGenerator::generateElementIsNthChild() leaks the parent register :nth-child() is non-filtering
        https://bugs.webkit.org/show_bug.cgi?id=132311

        Reviewed by Andreas Kling.

        In two cases, the parent register was never returned to the register allocator:
        -Non filtering selectors (the early return).
        -Non marking selectors (at the moment: only querySelector API).

        Unfortunately, generateElementIsNthChild() makes function call, which forces us to do this manual allocation
        of the parentElement register. Long term, I want RegisterAllocator and FunctionCall to have a special type for that.

        Test: fast/selectors/several-nth-child.html

        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementIsNthChild):

2014-04-28  Yusuke Suzuki  <utatane.tea@gmail.com>

        CSS JIT: backtracking with current / parent element for child
        https://bugs.webkit.org/show_bug.cgi?id=132057

        Reviewed by Benjamin Poulain.

        Calculate appropriate backtracking start height from the closest
        descendant. And at first, we use it for a simple optimization.

        1. When backtracking start height equals to current height, we
        can simply jump to a descendant element check phase.
        2. When backtracking start height equals to current height + 1, we
        can simply jump to a descendant element traversing phase.

        We can apply this optimization to fragments with adjacent combinators.
        But, in the meantime, we start to implement it for a fragment with
        child combinator.

        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::SelectorFragment::SelectorFragment):
        (WebCore::SelectorCompiler::TagNamePattern::TagNamePattern):
        (WebCore::SelectorCompiler::solveDescendantBacktrackingActionForChild):
        (WebCore::SelectorCompiler::solveBacktrackingAction):
        (WebCore::SelectorCompiler::equalTagNames):
        (WebCore::SelectorCompiler::equalTagNamePatterns):
        (WebCore::SelectorCompiler::computeBacktrackingStartHeightFromDescendant):
        (WebCore::SelectorCompiler::computeBacktrackingHeightFromDescendant):
        (WebCore::SelectorCompiler::requiresAdjacentTail):
        (WebCore::SelectorCompiler::requiresDescendantTail):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::computeBacktrackingInformation):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateSelectorChecker):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToParentNode):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToParentElement):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateParentElementTreeWalker):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateAncestorTreeWalker):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateDirectAdjacentTreeWalker):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateIndirectAdjacentTreeWalker):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching):

2014-04-28  Benjamin Poulain  <bpoulain@apple.com>

        [iOS][WK2] Restore the scroll position and scale from the HistoryItem (mostly)
        https://bugs.webkit.org/show_bug.cgi?id=132307

        Reviewed by Simon Fraser.

        * WebCore.exp.in:

2014-04-28  Beth Dakin  <bdakin@apple.com>

        Scrollbars do not update properly when topContentInset changes dynamically
        https://bugs.webkit.org/show_bug.cgi?id=132309
        -and corresponding-
        <rdar://problem/16642232>

        Reviewed by Tim Horton.

        It is not sufficient to do a layout and call updateScrollbars(). We must also call 
        RenderLayerCompositor::frameViewDidChangeSize() in order to properly adjust the 
        size and position of all of the scrolling-related layers.
        * page/FrameView.cpp:
        (WebCore::FrameView::topContentInsetDidChange):

2014-04-28  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] event.offsetX/offsetY don't work correctly
        https://bugs.webkit.org/show_bug.cgi?id=132284

        Reviewed by Simon Fraser.

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::mapAbsoluteToLocalPoint):
        Change the code here to only trigger for CSS Regions and not for
        multi-column. Add a FIXME pointing out that the code is broken even for
        CSS regions.

         * rendering/RenderMultiColumnFlowThread.cpp:
        (WebCore::RenderMultiColumnFlowThread::mapAbsoluteToLocalPoint):
        Override mapAbsoluteToLocalPoint in order to guess a region and attempt
        to translate the point from that region to the flow thread local coordinate
        space.

        (WebCore::RenderMultiColumnFlowThread::physicalTranslationFromRegionToFlow):
        * rendering/RenderMultiColumnFlowThread.h:
        New helper function that just wraps calling the region's logical translation
        function and converting to/from physical coordinates.

2014-04-28  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167857.
        https://bugs.webkit.org/show_bug.cgi?id=132305

        the change was rolled out, roll out the new expectations as
        well (Requested by thorton on #webkit).

        Reverted changeset:

        "Unreviewed. Updating one bindings test baseline after
        r167855."
        http://trac.webkit.org/changeset/167857

2014-04-28  Dean Jackson  <dino@apple.com>

        [Mac] Use the animated version of setHighlighted on NSButtonCell where available
        https://bugs.webkit.org/show_bug.cgi?id=132295
        <rdar://problem/16747240>

        Reviewed by Beth Dakin.

        Like setState, there is an animated version of setHighlighted available.

        * platform/mac/ThemeMac.mm:
        (WebCore::updateStates): Use private version of _setHighlighted where possible.

2014-04-28  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167855.
        https://bugs.webkit.org/show_bug.cgi?id=132301

        Broke the windows build (Requested by bfulgham on #webkit).

        Reverted changeset:

        "ScriptExecutionContext::Task should work well with C++11
        lambdas"
        https://bugs.webkit.org/show_bug.cgi?id=129795
        http://trac.webkit.org/changeset/167855

2014-04-24  Andy Estes  <aestes@apple.com>

        [iOS] Implement WebQuickLookHandleClient for WebKit2
        https://bugs.webkit.org/show_bug.cgi?id=132157

        Reviewed by Darin Adler.

        * WebCore.exp.in: Exported QuickLookHandle::previewUTI().
        * platform/network/ios/QuickLook.h:
        * platform/network/ios/QuickLook.mm:
        (WebCore::QuickLookHandle::previewFileName): Changed to return a WTF::String.
        (WebCore::QuickLookHandle::previewUTI): Added.

2014-04-28  Chris Fleizach  <cfleizach@apple.com>

        REGRESSION: Intermittent crash in SpeechSynthesis::didFinishSpeaking
        https://bugs.webkit.org/show_bug.cgi?id=111613

        Reviewed by Mark Lam.

        I think it's possible that didFinishSpeaking ends up calling directly back into start speaking, and the utterance reference
        we were holding can get cleared, so protecting this should avoid a few asserts.

        * platform/mock/PlatformSpeechSynthesizerMock.cpp:
        (WebCore::PlatformSpeechSynthesizerMock::speakingFinished):

2014-04-28  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167871.
        https://bugs.webkit.org/show_bug.cgi?id=132290

        broke a newmulticol test (spanner-nested-dynamic) (Requested
        by thorton on #webkit).

        Reverted changeset:

        "Store the containing region map inside the flow thread"
        https://bugs.webkit.org/show_bug.cgi?id=131647
        http://trac.webkit.org/changeset/167871

2014-04-28  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167853.
        https://bugs.webkit.org/show_bug.cgi?id=132288

        caused crashes+timeouts+layout test failures described in the
        bug (Requested by thorton on #webkit).

        Reverted changeset:

        "Coalesce responses on network process side"
        https://bugs.webkit.org/show_bug.cgi?id=132229
        http://trac.webkit.org/changeset/167853

2014-04-24  Simon Fraser  <simon.fraser@apple.com>

        [iOS WK2] flickery scrolling with overflow-scrolling:touch
        https://bugs.webkit.org/show_bug.cgi?id=132150

        Reviewed by Tim Horton.

        Fix typo in a comment.

        * page/scrolling/AsyncScrollingCoordinator.cpp:
        (WebCore::AsyncScrollingCoordinator::scheduleUpdateScrollPositionAfterAsyncScroll):

2014-04-28  Martin Robinson  <mrobinson@igalia.com>

        [GTK] Builtin cursors do not properly handle transparency
        https://bugs.webkit.org/show_bug.cgi?id=131866

        Reviewed by Gustavo Noronha Silva.

        Tested by ManualTests/cursor.html.

        * platform/gtk/CursorGtk.cpp:
        (WebCore::createNamedCursor): Instead of interpreting the source bitmap as an A1 image, use
        it as a 1-bit black and white image. We do this by:
            1. Painting the result to a full color image with transparency instead of an alpha-only surface.
            2. Masking a white background using the cursor alpha surface.
            3. Painting the black parts of the cursor by painting the source surface, where black pixels
            will be interpreted as full opaque pixels.

2014-04-28  Carlos Garcia Campos  <cgarcia@igalia.com>

        Unreviewed. Update GObject DOM bindings symbols file.

        * bindings/gobject/webkitdom.symbols: Add missing symbols.

2014-04-28  Manuel Rego Casasnovas  <rego@igalia.com>

        OrderIterator refactoring to avoid extra loops
        https://bugs.webkit.org/show_bug.cgi?id=119061

        Reviewed by Darin Adler.

        This patch removes order values Vector and use a Vector of pairs instead. The pairs are formed by a child
        (RenderBox) and the index of this child. In addition, OrderIterator code is simplified.

        It provides a helper class OrderIteratorPopulator, used for manipulating the Vector directly. Which allows to
        consolidate the code into a single implementation across flexbox and grid. OrderIteratorPopulator part is based
        on a patch from Blink r153971 by <jchaffraix@chromium.org>.

        Current implementation is O(number of children * number of order values). Now it will just do a sort operation
        and then a regular loop. So if you have different order values in a flexbox or grid the performance will
        improve.

        Comparing results of perf-tests:
        * Layout/auto-grid-lots-of-data: ~0.5% worse.
        * Layout/fixed-grid-lots-of-data: ~0.5% worse.
        * Layout/fixed-grid-lots-of-data (setting 100 different order values): ~50% better.
        * Layout/flexbox-lots-of-data: ~5% better.

        No new tests, already covered by current tests.

        * rendering/OrderIterator.cpp:
        (WebCore::OrderIterator::currentChild): Return current child according to m_childrenIndex.
        (WebCore::OrderIterator::first): Initialize m_childrenIndex and return current child.
        (WebCore::OrderIterator::next): Increase m_childrenIndex and return current child.
        (WebCore::compareByOrderValueAndIndex): Sorts the Vector by order value and index.
        (WebCore::OrderIteratorPopulator::~OrderIteratorPopulator): Calls compareByOrderValueAndIndex() if there is any
        child with non default order value.
        (WebCore::OrderIteratorPopulator::collectChild): Adds the child and index to the Vector. Update
        m_allChildrenHaveDefaultOrderValue accordingly.
        (WebCore::OrderIterator::OrderIterator): Deleted.
        (WebCore::OrderIterator::setOrderValues): Deleted.
        (WebCore::OrderIterator::reset): Deleted.
        * rendering/OrderIterator.h:
        (WebCore::OrderIteratorPopulator::OrderIteratorPopulator): New helper class to manipulate the Vector.
        (WebCore::OrderIterator::currentChild): Deleted.
        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::RenderFlexibleBox): Remove OrderIterator intialization.
        (WebCore::RenderFlexibleBox::layoutBlock): Remove unneeded code related to old OrderValues vector.
        (WebCore::RenderFlexibleBox::prepareOrderIteratorAndMargins): Populate OrderIterator using collectChild().
        (WebCore::RenderFlexibleBox::computeMainAxisPreferredSizes): Deleted.
        * rendering/RenderFlexibleBox.h: Rename computeMainAxisPreferredSizes() to prepareOrderIteratorAndMargins().
        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::RenderGrid): Remove OrderIterator initialization.
        (WebCore::RenderGrid::populateExplicitGridAndOrderIterator): Populate OrderIterator using collectChild().

2014-04-28  Zan Dobersek  <zdobersek@igalia.com>

        std::bitset<>::test() does unnecessary bounds checks on CSSPropertyID bitsets
        https://bugs.webkit.org/show_bug.cgi?id=131685

        Reviewed by Darin Adler.

        Use std::bitset<>::operator[]() instead of std::bitset<>::test() to avoid
        bounds checks which are not necessary as long as a CSSPropertyID value is used.

        * css/CSSParser.cpp:
        (WebCore::filterProperties):
        * css/StyleProperties.cpp:
        (WebCore::StyleProperties::asText):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::CascadedProperties::hasProperty):
        (WebCore::StyleResolver::CascadedProperties::set):

2014-04-28  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] TextTrack kind and mode attributes are enums since r166180
        https://bugs.webkit.org/show_bug.cgi?id=132228

        Reviewed by Martin Robinson.

        Improve coding style according to review comments, that I forgot
        to do before landing previous commit.

        * bindings/gobject/WebKitDOMCustom.cpp:
        (webkit_dom_text_track_get_kind):
        (webkit_dom_text_track_get_mode):
        (webkit_dom_text_track_set_mode):

2014-04-28  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] TextTrack kind and mode attributes are enums since r166180
        https://bugs.webkit.org/show_bug.cgi?id=132228

        Reviewed by Martin Robinson.

        We don't support enum values yet in GObject DOM bindings, but they
        are internally strings anyway, so we can keep the old
        implementations using strings as custom functions until we
        properly support enums.

        * bindings/gobject/WebKitDOMCustom.cpp:
        (webkit_dom_text_track_get_kind):
        (webkit_dom_text_track_get_mode):
        (webkit_dom_text_track_set_mode):
        * bindings/gobject/WebKitDOMCustom.h:
        * bindings/gobject/WebKitDOMCustom.symbols:

2014-04-28  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] TextTrack::addCue can raise an exception since r163974
        https://bugs.webkit.org/show_bug.cgi?id=132227

        Reviewed by Martin Robinson.

        webkit_dom_text_track_add_cue() now receives a GError paramater
        which is an API break. Add
        webkit_dom_text_track_add_cue_with_error and keep
        webkit_dom_text_track_add_cue as deprecated to keep API
        compatibility.

        * bindings/gobject/WebKitDOMDeprecated.cpp:
        (webkit_dom_text_track_add_cue):
        * bindings/gobject/WebKitDOMDeprecated.h:
        * bindings/gobject/WebKitDOMDeprecated.symbols:
        * bindings/gobject/webkitdom.symbols:
        * bindings/scripts/CodeGeneratorGObject.pm:
        (GetEffectiveFunctionName):

2014-04-28  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] TextTrackCue API changed in r163649
        https://bugs.webkit.org/show_bug.cgi?id=132226

        Reviewed by Martin Robinson.

        TextTrackCue is now a base class and part of its API was moved to
        the derived class VTTCue. Update the GObject DOM bindings to keep
        backwards compatibility.

        * PlatformGTK.cmake: Generate bindings for DataCue and VTTCue.
        * bindings/gobject/WebKitDOMDeprecated.cpp:
        (webkit_dom_text_track_cue_get_cue_as_html): Mark as deprecated in
        favor of VTTCue API.
        (webkit_dom_text_track_cue_get_vertical): Ditto.
        (webkit_dom_text_track_cue_set_vertical): Ditto.
        (webkit_dom_text_track_cue_get_snap_to_lines): Ditto.
        (webkit_dom_text_track_cue_set_snap_to_lines): Ditto.
        (webkit_dom_text_track_cue_get_line): Ditto.
        (webkit_dom_text_track_cue_set_line): Ditto.
        (webkit_dom_text_track_cue_get_position): Ditto.
        (webkit_dom_text_track_cue_set_position): Ditto.
        (webkit_dom_text_track_cue_get_size): Ditto.
        (webkit_dom_text_track_cue_set_size): Ditto.
        (webkit_dom_text_track_cue_get_align): Ditto.
        (webkit_dom_text_track_cue_set_align): Ditto.
        (webkit_dom_text_track_cue_get_text): Ditto.
        (webkit_dom_text_track_cue_set_text): Ditto.
        * bindings/gobject/WebKitDOMDeprecated.h:
        * bindings/gobject/WebKitDOMDeprecated.symbols: Add new deprecated symbols.
        * bindings/gobject/WebKitDOMPrivate.cpp:
        (WebKit::wrap): Add generic wrap for TextTrackCue now that it's a
        base class to generate DataCue or VTTCue objects.
        * bindings/gobject/WebKitDOMPrivate.h:
        * bindings/gobject/webkitdom.symbols: Add DataCue symbols.
        * bindings/scripts/CodeGeneratorGObject.pm:
        (IsPolymorphic): Add TextTrackCue to the list of polymorphic classes.

2014-04-27  Andrei Bucur  <abucur@adobe.com>

        Store the containing region map inside the flow thread
        https://bugs.webkit.org/show_bug.cgi?id=131647

        Reviewed by Mihnea Ovidenie.

        The patch moves the containing region map inside the flow thread where
        it can be better handled in case the region chain changes and the map
        needs to be cleared.

        As a result of this move we are able to also cleanup the lines region
        information of a block flow when it is removed from the tree.

        Test: fast/regions/inline-strike-through.html

        * rendering/InlineFlowBox.h:
        (WebCore::InlineFlowBox::InlineFlowBox):
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlockFlow::addOverflowFromInlineChildren):
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::removeFlowChildInfo):
        (WebCore::RenderFlowThread::invalidateRegions):
        (WebCore::RenderFlowThread::removeLineRegionInfo):
        (WebCore::RenderFlowThread::checkLinesConsistency):
        (WebCore::RenderFlowThread::containingRegionMap):
        * rendering/RenderFlowThread.h:
        * rendering/RootInlineBox.cpp:
        (WebCore::containingRegionMap):
        (WebCore::RootInlineBox::~RootInlineBox):
        (WebCore::RootInlineBox::paint):
        (WebCore::RootInlineBox::containingRegion):
        (WebCore::RootInlineBox::clearContainingRegion):
        (WebCore::RootInlineBox::setContainingRegion):

2014-04-27  Darin Adler  <darin@apple.com>

        REGRESSION (r159345): The hover state for links in the top navigation of Yahoo.com doesn't work
        https://bugs.webkit.org/show_bug.cgi?id=132241
        rdar://problem/16501924

        Reviewed by Andreas Kling.

        Test: fast/text/simple-lines-hover-underline.html

        Checked that this does not hurt performance by running the
        run-perf-tests PerformanceTests/Layout/line-layout.html command before and after.

        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::hitTestInlineChildren): Use simpleLineLayout function rather than
        getting at the data member directly.
        (WebCore::RenderBlockFlow::firstLineBaseline): Ditto.
        (WebCore::RenderBlockFlow::inlineBlockBaseline): Ditto.
        (WebCore::RenderBlockFlow::lineCount): Ditto.
        (WebCore::RenderBlockFlow::paintInlineChildren): Ditto.
        (WebCore::RenderBlockFlow::hasLines): Ditto.
        (WebCore::RenderBlockFlow::simpleLineLayout): Added logic to determine which path to use if
        m_lineLayoutPath is undetermined, and call createLineBoxes if it's not simple.
        (WebCore::RenderBlockFlow::ensureLineBoxes): Factored out most of the code into a new
        createLineBoxes function.
        (WebCore::RenderBlockFlow::createLineBoxes): Ditto.

        * rendering/RenderBlockFlow.h: Made simpleLineLayout function no longer an inline.
        Added a private createLineBoxes function.

2014-04-27  Praveen R Jadhav  <praveen.j@samsung.com>

        [MediaStream] .ended shouldn't be part of MediaStream IDL
        https://bugs.webkit.org/show_bug.cgi?id=132104

        Reviewed by Eric Carlson.

        .ended attribute is spec'ed out of MediaStream IDL. Instead, .active
        is introduced to handle more scenarios. This patch replaces all 'ended'
        attribute calls with corresponding 'active' attributes. 

        MediaStream-add-remove-tracks.html is updated.

        * Modules/mediastream/MediaStream.cpp:
        (WebCore::MediaStream::addTrack): Replaced ended() with active().
        (WebCore::MediaStream::removeTrack): setEnded() isn't called. setActive()
        is retained which propagates oninactive event.
        (WebCore::MediaStream::trackDidEnd): setEnded() isn't called.
        (WebCore::MediaStream::removeRemoteSource): Replaced ended() with active().
        (WebCore::MediaStream::addRemoteTrack): Replaced ended() with active().
        (WebCore::MediaStream::removeRemoteTrack): Replaced ended() with active().
        (WebCore::MediaStream::ended): Deleted.
        (WebCore::MediaStream::setEnded): Deleted.
        (WebCore::MediaStream::streamDidEnd): Deleted.
        * Modules/mediastream/MediaStream.h:
        * Modules/mediastream/MediaStream.idl:
        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::RTCPeerConnection::didRemoveRemoteStream): Replaced setEnded()
        with setActive().
        * platform/mediastream/MediaStreamPrivate.cpp:
        (WebCore::MediaStreamPrivate::MediaStreamPrivate):
        (WebCore::MediaStreamPrivate::setActive): Updated comment from bug 
        https://bugs.webkit.org/show_bug.cgi?id=131973
        (WebCore::MediaStreamPrivate::setEnded): Deleted.
        * platform/mediastream/MediaStreamPrivate.h:
        (WebCore::MediaStreamPrivate::ended): Deleted.

2014-04-25  Andy Estes  <aestes@apple.com>

        [iOS] Stop creating a WKWebResourceQuickLookDelegate for every WebResourceLoader
        https://bugs.webkit.org/show_bug.cgi?id=132215

        Reviewed by Dan Bernstein.

        * WebCore.exp.in: Moved QuickLook symbols to the USE(QUICK_LOOK) stanza.
        * platform/network/ios/QuickLook.h: Changed one of the create() overloads to no longer take a delegate argument.
        * platform/network/ios/QuickLook.mm: Moved WKWebResourceQuickLookDelegate to here and renamed to WebResourceLoaderQuickLookDelegate.
        (WebCore::QuickLookHandle::create): Created a WebResourceLoaderQuickLookDelegate only if QuickLook can handle the response.

2014-04-27  Sam Weinig  <sam@webkit.org>

        [iOS WebKit2] Add support for text autosizing
        <rdar://problem/16545245>
        https://bugs.webkit.org/show_bug.cgi?id=132237

        Reviewed by Tim Horton.

        Move text autosizing width from Frame to Page, as it is a Page level concept.

        * WebCore.exp.in:
        * page/Frame.cpp:
        (WebCore::Frame::textAutosizingWidth): Deleted.
        (WebCore::Frame::setTextAutosizingWidth): Deleted.
        * page/Frame.h:
        * page/FrameView.cpp:
        (WebCore::FrameView::layout):
        * page/Page.cpp:
        (WebCore::Page::Page):
        * page/Page.h:
        (WebCore::Page::textAutosizingWidth):
        (WebCore::Page::setTextAutosizingWidth):

2014-04-27  Zan Dobersek  <zdobersek@igalia.com>

        Unreviewed. Updating one bindings test baseline after r167855.

        * bindings/scripts/test/JS/JSTestCallback.cpp:
        (WebCore::JSTestCallback::~JSTestCallback):

2014-04-27  Darin Adler  <darin@apple.com>

        Webpages can trigger loads with invalid URLs
        https://bugs.webkit.org/show_bug.cgi?id=132224
        rdar://problem/16697142

        Reviewed by Alexey Proskuryakov.

        Invalid URLs can be a way to trick the user about what website they
        are looking at.  Still trying to figure out a good way to regression-test this.

        * dom/Document.cpp:
        (WebCore::Document::processHttpEquiv): Pass a URL rather than a String to
        the navigation scheduler.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::receivedFirstData): Ditto.

        * loader/NavigationScheduler.cpp:
        (WebCore::ScheduledURLNavigation::ScheduledURLNavigation): Take a URL rather
        than a string.
        (WebCore::ScheduledURLNavigation::url): Ditto.
        (WebCore::ScheduledRedirect::ScheduledRedirect): Ditto.
        (WebCore::ScheduledLocationChange::ScheduledLocationChange): Ditto.
        (WebCore::ScheduledRefresh::ScheduledRefresh): Ditto.
        (WebCore::NavigationScheduler::shouldScheduleNavigation): Added a check that
        prevents navigation to any URL that is invalid, except for JavaScript URLs,
        which need not be valid.
        (WebCore::NavigationScheduler::scheduleRedirect): Use URL instead of String.
        (WebCore::NavigationScheduler::scheduleLocationChange): Use URL instead of
        String. Also got rid of empty string check since empty URLs are also invalid,
        and so shouldScheduleNavigation will take care of it.
        (WebCore::NavigationScheduler::scheduleRefresh): Use URL instead of String.

        * loader/NavigationScheduler.h: Take URL instead of String. Also removed some
        unneeded incldues and uses of WTF_MAKE_NONCOPYABLE. NavigationScheduler is
        already noncopyable because it has a reference for a data member, and the
        disabler doesn't have any real reason to be noncopyable.

        * loader/SubframeLoader.cpp:
        (WebCore::SubframeLoader::loadOrRedirectSubframe): Pass a URL rather than a
        String to the NavigationScheduler.
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::createWindow): Ditto.

        * page/SecurityOrigin.cpp:
        (WebCore::SecurityOrigin::urlWithUniqueSecurityOrigin): Return a URL instead
        of a String.
        * page/SecurityOrigin.h: Updated for above change.

2014-04-27  Zan Dobersek  <zdobersek@igalia.com>

        ScriptExecutionContext::Task should work well with C++11 lambdas
        https://bugs.webkit.org/show_bug.cgi?id=129795

        Reviewed by Darin Adler.

        Instead of having classes that subclass ScriptExecutionContext::Task and override
        the performTask(ScriptExecutionContext*) method, have the ScriptExecutionContext::Task
        take in a std::function<void (ScriptExecutionContext*)>-like object trough the constructor
        which would contain the code currently kept in the performTask() methods.

        This enables inlining C++11 lambdas into ScriptExecutionContext::postTask() calls. For
        cleanup tasks, the Task object can be implicitly constructed by using the initializer list
        constructor with the first argument being the ScriptExecutionContext::Task::CleanupTask tag.
        The ScriptExecutionContext class remains non-copyable and now stores the passed-in invokable
        object in the std::function wrapper, along with a boolean member that indicates whether the
        task is of cleanup nature.

        * Modules/quota/StorageErrorCallback.cpp:
        (WebCore::StorageErrorCallback::CallbackTask::CallbackTask):
        (WebCore::StorageErrorCallback::CallbackTask::performTask): Deleted.
        * Modules/quota/StorageErrorCallback.h:
        (WebCore::StorageErrorCallback::CallbackTask::create): Deleted.
        * Modules/webdatabase/Database.cpp:
        (WebCore::Database::~Database):
        (WebCore::Database::runTransaction):
        (WebCore::Database::scheduleTransactionCallback):
        (WebCore::DerefContextTask::create): Deleted.
        (WebCore::DerefContextTask::performTask): Deleted.
        (WebCore::DerefContextTask::isCleanupTask): Deleted.
        (WebCore::DerefContextTask::DerefContextTask): Deleted.
        (WebCore::callTransactionErrorCallback): Deleted.
        (WebCore::DeliverPendingCallbackTask::create): Deleted.
        (WebCore::DeliverPendingCallbackTask::performTask): Deleted.
        (WebCore::DeliverPendingCallbackTask::DeliverPendingCallbackTask): Deleted.
        * Modules/webdatabase/DatabaseManager.cpp:
        (WebCore::DatabaseManager::openDatabase):
        (WebCore::DatabaseCreationCallbackTask::create): Deleted.
        (WebCore::DatabaseCreationCallbackTask::performTask): Deleted.
        (WebCore::DatabaseCreationCallbackTask::DatabaseCreationCallbackTask): Deleted.
        * Modules/webdatabase/DatabaseSync.cpp:
        (WebCore::CloseSyncDatabaseOnContextThreadTask::create): Deleted.
        (WebCore::CloseSyncDatabaseOnContextThreadTask::performTask): Deleted.
        (WebCore::CloseSyncDatabaseOnContextThreadTask::CloseSyncDatabaseOnContextThreadTask): Deleted.
        * Modules/webdatabase/SQLCallbackWrapper.h:
        (WebCore::SQLCallbackWrapper::clear):
        (WebCore::SQLCallbackWrapper::SafeReleaseTask::create): Deleted.
        (WebCore::SQLCallbackWrapper::SafeReleaseTask::performTask): Deleted.
        (WebCore::SQLCallbackWrapper::SafeReleaseTask::isCleanupTask): Deleted.
        (WebCore::SQLCallbackWrapper::SafeReleaseTask::SafeReleaseTask): Deleted.
        * Modules/websockets/ThreadableWebSocketChannelClientWrapper.cpp:
        (WebCore::ThreadableWebSocketChannelClientWrapper::didConnect):
        (WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveMessage):
        (WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveBinaryData):
        (WebCore::ThreadableWebSocketChannelClientWrapper::didUpdateBufferedAmount):
        (WebCore::ThreadableWebSocketChannelClientWrapper::didStartClosingHandshake):
        (WebCore::ThreadableWebSocketChannelClientWrapper::didClose):
        (WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveMessageError):
        (WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks):
        * Modules/websockets/ThreadableWebSocketChannelClientWrapper.h:
        * Modules/websockets/WorkerThreadableWebSocketChannel.cpp:
        (WebCore::WorkerThreadableWebSocketChannel::Bridge::mainThreadInitialize):
        (WebCore::WorkerThreadableWebSocketChannel::mainThreadDestroy):
        (WebCore::WorkerThreadableWebSocketChannel::Bridge::disconnect):
        (WebCore::WorkerThreadableWebSocketChannel::WorkerGlobalScopeDidInitializeTask::create): Deleted.
        (WebCore::WorkerThreadableWebSocketChannel::WorkerGlobalScopeDidInitializeTask::~WorkerGlobalScopeDidInitializeTask): Deleted.
        (WebCore::WorkerThreadableWebSocketChannel::WorkerGlobalScopeDidInitializeTask::WorkerGlobalScopeDidInitializeTask): Deleted.
        * Modules/websockets/WorkerThreadableWebSocketChannel.h:
        * bindings/js/JSCallbackData.h:
        (WebCore::DeleteCallbackDataTask::DeleteCallbackDataTask):
        (WebCore::DeleteCallbackDataTask::create): Deleted.
        (WebCore::DeleteCallbackDataTask::performTask): Deleted.
        (WebCore::DeleteCallbackDataTask::isCleanupTask): Deleted.
        * bindings/js/JSDOMGlobalObjectTask.cpp:
        (WebCore::JSGlobalObjectTask::JSGlobalObjectTask):
        (WebCore::JSGlobalObjectTask::~JSGlobalObjectTask): Deleted.
        (WebCore::JSGlobalObjectTask::performTask): Deleted.
        * bindings/js/JSDOMGlobalObjectTask.h:
        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::queueTaskToEventLoop):
        * bindings/js/JSWorkerGlobalScopeBase.cpp:
        (WebCore::JSWorkerGlobalScopeBase::queueTaskToEventLoop):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateCallbackImplementation):
        * dom/CrossThreadTask.h:
        (WebCore::CrossThreadTask1::performTask):
        (WebCore::CrossThreadTask2::performTask):
        (WebCore::CrossThreadTask3::performTask):
        (WebCore::CrossThreadTask4::performTask):
        (WebCore::CrossThreadTask5::performTask):
        (WebCore::CrossThreadTask6::performTask):
        (WebCore::CrossThreadTask7::performTask):
        (WebCore::CrossThreadTask8::performTask):
        (WebCore::createCallbackTask):
        (WebCore::CrossThreadTask1::create): Deleted.
        (WebCore::CrossThreadTask2::create): Deleted.
        (WebCore::CrossThreadTask3::create): Deleted.
        (WebCore::CrossThreadTask4::create): Deleted.
        (WebCore::CrossThreadTask5::create): Deleted.
        (WebCore::CrossThreadTask6::create): Deleted.
        (WebCore::CrossThreadTask7::create): Deleted.
        (WebCore::CrossThreadTask8::create): Deleted.
        * dom/Document.cpp:
        (WebCore::Document::addConsoleMessage):
        (WebCore::Document::addMessage):
        (WebCore::Document::postTask):
        (WebCore::Document::pendingTasksTimerFired):
        (WebCore::PerformTaskContext::PerformTaskContext): Deleted.
        (WebCore::Document::didReceiveTask): Deleted.
        * dom/Document.h:
        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::processMessagePortMessagesSoon):
        (WebCore::ScriptExecutionContext::timerAlignmentInterval):
        (WebCore::ProcessMessagesSoonTask::create): Deleted.
        (WebCore::ScriptExecutionContext::AddConsoleMessageTask::performTask): Deleted.
        (WebCore::ScriptExecutionContext::Task::~Task): Deleted.
        * dom/ScriptExecutionContext.h:
        (WebCore::ScriptExecutionContext::Task::Task):
        (WebCore::ScriptExecutionContext::Task::performTask):
        (WebCore::ScriptExecutionContext::Task::isCleanupTask):
        (WebCore::ScriptExecutionContext::AddConsoleMessageTask::AddConsoleMessageTask):
        (WebCore::ScriptExecutionContext::AddConsoleMessageTask::create): Deleted.
        * dom/StringCallback.cpp:
        (WebCore::StringCallback::scheduleCallback):
        * loader/appcache/ApplicationCacheGroup.cpp:
        (WebCore::ApplicationCacheGroup::postListenerTask):
        (WebCore::CallCacheListenerTask::create): Deleted.
        (WebCore::CallCacheListenerTask::CallCacheListenerTask): Deleted.
        * workers/DefaultSharedWorkerRepository.cpp:
        (WebCore::SharedWorkerProxy::postTaskToLoader):
        (WebCore::SharedWorkerProxy::postTaskForModeToWorkerGlobalScope):
        (WebCore::SharedWorkerConnectTask::SharedWorkerConnectTask):
        (WebCore::DefaultSharedWorkerRepository::workerScriptLoaded):
        (WebCore::DefaultSharedWorkerRepository::connectToWorker):
        (WebCore::SharedWorkerConnectTask::create): Deleted.
        (WebCore::SharedWorkerConnectTask::performTask): Deleted.
        * workers/WorkerEventQueue.cpp:
        (WebCore::WorkerEventQueue::EventDispatcher::EventDispatcher):
        (WebCore::WorkerEventQueue::EventDispatcher::~EventDispatcher):
        (WebCore::WorkerEventQueue::EventDispatcher::dispatch):
        (WebCore::WorkerEventQueue::enqueueEvent):
        (WebCore::WorkerEventQueue::cancelEvent):
        (WebCore::WorkerEventQueue::close):
        * workers/WorkerEventQueue.h:
        * workers/WorkerGlobalScope.cpp:
        (WebCore::WorkerGlobalScope::close):
        (WebCore::WorkerGlobalScope::postTask):
        (WebCore::WorkerGlobalScope::addConsoleMessage):
        (WebCore::WorkerGlobalScope::addMessage):
        (WebCore::CloseWorkerGlobalScopeTask::create): Deleted.
        (WebCore::CloseWorkerGlobalScopeTask::performTask): Deleted.
        (WebCore::CloseWorkerGlobalScopeTask::isCleanupTask): Deleted.
        * workers/WorkerGlobalScope.h:
        * workers/WorkerLoaderProxy.h:
        * workers/WorkerMessagingProxy.cpp:
        (WebCore::WorkerMessagingProxy::postMessageToWorkerObject):
        (WebCore::WorkerMessagingProxy::postMessageToWorkerGlobalScope):
        (WebCore::WorkerMessagingProxy::postTaskForModeToWorkerGlobalScope):
        (WebCore::WorkerMessagingProxy::postTaskToLoader):
        (WebCore::WorkerMessagingProxy::postExceptionToWorkerObject):
        (WebCore::WorkerMessagingProxy::workerThreadCreated):
        (WebCore::WorkerMessagingProxy::notifyNetworkStateChange):
        (WebCore::WorkerMessagingProxy::workerGlobalScopeDestroyed):
        (WebCore::WorkerMessagingProxy::workerGlobalScopeClosed):
        (WebCore::WorkerMessagingProxy::postMessageToPageInspector):
        (WebCore::WorkerMessagingProxy::confirmMessageFromWorkerObject):
        (WebCore::WorkerMessagingProxy::reportPendingActivity):
        (WebCore::MessageWorkerGlobalScopeTask::create): Deleted.
        (WebCore::MessageWorkerGlobalScopeTask::MessageWorkerGlobalScopeTask): Deleted.
        (WebCore::MessageWorkerGlobalScopeTask::performTask): Deleted.
        (WebCore::MessageWorkerTask::create): Deleted.
        (WebCore::MessageWorkerTask::MessageWorkerTask): Deleted.
        (WebCore::MessageWorkerTask::performTask): Deleted.
        (WebCore::WorkerExceptionTask::create): Deleted.
        (WebCore::WorkerExceptionTask::WorkerExceptionTask): Deleted.
        (WebCore::WorkerExceptionTask::performTask): Deleted.
        (WebCore::WorkerGlobalScopeDestroyedTask::create): Deleted.
        (WebCore::WorkerGlobalScopeDestroyedTask::WorkerGlobalScopeDestroyedTask): Deleted.
        (WebCore::WorkerGlobalScopeDestroyedTask::performTask): Deleted.
        (WebCore::WorkerTerminateTask::create): Deleted.
        (WebCore::WorkerTerminateTask::WorkerTerminateTask): Deleted.
        (WebCore::WorkerTerminateTask::performTask): Deleted.
        (WebCore::WorkerThreadActivityReportTask::create): Deleted.
        (WebCore::WorkerThreadActivityReportTask::WorkerThreadActivityReportTask): Deleted.
        (WebCore::WorkerThreadActivityReportTask::performTask): Deleted.
        (WebCore::PostMessageToPageInspectorTask::create): Deleted.
        (WebCore::PostMessageToPageInspectorTask::PostMessageToPageInspectorTask): Deleted.
        (WebCore::PostMessageToPageInspectorTask::performTask): Deleted.
        (WebCore::NotifyNetworkStateChangeTask::create): Deleted.
        (WebCore::NotifyNetworkStateChangeTask::NotifyNetworkStateChangeTask): Deleted.
        (WebCore::NotifyNetworkStateChangeTask::performTask): Deleted.
        * workers/WorkerMessagingProxy.h:
        * workers/WorkerRunLoop.cpp:
        (WebCore::WorkerRunLoop::postTask):
        (WebCore::WorkerRunLoop::postTaskAndTerminate):
        (WebCore::WorkerRunLoop::postTaskForMode):
        (WebCore::WorkerRunLoop::Task::create):
        (WebCore::WorkerRunLoop::Task::performTask):
        (WebCore::WorkerRunLoop::Task::Task):
        * workers/WorkerRunLoop.h:
        * workers/WorkerThread.cpp:
        (WebCore::WorkerThread::stop):
        (WebCore::WorkerThread::releaseFastMallocFreeMemoryInAllThreads):
        (WebCore::WorkerThreadShutdownFinishTask::create): Deleted.
        (WebCore::WorkerThreadShutdownFinishTask::performTask): Deleted.
        (WebCore::WorkerThreadShutdownFinishTask::isCleanupTask): Deleted.
        (WebCore::WorkerThreadShutdownStartTask::create): Deleted.
        (WebCore::WorkerThreadShutdownStartTask::performTask): Deleted.
        (WebCore::WorkerThreadShutdownStartTask::isCleanupTask): Deleted.

2014-04-27  Antti Koivisto  <antti@apple.com>

        Coalesce responses on network process side
        https://bugs.webkit.org/show_bug.cgi?id=132229

        Reviewed by Andreas Kling.

        * WebCore.exp.in:

2014-04-27  David Kilzer  <ddkilzer@apple.com>

        Roll out changes not part of the patch reviewed for Bug 132089
        <http://webkit.org/b/132089>

        * loader/SubframeLoader.cpp:
        (WebCore::SubframeLoader::loadOrRedirectSubframe):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::setLocation):
        (WebCore::DOMWindow::createWindow):
        (WebCore::DOMWindow::open):

2014-04-26  Darin Adler  <darin@apple.com>

        Frame and page lifetime fixes in WebCore::createWindow
        https://bugs.webkit.org/show_bug.cgi?id=132089

        Reviewed by Sam Weinig.

        Speculative fix because I was unable to reproduce the crash that was
        reported with the test case attached to this bug.

        * loader/FrameLoader.cpp:
        (WebCore::createWindow): Changed code to remove the assumption that calls
        out will not destroy the page or frame. Use RefPtr for the frame, and
        added early exits if frame->page() becomes null at any point before we
        use a page pointer.

2014-04-26  Alexey Proskuryakov  <ap@apple.com>

        Local files should not be allowed to read pasteboard data during drag
        https://bugs.webkit.org/show_bug.cgi?id=131767

        Reviewed by Sam Weinig.

        Test: fast/files/local-file-drag-security.html

        * page/DragController.cpp:
        (WebCore::DragController::dragExited):
        (WebCore::DragController::tryDHTMLDrag):
        Make an old Dashboard quirk really Dashboard only.

2014-04-24  Darin Adler  <darin@apple.com>

        REGRESSION (r164133): Selection doesn't paint when scrolling some pages
        https://bugs.webkit.org/show_bug.cgi?id=132172
        rdar://problem/16719473

        Reviewed by Brent Fulgham.

        Tests: fast/dynamic/remove-invisible-node-inside-selection.html
               fast/dynamic/remove-node-inside-selection.html

        * editing/FrameSelection.cpp:
        (WebCore::clearRenderViewSelection): Changed to take a Node& because having
        this take a Position& was unnecessary and strange, when really it just needs
        to take a document as an argument.
        (WebCore::DragCaretController::nodeWillBeRemoved): Updated for the above.
        (WebCore::FrameSelection::respondToNodeModification): Added code to set the
        m_pendingSelectionUpdate flag and call RenderView::setNeedsLayout so the
        selection will be recomputed after it's temporarily cleared when one of
        the selected nodes is removed.

2014-04-25  Ryosuke Niwa  <rniwa@webkit.org>

        REGRESSION (r167689): Hovering file name in a file input causes a crash
        https://bugs.webkit.org/show_bug.cgi?id=132214

        Reviewed by Andreas Kling.

        The bug was caused by callDefaultEventHandlersInTheBubblingOrder unconditionally
        accessing path.contextAt(0) even if the event path was empty.

        Fixed the bug by exiting early when the event path is empty.

        Test: fast/events/shadow-event-path-2.html

        * dom/EventDispatcher.cpp:
        (WebCore::callDefaultEventHandlersInTheBubblingOrder):

2014-04-25  Tim Horton  <timothy_horton@apple.com>

        REGRESSION (r167828): http/tests/media/hls/video-controls-live-stream.html fails

        * English.lproj/mediaControlsLocalizedStrings.js:
        Add 'Live Broadcast' to the localized strings list.

2014-04-25  Brady Eidson  <beidson@apple.com>

        Add a selection overlay.
        <rdar://problem/16727797> and https://bugs.webkit.org/show_bug.cgi?id=132200

        Reviewed by David Hyatt.

        No new tests (WK2 feature in development).

        * WebCore.xcodeproj/project.pbxproj:

        Add a SelectionRectGathterer class.
        It creates a Notifier (given a RenderView) then accepts Rects from the RenderView.
        When the Notifier is destroyed, the appropriate EditorClient is notified of the gathered rects.
        * editing/SelectionRectGatherer.cpp: Added.
        (WebCore::SelectionRectGatherer::SelectionRectGatherer):
        (WebCore::SelectionRectGatherer::addRect):
        (WebCore::SelectionRectGatherer::addRects):
        (WebCore::SelectionRectGatherer::Notifier::Notifier):
        (WebCore::SelectionRectGatherer::Notifier::~Notifier):
        (WebCore::SelectionRectGatherer::clearAndCreateNotifier):
        * editing/SelectionRectGatherer.h: Added.

        * page/EditorClient.h:
        (WebCore::EditorClient::selectionRectsDidChange):

        * rendering/RenderView.cpp:
        (WebCore::RenderView::RenderView):
        (WebCore::RenderView::setSelection): Clear the gatherer’s rects then create a Notifier.
        (WebCore::RenderView::setSubtreeSelection): Give all the selection rects to be painted to
          the SelectionRectGatherer.
        * rendering/RenderView.h:

2014-04-08  Jer Noble  <jer.noble@apple.com>

        Support "Live" streams in media controls.
        https://bugs.webkit.org/show_bug.cgi?id=131390

        Reviewed by Brent Fulgham.

        Test: http/tests/media/hls/video-controls-live-stream.html

        Support "Live" streams by adding an isLive property to our media controls.

        * Modules/mediacontrols/mediaControlsApple.css:
        (audio::-webkit-media-controls-status-display):
        (video:-webkit-full-screen::-webkit-media-controls-status-display):
        * Modules/mediacontrols/mediaControlsApple.js:
        (Controller): isLive defaults to false.
        (Controller.prototype.setIsLive): Set the isLive property and conditionally reconfigure the controls.
        (Controller.prototype.configureInlineControls): Don't add the timeline if we are live.
        (Controller.prototype.configureFullScreenControls): Ditto.
        (Controller.prototype.updateStatusDisplay): Added.
        (Controller.prototype.handleLoadStart): Call updateStatusDisplay().
        (Controller.prototype.handleError): Ditto.
        (Controller.prototype.handleAbort): Ditto.
        (Controller.prototype.handleSuspend): Ditto.
        (Controller.prototype.handleStalled): Ditto.
        (Controller.prototype.handleWaiting): Ditto.
        (Controller.prototype.updateDuration): Ditto.
        (Controller.prototype.updateReadyState): Ditto.

2014-04-25  Dean Jackson  <dino@apple.com>

        Allow a platform-specific size enumeration to be passed into popup-menu display
        https://bugs.webkit.org/show_bug.cgi?id=132195

        Reviewed by Brent Fulgham. With some in-person review comments from Sam Weinig.

        Platforms like OS X use a set of predefined sizes for built-in controls
        used for <select>: normal, small and mini. Expose that information to
        the PopupMenuClient via the PopupMenuStyle, allowing it to be passed
        into the platform code in WebKitSystemInterface.

        * platform/PopupMenuStyle.h: Add a menu size enum.
        (WebCore::PopupMenuStyle::PopupMenuStyle):
        (WebCore::PopupMenuStyle::menuSize):
        * platform/mac/WebCoreSystemInterface.h: Pass in NSControlSize as a parameter
        to WKPopupMenu.
        * platform/mac/WebCoreSystemInterface.mm: Ditto.
        * rendering/RenderMenuList.cpp:
        (RenderMenuList::menuStyle): Ask the RenderTheme to calculate the size
        of the menu button, so that it can be added to the PopupMenuStyle.
        * rendering/RenderTheme.h: New method to retrieve the menu size.
        (WebCore::RenderTheme::popupMenuSize): Convert an NSControlSize into a PopupMenuSize.
        * rendering/RenderThemeMac.h: Override the base function, and add a
        controlSizeForCell helper.
        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::controlSizeForCell): Used by this new
        code and the old setControlSizeForCell to calculate the NSControlSize
        that would be used for the button.
        (WebCore::RenderThemeMac::setControlSize): Call the new helper.
        (WebCore::RenderThemeMac::popupMenuSize): Return the value from the helper.

2014-04-25  Javier Fernandez  <jfernandez@igalia.com>

        REGRESSION(r167799): ASSERTION in parseGridTemplateShorthand in fast/css-grid-layout/grid-template-shorthand-get-set.html
        https://bugs.webkit.org/show_bug.cgi?id=132194

        Reviewed by Martin Robinson.

        Properly resolving the grid-template shorthand for the corresponding longhand
        properties.

        No new tests, grid-template-shorthand-get-set.html already covers this case.

        * css/StyleProperties.cpp:
        (WebCore::StyleProperties::getPropertyValue):
        * css/StylePropertyShorthand.cpp:
        (WebCore::shorthandForProperty):
        (WebCore::matchingShorthandsForLonghand):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):

2014-04-25  David Hyatt  <hyatt@apple.com>

        Column rules not respecting scroll offsets.
        https://bugs.webkit.org/show_bug.cgi?id=109683

        Reviewed by Dean Jackson.

        Added fast/multicol/scrolling-column-rules.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::paintColumnRules):
        Make paintColumnRules virtual so that it works with both column implementations.

        (WebCore::RenderBlock::paintObject):
        Changed to call paintColumnRules with the adjusted scroll offset and to do it after
        bailing on the root background only check.

        * rendering/RenderBlock.h:
        paintColumnRules is now virtual.

        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::paintColumnRules):
        (WebCore::RenderBlockFlow::paintBoxDecorations): Deleted.
        * rendering/RenderBlockFlow.h:
        Got rid of paintBoxDecorations override since it failed when hasBoxDecorations was false
        anyway. Override paintColumnRules instead to paint at the right time.

2014-04-23  Jon Honeycutt  <jhoneycutt@apple.com>

        Crash applying editing commands from iframe onload event

        <https://bugs.webkit.org/show_bug.cgi?id=132103>
        <rdar://problem/15696351>

        This patch merges the Chromium bug workaround from
        <http://src.chromium.org/viewvc/blink?revision=162080&view=revision>,
        which prevents reentrancy in CompositeEditCommand::apply().

        Reviewed by Darin Adler.

        Test: editing/apply-style-iframe-crash.html

        * editing/CompositeEditCommand.cpp:
        (WebCore::HTMLNames::ReentrancyGuard::isRecursiveCall):
        (WebCore::HTMLNames::ReentrancyGuard::Scope::Scope):
        (WebCore::HTMLNames::ReentrancyGuard::Scope::~Scope):
        (WebCore::CompositeEditCommand::apply):
        If this is a recursive call, return early.

2014-04-25  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] fast/multicol/hit-test-* layout tests all fail
        https://bugs.webkit.org/show_bug.cgi?id=132081

        Reviewed by Dean Jackson.

        Added a bunch of tests in fast/multicol/newmulticol/compare-with-old-impl/hit-test-*.html

        * rendering/RenderBlock.h:
        Make offsetForContents public, since I need to call it from RenderMultiColumnSet.

        * rendering/RenderMultiColumnFlowThread.cpp:
        (WebCore::RenderMultiColumnFlowThread::populate):
        Stop an ASSERT in the new columns code on the hit tests by making sure layout state is
        disabled when moving children around.

        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::positionForPoint):
        Refactor this function to call a helper function instead, translateRegionPointToFlowThread.

        (WebCore::RenderMultiColumnSet::translateRegionPointToFlowThread):
        This function is logical (unlike the mistaken physical function I first implemented in
        positionForPoint).

        (WebCore::RenderMultiColumnSet::updateHitTestResult):
        * rendering/RenderMultiColumnSet.h:
        Overridden to fill in the correct local coordinate when the HTML document is inside a paginated
        RenderView. Note that column spans don't actually work, but once we move over to a 
        non-column based pagination API, that will become irrelevant.

2014-04-25  Andreas Kling  <akling@apple.com>

        Mark some things with WTF_MAKE_FAST_ALLOCATED.
        <https://webkit.org/b/132198>

        Use FastMalloc for more things.

        Reviewed by Anders Carlsson.

        * bindings/js/ScriptController.h:
        * dom/DocumentOrderedMap.h:
        * inspector/InspectorCSSAgent.h:
        * inspector/InspectorDOMAgent.h:
        * inspector/InspectorDOMDebuggerAgent.h:
        * inspector/InspectorDOMStorageAgent.h:
        * inspector/InspectorDatabaseAgent.h:
        * inspector/InspectorLayerTreeAgent.h:
        * inspector/InspectorPageAgent.h:
        * inspector/InspectorResourceAgent.h:
        * inspector/InspectorTimelineAgent.h:
        * inspector/InspectorWorkerAgent.h:
        * inspector/PageRuntimeAgent.h:
        * loader/HistoryController.h:
        * page/DeviceClient.h:
        * page/DeviceController.h:
        * page/EventHandler.h:
        * page/Page.h:
        * page/scrolling/ScrollingStateNode.h:
        * platform/graphics/FontGenericFamilies.h:
        * platform/graphics/FontPlatformData.h:

2014-04-25  Radu Stavila  <stavila@adobe.com>

        [CSS Regions] Rename objectShouldPaintInFlowRegion to something more clear
        https://bugs.webkit.org/show_bug.cgi?id=132050

        Reviewed by Andreas Kling.

        The objectShouldPaintInFlowRegion is no longer used only by the painting process
        but also for hit-testing, so it was renamed to something more generic (objectShouldFragmentInFlowRegion).

        No new tests required, it's just a method rename.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::paint):
        (WebCore::RenderBlock::selectionGaps):
        (WebCore::RenderBlock::nodeAtPoint):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::positionForPoint):
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::objectShouldFragmentInFlowRegion):
        (WebCore::RenderFlowThread::objectShouldPaintInFlowRegion): Deleted.
        * rendering/RenderFlowThread.h:
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayer):
        (WebCore::RenderLayer::hitTestLayer):
        * rendering/RenderRegion.cpp:
        (WebCore::RenderRegion::ensureOverflowForBox):
        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::shouldPaint):

2014-04-25  Enrica Casucci  <enrica@apple.com>

        iOS build fix after http://trac.webkit.org/changeset/167803
        Unreviewed.

        * page/Frame.cpp:
        (WebCore::Frame::checkOverflowScroll):
        * rendering/RenderBlock.cpp:
        (WebCore::positionForPointRespectingEditingBoundaries):

2014-04-24  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Add support for offsetLeft and offsetTop.
        https://bugs.webkit.org/show_bug.cgi?id=132080

        Reviewed by Andrei Bucur.

        Added fast/multicol/client-spanners-complex.html and offset-top-left.html

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::adjustedPositionRelativeToOffsetParent):
        Patch the offsetLeft/Top loop to handle calling into RenderMultiColumnFlowThread
        in order to adjust the coordinates for the new multicolumn layout.

        * rendering/RenderMultiColumnFlowThread.cpp:
        (WebCore::RenderMultiColumnFlowThread::mapFromFlowToRegion):
        Modified to use a helper that can be shared by offsetLeft/Top code. This code
        ran for client rects, and I'm moving/refactoring it for more sharing.

        (WebCore::RenderMultiColumnFlowThread::physicalTranslationOffsetFromFlowToRegion):
        (WebCore::RenderMultiColumnFlowThread::physicalTranslationFromFlowToRegion):
        * rendering/RenderMultiColumnFlowThread.h:
        New functions that beef up what was in mapFromFlowToRegion and fix some bugs
        with the translation code.

        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::columnTranslationForOffset):
        Patched to factor in the flow thread portion rect of the specific multicolumn set.

        * rendering/RenderObject.h:
        (WebCore::RenderObject::isRenderMultiColumnFlowThread):
        Added for toRenderMultiColumnFlowThread capability.

2014-04-25  Brent Fulgham  <bfulgham@apple.com>

        ScrollingCoordinator is unaware of topContentInset
        https://bugs.webkit.org/show_bug.cgi?id=132158
        <rdar://problem/16706152>

        Reviewed by Darin Adler.

        Test: platform/mac/fast/scrolling/scroll-select-bottom-test.html

        The calculation of non-fast-scrollable regions does not currently take
        the topContentOffset into account. Consequently, the logic that decides
        whether to stay on the scrolling thread, or drop down to an individual
        page element, can make the wrong choice. This is especially true for
        small scrollable regions (such as <select> elements), where the
        topContentInset may be quite close to the size of the scrollable
         element itself.

        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::computeNonFastScrollableRegion): Also
        include the topContentInset value in our calculation.

2014-04-25  Javier Fernandez  <jfernandez@igalia.com>

        REGRESSION(r167799): Breaks debug build
        https://bugs.webkit.org/show_bug.cgi?id=132194

        Reviewed by Andrei Bucur.

        Fix the debug bots after r167799

        No new tests, no new functionality.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseGridTemplateShorthand):

2014-04-25  Miyoung Shin  <myid.shin@samsung.com>

        Web process is crashed during dispatching touchEvent created by JS.
        https://bugs.webkit.org/show_bug.cgi?id=113225

        Reviewed by Benjamin Poulain.

        TouchEvent created by JS should have the necessary attributes
        of touches, targetTouches and changedTouches.
        It should be verified weather there are touchLists before dispatching touch event.

        Test: fast/events/touch/create-touch-event-without-touchList.html

        * dom/EventDispatcher.cpp:
        (WebCore::EventDispatcher::dispatchEvent):
        (WebCore::EventPath::updateTouchLists):
        (WebCore::addRelatedNodeResolversForTouchList): Deleted.

2014-04-25  Philippe Normand  <pnormand@igalia.com>

        [GTK] File webkitRelativePath attribute was removed in r163483
        https://bugs.webkit.org/show_bug.cgi?id=132193

        Reviewed by Carlos Garcia Campos.

        Add the removed getter as deprecated API to keep backwards compatibility.

        * bindings/gobject/WebKitDOMDeprecated.cpp:
        (webkit_dom_file_get_webkit_relative_path):
        * bindings/gobject/WebKitDOMDeprecated.h:
        * bindings/gobject/WebKitDOMDeprecated.symbols:

2014-04-25  Radu Stavila  <stavila@adobe.com>

        [CSS Regions] Overflow selection doesn't work properly
        https://bugs.webkit.org/show_bug.cgi?id=130715

        Reviewed by David Hyatt.

        When hit-testing, painting block selection gaps and searching for the node at a specific point inside a flow thread,
        the region range of the box being checked must be validated in order to not return false positives. Otherwise, hit-testing
        at the top of region B could hit elements that overflow the bottom of region A.

        Tests: fast/regions/selection-in-overflow-hit-testing.html
               fast/regions/selection-in-overflow.html
               fast/regions/selection-in-text-after-overflow-hit-testing.html

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::visiblePositionRangeForLine):
        (WebCore::AccessibilityRenderObject::visiblePositionForPoint):
        * dom/Document.cpp:
        (WebCore::Document::caretRangeFromPoint):
        * editing/FrameSelection.cpp:
        (WebCore::FrameSelection::contains):
        * editing/VisibleUnits.cpp:
        (WebCore::previousLinePosition):
        (WebCore::nextLinePosition):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::selectClosestWordFromHitTestResult):
        (WebCore::EventHandler::selectClosestWordOrLinkFromMouseEvent):
        (WebCore::EventHandler::handleMousePressEventTripleClick):
        (WebCore::EventHandler::handleMousePressEventSingleClick):
        (WebCore::selectionExtentRespectingEditingBoundary):
        (WebCore::EventHandler::updateSelectionForMouseDrag):
        (WebCore::EventHandler::handleMouseReleaseEvent):
        * page/Frame.cpp:
        (WebCore::Frame::visiblePositionForPoint):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::selectionGaps):
        (WebCore::RenderBlock::nodeAtPoint):
        (WebCore::positionForPointRespectingEditingBoundaries):
        (WebCore::RenderBlock::positionForPointWithInlineChildren):
        (WebCore::isChildHitTestCandidate):
        (WebCore::RenderBlock::positionForPoint):
        * rendering/RenderBlock.h:
        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::positionForPointWithInlineChildren):
        (WebCore::RenderBlockFlow::positionForPoint):
        * rendering/RenderBlockFlow.h:
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::positionForPoint):
        * rendering/RenderBox.h:
        * rendering/RenderFileUploadControl.cpp:
        (WebCore::RenderFileUploadControl::positionForPoint):
        * rendering/RenderFileUploadControl.h:
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::positionForPoint):
        * rendering/RenderInline.h:
        * rendering/RenderLineBreak.cpp:
        (WebCore::RenderLineBreak::positionForPoint):
        * rendering/RenderLineBreak.h:
        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::positionForPoint):
        * rendering/RenderMultiColumnSet.h:
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::positionForPoint):
        * rendering/RenderObject.h:
        * rendering/RenderRegion.cpp:
        (WebCore::RenderRegion::positionForPoint):
        * rendering/RenderRegion.h:
        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::positionForPoint):
        * rendering/RenderReplaced.h:
        * rendering/RenderText.cpp:
        (WebCore::RenderText::positionForPoint):
        * rendering/RenderText.h:
        * rendering/svg/RenderSVGInlineText.cpp:
        (WebCore::RenderSVGInlineText::positionForPoint):
        * rendering/svg/RenderSVGInlineText.h:
        * rendering/svg/RenderSVGText.cpp:
        (WebCore::RenderSVGText::positionForPoint):
        * rendering/svg/RenderSVGText.h:

2014-04-25  Philippe Normand  <pnormand@igalia.com>

        [GTK] Iframe seamless support was removed in r163427
        https://bugs.webkit.org/show_bug.cgi?id=132192

        Reviewed by Carlos Garcia Campos.

        Add the removed get and set methods as deprecated API to keep
        backwards compatibility.

        * bindings/gobject/WebKitDOMDeprecated.cpp:
        (webkit_dom_processing_instruction_set_data):
        (webkit_dom_html_iframe_element_get_seamless):
        (webkit_dom_html_iframe_element_set_seamless):
        * bindings/gobject/WebKitDOMDeprecated.h:
        * bindings/gobject/WebKitDOMDeprecated.symbols:

2014-04-25  Philippe Normand  <pnormand@igalia.com>

        [GTK] HTMLInputElement webkitdirectory property was removed in r163483
        https://bugs.webkit.org/show_bug.cgi?id=132191

        Reviewed by Carlos Garcia Campos.

        Add the removed get and set methods as deprecated API to keep
        backwards compatibility.

        * bindings/gobject/WebKitDOMDeprecated.cpp:
        (webkit_dom_html_input_element_get_webkitdirectory):
        (webkit_dom_html_input_element_set_webkitdirectory):
        * bindings/gobject/WebKitDOMDeprecated.h:
        * bindings/gobject/WebKitDOMDeprecated.symbols:

2014-04-25  Javier Fernandez  <jfernandez@igalia.com>

        [CSS Grid Layout] Implementation of the grid-template shorthand.
        https://bugs.webkit.org/show_bug.cgi?id=128980

        Reviewed by Darin Adler.

        This shorthand sets the values for the grid-template-columns,
        grid-template-rows and grid-template-areas, so the implementation
        tries to reuse as much available parsing functions as possible.

        The "parsingGridTrackList" was refactored to return a CSSValue and
        let the "parseValue" function to assign the property value. The
        "forwardSlash" operator is now valid when the track-list clause is
        part of a shorthand. The "parseValue" function checkouts that only
        additional clauses are allowed when processing shorthands; the
        grid-columns-rows-get-set.html tests was modified to verify this.

        The "parseGridTemplateAreas" was refactored too, in order to
        process single areas's rows. This is very useful for the
        gris-template secondary syntax, which mixes areas and rows values.

        Finally, the "parseGirdLineNames" function was modified as well by
        defining an new argument to concatenate head/tail custom-ident
        elements and ensure the identList is at the heading index, since
        it's now possible the parseList was rewound.

        The implementation of the grid-template shorthand tries first to
        match the <grid-template-columns> / <grid-template-rows> syntax,
        failing back to the secondary syntax if needed.  This approach
        requires to rewind the parseList but it produces a clearer code.

        Test: fast/css-grid-layout/grid-template-shorthand-get-set.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::ComputedStyleExtractor::propertyValue):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        (WebCore::CSSParser::parseGridTemplateRowsAndAreas):
        (WebCore::CSSParser::parseGridTemplateShorthand):
        (WebCore::CSSParser::parseGridLineNames):
        (WebCore::CSSParser::parseGridTrackList):
        (WebCore::CSSParser::parseGridTemplateAreasRow):
        (WebCore::CSSParser::parseGridTemplateAreas):
        * css/CSSParser.h:
        * css/CSSParserValues.h:
        (WebCore::CSSParserValueList::setCurrentIndex):
        * css/CSSPropertyNames.in:
        * css/StylePropertyShorthand.cpp:
        (WebCore::webkitGridTemplateShorthand):
        * css/StylePropertyShorthand.h:

2014-04-25  Andreas Kling  <akling@apple.com>

        Remove two unused SVGDocument functions.
        <https://webkit.org/b/132178>

        Reviewed by Antti Koivisto.

        * svg/SVGDocument.cpp:
        (WebCore::SVGDocument::dispatchZoomEvent): Deleted.
        (WebCore::SVGDocument::dispatchScrollEvent): Deleted.
        * svg/SVGDocument.h:

2014-04-25  Ion Rosca  <rosca@adobe.com>

        Incomplete body painting when using blend modes
        https://bugs.webkit.org/show_bug.cgi?id=131889

        The incomplete painting was caused by the transparency layer created for
        the root renderer. We can safely skip creating this transparency layer at
        the root level, as there is nothing else being painted behind this layer that
        could be used erroneously as a backdrop.

        Reviewed by Simon Fraser.

        Test: css3/compositing/blend-mode-with-body.html

        * rendering/RenderLayer.h:
        Changing RenderLayer::paintsWithTransparency so that it will not
        return true when the root renderer needs to isolate blending.

2014-04-25  Darin Adler  <darin@apple.com>

        ASSERTION FAILED: "!m_isolatedWorld->isNormal() || m_wrapper || !m_jsFunction" in svg/custom/use-instanceRoot-event-listeners.xhtml
        https://bugs.webkit.org/show_bug.cgi?id=132148

        Reviewed by Andreas Kling.

        Changed how JSCustomMarkFunction generation works. Instead of leaving out
        the generated visitChildren function, just generate a call to visitAdditionalChildren.
        This eliminates the need to repeat boilerplate.

        The fix for the above bug was to correct mistaken logic where JSSVGElementInstance
        had a visitChildren that did not properly mark event listeners because it explicitly
        did not call through to the base class visitChildren. The new arrangement makes that
        mistake impossible.

        * bindings/js/JSAttrCustom.cpp:
        (WebCore::JSAttr::visitAdditionalChildren): Use this instead of visitChildren.
        * bindings/js/JSAudioTrackCustom.cpp:
        (WebCore::JSAudioTrack::visitAdditionalChildren): Ditto.
        * bindings/js/JSAudioTrackListCustom.cpp:
        (WebCore::JSAudioTrackList::visitAdditionalChildren): Ditto.
        * bindings/js/JSCSSRuleCustom.cpp:
        (WebCore::JSCSSRule::visitAdditionalChildren): Ditto.
        * bindings/js/JSCSSStyleDeclarationCustom.cpp:
        (WebCore::JSCSSStyleDeclaration::visitAdditionalChildren): Ditto.
        * bindings/js/JSCanvasRenderingContextCustom.cpp:
        (WebCore::JSCanvasRenderingContext::visitAdditionalChildren): Ditto.
        * bindings/js/JSCryptoKeyPairCustom.cpp:
        (WebCore::JSCryptoKeyPair::visitAdditionalChildren): Ditto.
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::visitAdditionalChildren): Ditto.
        * bindings/js/JSMessageChannelCustom.cpp:
        (WebCore::JSMessageChannel::visitAdditionalChildren): Ditto.
        * bindings/js/JSMessagePortCustom.cpp:
        (WebCore::JSMessagePort::visitAdditionalChildren): Ditto.
        * bindings/js/JSNodeCustom.cpp:
        (WebCore::JSNode::visitAdditionalChildren): Ditto.
        * bindings/js/JSNodeFilterCustom.cpp:
        (WebCore::JSNodeFilter::visitAdditionalChildren): Ditto.
        * bindings/js/JSNodeIteratorCustom.cpp:
        (WebCore::JSNodeIterator::visitAdditionalChildren): Ditto.
        * bindings/js/JSSVGElementInstanceCustom.cpp:
        (WebCore::JSSVGElementInstance::visitAdditionalChildren): Ditto.
        * bindings/js/JSSharedWorkerCustom.cpp:
        (WebCore::JSSharedWorker::visitAdditionalChildren): Ditto.
        * bindings/js/JSStyleSheetCustom.cpp:
        (WebCore::JSStyleSheet::visitAdditionalChildren): Ditto.
        * bindings/js/JSTextTrackCueCustom.cpp:
        (WebCore::JSTextTrackCue::visitAdditionalChildren): Ditto.
        * bindings/js/JSTextTrackCustom.cpp:
        (WebCore::JSTextTrack::visitAdditionalChildren): Ditto.
        * bindings/js/JSTextTrackListCustom.cpp:
        (WebCore::JSTextTrackList::visitAdditionalChildren): Ditto.
        * bindings/js/JSTreeWalkerCustom.cpp:
        (WebCore::JSTreeWalker::visitAdditionalChildren): Ditto.
        * bindings/js/JSVideoTrackCustom.cpp:
        (WebCore::JSVideoTrack::visitAdditionalChildren): Ditto.
        * bindings/js/JSVideoTrackListCustom.cpp:
        (WebCore::JSVideoTrackList::visitAdditionalChildren): Ditto.
        * bindings/js/JSWebGLRenderingContextCustom.cpp:
        (WebCore::JSWebGLRenderingContext::visitAdditionalChildren): Ditto.
        * bindings/js/JSWorkerGlobalScopeCustom.cpp:
        (WebCore::JSWorkerGlobalScope::visitAdditionalChildren): Ditto.
        * bindings/js/JSXMLHttpRequestCustom.cpp:
        (WebCore::JSXMLHttpRequest::visitAdditionalChildren): Ditto.
        * bindings/js/JSXPathResultCustom.cpp:
        (WebCore::JSXPathResult::visitAdditionalChildren): Ditto.

        * bindings/js/JSDOMGlobalObject.cpp:
        (WebCore::JSDOMGlobalObject::visitChildren): Rewrote to use modern for loops.

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateHeader): Generate declaration of visitAdditionalChildren.
        (GenerateImplementation): Generate call to visitAdditionalChildren.

2014-04-24  Andreas Kling  <akling@apple.com>

        [iOS WebKit2] Enable optimization to mmap downloaded resources once they become file-backed.
        <https://webkit.org/b/132171>
        <rdar://problem/16720733>

        Add a missing export for the USE(CFNETWORK) + WebKit2 combo.

        Reviewed by Antti Koivisto.

        * WebCore.exp.in:

2014-04-24  Darin Adler  <darin@apple.com>

        FrameLoader::checkCompleted can hit the "ref'ing while destroyed" assertion
        https://bugs.webkit.org/show_bug.cgi?id=132163
        rdar://problem/16720640

        Reviewed by Brady Eidson.

        Couldn't find a way to test this yet. Would be nice to have a test.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::checkCompleted): Move protector until after we check
        if the frame is already complete. That can happen in practice when this is
        called from within the frame's destructor. All the code that runs before the
        protector simply checks state and does not require protection.

2014-04-24  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        Mark Supplement instead of RefCountedSupplement in NavigatorContentUtils 
        https://bugs.webkit.org/show_bug.cgi?id=132151

        Reviewed by Darin Adler.

        Though Original goal was to make it sharable across navigator instances, the NavigatorContentUtils
        has used RefCountedSupplement<Page> instead of RefCountedSupplement<Navigator>. This patch makes it
        use Supplement<Page> because there is no scenario which needs to be shared across navigator instances.

        Blink merge from https://src.chromium.org/viewvc/blink?view=rev&revision=171403.

        No new tests, no behavior changes.

        * Modules/navigatorcontentutils/NavigatorContentUtils.cpp:
        (WebCore::NavigatorContentUtils::from):
        (WebCore::NavigatorContentUtils::create):
        (WebCore::provideNavigatorContentUtilsTo):
        * Modules/navigatorcontentutils/NavigatorContentUtils.h:

2014-04-24  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167700.
        https://bugs.webkit.org/show_bug.cgi?id=132142

        Incorrectly reverted the change in r167547 for
        webkit.org/b/131898 (Requested by rniwa on #webkit).

        Reverted changeset:

        "Cursor doesn't change back to pointer when leaving the Safari
        window"
        https://bugs.webkit.org/show_bug.cgi?id=132038
        http://trac.webkit.org/changeset/167700

2014-04-24  Brady Eidson  <beidson@apple.com>

        Rename "IMAGE_CONTROLS" feature to "SERVICE_CONTROLS"
        https://bugs.webkit.org/show_bug.cgi?id=132155

        Reviewed by Tim Horton.

        No new tests (No change in behavior).

        * Configurations/FeatureDefines.xcconfig:
        * DerivedSources.make:
        * WebCore.exp.in:
        * css/CSSDefaultStyleSheets.cpp:
        (WebCore::CSSDefaultStyleSheets::ensureDefaultStyleSheetsForElement):
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        * css/CSSValueKeywords.in:
        * dom/Node.h:
        * html/HTMLImageElement.cpp:
        (WebCore::HTMLImageElement::HTMLImageElement):
        (WebCore::HTMLImageElement::parseAttribute):
        (WebCore::HTMLImageElement::didAttachRenderers):
        * html/HTMLImageElement.h:
        * html/shadow/ImageControlsRootElement.cpp:
        * html/shadow/ImageControlsRootElement.h:
        * html/shadow/mac/ImageControlsButtonElementMac.cpp:
        * html/shadow/mac/ImageControlsButtonElementMac.h:
        * html/shadow/mac/ImageControlsRootElementMac.cpp:
        * html/shadow/mac/ImageControlsRootElementMac.h:
        * page/ContextMenuContext.cpp:
        (WebCore::ContextMenuContext::ContextMenuContext):
        * page/ContextMenuContext.h:
        * page/ContextMenuController.cpp:
        (WebCore::ContextMenuController::maybeCreateContextMenu):
        (WebCore::ContextMenuController::populate):
        * page/ContextMenuController.h:
        * page/Settings.in:
        * platform/ThemeTypes.h:
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::canHaveChildren):
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::adjustStyle):
        (WebCore::RenderTheme::paint):
        (WebCore::RenderTheme::paintBorderOnly):
        (WebCore::RenderTheme::paintDecorations):
        * rendering/RenderTheme.h:
        * rendering/RenderThemeMac.h:
        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::servicesRolloverButtonCell):
        (WebCore::RenderThemeMac::paintImageControlsButton):
        (WebCore::RenderThemeMac::imageControlsButtonSize):

2014-04-24  Timothy Hatcher  <timothy@apple.com>

        Web Inspector: Restore PageDebuggerAgent::enable / disable
        https://bugs.webkit.org/show_bug.cgi?id=132156

        Restore functions that were eroniously removed in r167530.

        Reviewed by Joseph Pecoraro.

        * inspector/PageDebuggerAgent.cpp:
        (WebCore::PageDebuggerAgent::enable): Added.
        (WebCore::PageDebuggerAgent::disable): Added.
        * inspector/PageDebuggerAgent.h:

2014-04-24  Alexey Proskuryakov  <ap@apple.com>

        Dropzone effects don't work in non-file documents
        https://bugs.webkit.org/show_bug.cgi?id=131770

        Reviewed by Darin Adler.

        File documents have two quirks that were making dropzone work in these before:
        1. An ancient hack for Dashboard allows pasteboard access from JS.
        2. On Mac, sandbox doesn't prevent File object creation, as we already have the access.

        * dom/DataTransfer.cpp:
        (WebCore::DataTransfer::hasFileOfType):
        (WebCore::DataTransfer::hasStringOfType):
        * dom/DataTransfer.h:
        Moved these functions from EventHandler to DataTransfer. We can't create a DataTransfer
        with Files while dragging, security doesn't permit us to. But we can get the file name.

        * fileapi/File.cpp:
        (WebCore::createBlobDataForFile):
        (WebCore::createBlobDataForFileWithName):
        (WebCore::File::contentTypeFromFilePath):
        (WebCore::getContentTypeFromFileName): Deleted.
        * fileapi/File.h:
        Exposed a function to get file type from path without creating a File first.
        This is much cheaper than creating a File, and works even when sandbox disallows
        read access to content, such as when dragging over a target.

        * page/EventHandler.cpp:
        (WebCore::hasDropZoneType):
        (WebCore::hasFileOfType): Deleted.
        (WebCore::hasStringOfType): Deleted.

2014-04-24  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167441.
        https://bugs.webkit.org/show_bug.cgi?id=132152

        Caused full screen regressions on vimeo, youtube, and others.
        (Requested by jernoble on #webkit).

        Reverted changeset:

        "Fullscreen media controls are unusable in pagination mode"
        https://bugs.webkit.org/show_bug.cgi?id=131705
        http://trac.webkit.org/changeset/167441

2014-04-24  Adenilson Cavalcanti  <cavalcantii@gmail.com>

        Unused class forward declarations in Page
        https://bugs.webkit.org/show_bug.cgi?id=132141

        Reviewed by Benjamin Poulain.

        No new tests, no change on behavior.

        * page/Page.h:

2014-04-24  Eric Carlson  <eric.carlson@apple.com>

        [Mac] don't ask for AVAssetTrack properties before they are available
        https://bugs.webkit.org/show_bug.cgi?id=131902
        <rdar://problem/16505076>

        Reviewed by Brent Fulgham.

        No new tests, the behavior this changes can not be tested with a layout test.

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::MediaPlayerPrivateAVFoundationObjC): Initialize
            m_cachedTotalBytes.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::beginLoadingMetadata): Don't report that
            metadata has been loaded until the track properties we need have been loaded too.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::totalBytes): Cache totalBytes instead
            of recalculating it every time.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::tracksDidChange): Invalidate cached
            total bytes.
        (WebCore::assetTrackMetadataKeyNames): Array of AVAssetTrack properties we use.

2014-04-24  Myles C. Maxfield  <mmaxfield@apple.com>

        Unify platformWidthForGlyph across OS X and iOS
        https://bugs.webkit.org/show_bug.cgi?id=132036

        Reviewed by Darin Adler.

        This patch creates on shared SimpleFontData::platformWidthForGlyph() function for both OS X and iOS.

        No new tests are necessary because there should be no behavior changes.

        * platform/graphics/SimpleFontData.h: Signatures for two helper functions
        * platform/graphics/ios/SimpleFontDataIOS.mm: Replace iOS implementation of platformWidthForGlyph() with
        implementations of only the two helper functions
        (WebCore::SimpleFontData::getRenderingStyle): Compute style argument to CGFontGetGlyphAdvancesForStyle()
        (WebCore::SimpleFontData::advanceForColorBitmapFont): iOS doesn't have color bitmap fonts
        (WebCore::SimpleFontData::platformWidthForGlyph): Deleted.
        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::getRenderingStyle): Compute style argument to CGFontGetGlyphAdvancesForStyle()
        (WebCore::SimpleFontData::advanceForColorBitmapFont): Use [NSFont advancementForGlyph] to compute the advance
        (WebCore::hasCustomTracking): Removed #if
        (WebCore::isEmoji): Only relevant on iOS
        (WebCore::SimpleFontData::platformWidthForGlyph): Shared implementation. Calls helper functions.

2014-04-24  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Clipping on text areas when shifted by one device pixel.
        https://bugs.webkit.org/show_bug.cgi?id=132008

        Reviewed by Darin Adler.

        Make RenderTheme paint* functions LayoutRect aware. Textarea is device pixel snapped, while
        other theme controls are still on integral size/positions.

        Test: fast/forms/hidpi-textarea-on-subpixel-position.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::paintBoxDecorations):
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::paint):
        (WebCore::RenderTheme::paintBorderOnly):
        (WebCore::RenderTheme::paintDecorations):
        * rendering/RenderTheme.h:
        (WebCore::RenderTheme::paintTextField):
        (WebCore::RenderTheme::paintTextFieldDecorations):
        (WebCore::RenderTheme::paintTextArea):
        (WebCore::RenderTheme::paintTextAreaDecorations):
        * rendering/RenderThemeIOS.h:
        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::paintTextFieldDecorations):
        (WebCore::RenderThemeIOS::paintTextAreaDecorations):
        * rendering/RenderThemeMac.h:
        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::paintTextField):
        (WebCore::RenderThemeMac::paintTextArea):

2014-04-24  Myles C. Maxfield  <mmaxfield@apple.com>

        FontCache::fontCache() never returns nullptr so it can be made to return a reference instead
        https://bugs.webkit.org/show_bug.cgi?id=132110

        Reviewed by Tim Horton.

        Updates callers to use '.' instead of '->'.

        No new tests are necessary because there should be no behavior change.

        * css/CSSFontFaceSource.cpp:
        (WebCore::CSSFontFaceSource::getFontData):
        * css/CSSFontSelector.cpp:
        (WebCore::CSSFontSelector::CSSFontSelector):
        (WebCore::CSSFontSelector::~CSSFontSelector):
        (WebCore::CSSFontSelector::addFontFaceRule):
        (WebCore::fontDataForGenericFamily):
        (WebCore::CSSFontSelector::getFallbackFontData):
        * platform/MemoryPressureHandler.cpp:
        (WebCore::MemoryPressureHandler::releaseMemory):
        * platform/graphics/FontCache.cpp:
        (WebCore::fontCache): Return a reference
        * platform/graphics/FontCache.h:
        (WebCore::FontCachePurgePreventer::FontCachePurgePreventer):
        (WebCore::FontCachePurgePreventer::~FontCachePurgePreventer):
        * platform/graphics/FontGlyphs.cpp:
        (WebCore::FontGlyphs::FontGlyphs):
        (WebCore::FontGlyphs::releaseFontData):
        (WebCore::FontGlyphs::realizeFontDataAt):
        (WebCore::FontGlyphs::glyphDataAndPageForCharacter):
        * platform/graphics/freetype/FontPlatformDataFreeType.cpp:
        (WebCore::FontPlatformData::verticalData):
        * platform/graphics/ios/SimpleFontDataIOS.mm:
        (WebCore::SimpleFontData::platformCreateScaledFontData):
        * platform/graphics/mac/ComplexTextControllerCoreText.mm:
        (WebCore::ComplexTextController::collectComplexTextRunsForCharacters):
        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::invalidateFontCache):
        (WebCore::fontCacheRegisteredFontsChangedNotificationCallback):
        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::platformDestroy):
        (WebCore::SimpleFontData::platformCreateScaledFontData):
        * platform/graphics/win/FontCacheWin.cpp:
        (WebCore::getCJKCodePageMasks):
        * platform/graphics/win/SimpleFontDataWin.cpp:
        (WebCore::SimpleFontData::containsCharacters):
        * platform/graphics/wince/FontCacheWinCE.cpp:
        (WebCore::getCJKCodePageMasks):
        * platform/graphics/wince/FontPlatformData.cpp:
        (WebCore::FontFamilyCodePageInfo::codePages):
        (WebCore::FixedSizeFontData::create):
        * platform/graphics/wince/GlyphPageTreeNodeWinCE.cpp:
        (WebCore::GlyphPage::fill):
        * platform/graphics/wince/SimpleFontDataWinCE.cpp:
        (WebCore::SimpleFontData::platformCreateScaledFontData):
        (WebCore::SimpleFontData::containsCharacters):

2014-04-24  Eric Carlson  <eric.carlson@apple.com>

        [iOS] Manage AudioSession category according to media type
        https://bugs.webkit.org/show_bug.cgi?id=132096

        Reviewed by Jer Noble.

        * WebCore.exp.in: Export setting.

        * html/HTMLMediaSession.cpp:
        (WebCore::HTMLMediaSession::HTMLMediaSession):
        (WebCore::initializeAudioSession): Deleted.

        * page/Settings.cpp:
        * page/Settings.h:
        (WebCore::Settings::setShouldManageAudioSession): New.
        (WebCore::Settings::shouldManageAudioSession): Ditto.

        * platform/audio/ios/AudioDestinationIOS.cpp:
        (WebCore::AudioDestinationIOS::AudioDestinationIOS): Use a MediaSession instead of inheriting
            from AudioListener and calling the AudioSession directly.
        (WebCore::AudioDestinationIOS::~AudioDestinationIOS): Ditto.
        (WebCore::AudioDestinationIOS::start): Notify session.
        (WebCore::AudioDestinationIOS::stop): Ditto.
        (WebCore::AudioDestinationIOS::beganAudioInterruption): Deleted.
        (WebCore::AudioDestinationIOS::endedAudioInterruption): Deleted.
        * platform/audio/ios/AudioDestinationIOS.h:
        (WebCore::AudioDestinationIOS::mediaType):
        (WebCore::AudioDestinationIOS::canReceiveRemoteControlCommands):
        (WebCore::AudioDestinationIOS::didReceiveRemoteControlCommand):
        (WebCore::AudioDestinationIOS::isPlaying): Deleted.

        * platform/audio/ios/AudioSessionIOS.mm:
        (WebCore::categoryName): Debug-only logging function.
        (WebCore::AudioSession::setCategory): Don't stick with "media" once it is set.

        * platform/audio/ios/MediaSessionManagerIOS.mm:
        (WebCore::MediaSessionManageriOS::resetRestrictions): Set up restrictions for WebAudio.
        (WebCore::MediaSessionManageriOS::updateNowPlayingInfo): Don't set invalid start time.

        * platform/audio/mac/MediaSessionManagerMac.cpp:
        (MediaSessionManager::updateSessionState): Manage AudioSession.active when WebAudio clients
            come and go. Manage AudioSession.category according to the number of WebAudio and
            HTMLMediaElement clients.

2014-04-24  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Client rects don't work with column spans.
        https://bugs.webkit.org/show_bug.cgi?id=132131

        Reviewed by Dean Jackson.
        
        Don't factor in the offset of the multicolumn set from the top
        of the multicolumn block. This was added already, and it doesn't
        need to be a part of columnTranslationForOffset.

        Added fast/multicol/client-rects-spanners.html

        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::columnTranslationForOffset):

2014-04-24  Praveen R Jadhav  <praveen.j@samsung.com>

        [EFL] WebKit build fails when MEDIA_SOURCE is enabled
        https://bugs.webkit.org/show_bug.cgi?id=132118

        Reviewed by Brent Fulgham.

        Files MediaSourceGStreamer.cpp, SourceBufferPrivateGStreamer.cpp and
        WebKitMediaSourceGStreamer.cpp are included for EFL port build.

        No new tests. No change in behaviour.

        * PlatformEfl.cmake: MediaSourceGStreamer.cpp, SourceBufferPrivateGStreamer.cpp
        and WebKitMediaSourceGStreamer.cpp are included for compilation.

2014-04-24  Tamas Gergely  <tgergely.u-szeged@partner.samsung.com>

        ASSERTION FAILED: !begin.isIndefinite() in WebCore::SVGSMILElement::resolveFirstInterval.
        https://bugs.webkit.org/show_bug.cgi?id=131097

        Reviewed by Darin Adler.

        According to smil animation reference, max attribute cannot be 0.

        Test: svg/animations/smil-animation-max-attribute-zero-crash.svg

        * svg/animation/SVGSMILElement.cpp:
        (WebCore::SVGSMILElement::maxValue):
          changed (result < 0) to (result <= 0)

2014-04-24  Ryuan Choi  <ryuan.choi@samsung.com>

        Remove screenColorProfile()
        https://bugs.webkit.org/show_bug.cgi?id=132035

        Reviewed by Darin Adler.

        Only chromium used screenColorProfile() since r120789.

        * platform/PlatformScreen.h:
        * platform/efl/PlatformScreenEfl.cpp:
        (WebCore::screenColorProfile): Deleted.
        * platform/gtk/PlatformScreenGtk.cpp:
        (WebCore::screenColorProfile): Deleted.
        * platform/image-decoders/ImageDecoder.h:
        (WebCore::ImageDecoder::qcmsOutputDeviceProfile):
        * platform/ios/PlatformScreenIOS.mm:
        (WebCore::screenColorProfile): Deleted.
        * platform/mac/PlatformScreenMac.mm:
        (WebCore::screenColorProfile): Deleted.
        * platform/win/PlatformScreenWin.cpp:
        (WebCore::screenColorProfile): Deleted.

2014-04-24  Zalan Bujtas  <zalan@apple.com>

        One more unreviewed build fix after r167755.

        * html/shadow/mac/ImageControlsButtonElementMac.cpp:
        (WebCore::RenderImageControlsButton::updateLogicalWidth):
        (WebCore::RenderImageControlsButton::computeLogicalHeight):

2014-04-24  Zalan Bujtas  <zalan@apple.com>

        Unreviewed build fix after r167755.

        * rendering/RenderThemeMac.h:

2014-04-24  Zalan Bujtas  <zalan@apple.com>

        Transition RenderTheme API from RenderObject* to const RenderObject&
        https://bugs.webkit.org/show_bug.cgi?id=132037

        Reviewed by Andreas Kling.

        Using const references provides better encapsulation and improve security.

        No change in behavior.

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::boundingBoxForQuads):
        * dom/Element.cpp:
        (WebCore::Element::setActive):
        (WebCore::Element::setHovered):
        * editing/FrameSelection.cpp:
        (WebCore::FrameSelection::focusedOrActiveStateChanged):
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::disabledStateChanged):
        (WebCore::HTMLFormControlElement::readOnlyAttributeChanged):
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::setChecked):
        (WebCore::HTMLInputElement::setIndeterminate):
        * html/HTMLOptionElement.cpp:
        (WebCore::HTMLOptionElement::parseAttribute):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::addVisualOverflowFromTheme):
        (WebCore::RenderBlock::baselinePosition):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::paintBoxDecorations):
        * rendering/RenderButton.cpp:
        (WebCore::RenderButton::styleDidChange):
        * rendering/RenderFileUploadControl.cpp:
        (WebCore::RenderFileUploadControl::paintObject):
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::addRegionsVisualOverflowFromTheme):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::drawLineForBoxSide):
        * rendering/RenderObject.h:
        * rendering/RenderProgress.cpp:
        (WebCore::RenderProgress::computeLogicalHeight):
        * rendering/RenderTextControlSingleLine.cpp:
        (WebCore::RenderTextControlSingleLine::paint):
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::paint):
        (WebCore::RenderTheme::paintBorderOnly):
        (WebCore::RenderTheme::paintDecorations):
        (WebCore::RenderTheme::baselinePosition):
        (WebCore::RenderTheme::adjustRepaintRect):
        (WebCore::RenderTheme::stateChanged):
        (WebCore::RenderTheme::updateControlStatesForRenderer):
        (WebCore::RenderTheme::extractControlStatesForRenderer):
        (WebCore::RenderTheme::isActive):
        (WebCore::RenderTheme::isChecked):
        (WebCore::RenderTheme::isIndeterminate):
        (WebCore::RenderTheme::isEnabled):
        (WebCore::RenderTheme::isFocused):
        (WebCore::RenderTheme::isPressed):
        (WebCore::RenderTheme::isSpinUpButtonPartPressed):
        (WebCore::RenderTheme::isReadOnlyControl):
        (WebCore::RenderTheme::isHovered):
        (WebCore::RenderTheme::isSpinUpButtonPartHovered):
        (WebCore::RenderTheme::isDefault):
        (WebCore::RenderTheme::paintInputFieldSpeechButton):
        (WebCore::RenderTheme::paintMeter):
        (WebCore::RenderTheme::paintSliderTicks):
        (WebCore::RenderTheme::progressBarRectForBounds):
        * rendering/RenderTheme.h:
        (WebCore::RenderTheme::controlSupportsTints):
        (WebCore::RenderTheme::paintCapsLockIndicator):
        (WebCore::RenderTheme::paintFileUploadIconDecorations):
        (WebCore::RenderTheme::imageControlsButtonSize):
        (WebCore::RenderTheme::paintCheckbox):
        (WebCore::RenderTheme::paintRadio):
        (WebCore::RenderTheme::paintButton):
        (WebCore::RenderTheme::paintInnerSpinButton):
        (WebCore::RenderTheme::paintCheckboxDecorations):
        (WebCore::RenderTheme::paintRadioDecorations):
        (WebCore::RenderTheme::paintButtonDecorations):
        (WebCore::RenderTheme::paintTextField):
        (WebCore::RenderTheme::paintTextFieldDecorations):
        (WebCore::RenderTheme::paintTextArea):
        (WebCore::RenderTheme::paintTextAreaDecorations):
        (WebCore::RenderTheme::paintMenuList):
        (WebCore::RenderTheme::paintMenuListDecorations):
        (WebCore::RenderTheme::paintMenuListButtonDecorations):
        (WebCore::RenderTheme::paintPushButtonDecorations):
        (WebCore::RenderTheme::paintSquareButtonDecorations):
        (WebCore::RenderTheme::paintProgressBar):
        (WebCore::RenderTheme::paintSliderTrack):
        (WebCore::RenderTheme::paintSliderThumb):
        (WebCore::RenderTheme::paintSliderThumbDecorations):
        (WebCore::RenderTheme::paintSearchField):
        (WebCore::RenderTheme::paintSearchFieldDecorations):
        (WebCore::RenderTheme::paintSearchFieldCancelButton):
        (WebCore::RenderTheme::paintSearchFieldDecorationPart):
        (WebCore::RenderTheme::paintSearchFieldResultsDecorationPart):
        (WebCore::RenderTheme::paintSearchFieldResultsButton):
        (WebCore::RenderTheme::paintMediaFullscreenButton):
        (WebCore::RenderTheme::paintMediaPlayButton):
        (WebCore::RenderTheme::paintMediaOverlayPlayButton):
        (WebCore::RenderTheme::paintMediaMuteButton):
        (WebCore::RenderTheme::paintMediaSeekBackButton):
        (WebCore::RenderTheme::paintMediaSeekForwardButton):
        (WebCore::RenderTheme::paintMediaSliderTrack):
        (WebCore::RenderTheme::paintMediaSliderThumb):
        (WebCore::RenderTheme::paintMediaVolumeSliderContainer):
        (WebCore::RenderTheme::paintMediaVolumeSliderTrack):
        (WebCore::RenderTheme::paintMediaVolumeSliderThumb):
        (WebCore::RenderTheme::paintMediaRewindButton):
        (WebCore::RenderTheme::paintMediaReturnToRealtimeButton):
        (WebCore::RenderTheme::paintMediaToggleClosedCaptionsButton):
        (WebCore::RenderTheme::paintMediaControlsBackground):
        (WebCore::RenderTheme::paintMediaCurrentTime):
        (WebCore::RenderTheme::paintMediaTimeRemaining):
        (WebCore::RenderTheme::paintMediaFullScreenVolumeSliderTrack):
        (WebCore::RenderTheme::paintMediaFullScreenVolumeSliderThumb):
        (WebCore::RenderTheme::paintSnapshottedPluginOverlay):
        (WebCore::RenderTheme::paintImageControlsButton):
        * rendering/RenderThemeIOS.h:
        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::addRoundedBorderClip):
        (WebCore::RenderThemeIOS::paintCheckboxDecorations):
        (WebCore::RenderThemeIOS::baselinePosition):
        (WebCore::RenderThemeIOS::paintRadioDecorations):
        (WebCore::RenderThemeIOS::paintTextFieldDecorations):
        (WebCore::RenderThemeIOS::paintTextAreaDecorations):
        (WebCore::RenderThemeIOS::paintMenuListButtonDecorations):
        (WebCore::RenderThemeIOS::paintSliderTrack):
        (WebCore::RenderThemeIOS::paintSliderThumbDecorations):
        (WebCore::RenderThemeIOS::paintProgressBar):
        (WebCore::RenderThemeIOS::paintSearchFieldDecorations):
        (WebCore::RenderThemeIOS::paintButtonDecorations):
        (WebCore::RenderThemeIOS::paintPushButtonDecorations):
        (WebCore::RenderThemeIOS::paintFileUploadIconDecorations):
        * rendering/RenderThemeMac.h:
        (WebCore::RenderThemeMac::updateActiveState):
        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::documentViewFor):
        (WebCore::RenderThemeMac::adjustRepaintRect):
        (WebCore::RenderThemeMac::convertToPaintingRect):
        (WebCore::RenderThemeMac::updateCheckedState):
        (WebCore::RenderThemeMac::updateEnabledState):
        (WebCore::RenderThemeMac::updateFocusedState):
        (WebCore::RenderThemeMac::updatePressedState):
        (WebCore::RenderThemeMac::controlSupportsTints):
        (WebCore::RenderThemeMac::paintTextField):
        (WebCore::RenderThemeMac::paintCapsLockIndicator):
        (WebCore::RenderThemeMac::paintTextArea):
        (WebCore::RenderThemeMac::paintMenuList):
        (WebCore::RenderThemeMac::paintMeter):
        (WebCore::RenderThemeMac::progressBarRectForBounds):
        (WebCore::RenderThemeMac::paintProgressBar):
        (WebCore::RenderThemeMac::paintMenuListButtonGradients):
        (WebCore::RenderThemeMac::paintMenuListButtonDecorations):
        (WebCore::RenderThemeMac::setPopupButtonCellState):
        (WebCore::RenderThemeMac::paintSliderTrack):
        (WebCore::RenderThemeMac::paintSliderThumb):
        (WebCore::RenderThemeMac::paintSearchField):
        (WebCore::RenderThemeMac::setSearchCellState):
        (WebCore::RenderThemeMac::paintSearchFieldCancelButton):
        (WebCore::RenderThemeMac::paintSearchFieldDecorationPart):
        (WebCore::RenderThemeMac::paintSearchFieldResultsDecorationPart):
        (WebCore::RenderThemeMac::paintSearchFieldResultsButton):
        (WebCore::RenderThemeMac::paintSnapshottedPluginOverlay):
        (WebCore::RenderThemeMac::paintImageControlsButton):
        (WebCore::RenderThemeMac::imageControlsButtonSize):

2014-04-23  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] HTML Media capture attribute is a boolean since r163958
        https://bugs.webkit.org/show_bug.cgi?id=132061

        Reviewed by Gustavo Noronha Silva.

        Add new methods webkit_dom_html_input_element_get_capture_enabled
        and webkit_dom_html_input_element_set_capture_enabled using a
        boolean and deprecate the old methods.

        * bindings/gobject/WebKitDOMDeprecated.cpp:
        (webkit_dom_html_input_element_get_capture):
        (webkit_dom_html_input_element_set_capture):
        * bindings/gobject/WebKitDOMDeprecated.h:
        * bindings/gobject/WebKitDOMDeprecated.symbols:
        * bindings/gobject/webkitdom.symbols:
        * bindings/scripts/CodeGeneratorGObject.pm:
        (GetEffectiveFunctionName): Helper function to rename API methods
        for special cases.
        (GenerateFunction): Use GetEffectiveFunctionName().

2014-04-23  Praveen R Jadhav  <praveen.j@samsung.com>

        [MediaStream] Implement MediaStream active attribute
        https://bugs.webkit.org/show_bug.cgi?id=131973

        Reviewed by Eric Carlson.

        MediaStream .active attribute are introduced which will replace
        .ended attribute. This patch implements the newly introduced attributes.

        MediaStream-add-remove-tracks.html is updated to handle this scenario.

        * Modules/mediastream/MediaStream.cpp:
        (WebCore::MediaStream::active): Added.
        (WebCore::MediaStream::setActive): Added.
        (WebCore::MediaStream::addTrack): Propagates 'onactive' event when required.
        (WebCore::MediaStream::removeTrack): Propagates 'oninactive' event when required.
        (WebCore::MediaStream::trackDidEnd): Propagates 'oninactive' event when required.
        (WebCore::MediaStream::streamDidEnd):
        (WebCore::MediaStream::setStreamIsActive): Added.
        * Modules/mediastream/MediaStream.h:
        * Modules/mediastream/MediaStream.idl:
        * dom/EventNames.h:
        * platform/mediastream/MediaStreamPrivate.cpp:
        (WebCore::MediaStreamPrivate::MediaStreamPrivate): Initialize .active attribute
        (WebCore::MediaStreamPrivate::setEnded):
        (WebCore::MediaStreamPrivate::setActive): Added.
        * platform/mediastream/MediaStreamPrivate.h:
        (WebCore::MediaStreamPrivate::active): Added.

2014-04-23  Darin Adler  <darin@apple.com>

        [Cocoa] fix CF leaks found by code inspection
        https://bugs.webkit.org/show_bug.cgi?id=132106

        Reviewed by Andreas Kling.

        * page/CaptionUserPreferencesMediaAF.cpp:
        (WebCore::trackDisplayName): Added a missing adoptCF.

        * platform/Language.cpp:
        (WebCore::displayNameForLanguageLocale): Added a missing adoptCF.

        * platform/graphics/FontPlatformData.cpp:
        (WebCore::FontPlatformData::openTypeTable): Added a missing adoptCF.

        * platform/graphics/avfoundation/cf/InbandTextTrackPrivateAVCF.cpp:
        (WebCore::InbandTextTrackPrivateAVCF::label): Added two missing adoptCF.

        * platform/graphics/avfoundation/cf/MediaPlayerPrivateAVFoundationCF.cpp:
        (WebCore::AVFWrapper::createImageForTimeInRect): Added two missing adoptCF.

        * platform/graphics/cg/PDFDocumentImage.cpp:
        (WebCore::PDFDocumentImage::createPDFDocument): Added missing adoptCF.

        * platform/graphics/cocoa/FontPlatformDataCocoa.mm:
        (WebCore::cascadeToLastResortFontDescriptor): Added two missing adoptCF.

        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::primaryFontDataIsSystemFont): Added missing adoptCF.

        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::hasCustomTracking): Added missing adoptCF.

        * platform/image-decoders/ImageDecoder.h:
        (WebCore::ImageDecoder::qcmsOutputDeviceProfile): Added CFRelease.

        * plugins/mac/PluginPackageMac.cpp:
        (WebCore::readPListFile): Added two missing adoptCF.

2014-04-23  Ryosuke Niwa  <rniwa@webkit.org>

        REGRESSION (r157328): popover to check into flight ba.com dismisses instantly when focusing form
        https://bugs.webkit.org/show_bug.cgi?id=131949

        Address the review comment.

        * dom/EventDispatcher.cpp:
        (WebCore::EventRelatedNodeResolver::findHostOfTreeScopeInTargetTreeScope):

2014-04-23  Andreas Kling  <akling@apple.com>

        CachedResourceLoader hoards URLs indefinitely for no good reason.
        <https://webkit.org/b/132102>
        <rdar://problem/16708265>

        Since we don't care about CachedResourceLoader::m_validatedURL's after
        the Document has finished dispatching its initial load event, clear the
        set at that point, and don't add any new URLs to it.

        Reviewed by Anders Carlsson.

        * dom/Document.cpp:
        (WebCore::Document::dispatchWindowLoadEvent):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::requestResource):
        (WebCore::CachedResourceLoader::documentDidFinishLoadEvent):
        * loader/cache/CachedResourceLoader.h:

2014-04-23  Andreas Kling  <akling@apple.com>

        Canvas cache of clean URLs can grow without bounds.
        <https://webkit.org/b/132091>
        <rdar://problem/16695665>

        Remove a silly "optimization" that kept a cache of clean URLs
        that can be drawn into a canvas without tainting it, all to avoid
        the "expensive" checks to determine whether it would taint.

        Reviewed by Benjamin Poulain.

        * html/canvas/CanvasRenderingContext.cpp:
        (WebCore::CanvasRenderingContext::wouldTaintOrigin):
        * html/canvas/CanvasRenderingContext.h:

2014-04-23  Benjamin Poulain  <bpoulain@apple.com>

        [iOS][WK2] Fix a few mistakes affecting the initial layout and the initial unobscured rect
        https://bugs.webkit.org/show_bug.cgi?id=132093

        Reviewed by Tim Horton.

        Change the minimum layout size to float point values to account for size defined on retina displays.
        The minimum layout size supports half-pixels, the value is rounded later when computing the layout size
        in document coordinates.

        * WebCore.exp.in:
        * page/ViewportConfiguration.cpp:
        (WebCore::ViewportConfiguration::ViewportConfiguration):
        Setting the initial content size is incorrect. The layout size computation already take into account
        empty size for the first layout.

        Setting the content size upfront make the first computation incorrect when the viewport arguments specify
        the initial scale.

        (WebCore::ViewportConfiguration::setMinimumLayoutSize):
        * page/ViewportConfiguration.h:
        (WebCore::ViewportConfiguration::minimumLayoutSize):

2014-04-23  Brent Fulgham  <bfulgham@apple.com>

        [Mac, iOS] Stop buffering media when on an inactive tab. 
        https://bugs.webkit.org/show_bug.cgi?id=132077

        Reviewed by Eric Carlson.

        * html/HTMLMediaElement.cpp: Rename 'm_isDisplaySleepDisablingSuspended'
        to 'm_elementIsHidden'.
        (WebCore::HTMLMediaElement::HTMLMediaElement):
        (WebCore::HTMLMediaElement::visibilityStatusChanged): Notify the
        media session that the element is (or is not) hidden.
        (WebCore::HTMLMediaElement::setShouldBufferData): Added.
        * html/HTMLMediaElement.h:
        * platform/audio/MediaSession.cpp:
        (WebCore::MediaSession::clientWillBeginPlayback): Tell media to
        buffer if not hidden or playing.
        (WebCore::MediaSession::clientWillPausePlayback): Ditto.
        (WebCore::MediaSession::visibilityChanged): Added. Client API, just relays call
        to updateClientDataBuffering.
        (WebCore::MediaSession::updateClientDataBuffering): Tell client it should only
        buffer data if it's currently playing, or not hidden.
        * platform/audio/MediaSession.h:
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::setShouldBufferData): Added: Just relays to
        MediaPlayerPrivate object.
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::setShouldBufferData):
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::MediaPlayerPrivateAVFoundationObjC):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::setShouldBufferData): Added.
        Detach the player item from the player if we don't want to continue
        buffering or other background tasks.

2014-04-23  Alexey Proskuryakov  <ap@apple.com>

        Eliminate internals.setMockScrollbarsEnabled()
        https://bugs.webkit.org/show_bug.cgi?id=132085

        Reviewed by Tim Horton.

        This was essentially unused, and also didnt work.

        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::Backup::restoreTo):
        (WebCore::InternalSettings::setMockScrollbarsEnabled): Deleted.
        * testing/InternalSettings.h:
        * testing/InternalSettings.idl:

2014-04-23  Anders Carlsson  <andersca@apple.com>

        Don't migrate the WKView.h header from WebCore to WebKit
        https://bugs.webkit.org/show_bug.cgi?id=132086

        Reviewed by Dan Bernstein.

        * WebCore.xcodeproj/project.pbxproj:
        Add WAKViewInternal.h.

        * platform/WAKViewInternal.h: Added.

        * platform/ios/wak/WAKClipView.m:
        Import WAKViewInternal.h instead of WAKViewPrivate.h.

        * platform/ios/wak/WAKScrollView.mm:
        Import WAKViewInternal.h instead of WAKViewPrivate.h.

        * platform/ios/wak/WAKView.h:
        Move ivars to a class extension in WAKViewInternal.h and remove WKView.h import.

        * platform/ios/wak/WAKView.mm:
        Import WAKViewInternal.h instead of WAKViewPrivate.h.

        * platform/ios/wak/WAKViewPrivate.h:
        Import WKViewPrivate.h.

2014-04-23  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] fast/multicol/fixed-column-percent-logical-height-orthogonal-writing-mode.html fails
        https://bugs.webkit.org/show_bug.cgi?id=132078

        Reviewed by Anders Carlsson.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::skipContainingBlockForPercentHeightCalculation):
        Add a parameter to test for orthogonal writing modes. If we're perpendicular,
        then we should not skip the flow thread, since we resolve relative to the column width,
        and that is always set.

        (WebCore::RenderBox::computePercentageLogicalHeight):
        Patched to pass in whether or not the box and the ancestor block are perpendicular.

        * rendering/RenderBox.h:
        Patched the signature of skipContainingBlockForPercentHeightCalculation

2014-04-23  Myles C. Maxfield  <mmaxfield@apple.com>

        [OS X] Make checking if a font is the system font more robust
        https://bugs.webkit.org/show_bug.cgi?id=132030

        Reviewed by Dean Jackson.

        Instead of inspecting a font's name to determine if it is a system font,
        on OS X we can ask the system directly.

        This patch also moves a platform-specific check into platform-specific
        code, so that other platforms don't check for OS X-specific behavior.

        Covered by existing tests.

        * platform/graphics/Font.cpp:
        (WebCore::Font::hasValidAverageCharWidth):
        * platform/graphics/Font.h:
        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::primaryFontDataIsSystemFont):

2014-04-23  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Assertion failure in huge-column-count.html
        https://bugs.webkit.org/show_bug.cgi?id=132071

        Reviewed by Dean Jackson.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::regionAtBlockOffset):
        Back out this change, since it wasn't general enough.

        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::getRegionRangeForBox):
        The real issue was that this loop needed to consider the actual box
        rather than starting from the parent. This was a non-issue for normal
        regions (which cannot have nested flow threads), but for columns, you 
        have to consider the fact that the box could itself be a flow thread.

2014-04-23  Andreas Kling  <akling@apple.com>

        [iOS] Memory pressure notification should fire on main thread.
        <https://webkit.org/b/132074>

        Rejig the memory pressure notification to fire on the main queue
        directly instead of rerouting it manually.

        Reviewed by Mark Rowe.

        * platform/cocoa/MemoryPressureHandlerCocoa.mm:
        (WebCore::MemoryPressureHandler::install):

2014-04-23  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167720.
        https://bugs.webkit.org/show_bug.cgi?id=132075

        broke eight newmulticol tests (Requested by thorton on
        #webkit).

        Reverted changeset:

        "[New Multicolumn] Assertion failure in huge-column-
        count.html"
        https://bugs.webkit.org/show_bug.cgi?id=132071
        http://trac.webkit.org/changeset/167720

2014-04-23  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Assertion failure in huge-column-count.html
        https://bugs.webkit.org/show_bug.cgi?id=132071

        Reviewed by Dean Jackson.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::regionAtBlockOffset):
        Remove the code that returned 0 here, since we're going to patch a lower-level
        function to catch all cases.

        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::getRegionRangeForBox):
        Don't allow in-flow RenderFlowThreads to ever have a region range. The sets
        are what should have ranges... the flow thread needs to just be ignored.

2014-04-23  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Crasher when clearing out a flow thread in multicolumn layout.
        https://bugs.webkit.org/show_bug.cgi?id=132069

        Reviewed by Dean Jackson.

        This is imported from a patch Morten did for Blink, but I had to change it a fair
        bit. deleteLines() is used to handle simple line box layout instead of just calling
        deleteLineBoxTree.
        
        I also had to disable the layout state to stop asserts on repaint when the children
        get moved. Not sure why Blink didn't hit this, but it's simple enough to add a
        LayoutStateDisabler to stop the assert.

        Added fast/multicol/inline-children-crash.html

        * rendering/RenderMultiColumnFlowThread.cpp:
        (WebCore::RenderMultiColumnFlowThread::evacuateAndDestroy):

2014-04-23  Andreas Kling  <akling@apple.com>

        [iOS WebKit2] IOSurfacePool should force CA to actually garbage collect surfaces.
        <https://webkit.org/b/132065>
        <rdar://problem/16110687>

        Add a platformGarbageCollectNow() helper function to IOSurfacePool that
        triggers a sweep of the IOSurfaces. Call this from collectionTimerFired()
        and discardAllSurfaces().

        This lets us drop all otherwise-unused 420f surfaces on memory pressure.

        Reviewed by Tim Horton.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/cg/IOSurfacePool.cpp:
        (WebCore::IOSurfacePool::collectionTimerFired):
        (WebCore::IOSurfacePool::discardAllSurfaces):
        * platform/graphics/cg/IOSurfacePool.h:
        * platform/graphics/cocoa/IOSurfacePoolCocoa.mm: Added.
        (WebCore::IOSurfacePool::platformGarbageCollectNow):

2014-04-23  Morten Stenshorne  <mstensho@opera.com>

        REGRESSION (Safari 6 - ToT): Incorrectly assumes that RenderStyle data can be shared
        https://bugs.webkit.org/show_bug.cgi?id=113058

        Reviewed by David Hyatt.

        Before sharing CSS properties with an element in the cache, we need to
        check that the new element is suitable for this, just like we check
        elements before inserting them into the cache.

        Test: fast/css/identical-logical-height-decl.html

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyMatchedProperties):

2014-04-23  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167713.
        https://bugs.webkit.org/show_bug.cgi?id=132070

        broke hundreds of tests (Requested by thorton on #webkit).

        Reverted changeset:

        "[OS X] Make checking if a font is the system font more
        robust"
        https://bugs.webkit.org/show_bug.cgi?id=132030
        http://trac.webkit.org/changeset/167713

2014-04-22  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Nested columns not working at all.
        https://bugs.webkit.org/show_bug.cgi?id=131805

        Reviewed by Dean Jackson.

        Add support for nested pagination contexts, allowing for an arbitrary level
        of nesting of multicolumn layouts. There were a number of things that had to
        be patched in order for this to work.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::regionAtBlockOffset):
        Make sure RenderMultiColumnFlowThreads just return null for regions at any
        block offset. Individual region sets will be created as you cross ancestor
        regions eventually, so this is just getting in the way.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::enclosingPaginationLayerInSubtree):
        Add a new helper method for obtaining an enclosingPaginationLayer when
        constrained by some root. This function ensures you don't accidentally
        cross your subtree root when looking for enclosing pagination layers.

        (WebCore::RenderLayer::collectFragments):
        Patch collectFragments to know how to recur to collect ancestor fragments
        in order to apply nested splitting as you cross pagination boundaries.

        (WebCore::RenderLayer::updatePaintingInfoForFragments):
        (WebCore::RenderLayer::calculateClipRects):
        * rendering/RenderLayer.h:
        (WebCore::LayerFragment::LayerFragment):
        (WebCore::LayerFragment::setRects):
        (WebCore::LayerFragment::moveBy):
        (WebCore::LayerFragment::intersect):
        Improve the LayerFragment so that it caches transformed bounding boxes as
        well. This is needed to fix intersectsDamageRect so that it doesn't grab
        the wrong bounding box when checking inline layers that are paginated.

        * rendering/RenderMultiColumnFlowThread.cpp:
        (WebCore::RenderMultiColumnFlowThread::flowThreadDescendantInserted):
        Ignore inserted flow threads inside an ancestor flow thread, since we only
        care about what the sets do.
        
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::insertedIntoTree):
        Make sure that nested flow thread layers return themselves when a child
        is inserted directly under them.

2014-04-22  Myles C. Maxfield  <mmaxfield@apple.com>

        [OS X] Make checking if a font is the system font more robust
        https://bugs.webkit.org/show_bug.cgi?id=132030

        Reviewed by Dean Jackson.

        Instead of inspecting a font's name to determine if it is a system font,
        on OS X we can ask the system directly.

        This patch also moves a platform-specific check into platform-specific
        code, so that other platforms don't check for OS X-specific behavior.

        Covered by existing tests.

        * platform/graphics/Font.cpp:
        (WebCore::Font::hasValidAverageCharWidth):
        * platform/graphics/Font.h:
        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::primaryFontDataIsSystemFont):

2014-04-23  Philippe Normand  <pnormand@igalia.com>

        [GTK] Focus management API was moved from HTMLDocument to Document in r166668
        https://bugs.webkit.org/show_bug.cgi?id=132060

        Reviewed by Carlos Garcia Campos.

        Deprecate the removed methods in WebKitDOMHTMLDocument to keep API compatibility.

        * bindings/gobject/WebKitDOMDeprecated.cpp:
        (webkit_dom_html_document_get_active_element):
        (webkit_dom_html_document_has_focus):
        * bindings/gobject/WebKitDOMDeprecated.h:
        * bindings/gobject/WebKitDOMDeprecated.symbols:
        * bindings/gobject/webkitdom.symbols:

2014-04-22  Andreas Kling  <akling@apple.com>

        [iOS WebKit1] MemoryPressureHandler::respondToMemoryPressure called on wrong thread.
        <https://webkit.org/b/132041>
        <rdar://problem/16687238>

        Always dispatch the memory pressure relief code on the main queue.
        This is really only needed for iOS/WK1, but we might as well share the code.

        Reviewed by Michael Saboff.

        * platform/cocoa/MemoryPressureHandlerCocoa.mm:
        (WebCore::MemoryPressureHandler::install):

2014-04-23  Philippe Normand  <pnormand@igalia.com>

        [GTK] ShadowRoot API was removed in r164131
        https://bugs.webkit.org/show_bug.cgi?id=132059

        Reviewed by Gustavo Noronha Silva.

        Add ShadowRoot removed API to WebKitDOMDeprecated to keep API/ABI compatibility.

        * bindings/gobject/WebKitDOMDeprecated.cpp:
        (webkit_dom_shadow_root_class_init):
        (webkit_dom_shadow_root_init):
        (webkit_dom_shadow_root_element_from_point):
        (webkit_dom_shadow_root_get_active_element):
        (webkit_dom_shadow_root_get_apply_author_styles):
        (webkit_dom_shadow_root_get_element_by_id):
        (webkit_dom_shadow_root_get_elements_by_class_name):
        (webkit_dom_shadow_root_get_elements_by_tag_name):
        (webkit_dom_shadow_root_get_elements_by_tag_name_ns):
        (webkit_dom_shadow_root_get_inner_html):
        (webkit_dom_shadow_root_get_reset_style_inheritance):
        (webkit_dom_shadow_root_get_selection):
        (webkit_dom_shadow_root_set_apply_author_styles):
        (webkit_dom_shadow_root_set_inner_html):
        (webkit_dom_shadow_root_set_reset_style_inheritance):
        * bindings/gobject/WebKitDOMDeprecated.h:
        * bindings/gobject/WebKitDOMDeprecated.symbols:

2014-04-23  Morten Stenshorne  <mstensho@opera.com>

        [New Multicolumn] fast/multicol/overflow-content.html displays red
        https://bugs.webkit.org/show_bug.cgi?id=131809

        Reviewed by David Hyatt.

        Insert a break at end of content on our own in the multicol code, to make sure
        that overflow is accounted for, and also to make sure that we account for all
        content in non-final sets (i.e. those preceding spanners).

        In other words, this will additionally fix balancing issues in sets preceding
        a spanner. Added a test for that.

        Tests: fast/multicol/break-in-columns-before-spanner.html
               fast/multicol/newmulticol/compare-with-old-impl/overflow-content.html

        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::regionInRange): Deleted.
        * rendering/RenderFlowThread.h:
        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::distributeImplicitBreaks):
        * rendering/RenderNamedFlowThread.cpp:
        (WebCore::RenderNamedFlowThread::applyBreakAfterContent):
        * rendering/RenderNamedFlowThread.h:

2014-04-23  Morten Stenshorne  <mstensho@opera.com>

        Overflow propagation broken in BTT and RTL writing-modes
        https://bugs.webkit.org/show_bug.cgi?id=113781

        Reviewed by David Hyatt.

        Overflow rectangles are not quite physical, not quite logical. This
        means that we cannot use clientBoxRect() directly to represent a
        rectangle that expresses exactly no overflow. This rectangle is the
        padding box (relative to the border box) in vertical-lr and
        horizontal-tb, but the block-direction borders need to be flipped in
        vertical-rl and horizontal-bt.

        Tests: fast/css/overflow-btt-border-after.html
               fast/css/overflow-rtl-border-after.html

        * WebCore.exp.in:
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::computeOverflow):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::addLayoutOverflow):
        (WebCore::RenderBox::addVisualOverflow):
        (WebCore::RenderBox::layoutOverflowRectForPropagation):
        * rendering/RenderBox.h:
        (WebCore::RenderBox::layoutOverflowRect):

2014-04-23  Andrei Bucur  <abucur@adobe.com>

        [CSS Regions] Improve the debugging infrastructure
        https://bugs.webkit.org/show_bug.cgi?id=132042

        Reviewed by Mihnea Ovidenie.

        This patch improves the debugging code for CSS Regions.

        Tests: No function change. No new tests.

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::showRegionsInformation): Print brackets around the region range when dumping
        the render tree to the console.
        * rendering/RootInlineBox.cpp:
        (WebCore::RootInlineBox::containingRegion): Convert the ASSERT to an ASSERT_WITH_SECURITY_IMPLICATION.

2014-04-22  Ryosuke Niwa  <rniwa@webkit.org>

        Cursor doesn't change back to pointer when leaving the Safari window
        https://bugs.webkit.org/show_bug.cgi?id=132038

        Reviewed by Alexey Proskuryakov.

        r147739 incorrectly added an early exit in EventHandler::selectCursor when hit test result didn't have
        any node associated with it. Since we will hit this code when the cursor is outside of the WebView,
        we still need to take the CURSOR_AUTO path as did the code before r147739.

        No new test is added since this behavior can't be tested in DRT or WTR.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::selectCursor):

2014-04-22  Zalan Bujtas  <zalan@apple.com>

        Do not paint border image when the border rect is empty.
        https://bugs.webkit.org/show_bug.cgi?id=131988

        Reviewed by Darin Adler.

        http://trac.webkit.org/changeset/167351 introduced an early return when border
        rect is empty. This patch ensures that border image is not painted either in that case.

        Modified padding-margin-negative-border.html to cover border-image case.

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintBorder):

2014-04-22  Tim Horton  <timothy_horton@apple.com>

        ASSERTION FAILED: scrollerImp == scrollbarPainterForScrollbar(_scrollbar) on two API tests
        https://bugs.webkit.org/show_bug.cgi?id=132034
        <rdar://problem/16624332>

        Reviewed by Simon Fraser.

        * platform/mac/ScrollAnimatorMac.mm:
        (-[WebScrollbarPainterDelegate shouldUseLayerPerPartForScrollerImp:]):
        scrollerImpWithStyle:controlSize:horizontal:replacingScrollerImp: moves the delegate
        from the old scrollerImp to the new one, and also happens to call shouldUseLayerPerPartForScrollerImp.
        Since scrollerImpWithStyle: has not returned yet, the scrollbarPainterForScrollbar still returns the old scrollerImp,
        so this assertion fires. It's safe to remove this because supportsUpdateOnSecondaryThread doesn't make use of the imp.

2014-04-22  Ryosuke Niwa  <rniwa@webkit.org>

        REGRESSION (r157328): popover to check into flight ba.com dismisses instantly when focusing form
        https://bugs.webkit.org/show_bug.cgi?id=131949

        Reviewed by Darin Adler.

        The regression was caused by two bugs:
        1. The event didn't stop propagating itself even when it should.
           If the related target is same as the event origin, the event propagation should stop when the event reaches
           the root of the related target's tree scope. Otherwise, it should stop when it reaches the related target.

        2. Mouse event's related target exposed nodes inside a user-agent shadow DOM when the related target appeared
           inside the origin.

        Fixed the bugs by re-introducing path shrinkage algorithm removed in r157328 into EventPath::setRelatedTarget
        and adding an algorithm to determine the least common ancestor of the related target and the current target
        in moveToParentOrShadowHost. The latter algorithm doesn't match the shadow DOM specification:
        http://www.w3.org/TR/2013/WD-shadow-dom-20130514/
        but it's good enough in terms of the Web exposed behavior as we don't support author defined insertion points.

        Test: fast/events/shadow-event-path.html

        * dom/EventDispatcher.cpp:
        (WebCore::EventRelatedNodeResolver::moveToParentOrShadowHost):
        (WebCore::EventRelatedNodeResolver::findHostOfTreeScopeInTargetTreeScope): Added.
        (WebCore::EventDispatcher::dispatchEvent):
        (WebCore::EventPath::setRelatedTarget):

2014-04-22  Ryosuke Niwa  <rniwa@webkit.org>

        Rollout r156635 since the old behavior was intentional.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::selectCursor):

2014-04-22  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167674.
        https://bugs.webkit.org/show_bug.cgi?id=132025

        Going a different way with this (Requested by bradee-oh on
        #webkit).

        Reverted changeset:

        "Change Image Controls replacement to use selection and paste"
        https://bugs.webkit.org/show_bug.cgi?id=131992
        http://trac.webkit.org/changeset/167674

2014-04-22  Brent Fulgham  <bfulgham@apple.com>

        [Win] Support Python 2.7 in Cygwin
        https://bugs.webkit.org/show_bug.cgi?id=132023

        Reviewed by Michael Saboff.

        * DerivedSources.make: Use proper path to Cygwin on
        all platforms.

2014-04-22  Andreas Kling  <akling@apple.com>

        REGRESSION (r151839): Subframe keeps getting mousemove events with the same coordinates after hiding a hovered element.
        <https://webkit.org/b/131974>
        <rdar://problem/15907469>

        When the currently hovered element disappears as a result of style recalc,
        we send a fake mousemove event to the page, to see if anything newly added
        should become hovered.

        The faking mechanism lives in EventHandler and simply synthesizes a new
        mousemove event using the last seen mouse location.

        The problem here is that we were sending this fake mousemove event to the
        subframe where the hovered element lived. Since subframes aren't kept up
        to date on recent mouse locations, this could cause some strange behavior
        where a subframe would dispatch mousemove events with stale coordinates.

        The solution is to always dispatch fake mousemove events from the main
        frame's event handler. This is how real event delivery happens, and hit
        testing will then find the appropriate subframe, if any.

        Reviewed by Benjamin Poulain.

        Test: fast/events/ghostly-mousemoves-in-subframe.html

        * dom/Document.cpp:
        (WebCore::Document::recalcStyle):

2014-04-22  Myles C. Maxfield  <mmaxfield@apple.com>

        [OS X] Glyph spacing for system fonts may be incorrect
        https://bugs.webkit.org/show_bug.cgi?id=131967

        Unreviewed iOS build fix after r167679.

        * platform/graphics/mac/SimpleFontDataMac.mm:

2014-04-22  Myles C. Maxfield  <mmaxfield@apple.com>

        [OS X] Glyph spacing for system fonts may be incorrect
        https://bugs.webkit.org/show_bug.cgi?id=131967

        Unreviewed build fix after r167679.

        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::hasCustomTracking):

2014-04-21  Myles C. Maxfield  <mmaxfield@apple.com>

        [OS X] Glyph spacing for system fonts may be incorrect
        https://bugs.webkit.org/show_bug.cgi?id=131967

        Reviewed by Simon Fraser.

        Covered by existing tests.

        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::platformWidthForGlyph): Update to use CTFontGetAdvancesForGlyphs() for system fonts
        (WebCore::hasCustomTracking):

2014-04-22  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] widows/orphans cause assertion failures.
        https://bugs.webkit.org/show_bug.cgi?id=131233

        Reviewed by Dean Jackson.

        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::recordSpaceShortage):
        Fix an obvious bug where the space shortage is recorded twice (and the
        if statement that kept it from being negative is accidentally ignored).

2014-04-22  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Make sure columnTranslationForOffset has the same column-span-aware
        translation that fragment collection does.
        https://bugs.webkit.org/show_bug.cgi?id=131738

        Reviewed by Anders Carlsson.

        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::collectLayerFragments):
        Remove a FIXME that is no longer needed, since the translation offset of the 
        column set did get patched.

        (WebCore::RenderMultiColumnSet::columnTranslationForOffset):
        Add the exact same fix to columnTranslationForOffset that was applied to collectLayerFragments.

2014-04-22  Mark Lam  <mark.lam@apple.com>

        WebCore::HTMLMediaElement::ensureMediaControlsInjectedScript() needs to acquire the JSLock before calling into JS.
        <https://webkit.org/b/132021>

        Reviewed by Mark Hahnenberg.

        Covered by existing layout test.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute):

2014-04-22  Manuel Rego Casasnovas  <rego@igalia.com>

        REGRESSION (r167652): Broke fast/regions/cssom/region-range-for-box-crash.html in debug mode
        https://bugs.webkit.org/show_bug.cgi?id=131982

        Reviewed by David Hyatt.

        The problem was creating the Range from the arguments received at RenderView::setSelection(). Specifically
        in this test endPos is 1 when the element has not children which creates an invalid Range.

        * rendering/RenderView.cpp:
        (WebCore::RenderView::splitSelectionBetweenSubtrees): Pass 0 as startPos and endPos to Range::create() as we are
        not interested in the positions at this point.

2014-04-22  Brady Eidson  <beidson@apple.com>

        Change Image Controls replacement to use selection and paste
        <rdar://problem/16302722> and https://bugs.webkit.org/show_bug.cgi?id=131992

        Reviewed by Tim Horton.

        * WebCore.exp.in: Remove deleted symbol.

        * html/shadow/mac/ImageControlsButtonElementMac.cpp:
        (WebCore::ImageControlsButtonElementMac::defaultEventHandler):

        * page/ContextMenuController.cpp:
        (WebCore::ContextMenuController::showImageControlsMenu): Select the image element
          before showing the menu.
        (WebCore::ContextMenuController::replaceControlledImage): Deleted.
        * page/ContextMenuController.h:

2014-04-22  David Hyatt  <hyatt@apple.com>

        REGRESSION: Hitting asserts in new flow thread selection code.
        https://bugs.webkit.org/show_bug.cgi?id=132019

        Reviewed by Anders Carlsson.

        Null checking flowThreadController is not enough. The list of threads
        can be null even when the flowThreadController is not. That's why you
        use hasRenderNamedFlowThreads. I patched the two bad places in the code
        to use hasRenderNamedFlowThreads to stop the crashes.
        
        * rendering/RenderView.cpp:
        (WebCore::RenderView::selectionBounds):
        (WebCore::RenderView::repaintSelection):

2014-04-22  Brent Fulgham  <bfulgham@apple.com>

        Check (rather than assume) element is a RenderTableSection before using it
        https://bugs.webkit.org/show_bug.cgi?id=121858

        Reviewed by David Kilzer.

        Test: fast/table/table-insert-object-before-td-crash.html

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::addChild): Check that lastBox is a table section before
        using the node as if it was one.

2014-04-22  Alex Christensen  <achristensen@webkit.org>

        Begin implementation of video using Media Foundation.
        https://bugs.webkit.org/show_bug.cgi?id=131830

        Reviewed by Brent Fulgham.

        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        Added MediaPlayerPrivateMediaFoundation files.
        * platform/graphics/MediaPlayer.cpp:
        Include MediaPlayerPrivateMediaFoundation inside new USE(MEDIA_FOUNDATION) flag.
        * platform/graphics/win/MediaPlayerPrivateMediaFoundation.cpp: Added.
        * platform/graphics/win/MediaPlayerPrivateMediaFoundation.h: Added.

2014-04-22  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167658.
        https://bugs.webkit.org/show_bug.cgi?id=131993

        Caused many crashes on media tests (Requested by ap on
        #webkit).

        Reverted changeset:

        "[Mac] don't ask for AVAssetTrack properties before they are
        available"
        https://bugs.webkit.org/show_bug.cgi?id=131902
        http://trac.webkit.org/changeset/167658

2014-04-22  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] fast/multicol/multicol-with-child-renderLayer-for-input.html puts the textfield in the wrong place
        https://bugs.webkit.org/show_bug.cgi?id=131808

        Reviewed by Brady Eidson.
    
        Make sure FrameView is patched to pass in the update pagination flag when subtree layout
        is done on textfields. It had code for the old multicolumn system but did not have a check
        for the new multicolumn system.

        Added fast/multicol/newmulticol/compare-with-old-impl/multicol-with-child-renderLayer-for-input.html

        * page/FrameView.cpp:
        (WebCore::updateLayerPositionFlags):

2014-04-22  Zalan Bujtas  <zalan@apple.com>

        border-style: double rendered as solid when combined with border-radius
        https://bugs.webkit.org/show_bug.cgi?id=131927

        Reviewed by Simon Fraser.

        BorderEdge::getDoubleBorderStripeWidths() should return the calculated inner, outer border widths. 

        Test: fast/borders/hidpi-double-border-with-border-radius-always-produce-solid-line.html

        * rendering/BorderEdge.cpp:
        (WebCore::BorderEdge::getDoubleBorderStripeWidths):
        * rendering/BorderEdge.h:

2014-04-22  Eric Carlson  <eric.carlson@apple.com>

        [Mac] don't ask for AVAssetTrack properties before they are available
        https://bugs.webkit.org/show_bug.cgi?id=131902
        <rdar://problem/16505076>

        Reviewed by Jer Noble.

        No new tests, the behavior this changes can not be tested with a layout test.

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::MediaPlayerPrivateAVFoundationObjC): Initialize
            m_cachedTotalBytes.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::beginLoadingMetadata): Don't report that
            metadata has been loaded until the track properties we need have been loaded too.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::totalBytes): Cache totalBytes instead
            of recalculating it every time.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::tracksDidChange): Invalidate cached
            total bytes.
        (WebCore::assetTrackMetadataKeyNames): Array of AVAssetTrack properties we use.

2014-04-22  Peter Molnar  <pmolnar.u-szeged@partner.samsung.com>

        Buildfix after r167650 broke non-Cocoa builds
        https://bugs.webkit.org/show_bug.cgi?id=131980

        Reviewed by Mario Sanchez Prada.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleWheelEvent):

2014-04-22  Manuel Rego Casasnovas  <rego@igalia.com>

        [CSS Regions] Selection highlight doesn't match DOM selection
        https://bugs.webkit.org/show_bug.cgi?id=131511

        Reviewed by David Hyatt.

        This patch implements a subtrees approach to fix selection interaction in CSS Regions.

        The idea is to divide the Render tree in subtrees. One subtree will be the RenderView (which is always present),
        then for each RenderNamedFlowThread (which are children of RenderView) we will have an extra subtree.

        For each subtree it determines the start and end positions according to the DOM tree. So, every subtree will
        always have a start and end position, and the selection algorithm will be able to reach the end from the start
        without problems (this allows us to remove the changes introduced in r155058).

        Then selection related methods in RenderView are adapted to ensure that they are called for each subtree. Making
        the selection highlight to match DOM selection as expected.

        Test: fast/regions/selection/selecting-text-including-region.html

        * CMakeLists.txt: Add new class SelectionSubtreeRoot to build file.
        * WebCore.vcxproj/WebCore.vcxproj: Ditto.
        * WebCore.vcxproj/WebCore.vcxproj.filters: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.
        * rendering/RenderNamedFlowThread.h: Inherit from SelectionSubtreeRoot.
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::selectionRoot): New method to return the RenderNamedFlowThread if any or the RenderView
        otherwise.
        (WebCore::RenderObject::selectionStartEnd): If it's inside a RenderNamedFlowThread use specific method instead
        of the RenderView's one.
        * rendering/RenderObject.h: Add new method signature.
        * rendering/RenderView.cpp:
        (WebCore::RenderView::selectionBounds): Adapt method to subtrees approach.
        (WebCore::RenderView::subtreeSelectionBounds): Modify previous method in order to use SelectionSubtreeRoot
        objects.
        (WebCore::RenderView::repaintSelection): Adapt method to subtrees approach.
        (WebCore::RenderView::repaintSubtreeSelection): Modify previous method in order to use SelectionSubtreeRoot
        objects.
        (getNextOrPrevRenderObjectBasedOnDirection): Deleted method from r155058 as it is not needed anymore. Each
        subtree will have start and end positions, so the selection algorithm will always find the end.
        (WebCore::RenderView::setSelection): Adapt method to subtrees approach.
        (WebCore::RenderView::splitSelectionBetweenSubtrees): Determine start and end positions for each subtree and
        call setSubtreeSelection().
        (WebCore::RenderView::setSubtreeSelection): Modify previous method in order to use SelectionSubtreeRoot objects.
        * rendering/RenderView.h: Inherit from SelectionSubtreeRoot. Add signature for new helper methods receiving
        SelectionSubtreeRoot objects.
        * rendering/SelectionSubtreeRoot.cpp: Added.
        (WebCore::SelectionSubtreeRoot::SelectionSubtreeRoot):
        (WebCore::SelectionSubtreeRoot::selectionStartEndPositions):
        * rendering/SelectionSubtreeRoot.h: Added. New class to identify root elements for the subtrees. With some basic
        attributes and methods to store the start and end positions and offsets.
        (WebCore::SelectionSubtreeRoot::selectionStart):
        (WebCore::SelectionSubtreeRoot::selectionStartPos):
        (WebCore::SelectionSubtreeRoot::selectionEnd):
        (WebCore::SelectionSubtreeRoot::selectionEndPos):
        (WebCore::SelectionSubtreeRoot::setSelectionStart):
        (WebCore::SelectionSubtreeRoot::setSelectionStartPos):
        (WebCore::SelectionSubtreeRoot::setSelectionEnd):
        (WebCore::SelectionSubtreeRoot::setSelectionEndPos):

2014-04-21  Brent Fulgham  <bfulgham@apple.com>

        [Mac] Follow-up: After a horizontal overflow scroll with a mechanical wheel mouse, vertical scrolling no longer works
        https://bugs.webkit.org/show_bug.cgi?id=131960
        <rdar://problem/16142100>

        Unreviewed build fix.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleWheelEvent): The test to clear the
        last scrolled node was too broad. It should only follow this path
        if both the phase and momentum phase are 'None'.

2014-04-21  Brent Fulgham  <bfulgham@apple.com>

        [Mac] After a horizontal overflow scroll with a mechanical wheel mouse, vertical scrolling no longer works
        https://bugs.webkit.org/show_bug.cgi?id=131960
        <rdar://problem/16142100>

        Reviewed by Darin Adler.

        Test: platform/mac/fast/scrolling/scroll-div-no-latching.html

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleWheelEvent): When not latching, always clear m_latchedWheelEventElement and m_previousWheelScrolledElement.

2014-04-21  Joseph Pecoraro  <pecoraro@apple.com>

        WebProfilerAgent::disable is calling the wrong superclass method
        https://bugs.webkit.org/show_bug.cgi?id=131968

        Reviewed by Simon Fraser.

        * inspector/WebProfilerAgent.cpp:
        (WebCore::WebProfilerAgent::disable):

2014-04-21  Enrica Casucci  <enrica@apple.com>

        Followup from http://trac.webkit.org/changeset/167624

        Reviewed by Darin Adler.

        Fixing incorrect use of ? : syntax.

        * editing/VisibleUnits.cpp:
        (WebCore::characterBeforePosition):

2014-04-21  Ryuan Choi  <ryuan.choi@samsung.com>

        Move CoordinatedGraphics related codes out of CMakeLists.txt
        https://bugs.webkit.org/show_bug.cgi?id=131931

        Reviewed by Gyuyoung Kim.

        Move CoordinatedGraphics related files to PlatformEfl.cmake because they are not common files.

        * CMakeLists.txt: 
        * PlatformEfl.cmake:

2014-04-21  Jer Noble  <jer.noble@apple.com>

        [MSE][Mac] AVSampleBufferDisplayLayer and AudioRenderer is overretained.
        https://bugs.webkit.org/show_bug.cgi?id=131963

        Reviewed by Jon Honeycutt.

        Adopt the results of -[[class alloc] init] rather than retaining them.

        * platform/graphics/avfoundation/objc/SourceBufferPrivateAVFObjC.mm:
        (WebCore::SourceBufferPrivateAVFObjC::hasVideo):
        (WebCore::SourceBufferPrivateAVFObjC::trackDidChangeEnabled):

2014-04-21  Zalan Bujtas  <zalan@apple.com>

        REGRESSION (r166784): Gradient at background of iCloud login page doesn’t go all the way to the bottom
        https://bugs.webkit.org/show_bug.cgi?id=131924

        Computing tile dimension for contain/cover requires higher precision than what LayoutUnit has. Switching to floats.

        Reviewed by Simon Fraser.

        Test: fast/backgrounds/hidpi-background-image-contain-cover-scale-needs-more-precision.html

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::calculateFillTileSize):

2014-04-21  Dean Jackson  <dino@apple.com>

        Build fix for Mountain Lion.

        * platform/mac/SerializedPlatformRepresentationMac.mm:
        (WebCore::SerializedPlatformRepresentationMac::deserialize):

2014-04-21  Dan Bernstein  <mitz@apple.com>

        WebCore part of <rdar://problem/16631323> Page::setDefersLoading doesn’t do anything when using the Network process
        https://bugs.webkit.org/show_bug.cgi?id=131939

        Reviewed by David Kilzer.

        * WebCore.exp.in: Exported WebCore::ResourceHandle::setDefersLoading.

        * loader/ResourceLoadScheduler.cpp:
        (WebCore::ResourceLoadScheduler::setDefersLoading): Added a no-op implementation.
        * loader/ResourceLoadScheduler.h: Declared new virtual member function setDefersLoading.

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::setDefersLoading): Added a call to the above function.

2014-04-21  Brent Fulgham  <bfulgham@apple.com>

        [Mac] Difficulty gesture scrolling vertically with trackpad after scrolling horizontally 
        https://bugs.webkit.org/show_bug.cgi?id=131959
        <rdar://problem/16654523>

        Reviewed by Simon Fraser.

        * page/mac/EventHandlerMac.mm:
        (WebCore::deltaIsPredominantlyVertical): Added.
        (WebCore::scrolledToEdgeInDominantDirection): Only consider current mouse wheel event. We don't care about
        overall history when deciding if we are bumping against the edge of a scrollable region. Short-circuit if
        the element style indicates that overflow is hidden, since this means there is no scroll possible in that
        direction.
        (WebCore::EventHandler::platformPrepareForWheelEvents): Update for new signature.

2014-04-21  Eric Carlson  <eric.carlson@apple.com>

        [Mac] implement WebKitDataCue
        https://bugs.webkit.org/show_bug.cgi?id=131799

        Reviewed by Dean Jackson.

        Tests: http/tests/media/track-in-band-hls-metadata.html
               media/track/track-datacue-value.html

        * Configurations/FeatureDefines.xcconfig: Define ENABLE_DATACUE_VALUE.
        * DerivedSources.make: Add ENABLE_DATACUE_VALUE to HTML_FLAGS when appropriate.

        * CMakeLists.txt: Add JSDataCueCustom.cpp.
        * bindings/js/JSBindingsAllInOne.cpp:
        * WebCore.xcodeproj/project.pbxproj: Add new files.

        * bindings/js/JSDataCueCustom.cpp: Added.
        (WebCore::JSDataCue::value): 
        (WebCore::JSDataCue::setValue):
        (WebCore::JSDataCueConstructor::constructJSDataCue): Custom constructor.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::updateActiveTextTrackCues): Drive-by fixes: don't schedule timeupdate
            events when paused, don't call sort on an Vector that can't be sorted.

        * html/track/DataCue.cpp:
        (WebCore::DataCue::DataCue): Initialize m_type.
        (WebCore::DataCue::~DataCue): Unprotect the JSValue if necessary.
        (WebCore::DataCue::data): Ask the platform value for data if non-null.
        (WebCore::DataCue::setData): Clear m_platformValue and m_value.
        (WebCore::DataCue::isEqual): New.
        (WebCore::DataCue::value): Return a JSValue from the platform value, or the value passed
            to the constructor/set by script.
        (WebCore::DataCue::setValue): Set m_value.
        * html/track/DataCue.h:
        * html/track/DataCue.idl:

        * html/track/InbandDataTextTrack.cpp:
        (WebCore::InbandDataTextTrack::addDataCue): Don't add the same cue more than once.
        (WebCore::InbandDataTextTrack::updateDataCue): Update a cue's duration.
        (WebCore::InbandDataTextTrack::removeDataCue): Remove an incomplete cue.
        (WebCore::InbandDataTextTrack::removeCue): Remove a cue from the incomplete cue map if necessary.
        * html/track/InbandDataTextTrack.h:

        * html/track/InbandGenericTextTrack.cpp:
        (WebCore::InbandGenericTextTrack::addGenericCue): CueMatchRules is now in TextTrackCue instead
            of VTTCue.
        * html/track/InbandTextTrack.h:

        * html/track/InbandWebVTTTextTrack.cpp:
        (WebCore::InbandWebVTTTextTrack::newCuesParsed): Ditto.

        * html/track/TextTrack.cpp:
        (WebCore::TextTrack::hasCue): Ditto.
        * html/track/TextTrack.h:

        * html/track/TextTrackCue.cpp:
        (WebCore::TextTrackCue::isEqual): New, test base class equality.
        * html/track/TextTrackCue.h:

        * html/track/TextTrackCueGeneric.cpp:
        (WebCore::TextTrackCueGeneric::isEqual): Call TextTrackCue::isEqual first.
        * html/track/TextTrackCueGeneric.h:

        * html/track/VTTCue.cpp:
        (WebCore::VTTCue::isEqual): Call TextTrackCue::isEqual first.
        * html/track/VTTCue.h:

        * platform/SerializedPlatformRepresentation.h: Added.
        (WebCore::SerializedPlatformRepresentation::~SerializedPlatformRepresentation):
        (WebCore::SerializedPlatformRepresentation::SerializedPlatformRepresentation):

        * platform/graphics/InbandTextTrackPrivateClient.h: Add methods for DataCue with SerializedPlatformRepresentation.

        * platform/graphics/avfoundation/InbandMetadataTextTrackPrivateAVF.cpp: Added.
        (WebCore::InbandMetadataTextTrackPrivateAVF::create):
        (WebCore::InbandMetadataTextTrackPrivateAVF::InbandMetadataTextTrackPrivateAVF):
        (WebCore::InbandMetadataTextTrackPrivateAVF::~InbandMetadataTextTrackPrivateAVF):
        (WebCore::InbandMetadataTextTrackPrivateAVF::addDataCue):
        (WebCore::InbandMetadataTextTrackPrivateAVF::updatePendingCueEndTimes):
        (WebCore::InbandMetadataTextTrackPrivateAVF::flushPartialCues):
        * platform/graphics/avfoundation/InbandMetadataTextTrackPrivateAVF.h: Added.

        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.cpp:
        (WebCore::MediaPlayerPrivateAVFoundation::seekWithTolerance): currentTrack -> currentTextTrack.
        (WebCore::MediaPlayerPrivateAVFoundation::seekCompleted): Ditto.
        (WebCore::MediaPlayerPrivateAVFoundation::configureInbandTracks): Ditto.
        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.h:
        (WebCore::MediaPlayerPrivateAVFoundation::setCurrentTextTrack):
        (WebCore::MediaPlayerPrivateAVFoundation::setCurrentTrack): Deleted.

        Renamed currentTrack and setCurrentTrack to currentTextTrack and setCurrentTextTrack.
        * platform/graphics/avfoundation/cf/MediaPlayerPrivateAVFoundationCF.cpp:
        (WebCore::AVFWrapper::currentTextTrack):
        (WebCore::MediaPlayerPrivateAVFoundationCF::setCurrentTextTrack):
        (WebCore::MediaPlayerPrivateAVFoundationCF::currentTextTrack):
        (WebCore::AVFWrapper::setCurrentTextTrack):
        (WebCore::AVFWrapper::AVFWrapper):
        (WebCore::AVFWrapper::processCue):
        (WebCore::AVFWrapper::currentTrack): Deleted.
        (WebCore::MediaPlayerPrivateAVFoundationCF::setCurrentTrack): Deleted.
        (WebCore::MediaPlayerPrivateAVFoundationCF::currentTrack): Deleted.
        (WebCore::AVFWrapper::setCurrentTrack): Deleted.
        * platform/graphics/avfoundation/cf/MediaPlayerPrivateAVFoundationCF.h:

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::MediaPlayerPrivateAVFoundationObjC):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::seekToTime): currentTrack -> currentTextTrack
        (WebCore::MediaPlayerPrivateAVFoundationObjC::tracksChanged): currentTrack -> currentTextTrack.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::processMetadataTrack): New.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::processCue): m_currentTrack -> m_currentTextTrack.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::flushCues): Ditto.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::setCurrentTextTrack): Renamed from setCurrentTextTrack.
        (WebCore::metadataType): Map an AVFoundation metadata key space to a metadata cue type.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::metadataDidArrive): Process new metadata.
        (-[WebCoreAVFMovieObserver observeValueForKeyPath:ofObject:change:context:]):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::setCurrentTrack): Deleted.

        Create a JSValue representation from an AVMetadataItem.
        * platform/mac/SerializedPlatformRepresentationMac.h: Added.
        (WebCore::SerializedPlatformRepresentationMac::platformType):
        (WebCore::SerializedPlatformRepresentationMac::nativeValue):
        * platform/mac/SerializedPlatformRepresentationMac.mm: Added.
        (WebCore::SerializedPlatformRepresentationMac::SerializedPlatformRepresentationMac):
        (WebCore::SerializedPlatformRepresentationMac::~SerializedPlatformRepresentationMac):
        (WebCore::SerializedPlatformRepresentationMac::create):
        (WebCore::SerializedPlatformRepresentationMac::data):
        (WebCore::SerializedPlatformRepresentationMac::deserialize):
        (WebCore::SerializedPlatformRepresentationMac::isEqual):
        (WebCore::toSerializedPlatformRepresentationMac):
        (WebCore::jsValueWithValueInContext):
        (WebCore::jsValueWithDataInContext):
        (WebCore::jsValueWithArrayInContext):
        (WebCore::jsValueWithDictionaryInContext):
        (WebCore::jsValueWithAVMetadataItemInContext):

2014-04-21  Benjamin Poulain  <benjamin@webkit.org>

        Add Element.matches, the standard name for webkitMatchesSelector
        https://bugs.webkit.org/show_bug.cgi?id=131922

        Reviewed by Andreas Kling.

        This patch just renames webkitMatchesSelector() to matches().

        * bindings/scripts/CodeGeneratorObjC.pm:
        (GenerateImplementation):
        The Objective-C binding generator only supported ImplementedAs for getters and setters.
        This adds support for the option so that Element.matches can be generated for Obj-C.

        * dom/Element.cpp:
        (WebCore::Element::matches):
        (WebCore::Element::webkitMatchesSelector): Deleted.
        * dom/Element.h:
        * dom/Element.idl:
        * inspector/InspectorCSSAgent.cpp:
        (WebCore::InspectorCSSAgent::buildArrayForMatchedRuleList):

2014-04-21  Beth Dakin  <bdakin@apple.com>

        topContentInset does not play well with fullscreen elements
        https://bugs.webkit.org/show_bug.cgi?id=131955
        -and corresponding-
        <rdar://problem/16651925>

        Reviewed by Sam Weinig.

        Calling setNeedsLayout() is not sufficient when the topContentInset has changed 
        dynamically. We need to perform the layout right away and update the scrollbars. 
        This works completely when the inset changes due to entering/exiting fullscreen, 
        but I left a FIXME behind because it is possible to change the inset dynamically 
        just through the WK2 API and end up in a situation where everything looks right 
        except for the scrollbars. 
        * page/FrameView.cpp:
        (WebCore::FrameView::topContentInsetDidChange):
        * page/FrameView.h:
        * page/Page.cpp:
        (WebCore::Page::setTopContentInset):

2014-04-18  Jon Honeycutt  <jhoneycutt@apple.com>

        Empty RenderInline objects should not be line break objects.

        https://bugs.webkit.org/show_bug.cgi?id=131861
        <rdar://problem/15663617>

        Reviewed by David Hyatt.

        * rendering/line/BreakingContextInlineHeaders.h:
        (WebCore::BreakingContext::canBreakAtThisPosition):
        Don't break at this position if this is an empty RenderInline.

2014-04-21  Enrica Casucci  <enrica@apple.com>

        [iOS WebKit2] support replacements for misspelled words.
        https://bugs.webkit.org/show_bug.cgi?id=131827
        <rdar://problem/16319657>

        Reviewed by Darin Adler.

        Adds utility function to return the character before the current selection
        and converts the nbsp to the space character.

        * WebCore.exp.in:
        * editing/VisibleUnits.cpp:
        (WebCore::characterBeforePosition):
        * editing/VisibleUnits.h:

2014-04-21  Eric Carlson  <eric.carlson@apple.com>

        [iOS] enable plug-in replacement
        https://bugs.webkit.org/show_bug.cgi?id=131947

        Reviewed by Jer Noble.

        * bindings/generic/RuntimeEnabledFeatures.cpp:
        (WebCore::RuntimeEnabledFeatures::RuntimeEnabledFeatures): initialize m_isPluginReplacementEnabled
            to true on iOS.

2014-04-21  Rik Cabanier  <cabanier@adobe.com>

        [CSS Blending] Remove support for non-separable blend modes from mix-blend-mode
        https://bugs.webkit.org/show_bug.cgi?id=131824

        Reviewed by Dean Jackson.

        Removed support for non-separable blend modes from the CSS parser.

        Covered by existing tests

        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue):
        * platform/graphics/ca/mac/PlatformCAFiltersMac.mm:
        (PlatformCAFilters::setBlendingFiltersOnLayer):

2014-04-21  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Column set drawing under horizontal scrollbar.
        https://bugs.webkit.org/show_bug.cgi?id=131812.

        Reviewed by Sam Weinig.

        Added fast/multicol/newmulticol/compare-with-old-impl/LeftToRight-tb.html.

        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::layoutBlock):
        (WebCore::RenderBlockFlow::checkForPaginationLogicalHeightChange):
        * rendering/RenderBlockFlow.h:
        Pass in relayoutChildren as a reference boolean to checkForPaginationLogicalHeightChange.
        The new columns need to be able to set it to true if the amount of available column
        height ever changes, so that the RenderFlowThread and the sets get a layout call.

        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::setColumnStylesFromPaginationMode):
        Make sure that the pagination mode is set up with an auto column-fill specified. You
        don't ever want to balance when you set a pagination mode on the RenderView.

2014-04-21  Tim Horton  <timothy_horton@apple.com>

        [iOS WebKit2] Implement CSS viewport units
        https://bugs.webkit.org/show_bug.cgi?id=131863
        <rdar://problem/16279088>

        Reviewed by Darin Adler.

        * WebCore.exp.in:
        * page/FrameView.cpp:
        (WebCore::FrameView::setViewportSize):
        * page/FrameView.h:
        (WebCore::FrameView::viewportSize):
        Add setViewportSize() and viewportSize().
        If the viewport size changes, we have to do style recalc.
        If we have an overridden viewport size, use it.

        * rendering/RenderView.cpp:
        (WebCore::RenderView::viewportSize):
        * rendering/RenderView.h:
        Get the size from FrameView.

2014-04-21  Joseph Pecoraro  <pecoraro@apple.com>

        Remove unused WebKitSystemInterface functions
        https://bugs.webkit.org/show_bug.cgi?id=131938

        Reviewed by Alexey Proskuryakov.

        * WebCore.exp.in:
        * platform/ios/WebCoreSystemInterfaceIOS.mm:
        * platform/mac/WebCoreSystemInterface.h:
        * platform/mac/WebCoreSystemInterface.mm:

2014-04-21  Andreas Kling  <akling@apple.com>

        Move the JSString cache from DOMWrapperWorld to VM.
        <https://webkit.org/b/131940>

        Since there's no need for JSStrings to be world-specific, this patch
        moves the string cache to JSC::VM. This makes jsStringWithCache()
        a lot faster since it no longer has to jump through twenty-eleven
        hoops to find the DOMWrapperWorld.

        Reviewed by Geoff Garen.

        * bindings/js/DOMWrapperWorld.cpp:
        (WebCore::DOMWrapperWorld::clearWrappers):
        * bindings/js/DOMWrapperWorld.h:
        * bindings/js/JSDOMBinding.cpp:
        (WebCore::jsStringWithCache):

2014-04-21  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Column balancing is slow on float-multicol.html
        https://bugs.webkit.org/show_bug.cgi?id=131801

        Reviewed by Enrica Casucci.

        Added fast/multicol/tall-float.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::expandsToEncloseOverhangingFloats):
        Make RenderFlowThreads expand to encompass floats. Also from Morten's patch for
        Blink (#361551).

        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::computeOverflow):
        Fix a bug where the new multi-column code was adding in overflow for floats
        when it should not. This was resulting in the creation of scrollbars when none
        should exist. This is my own addition.

        (WebCore::RenderBlockFlow::addOverhangingFloats):
        Make RenderFlowThreads and RenderRegions ignore overhanging float additions. This
        comes from Morten's patch for Blink (#361551).

2014-04-21  Darin Adler  <darin@apple.com>

        REGRESSION (r160908): Safari doesn't draw rotated images properly first time
        https://bugs.webkit.org/show_bug.cgi?id=131930

        Reviewed by Anders Carlsson.

        With render tree creation sufficiently lazy, we had to put some explicit
        calls to updateStyleIfNeeded into the ImageDocument class.

        * dom/DOMImplementation.cpp:
        (WebCore::DOMImplementation::createDocument): Pass a Frame&.

        * html/ImageDocument.cpp:
        (WebCore::ImageDocument::imageSize): Added this helper function. This updates
        style so we can use the renderer to compute an image size taking things like
        orientation into account, and also passes in the zoom factor.
        (WebCore::ImageDocument::updateDuringParsing): Moved the body of the
        ImageDocumentParser::appendBytes function into this function. Since it's a
        member of ImageDocument, it has better access to appropriate private members,
        and we don't have to expose as many functions to the public. Also changed to
        not use the frame so much. Also merged in the code that creates the document
        instead of having it be a side effect in the cachedImage helper function; all
        the other call sites were checking for null before calling cachedImage.
        (WebCore::ImageDocument::finishedParsing): Moved the body of the
        ImageDocumentParser::finish function here. Added a call to updateStyleIfNeeded
        before using the renderer to get the image size.
        (WebCore::ImageDocumentParser::document): Made this return a reference. It's
        just a convenience function used in the two functions below.
        (WebCore::ImageDocumentParser::appendBytes): Just call updateDuringParsing.
        (WebCore::ImageDocumentParser::finish): Just call finishedParsing.
        (WebCore::ImageDocument::ImageDocument): Take a reference for the argument,
        use nullptr, and also initialize m_shouldShrinkImage directly instead of using
        a shouldShrinkToFit() helper function to do it.
        (WebCore::ImageDocument::createDocumentStructure): Removed unneeded check of
        null for the frame, since the caller does it. Removed some unneeded
        IGNORE_EXCEPTON and a stray semicolon. Use m_shouldShrinkImage instead of
        calling shouldShrinkToFit since at this early point they will be identical.
        (WebCore::ImageDocument::scale): Make non-const so we can call the new
        imageSize helper. Use Document::view instead of Frame::view. Improved the
        conversion to floating point so it doesn't involve a static_cast and an extra
        conversion from int to LayoutUnit.
        (WebCore::ImageDocument::resizeImageToFit): Ditto.
        (WebCore::ImageDocument::imageClicked): Ditto.
        (WebCore::ImageDocument::imageUpdated): Ditto. Also use m_shouldShrinkImage
        ibnstead of shouldShrinkToFit.
        (WebCore::ImageDocument::restoreImageSize): Ditto.
        (WebCore::ImageDocument::imageFitsInWindow): Ditto.
        (WebCore::ImageDocument::windowSizeChanged): Ditto.
        (WebCore::ImageDocument::cachedImage): Deleted. Moved logic into updateDuringParsing.
        (WebCore::ImageDocument::shouldShrinkToFit): Deleted. Moved logic into constructor.
        (WebCore::ImageEventListener::handleEvent): Updated for changes above.
        (WebCore::ImageEventListener::operator==): Simplified. No reason this has to check
        whether both listeners are in the same document.
        (WebCore::ImageDocumentElement::didMoveToNewDocument): Use nullptr.

        * html/ImageDocument.h: Deleted some unused things, updated for changes above,
        and made some memer functions private.

        * loader/FrameLoaderClient.h: Deleted the allowScriptFromSource, allowPlugins,
        allowImage, and allowDisplayingInsecureContent functions. These were only used in
        Chromium and are now unneeded complexity. We could bring them back if anyone wants them.

        * loader/MixedContentChecker.cpp:
        (WebCore::MixedContentChecker::canDisplayInsecureContent): Removed call to
        allowDisplayingInsecureContent, just use the setting directly.
        (WebCore::MixedContentChecker::canRunInsecureContent): Removed call to
        allowRunningInsecureContent, just use the setting directly.

        * loader/SubframeLoader.cpp:
        (WebCore::SubframeLoader::allowPlugins): Removed call to allowPlugins, just
        use the arePluginsEnabled setting directly.

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::canRequest): Removed call to allowScriptFromSource, just
        use the isScriptEnabled setting directly.
        (WebCore::CachedResourceLoader::clientDefersImage): Removed call to allowImage.

2014-04-21  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Pagination mode messed up with non-inline axis and reversed direction.
        https://bugs.webkit.org/show_bug.cgi?id=131811

        Reviewed by Dean Jackson.

        Added fast/multicol/newmulticol/compare-with-old-impl/BottomToTop-tb.html
        
        With block axis pagination mode, it is possible to set a column height that is not the same
        as the available fill height for a block. The new multi-column code had the assumption that
        the column height was the same as the amount of fill room you had available. This is not
        the case.
        
        To correct the issue, I added a member variable to RenderMultiColumnSet that stores the
        available column height as a separate variable from the computed column height. This allows
        the pagination API to specify a different column height that is not the same as the view's
        content height.

        Even though it isn't involved in the solution, I also patched pageOrViewLogicalHeight on
        RenderView to work with the new column code as well.

        To address the layout test failures (that caused the previous rollout), I made sure to
        initialize m_availableHeight to 0 when m_computedColumnHeight also gets reset to 0.
        
        The assertion is not something I could reproduce on any machine, but I can see the problem.
        I patched Page's pageCount method to not have column code directly in Page.cpp, 
        and to make a new pageCount() method on RenderView that Page calls
        into. This method is now patched to handle the new column code as well as the old. I have
        no real way of testing this method though, since I can't reproduce the assertion that the
        bots were experiencing.

        * page/Page.cpp:
        (WebCore::Page::pageCount):
        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::RenderMultiColumnSet):
        (WebCore::RenderMultiColumnSet::setAndConstrainColumnHeight):
        (WebCore::RenderMultiColumnSet::prepareForLayout):
        (WebCore::RenderMultiColumnSet::computeLogicalHeight):
        * rendering/RenderMultiColumnSet.h:
        * rendering/RenderView.cpp:
        (WebCore::RenderView::pageOrViewLogicalHeight):
        (WebCore::RenderView::pageCount):
        * rendering/RenderView.h:

2014-04-18  Dean Jackson  <dino@apple.com>

        [Media] Clean up localized strings in controls
        https://bugs.webkit.org/show_bug.cgi?id=131857
        <rdar://problem/16663005>

        Reviewed by Eric Carlson.

        There is no need for separate localization files
        on OS X and iOS. Move the small number of iOS-specific
        localizations into a shared file.

        We also don't need a function to return a static table.
        Ultimately I think we want a top-level WebKit object that
        hold the table, but for now use a global variable
        called UIStringTable. Since we're in an isolated world, we
        won't clash with anything.

        I noticed a few cases were we grab a localized string and
        then instantly run a replacement on it. This should be
        supported directly in the UIString() accessor.

        * English.lproj/mediaControlsLocalizedStrings.js: Add iOS strings. Just
        use a static table.
        (mediaControlsLocalizedStrings): Deleted.
        * English.lproj/mediaControlsLocalizedStringsiOS.js: Removed.
        * Modules/mediacontrols/mediaControlsApple.js:
        (Controller.prototype.extend): Fix braces.
        (Controller.prototype.UIString): Use the string table, and allow replacement.
        (Controller.prototype.createControls): Use new UIString replacement.
        * Modules/mediacontrols/mediaControlsiOS.js:
        (ControllerIOS.prototype.updateWirelessPlaybackStatus): Use new UIString.
        (ControllerIOS.prototype.UIString): Deleted. Use the parent class version.
        * WebCore.xcodeproj/project.pbxproj: Remove file from Resources.
        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::mediaControlsScript): No need to include the iOS
        specific localization file.

2014-04-21  Brent Fulgham  <bfulgham@apple.com>

        [Win] Unreviewed build fix.

        * inspector/TimelineRecordFactory.cpp: Add missing include.

2014-04-21  Zan Dobersek  <zdobersek@igalia.com>

        Move cross-port Source/WebCore/page/ code to std::unique_ptr
        https://bugs.webkit.org/show_bug.cgi?id=130534

        Reviewed by Darin Adler.

        Replace uses of OwnPtr and PassOwnPtr in cross-port code under Source/WebCore/page/ with
        std::unique_ptr. Unnecessary OwnPtr.h and PassOwnPtr.h header inclusions are removed as well.

        * dom/Document.cpp:
        (WebCore::Document::initSecurityContext):
        * dom/SecurityContext.cpp:
        (WebCore::SecurityContext::setContentSecurityPolicy):
        * dom/SecurityContext.h:
        * page/CaptionUserPreferences.h:
        * page/ContentSecurityPolicy.cpp:
        (WebCore::CSPDirectiveList::create):
        (WebCore::CSPDirectiveList::checkEvalAndReportViolation):
        (WebCore::CSPDirectiveList::checkInlineAndReportViolation):
        (WebCore::CSPDirectiveList::checkSourceAndReportViolation):
        (WebCore::CSPDirectiveList::setCSPDirective):
        (WebCore::ContentSecurityPolicy::didReceiveHeader):
        * page/ContentSecurityPolicy.h:
        * page/DOMSecurityPolicy.h:
        * page/DOMWindow.cpp:
        (WebCore::PostMessageTimer::fired):
        (WebCore::DOMWindow::postMessageTimerFired):
        * page/DOMWindow.h:
        * page/EventHandler.cpp:
        (WebCore::EventHandler::EventHandler):
        * page/EventHandler.h:
        * page/Frame.cpp:
        (WebCore::Frame::Frame):
        (WebCore::createRegExpForLabels):
        (WebCore::Frame::searchForLabelsAboveCell):
        (WebCore::Frame::searchForLabelsBeforeElement):
        (WebCore::matchLabelsAgainstString):
        (WebCore::Frame::setTiledBackingStoreEnabled):
        * page/Frame.h:
        * page/FrameView.cpp:
        (WebCore::FrameView::addEmbeddedObjectToUpdate):
        (WebCore::FrameView::addSlowRepaintObject):
        (WebCore::FrameView::addViewportConstrainedObject):
        (WebCore::FrameView::addScrollableArea):
        * page/FrameView.h:
        * page/Page.cpp:
        (WebCore::Page::Page):
        * page/Page.h:
        * page/PageConsole.h:
        * page/PageThrottler.h:
        * page/SecurityPolicy.cpp:
        (WebCore::SecurityPolicy::addOriginAccessWhitelistEntry):
        * page/animation/AnimationController.h:
        * page/animation/CSSPropertyAnimation.cpp:
        (WebCore::PropertyWrapperVisitedAffectedColor::PropertyWrapperVisitedAffectedColor):
        (WebCore::CSSPropertyAnimationWrapperMap::instance):
        (WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap):
        * page/mac/PageMac.cpp:
        (WebCore::Page::addSchedulePair):
        * workers/WorkerGlobalScope.cpp:
        (WebCore::WorkerGlobalScope::applyContentSecurityPolicyFromString):

2014-04-21  Darin Adler  <darin@apple.com>

        Add HashSet::takeAny
        https://bugs.webkit.org/show_bug.cgi?id=131928

        Reviewed by Benjamin Poulain.

        * dom/Document.cpp:
        (WebCore::Document::takeAnyMediaCanStartListener): Use HashSet::takeAny.
        * dom/ScriptExecutionContext.cpp:
        (WebCore::takeAny): Deleted.
        (WebCore::ScriptExecutionContext::~ScriptExecutionContext): Use HashSet::takeAny.

2014-04-21  Zan Dobersek  <zdobersek@igalia.com>

        iOS and non-iOS RemoteCommandListener::create() functions should use std::make_unique<>()
        https://bugs.webkit.org/show_bug.cgi?id=131916

        Reviewed by Darin Adler.

        A follow-up to r167197. Make RemoteCommandListener ctor public and use std::make_unique<>()
        in both versions of RemoteCommandListener::create() functions (iOS and non-iOS).

        * platform/RemoteCommandListener.cpp:
        (WebCore::RemoteCommandListener::create):
        * platform/RemoteCommandListener.h:
        (WebCore::RemoteCommandListener::RemoteCommandListener):
        * platform/ios/RemoteCommandListenerIOS.mm:
        (WebCore::RemoteCommandListener::create):

2014-04-21  Andreas Kling  <akling@apple.com>

        Micro-optimize the way we hand NodeLists to JSC.
        <https://webkit.org/b/131932>

        Use HashMap::fastAdd() when returning cached node lists and collections.
        10.9% progression on Bindings/get-elements-by-tag-name.html

        Reviewed by Antti Koivisto.

        * dom/NodeRareData.h:
        (WebCore::NodeListsNodeData::addCacheWithAtomicName):
        (WebCore::NodeListsNodeData::addCacheWithName):
        (WebCore::NodeListsNodeData::addCacheWithQualifiedName):
        (WebCore::NodeListsNodeData::addCachedCollection):

2014-04-21  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167584.
        https://bugs.webkit.org/show_bug.cgi?id=131929

        Broke Objective-C bindings test (Requested by ap on #webkit).

        Reverted changeset:

        "Add Element.matches, the standard name for
        webkitMatchesSelector"
        https://bugs.webkit.org/show_bug.cgi?id=131922
        http://trac.webkit.org/changeset/167584

2014-04-20  Benjamin Poulain  <benjamin@webkit.org>

        Compile the :root pseudo class and fix a related issue with :nth-child()
        https://bugs.webkit.org/show_bug.cgi?id=131926

        Reviewed by Andreas Kling.

        Add the :root pseudo class. This is another trivial selector, we just need to compare
        the element pointer with the documentElement.

        I discovered some issues with :nth-child(n) through the layout tests for ":root".
        When the pseudo class nth-child could match anything, no code was generated. That decision
        was taken when generating the fragments.

        The specification of :nth-child() has two tests: the parent test and the counter test.
        Since some fragments would not generate any code for :nth-child(n), they would succeed on the root,
        which is incorrect since the root should fail the parent test.

        This was fixed by moving the filtering of non-counting :nth-child() after we generate the parent
        check.
        We still don't generate any counter test unless required.

        Test: fast/selectors/nth-child-on-root.html

        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::addPseudoClassType):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementIsNthChild):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementIsRoot):
        * dom/Document.h:
        (WebCore::Document::documentElementMemoryOffset):

2014-04-20  Benjamin Poulain  <benjamin@webkit.org>

        Add Element.matches, the standard name for webkitMatchesSelector
        https://bugs.webkit.org/show_bug.cgi?id=131922

        Reviewed by Andreas Kling.

        This patch just renames webkitMatchesSelector() to matches().

        * bindings/scripts/CodeGeneratorObjC.pm:
        (GenerateImplementation):
        The Objective-C binding generator only supported ImplementedAs for getters and setters.
        This adds support for the option so that Element.matches can be generated for Obj-C.

        * dom/Element.cpp:
        (WebCore::Element::matches):
        (WebCore::Element::webkitMatchesSelector): Deleted.
        * dom/Element.h:
        * dom/Element.idl:
        * inspector/InspectorCSSAgent.cpp:
        (WebCore::InspectorCSSAgent::buildArrayForMatchedRuleList):

2014-04-20  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: RenderLayer's size is set using enclosingRect() which can result in cruft.
        https://bugs.webkit.org/show_bug.cgi?id=131468

        Reviewed by Darin Adler.

        Layers marked opaque may not paint edge pixels, when RenderLayer bounds are non-integral and
        get device pixel snapped.
        For details see this: https://trac.webkit.org/r159463

        Test: compositing/hidpi-non-simple-compositing-layer-with-fractional-size-and-background.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):

2014-04-19  Darin Adler  <darin@apple.com>

        Simple layout can get confused by coordinate overflow
        https://bugs.webkit.org/show_bug.cgi?id=131890
        rdar://problem/15558510

        Reviewed by Andreas Kling.

        Test: fast/css/simple-layout-overflow.html

        * rendering/SimpleLineLayoutResolver.h:
        (WebCore::SimpleLineLayout::RunResolver::rangeForRect):
        If lastLine is smaller than firstLine, just ignore it.

2014-04-20  Darin Adler  <darin@apple.com>

        ScriptExecutionContext::stopActiveDOMObjects iterates a hash map that can change during iteration (for multiple reasons, including GC)
        https://bugs.webkit.org/show_bug.cgi?id=52719

        Reviewed by Alexey Proskuryakov.

        At least two specific ways this can happen:

        1) XMLHttpRequest::stop can trigger a JavaScript garbage collection.
        2) NotificationCenter::stop can delete the last references to notifications;
           those notifications are also active DOM objects.

        Besides fixing the iteration in that function, did some other fixes for the
        ScriptExecutionContext class, including some coding style changes. Many uses
        of nullptr instead of 0, without listing each function separately below.

        * Modules/webdatabase/DatabaseContext.cpp:
        (WebCore::DatabaseContext::contextDestroyed): Call through to the base class
        version of contextDestroyed rather than repeating what it does (with a large
        comment that doesn't acknowledge the base class alread does it).
        * Modules/webdatabase/DatabaseContext.h: Removed some unneeded includes.
        Wrote out "private" explicitly for deriving from ActiveDOMObject. Made the
        ActiveDOMObject function overrides private, and marked them override and final.

        * dom/ActiveDOMObject.h: Updated comments. Replaced suspendIfNeededCalled with
        assertSuspendIfNeededWasCalled, which has an empty inline version in the header.
        Renamed m_suspendIfNeededCalled to m_suspendIfNeededWasCalled.

        * dom/ActiveDOMObject.cpp:
        (WebCore::ActiveDOMObject::ActiveDOMObject): Pass a reference instead of a pointer.
        (WebCore::ActiveDOMObject::~ActiveDOMObject): Ditto.
        (WebCore::ActiveDOMObject::suspendIfNeeded): Ditto.

        * dom/ContextDestructionObserver.cpp:
        (WebCore::ContextDestructionObserver::observeContext): Pass a reference instead of a pointer.

        * dom/MessagePort.cpp:
        (WebCore::MessagePort::MessagePort): Pass a reference instead of a pointer.
        (WebCore::MessagePort::~MessagePort): Ditto.
        (WebCore::MessagePort::disentangle): Ditto.

        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::ScriptExecutionContext): Updated flags used
        for assertions so they are conditional and updated their names.
        (WebCore::takeAny): Added. Helper function that we can consider for HashSet in
        the future; makes loop below easier to read.
        (WebCore::checkConsistency): Added. Assertions that were done multiple places below,
        and should not be written over and over again.
        (WebCore::ScriptExecutionContext::~ScriptExecutionContext): Changed to use C++11
        for loops and the takeAny function above.
        (WebCore::ScriptExecutionContext::dispatchMessagePortEvents): Ditto.
        (WebCore::ScriptExecutionContext::createdMessagePort): Changed to take a reference
        for clarity and so it doesn't have to do an assert the pointer is non-null.
        (WebCore::ScriptExecutionContext::destroyedMessagePort): Ditto.
        (WebCore::ScriptExecutionContext::canSuspendActiveDOMObjects): Changed to use
        C++11 for loop and reworded comment and redid assertions.
        (WebCore::ScriptExecutionContext::suspendActiveDOMObjects): Ditto.
        (WebCore::ScriptExecutionContext::resumeActiveDOMObjects): Ditto.
        (WebCore::ScriptExecutionContext::stopActiveDOMObjects): Changed to support
        removal of an active DOM object during the stop function. Included new comments
        to clarify what the rules are.
        (WebCore::ScriptExecutionContext::suspendActiveDOMObjectIfNeeded): Changed to take
        a reference for clarity and so it doesn't have to assert a pointer is non-null.
        (WebCore::ScriptExecutionContext::didCreateActiveDOMObject): Ditto. Also changed to
        use RELEASE_ASSERT instead of CRASH.
        (WebCore::ScriptExecutionContext::willDestroyActiveDOMObject): Ditto.
        (WebCore::ScriptExecutionContext::didCreateDestructionObserver): Ditto.
        (WebCore::ScriptExecutionContext::willDestroyDestructionObserver): Ditto.
        (WebCore::ScriptExecutionContext::closeMessagePorts): Moved the body of this
        function into its one call site, ScriptExecutionContext::stopActiveDOMObjects,
        since it's simple enough when written as a C++11 for loop.
        (WebCore::ScriptExecutionContext::hasPendingActivity): Added. This function was
        already exported for workers, and implementing it outside this class required
        exposing the private HashSet members; more sensible to implement it here and
        simply make it public in WorkerGlobalScope.

        * dom/ScriptExecutionContext.h: Removed unnecessary includes and forward declarations.
        Removed a long-ago-fixed FIXME. Changed various functions to take references instead of
        pointers. Added a protected hasPendingActivity function, deleted the closeMessagePorts
        function, deleted the ActiveDOMObjectsSet typedef, made the assertion flags be
        !ASSERT_DISABLED only, and deleted the messagePorts and activeDOMObjects functions.

        * workers/WorkerGlobalScope.cpp:
        (WebCore::WorkerGlobalScope::hasPendingActivity): Deleted. This is now implemented
        in the base class.

        * workers/WorkerGlobalScope.h: Make hasPendingActivity function from the base class
        public instead of declaring it in this class.

2014-04-20  Brent Fulgham  <bfulgham@apple.com>

        [Mac] Unable to select 'Off' or 'Auto' from track menu when tracks consist of unsupported track types
        https://bugs.webkit.org/show_bug.cgi?id=131908
        <rdar://problem/15999882>

        Reviewed by Eric Carlson.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::setSelectedTextTrack): When the user selects 'Off', make sure the currently 'showing'
        track is switched to 'disabled'.

2014-04-20  Andreas Kling  <akling@apple.com>

        Speed up jsStringWithCache() through WeakGCMap inlining.
        <https://webkit.org/b/131923>

        Inline the common path of WeakGCMap::add() in jsStringWithCache().
        26% progression on Bindings/id-getter.html

        Reviewed by Darin Adler.

        * WebCore.exp.in:
        * bindings/js/JSDOMBinding.h:
        * bindings/js/JSDOMBinding.cpp:
        (WebCore::jsStringWithCache):

            Move jsStringWithCache() out of line since we're now blowing up
            its size quite a bit.

2014-04-20  Benjamin Poulain  <benjamin@webkit.org>

        Fix the build after r167574

        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching):

2014-04-20  Benjamin Poulain  <benjamin@webkit.org>

        Compile the pseudo class :target
        https://bugs.webkit.org/show_bug.cgi?id=131904

        Reviewed by Andreas Kling.

        The pseudo class :target is trivial, it just compare the current element with
        Document::cssTarget().

        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::addPseudoType):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching):
        (WebCore::SelectorCompiler::getDocument):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementAttributeValueExactMatching):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementIsTarget):
        * dom/Document.h:
        (WebCore::Document::cssTargetMemoryOffset):

2014-04-20  Benjamin Poulain  <benjamin@webkit.org>

        Rename the CSSSelector PseudoType to PseudoClassType
        https://bugs.webkit.org/show_bug.cgi?id=131907

        Reviewed by Andreas Kling.

        Pseudo Elements and Page Pseudo Classes have been moved out of PseudoType in previous patches.
        The remaining values in the PseudoType enumeration are the pseudo classes.

        This patch is the final clean up, PseudoType is renamed to PseudoClassType.

        * css/CSSGrammar.y.in:
        * css/CSSParserValues.cpp:
        (WebCore::CSSParserSelector::parsePseudoClassAndCompatibilityElementSelector):
        * css/CSSParserValues.h:
        (WebCore::CSSParserSelector::pseudoClassType):
        (WebCore::CSSParserSelector::pseudoType): Deleted.
        * css/CSSSelector.cpp:
        (WebCore::CSSSelector::specificityForOneSelector):
        (WebCore::appendPseudoClassFunctionTail):
        (WebCore::CSSSelector::selectorText):
        * css/CSSSelector.h:
        (WebCore::CSSSelector::pseudoClassType):
        (WebCore::CSSSelector::pseudoElementType):
        (WebCore::CSSSelector::pagePseudoClassType):
        (WebCore::pseudoClassIsRelativeToSiblings):
        (WebCore::CSSSelector::isSiblingSelector):
        (WebCore::CSSSelector::CSSSelector):
        (WebCore::CSSSelector::pseudoType): Deleted.
        * css/RuleSet.cpp:
        (WebCore::RuleSet::findBestRuleSetAndAdd):
        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkOne):
        (WebCore::SelectorChecker::checkScrollbarPseudoClass):
        (WebCore::SelectorChecker::determineLinkMatchType):
        (WebCore::SelectorChecker::matchesFocusPseudoClass):
        * css/SelectorChecker.h:
        (WebCore::SelectorChecker::isCommonPseudoClassSelector):
        * css/SelectorCheckerFastPath.cpp:
        (WebCore::SelectorCheckerFastPath::commonPseudoClassSelectorMatches):
        * css/SelectorPseudoClassAndCompatibilityElementMap.in:
        * css/SelectorPseudoTypeMap.h:
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::styleForElement):
        * css/makeSelectorPseudoClassAndCompatibilityElementMap.py:
        (enumerablePseudoType):
        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::addPseudoClassType):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching):
        (WebCore::SelectorCompiler::addPseudoType): Deleted.
        * inspector/InspectorCSSAgent.cpp:
        (WebCore::computePseudoClassMask):
        (WebCore::InspectorCSSAgent::forcePseudoState):
        * inspector/InspectorCSSAgent.h:
        * inspector/InspectorInstrumentation.cpp:
        (WebCore::InspectorInstrumentation::forcePseudoStateImpl):
        * inspector/InspectorInstrumentation.h:
        (WebCore::InspectorInstrumentation::forcePseudoState):

2014-04-19  Alexey Proskuryakov  <ap@apple.com>

        Crashes in HTMLFormElement::submit.
        https://bugs.webkit.org/show_bug.cgi?id=131910
        <rdar://problem/15661790>

        Based on a patch by Kent Tamura.

        Reviewed by Anders Carlsson.

        Tests: fast/forms/form-submission-crash-2.html
               fast/forms/form-submission-crash.html

        Code that executes arbitrary JS needs to protect objects that it uses afterwards.

        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::prepareForSubmission):
        (WebCore::HTMLFormElement::submit):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::submitForm):

2014-04-20  Antti Koivisto  <antti@apple.com>

        Text bounding box computation for simple line layout is wrong
        https://bugs.webkit.org/show_bug.cgi?id=131912

        Reviewed by Andreas Kling.

        Top-left is currently the first line top-left which is not always correct.

        * WebCore.exp.in:
        * rendering/RenderText.cpp:
        (WebCore::RenderText::firstRunLocation):
        (WebCore::RenderText::firstRunOrigin): Deleted.
        (WebCore::RenderText::firstRunX): Deleted.
        (WebCore::RenderText::firstRunY): Deleted.
        
            Keep just one accessor and rename it.
            Encapsulate the line box and simple line versions.

        * rendering/RenderText.h:
        * rendering/RenderTextLineBoxes.cpp:
        (WebCore::RenderTextLineBoxes::firstRunLocation):

            Line box version.

        * rendering/RenderTextLineBoxes.h:
        * rendering/RenderTreeAsText.cpp:
        
            Simplify RenderText dumping.

        (WebCore::RenderTreeAsText::writeRenderObject):
        * rendering/SimpleLineLayoutFunctions.cpp:
        (WebCore::SimpleLineLayout::computeTextBoundingBox):
        
            Return the correct x position.

        (WebCore::SimpleLineLayout::computeTextFirstRunLocation):
        
            Simple line version.

        * rendering/SimpleLineLayoutFunctions.h:
        * rendering/svg/SVGRenderTreeAsText.cpp:
        (WebCore::writeSVGInlineText):

2014-04-19  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: RenderLayer's clipping should snap to device pixel boundaries.
        https://bugs.webkit.org/show_bug.cgi?id=131466

        Reviewed by Simon Fraser.

        Fractional pixel clipping can produce cruft on RenderLayers. Since RenderLayer
        sizing and painting are snapped, painting clip rect needs to be snapped the same way.

        Test: fast/clip/clip-when-rect-has-fractional-pixel-value.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::clipToRect):

2014-04-19  Brent Fulgham  <bfulgham@apple.com>

        Latched scrolling may interact badly with custom programmatic scrolling
        https://bugs.webkit.org/show_bug.cgi?id=131869
        <rdar://problem/16249557>

        Reviewed by Darin Adler.

        * dom/Element.cpp:
        (WebCore::Element::setScrollLeft): Mark scrollable area as having
        been scrolled programmatically.
        (WebCore::Element::setScrollTop): Ditto.
        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleWheelEvent): Check for programmatic scroll, and
        clear latched state if the handler manually scrolled. Clear programmatic
        scroll state at the end of event handling.
        (WebCore::EventHandler::clearLatchedState): Refactored code.
        * page/EventHandler.h:
        * page/mac/EventHandlerMac.mm:
        (WebCore::EventHandler::platformPrepareForWheelEvents): Check
        if scrollable area was scrolled programmatically. If it was, do
        not honor latching behavior.
        * platform/ScrollableArea.cpp:
        (WebCore::ScrollableArea::ScrollableArea): Initialize new member.
        * platform/ScrollableArea.h:
        (WebCore::ScrollableArea::isScrolledProgrammatically): Added.
        (WebCore::ScrollableArea::setScrolledProgrammatically): Added.

2014-04-19  Chris Fleizach  <cfleizach@apple.com>

        AX: grid rows are not recognized do to lack of explicit role="row", role="gridcell"
        https://bugs.webkit.org/show_bug.cgi?id=131819

        Reviewed by Darin Adler.

        Test: accessibility/table-with-missing-aria-role-rows.html

        If a table is using role="grid", and it has <tr> elements that do not have
        role="row", we should still treat them as row elements.

        * accessibility/AccessibilityARIAGrid.cpp:
        (WebCore::AccessibilityARIAGrid::addTableCellChild):

2014-04-19  Chris Fleizach  <cfleizach@apple.com>

        AX: Malformed tables exposing incorrect col and colSpans
        https://bugs.webkit.org/show_bug.cgi?id=131796

        Reviewed by Darin Adler.

        Test: accessibility/table-incorrect-colspan-cell.html

        When a developer has specified malformed colspans, accessibility is reporting those values instead of the effective column information.

        * accessibility/AccessibilityTableCell.cpp:
        (WebCore::AccessibilityTableCell::columnIndexRange):

2014-04-19  Benjamin Poulain  <bpoulain@apple.com>

        Make the CSS JIT compile for ARM64
        https://bugs.webkit.org/show_bug.cgi?id=131834

        Reviewed by Gavin Barraclough.

        Add the CPU specific code required to compile SelectorCompiler on ARM64.
        The code is absolutely non-functional, it would crash immediately, but it compiles.

        * cssjit/FunctionCall.h:
        (WebCore::FunctionCall::FunctionCall):
        (WebCore::FunctionCall::callAndBranchOnCondition):
        * cssjit/RegisterAllocator.h:
        What am I supposed to do with all those registers? There are so many of them :)
        The array calleeSavedRegisters is defined for compatibility but it cannot be reached at the moment.

        (WebCore::RegisterAllocator::isValidRegister):
        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::SelectorCodeGenerator::modulo):
        Implement modulo by doing dividend - (divisor * int(dividend/divisor)).

        * cssjit/StackAllocator.h:
        StackAllocator will need a small redesign to handle the 16 bytes alligned stack of
        ARM64.
        The code has been modified to build but it is pretty useless.

        (WebCore::StackAllocator::allocateUninitialized):
        (WebCore::StackAllocator::push):
        (WebCore::StackAllocator::pop):
        (WebCore::StackAllocator::popAndDiscard):
        (WebCore::StackAllocator::popAndDiscardUpTo):
        (WebCore::StackAllocator::alignStackPreFunctionCall):
        (WebCore::StackAllocator::unalignStackPostFunctionCall):

2014-04-19  Simon Fraser  <simon.fraser@apple.com>

        [UI-side compositing] Implement blend modes
        https://bugs.webkit.org/show_bug.cgi?id=131891
        <rdar://problem/16490085>

        Reviewed by Tim Horton.

        Implement blend modes with UI-side compositing.
        
        PlatformCALayer::setBlendMode() becomes pure virtual, and overridden in
        PlatformCALayerMac and PlatformCALayerRemote.
        PlatformCAFilters::setBlendingFiltersOnLayer() now takes a raw platform
        layer, so it can be called from the UI process on a CALayer*.
        
        Fix an issue with GraphicsLayerCA::LayerChange flags. 1 << 31 shifts
        a signed integer, so it ended up setting all the high bits in m_uncommittedChanges,
        causing us to push blend modes to the UI process for every layer. Fix by shifting
        an unsigned long long (1LLU << 31). This should also fix a build warning on Windows.

        * WebCore.exp.in:
        * platform/graphics/ca/GraphicsLayerCA.h:
        * platform/graphics/ca/PlatformCAFilters.h:
        * platform/graphics/ca/PlatformCALayer.h:
        * platform/graphics/ca/mac/PlatformCAFiltersMac.mm:
        (PlatformCAFilters::setBlendingFiltersOnLayer):
        * platform/graphics/ca/mac/PlatformCALayerMac.h:
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayerMac::setFilters):
        (PlatformCALayerMac::setBlendMode):
        (PlatformCALayer::setBlendMode): Deleted.

2014-04-19  Joseph Pecoraro  <pecoraro@apple.com>

        Fix AVPlayerController leak on pages with video
        https://bugs.webkit.org/show_bug.cgi?id=131878

        Reviewed by Eric Carlson.

        * platform/ios/WebVideoFullscreenInterfaceAVKit.mm:
        (-[WebAVPlayerController init]):
        Assigning to the retain property will increment the count,
        so balance the alloc with an autorelease.

2014-04-19  Andreas Kling  <akling@apple.com>

        Slap ALWAYS_INLINE on Element attribute lookup things.
        <https://webkit.org/b/131892>

        Most of the "inline" helpers for setting/getting attributes were not
        actually getting inlined by the compiler, so let's make that happen.

        Reviewed by Geoffrey Garen.

        * dom/Element.cpp:
        (WebCore::Element::synchronizeAttribute):
        * dom/ElementData.h:
        (WebCore::ElementData::findAttributeByName):
        (WebCore::ElementData::findAttributeIndexByName):

2014-04-19  Darin Adler  <darin@apple.com>

        Telephone number detection should respect its setting consistently
        https://bugs.webkit.org/show_bug.cgi?id=131893
        rdar://problem/16597639

        Reviewed by Tim Horton.

        * editing/Editor.cpp:
        (WebCore::Editor::respondToChangedSelection): Only start the timer
        if shouldDetectTelephoneNumbers returns true.
        (WebCore::Editor::shouldDetectTelephoneNumbers): Added. Calls both
        isTelephoneNumberParsingEnabled and TelephoneNumberDetector::isSupported.
        (WebCore::Editor::scanSelectionForTelephoneNumbers): Use
        shouldDetectTelephoneNumbers.
        (WebCore::Editor::clearDataDetectedTelephoneNumbers): Use document()
        instead of m_frame.document().

        * editing/Editor.h: Added declaration of shouldDetectTelephoneNumbers.

2014-04-19  Andrei Bucur  <abucur@adobe.com>

        [CSS Regions] Harden the layout in case there are no regions
        https://bugs.webkit.org/show_bug.cgi?id=131517

        Reviewed by Mihnea Ovidenie.

        The patch fixes the cases when the content of a flow thread is not
        properly invalidated when all the regions of its chain are removed.

        Test: fast/regions/simplified-layout-no-regions.html

        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::logicalWidthChangedInRegionsForBlock):
        * rendering/RenderRegion.cpp:
        (WebCore::RenderRegion::ensureOverflowForBox):

2014-04-19  Zalan Bujtas  <zalan@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=131594
        Subpixel rendering: WK1: Wrong repaint rect is calculated when layer has non-compositing transform.

        Reviewed by Simon Fraser.

        We need to snap the repaint rect for transformed object the same way when we paint them.

        Test: fast/repaint/hidpi-wrong-repaint-rect-when-parent-has-noncompositing-transform.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computeRectForRepaint):

2014-04-18  Simon Fraser  <simon.fraser@apple.com>

        Use 'override' in GraphicsLayerCA
        https://bugs.webkit.org/show_bug.cgi?id=131882

        Reviewed by Tim Horton.

        Add 'override' to all overridden functions. Found a few that need
        not have been virtual. Removed "allowTiledLayer" stuff that was
        never called.

        * WebCore.exp.in:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::GraphicsLayerCA):
        (WebCore::GraphicsLayerCA::requiresTiledLayer):
        (WebCore::GraphicsLayerCA::setAllowTiledLayer): Deleted.
        * platform/graphics/ca/GraphicsLayerCA.h:
        (WebCore::GraphicsLayerCA::platformCALayer):
        (WebCore::GraphicsLayerCA::hasContentsLayer): Deleted.
        (WebCore::GraphicsLayerCA::allowTiledLayer): Deleted.
        (WebCore::GraphicsLayerCA::isGraphicsLayerCA): Deleted.
        (WebCore::GraphicsLayerCA::platformCALayerLayoutSublayersOfLayer): Deleted.
        (WebCore::GraphicsLayerCA::platformCALayerRespondsToLayoutChanges): Deleted.
        (WebCore::GraphicsLayerCA::platformCALayerContentsOrientation): Deleted.
        (WebCore::GraphicsLayerCA::platformCALayerShowDebugBorders): Deleted.
        (WebCore::GraphicsLayerCA::platformCALayerIncrementRepaintCount): Deleted.
        (WebCore::GraphicsLayerCA::platformCALayerContentsOpaque): Deleted.
        (WebCore::GraphicsLayerCA::platformCALayerDrawsContent): Deleted.
        (WebCore::GraphicsLayerCA::platformCALayerLayerDidDisplay): Deleted.

2014-04-18  Timothy Hatcher  <timothy@apple.com>

        Web Inspector: Move InspectorProfilerAgent to JavaScriptCore
        https://bugs.webkit.org/show_bug.cgi?id=131673

        Passes existing profiler and inspector tests.

        Reviewed by Joseph Pecoraro.

        * CMakeLists.txt:
        * DerivedSources.make:
        * ForwardingHeaders/inspector/agents/InspectorProfilerAgent.h: Added.
        * WebCore.exp.in:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/ScriptProfile.cpp: Removed.
        * bindings/js/ScriptProfile.h:
        * bindings/js/ScriptProfiler.cpp: Removed.
        * bindings/js/ScriptProfiler.h: Removed.
        * inspector/InspectorAllInOne.cpp:
        * inspector/InspectorConsoleInstrumentation.h:
        (WebCore::InspectorInstrumentation::profilerEnabled):
        (WebCore::InspectorInstrumentation::startProfiling):
        (WebCore::InspectorInstrumentation::stopProfiling):
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::InspectorController):
        * inspector/InspectorController.h:
        * inspector/InspectorInstrumentation.cpp:
        (WebCore::InspectorInstrumentation::didCommitLoadImpl):
        (WebCore::InspectorInstrumentation::startProfilingImpl):
        (WebCore::InspectorInstrumentation::stopProfilingImpl):
        (WebCore::InspectorInstrumentation::consoleTimeStampImpl): Deleted.
        * inspector/InspectorInstrumentation.h:
        * inspector/InspectorProfilerAgent.cpp: Removed.
        * inspector/InspectorProfilerAgent.h: Removed.
        * inspector/InspectorTimelineAgent.cpp:
        (WebCore::startProfiling):
        (WebCore::stopProfiling):
        (WebCore::InspectorTimelineAgent::willCallFunction):
        (WebCore::InspectorTimelineAgent::didCallFunction):
        (WebCore::InspectorTimelineAgent::willEvaluateScript):
        (WebCore::InspectorTimelineAgent::didEvaluateScript):
        (WebCore::InspectorTimelineAgent::didDispatchXHRLoadEvent): Deleted.
        * inspector/InstrumentingAgents.h:
        (WebCore::InstrumentingAgents::inspectorProfilerAgent):
        (WebCore::InstrumentingAgents::setInspectorProfilerAgent):
        * inspector/PageDebuggerAgent.cpp:
        (WebCore::PageDebuggerAgent::sourceMapURLForScript): Deleted.
        * inspector/PageDebuggerAgent.h:
        * inspector/PageProfilerAgent.cpp: Added.
        (WebCore::PageProfilerAgent::PageProfilerAgent):
        (WebCore::PageProfilerAgent::profilingGlobalExecState):
        * inspector/PageProfilerAgent.h: Added.
        (WebCore::PageProfilerAgent::~PageProfilerAgent):
        * inspector/ScriptProfile.idl:
        * inspector/TimelineRecordFactory.cpp:
        (WebCore::TimelineRecordFactory::appendProfile):
        * inspector/TimelineRecordFactory.h:
        * inspector/WebConsoleAgent.cpp:
        * inspector/WebProfilerAgent.cpp: Added.
        (WebCore::WebProfilerAgent::WebProfilerAgent):
        (WebCore::WebProfilerAgent::enable):
        (WebCore::WebProfilerAgent::disable):
        * inspector/WebProfilerAgent.h: Added.
        (WebCore::WebProfilerAgent::~WebProfilerAgent):
        * inspector/WorkerInspectorController.cpp:
        (WebCore::WorkerInspectorController::WorkerInspectorController):
        * inspector/WorkerProfilerAgent.cpp: Added.
        (WebCore::WorkerProfilerAgent::WorkerProfilerAgent):
        (WebCore::WorkerProfilerAgent::profilingGlobalExecState):
        * inspector/WorkerProfilerAgent.h: Added.
        (WebCore::WorkerProfilerAgent::~WorkerProfilerAgent):
        * loader/appcache/ApplicationCacheGroup.cpp:
        * page/PageConsole.cpp:
        (WebCore::PageConsole::profile):
        (WebCore::PageConsole::profileEnd):
        (WebCore::PageConsole::time): Deleted.
        (WebCore::PageConsole::timeEnd): Deleted.
        (WebCore::PageConsole::timeStamp): Deleted.
        * page/PageConsole.h:
        * testing/Internals.cpp:
        * testing/Internals.h:
        * xml/XMLHttpRequest.cpp:

2014-04-18  Simon Fraser  <simon.fraser@apple.com>

        Contents of directly composited image layers are sometimes missing
        https://bugs.webkit.org/show_bug.cgi?id=131880

        Reviewed by Tim Horton.
        
        RenderLayerBacking::updateGraphicsLayerGeometry() tested whether a
        GraphicsLayer had a contents layer to determine whether to call code
        that updates the contents rect. However, on Mac, we don't make a contents
        layer until later at layer flush time. That would result in an empty
        contentsRect being set.
        
        Fix by renaming GraphicsLayer::hasContentsLayer() to usesContentsLayer(),
        and on Mac consulting the m_contentsLayerPurpose flag, which is set
        at the appropriate time.

        Test: compositing/images/update-content-rect.html

        * platform/ScrollView.cpp:
        (WebCore::positionScrollbarLayer):
        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::getDebugBorderInfo):
        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::usesContentsLayer):
        (WebCore::GraphicsLayer::hasContentsLayer): Deleted.
        * platform/graphics/ca/GraphicsLayerCA.h:
        (WebCore::GraphicsLayerCA::hasContentsLayer): Deleted.
        * platform/graphics/texmap/GraphicsLayerTextureMapper.h:
        (WebCore::GraphicsLayerTextureMapper::usesContentsLayer):
        (WebCore::GraphicsLayerTextureMapper::hasContentsLayer): Deleted.
        * platform/graphics/texmap/coordinated/CoordinatedGraphicsLayer.h:
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        (WebCore::RenderLayerBacking::positionOverflowControlsLayers):
        (WebCore::RenderLayerBacking::compositingLayerType):

2014-04-18  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167527.
        https://bugs.webkit.org/show_bug.cgi?id=131883

        Broke 32-bit build (Requested by ap on #webkit).

        Reverted changeset:

        "[Mac] implement WebKitDataCue"
        https://bugs.webkit.org/show_bug.cgi?id=131799
        http://trac.webkit.org/changeset/167527

2014-04-18  Eric Carlson  <eric.carlson@apple.com>

        [Mac] implement WebKitDataCue
        https://bugs.webkit.org/show_bug.cgi?id=131799

        Reviewed by Dean Jackson.

        Tests: http/tests/media/track-in-band-hls-metadata.html
               media/track/track-datacue-value.html

        * Configurations/FeatureDefines.xcconfig: Define ENABLE_DATACUE_VALUE.
        * DerivedSources.make: Add ENABLE_DATACUE_VALUE to HTML_FLAGS when appropriate.

        * CMakeLists.txt: Add JSDataCueCustom.cpp.
        * bindings/js/JSBindingsAllInOne.cpp:
        * WebCore.xcodeproj/project.pbxproj: Add new files.

        * bindings/js/JSDataCueCustom.cpp: Added.
        (WebCore::JSDataCue::value): 
        (WebCore::JSDataCue::setValue):
        (WebCore::JSDataCueConstructor::constructJSDataCue): Custom constructor.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::updateActiveTextTrackCues): Drive-by fixes: don't schedule timeupdate
            events when paused, don't call sort on an Vector that can't be sorted.

        * html/track/DataCue.cpp:
        (WebCore::DataCue::DataCue): Initialize m_type.
        (WebCore::DataCue::~DataCue): Unprotect the JSValue if necessary.
        (WebCore::DataCue::data): Ask the platform value for data if non-null.
        (WebCore::DataCue::setData): Clear m_platformValue and m_value.
        (WebCore::DataCue::isEqual): New.
        (WebCore::DataCue::value): Return a JSValue from the platform value, or the value passed
            to the constructor/set by script.
        (WebCore::DataCue::setValue): Set m_value.
        * html/track/DataCue.h:
        * html/track/DataCue.idl:

        * html/track/InbandDataTextTrack.cpp:
        (WebCore::InbandDataTextTrack::addDataCue): Don't add the same cue more than once.
        (WebCore::InbandDataTextTrack::updateDataCue): Update a cue's duration.
        (WebCore::InbandDataTextTrack::removeDataCue): Remove an incomplete cue.
        (WebCore::InbandDataTextTrack::removeCue): Remove a cue from the incomplete cue map if necessary.
        * html/track/InbandDataTextTrack.h:

        * html/track/InbandGenericTextTrack.cpp:
        (WebCore::InbandGenericTextTrack::addGenericCue): CueMatchRules is now in TextTrackCue instead
            of VTTCue.
        * html/track/InbandTextTrack.h:

        * html/track/InbandWebVTTTextTrack.cpp:
        (WebCore::InbandWebVTTTextTrack::newCuesParsed): Ditto.

        * html/track/TextTrack.cpp:
        (WebCore::TextTrack::hasCue): Ditto.
        * html/track/TextTrack.h:

        * html/track/TextTrackCue.cpp:
        (WebCore::TextTrackCue::isEqual): New, test base class equality.
        * html/track/TextTrackCue.h:

        * html/track/TextTrackCueGeneric.cpp:
        (WebCore::TextTrackCueGeneric::isEqual): Call TextTrackCue::isEqual first.
        * html/track/TextTrackCueGeneric.h:

        * html/track/VTTCue.cpp:
        (WebCore::VTTCue::isEqual): Call TextTrackCue::isEqual first.
        * html/track/VTTCue.h:

        * platform/SerializedPlatformRepresentation.h: Added.
        (WebCore::SerializedPlatformRepresentation::~SerializedPlatformRepresentation):
        (WebCore::SerializedPlatformRepresentation::SerializedPlatformRepresentation):

        * platform/graphics/InbandTextTrackPrivateClient.h: Add methods for DataCue with SerializedPlatformRepresentation.

        * platform/graphics/avfoundation/InbandMetadataTextTrackPrivateAVF.cpp: Added.
        (WebCore::InbandMetadataTextTrackPrivateAVF::create):
        (WebCore::InbandMetadataTextTrackPrivateAVF::InbandMetadataTextTrackPrivateAVF):
        (WebCore::InbandMetadataTextTrackPrivateAVF::~InbandMetadataTextTrackPrivateAVF):
        (WebCore::InbandMetadataTextTrackPrivateAVF::addDataCue):
        (WebCore::InbandMetadataTextTrackPrivateAVF::updatePendingCueEndTimes):
        (WebCore::InbandMetadataTextTrackPrivateAVF::flushPartialCues):
        * platform/graphics/avfoundation/InbandMetadataTextTrackPrivateAVF.h: Added.

        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.cpp:
        (WebCore::MediaPlayerPrivateAVFoundation::seekWithTolerance): currentTrack -> currentTextTrack.
        (WebCore::MediaPlayerPrivateAVFoundation::seekCompleted): Ditto.
        (WebCore::MediaPlayerPrivateAVFoundation::configureInbandTracks): Ditto.
        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.h:
        (WebCore::MediaPlayerPrivateAVFoundation::setCurrentTextTrack):
        (WebCore::MediaPlayerPrivateAVFoundation::setCurrentTrack): Deleted.

        Renamed currentTrack and setCurrentTrack to currentTextTrack and setCurrentTextTrack.
        * platform/graphics/avfoundation/cf/MediaPlayerPrivateAVFoundationCF.cpp:
        (WebCore::AVFWrapper::currentTextTrack):
        (WebCore::MediaPlayerPrivateAVFoundationCF::setCurrentTextTrack):
        (WebCore::MediaPlayerPrivateAVFoundationCF::currentTextTrack):
        (WebCore::AVFWrapper::setCurrentTextTrack):
        (WebCore::AVFWrapper::AVFWrapper):
        (WebCore::AVFWrapper::processCue):
        (WebCore::AVFWrapper::currentTrack): Deleted.
        (WebCore::MediaPlayerPrivateAVFoundationCF::setCurrentTrack): Deleted.
        (WebCore::MediaPlayerPrivateAVFoundationCF::currentTrack): Deleted.
        (WebCore::AVFWrapper::setCurrentTrack): Deleted.
        * platform/graphics/avfoundation/cf/MediaPlayerPrivateAVFoundationCF.h:

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::MediaPlayerPrivateAVFoundationObjC):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::seekToTime): currentTrack -> currentTextTrack
        (WebCore::MediaPlayerPrivateAVFoundationObjC::tracksChanged): currentTrack -> currentTextTrack.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::processMetadataTrack): New.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::processCue): m_currentTrack -> m_currentTextTrack.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::flushCues): Ditto.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::setCurrentTextTrack): Renamed from setCurrentTextTrack.
        (WebCore::metadataType): Map an AVFoundation metadata key space to a metadata cue type.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::metadataDidArrive): Process new metadata.
        (-[WebCoreAVFMovieObserver observeValueForKeyPath:ofObject:change:context:]):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::setCurrentTrack): Deleted.

        Create a JSValue representation from an AVMetadataItem.
        * platform/mac/SerializedPlatformRepresentationMac.h: Added.
        (WebCore::SerializedPlatformRepresentationMac::platformType):
        (WebCore::SerializedPlatformRepresentationMac::nativeValue):
        * platform/mac/SerializedPlatformRepresentationMac.mm: Added.
        (WebCore::SerializedPlatformRepresentationMac::SerializedPlatformRepresentationMac):
        (WebCore::SerializedPlatformRepresentationMac::~SerializedPlatformRepresentationMac):
        (WebCore::SerializedPlatformRepresentationMac::create):
        (WebCore::SerializedPlatformRepresentationMac::data):
        (WebCore::SerializedPlatformRepresentationMac::deserialize):
        (WebCore::SerializedPlatformRepresentationMac::isEqual):
        (WebCore::toSerializedPlatformRepresentationMac):
        (WebCore::jsValueWithValueInContext):
        (WebCore::jsValueWithDataInContext):
        (WebCore::jsValueWithArrayInContext):
        (WebCore::jsValueWithDictionaryInContext):
        (WebCore::jsValueWithAVMetadataItemInContext):

2014-04-18  Jon Honeycutt  <jhoneycutt@apple.com>

        Harden RenderInline::inlineElementContinuation()

        <https://bugs.webkit.org/show_bug.cgi?id=131858>

        Reviewed by Sam Weinig.

        No new tests, as there are no known cases of this happening.

        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::inlineElementContinuation):
        Return nullptr if the continuation is neither a RenderInline nor a
        RenderBlock.

2014-04-18  Stephanie Lewis  <slewis@apple.com>

        We shouldn’t create page throttlers for other pages than WebKit2 pages.
        Part of <rdar://problem/16473045> Visibility state counters are often incorrect
        https://bugs.webkit.org/show_bug.cgi?id=131696

        Reviewed by Gavin Barraclough.

        No new test since not web exposed.

        Page throttlers were being created for SVG images and other page instances that
        were not accurately tracking the states that enable and disable page throttling.
        Make the throttler an unique ptr and only initialize it for WebKit2.

        This also fixes an inefficiency where we would throttle a new page on creation because 
        we assumed it was visible even if that was not the case.

        * WebCore.exp.in:
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute): Check page throttler exists.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::started): ditto
        * page/Page.cpp:
        (WebCore::Page::Page): Don’t automatically create page throttler.
        (WebCore::Page::createPageThrottler): Create page throttler.
        (WebCore::Page::setViewState): Check page throttler exists.
        * page/Page.h:
        (WebCore::Page::pageThrottler): Make the page throttler a unique ptr.
        * page/PageThrottler.h:
        * page/Settings.cpp: 
        (WebCore::Settings::setHiddenPageDOMTimerThrottlingEnabled): Check page throttler exists.

2014-04-18  Stephanie Lewis  <slewis@apple.com>

        Move DOM throttling out of the page throttler
        <rdar://problem/16473004>
        https://bugs.webkit.org/show_bug.cgi?id=131697

        Reviewed by Gavin Barraclough.

        No new tests since it's not web exposed.

        DOM timer throttling is currently part of the page throttler which uses per process 
        state and per page state to determine when to throttle.  This led us to being overly 
        conservative when turning DOM throttling off.  It should only respond to view state changes.

        Additionally since creating extra page throttlers SVG images caused bugs 
        in tracking state we'll reserve the page throttler for WebKit2 views.  To avoid regressing 
        WebKit1 we should move DOM timer throttling back to the page.

        * page/Page.cpp:
        (WebCore::Page::Page): set DOM timer throttling.
        (WebCore::Page::setIsVisuallyIdleInternal): ditto.
        (WebCore::Page::hiddenPageDOMTimerThrottlingStateChanged): ditto.
        (WebCore::Page::setIsVisible): Update view state masks for WebKit1 to include IsVisibleOrOccluded and IsVisuallyIdle
        * page/Page.h:
        * page/PageThrottler.cpp:
        (WebCore::PageThrottler::PageThrottler): remove DOM timer throttling.
        (WebCore::PageThrottler::started): ditto.
        (WebCore::PageThrottler::stopped): ditto.
        (WebCore::PageThrottler::hiddenPageDOMTimerThrottlingStateChanged): Deleted.
        * page/PageThrottler.h:
        * page/Settings.cpp:
        (WebCore::Settings::setHiddenPageDOMTimerThrottlingEnabled):

2014-04-18  Dean Jackson  <dino@apple.com>

        [WebGL] Limit maximum texture sizes on older Intel hardware
        https://bugs.webkit.org/show_bug.cgi?id=131867

        Reviewed by Geoffrey Garen.

        Both Chrome and Firefox limit the MAX_TEXTURE_SIZE on
        older Intel hardware to be at most 4096. This does the
        same for WebKit.

        * platform/graphics/Extensions3D.h: Add requiresRestrictedMaximumTextureSize() accessor.
        * platform/graphics/opengl/Extensions3DOpenGLCommon.cpp:
        (WebCore::Extensions3DOpenGLCommon::Extensions3DOpenGLCommon): Record the value of GL_RENDERER
        and test for "Intel HD Graphics 3000", which is the problematic hardware.
        * platform/graphics/opengl/Extensions3DOpenGLCommon.h:
        (WebCore::Extensions3DOpenGLCommon::requiresRestrictedMaximumTextureSize): Getter.
        * platform/graphics/opengl/GraphicsContext3DOpenGL.cpp:
        (WebCore::GraphicsContext3D::getIntegerv): If you're asking for MAX_TEXTURE_SIZE or
        MAX_CUBE_MAP_TEXTURE_SIZE, and you're on problematic hardware, return a clamped value
        (4096 and 1024 respectively).

2014-04-18  Hans Muller  <hmuller@adobe.com>

        [CSS Shapes] Add parsing support for gradients
        https://bugs.webkit.org/show_bug.cgi?id=131444

        Reviewed by Bem Jones-Bey.

        Added support for shape-outside gradient values.

        Test: fast/shapes/shape-outside-floats/shape-outside-linear-gradient.html

        * css/DeprecatedStyleBuilder.cpp:
        (WebCore::ApplyPropertyShape::applyValue): Accept generated images as shape-outside values.
        * rendering/shapes/ShapeOutsideInfo.cpp:
        (WebCore::checkShapeImageOrigin): Generated images get a pass, others do not.
        (WebCore::getShapeImageAndRect): Use StyleImage::image() to get a generated image.
        (WebCore::ShapeOutsideInfo::isEnabledFor):
        * rendering/style/ShapeValue.h:
        (WebCore::ShapeValue::isImageValid): Generated images are always considered valid.

2014-04-18  Brady Eidson  <beidson@apple.com>

        REGRESSION (r155700): Pasting an image into content-editable regions is broken.
        <rdar://problem/16654156> and https://bugs.webkit.org/show_bug.cgi?id=131844

        Reviewed by Enrica Casucci.

        * editing/mac/EditorMac.mm:
        (WebCore::Editor::createFragmentForImageResourceAndAddResource): Add the ArchiveResource before
          creating the element that uses it.

2014-04-18  Simon Fraser  <simon.fraser@apple.com>

        [iOS WK2] Make window.scroll() and window.scrollBy() work
        https://bugs.webkit.org/show_bug.cgi?id=131848
        <rdar://problem/16638319>

        Reviewed by Beth Dakin.

        The scrolling-related functions in DOMWindow were #ifdeffed for iOS
        to use the hacky WK1-specific "actual scroll" functions, which do nothing
        in WK2.
        
        Fix by adding a scroll position wrapper (contentsScrollPosition) which does
        the right thing on WK1 and WK2, and change almost all the places that used "actualScrollPosition"
        to us it (with the exception of contentsScrollOffset() in MouseRelatedEvent.cpp, which has
        confusing scaling behavior).

        * dom/MouseRelatedEvent.cpp:
        (WebCore::MouseRelatedEvent::MouseRelatedEvent):
        * dom/TreeScope.cpp:
        (WebCore::nodeFromPoint): Remove #ifdefs. 
        * html/HTMLBodyElement.cpp:
        (WebCore::HTMLBodyElement::scrollLeft):
        (WebCore::HTMLBodyElement::scrollTop):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::scrollX):
        (WebCore::DOMWindow::scrollY):
        (WebCore::DOMWindow::scrollBy):
        (WebCore::DOMWindow::scrollTo):
        * platform/ScrollView.cpp:
        (WebCore::ScrollView::contentsScrollPosition):
        (WebCore::ScrollView::setContentsScrollPosition):
        * platform/ScrollView.h:

2014-04-18  Simon Fraser  <simon.fraser@apple.com>

        Worse animation performance on pages with 3D transforms
        https://bugs.webkit.org/show_bug.cgi?id=131838
        <rdar://problem/16428630&15705876>

        Reviewed by Dean Jackson.
        
        r155977 added logic to adjust the contentsScale of compositing layers
        based on a root-relative transform. However, this resulted in
        the contentsScale continually changing on layers whose transforms
        are changed dynamically, which caused lots of expensive painting.
        
        Fix by bucketing the part of the scale computed from the root-relative transform
        into buckets of 0.25 via rounding.

        Test: compositing/contents-scale/rounded-contents-scale.html

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::clampedContentsScaleForScale):
        (WebCore::GraphicsLayerCA::updateContentsOpaque):
        (WebCore::GraphicsLayerCA::updateContentsScale):
        (WebCore::GraphicsLayerCA::updateContentsVisibility): Deleted.
        (WebCore::GraphicsLayerCA::animatedLayerClones): Deleted.

2014-04-18  Simon Fraser  <simon.fraser@apple.com>

        Remove some includes from image-related headers, and Document.h
        https://bugs.webkit.org/show_bug.cgi?id=131797

        Reviewed by Martin Robinson.

        Remove some #includes from Document.h, DragImage.h, GradientImage.h,
        Image.h, and ImageBuffer.h and deal with the fallout.

        * dom/ContainerNode.h:
        * dom/Document.cpp:
        (WebCore::Document::setInputCursor):
        * dom/Document.h:
        (WebCore::Document::inputCursor):
        * dom/MutationObserverRegistration.cpp:
        * html/canvas/WebGLRenderingContext.cpp:
        * page/FrameSnapshotting.cpp:
        * page/Page.cpp:
        * platform/DragImage.h:
        * platform/graphics/BitmapImage.cpp:
        * platform/graphics/GradientImage.cpp:
        (WebCore::GradientImage::GradientImage):
        (WebCore::GradientImage::~GradientImage):
        * platform/graphics/GradientImage.h:
        * platform/graphics/Image.h:
        * platform/graphics/ImageBuffer.cpp:
        * platform/graphics/ImageBuffer.h:
        (WebCore::ImageBuffer::create):
        (WebCore::ImageBuffer::internalSize):
        (WebCore::ImageBuffer::logicalSize):
        (WebCore::ImageBuffer::baseTransform):
        (WebCore::ImageBuffer::spaceSize):
        (WebCore::ImageBuffer::setSpaceSize):
        * rendering/RenderThemeMac.mm:
        * rendering/shapes/Shape.cpp:
        * rendering/svg/RenderSVGContainer.cpp:
        * svg/SVGURIReference.h:

2014-04-18  Gabor Rapcsanyi  <rgabor@webkit.org>

        Unreviewed. ARM64 buildfix after r167473.

        * platform/audio/DenormalDisabler.h: Put back the MathExtras.h include.

2014-04-18  Radu Stavila  <stavila@adobe.com>

        [CSSRegions] Incorrect background paint on positioned element hover
        https://bugs.webkit.org/show_bug.cgi?id=131617

        Reviewed by Andrei Bucur.

        When computing the repaint rect for absolute elements flowed into regions, the Y location of the
        region within the flow thread must no longer be added to the repaint rect's location because absolute
        positioned elements get pushed down through the regions by their absolute top. So adding the region's
        position in the flow thread and then adding the element's absolute top would cause us to add
        something twice.

        Tests: fast/regions/repaint/repaint-absolute-pushed-to-next-region.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computeRectForRepaint):

2014-04-18  Philippe Normand  <pnormand@igalia.com>

        Remove NETWORK_INFO support
        https://bugs.webkit.org/show_bug.cgi?id=131841

        Reviewed by Gyuyoung Kim.

        * CMakeLists.txt:
        * Modules/networkinfo/NavigatorNetworkInfoConnection.cpp: Removed.
        * Modules/networkinfo/NavigatorNetworkInfoConnection.h: Removed.
        * Modules/networkinfo/NavigatorNetworkInfoConnection.idl: Removed.
        * Modules/networkinfo/NetworkInfo.cpp: Removed.
        * Modules/networkinfo/NetworkInfo.h: Removed.
        * Modules/networkinfo/NetworkInfoClient.h: Removed.
        * Modules/networkinfo/NetworkInfoConnection.cpp: Removed.
        * Modules/networkinfo/NetworkInfoConnection.h: Removed.
        * Modules/networkinfo/NetworkInfoConnection.idl: Removed.
        * Modules/networkinfo/NetworkInfoController.cpp: Removed.
        * Modules/networkinfo/NetworkInfoController.h: Removed.
        * PlatformEfl.cmake:
        * dom/EventTargetFactory.in:
        * platform/efl/NetworkInfoProviderEfl.cpp: Removed.
        * platform/efl/NetworkInfoProviderEfl.h: Removed.
        * testing/Internals.cpp:
        (WebCore::Internals::setNetworkInformation): Deleted.
        * testing/Internals.h:
        * testing/Internals.idl:

2014-04-17  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167478.
        https://bugs.webkit.org/show_bug.cgi?id=131840

        Broke multicol tests (Requested by ap on #webkit).

        Reverted changeset:

        "[New Multicolumn] Pagination mode messed up with non-inline
        axis and reversed direction."
        https://bugs.webkit.org/show_bug.cgi?id=131811
        http://trac.webkit.org/changeset/167478

2014-04-17  Daniel Bates  <dabates@apple.com>

        [iOS] Hook up screen.{availHeight, availWidth, height, width}
        https://bugs.webkit.org/show_bug.cgi?id=131821
        <rdar://problem/16413795>

        Reviewed by Benjamin Poulain and Tim Horton.

        Implement support for screen.{availHeight, availWidth, height, width} in WebKit2 for iOS.

        Additionally substitute "screenSize" for "viewporScreenSize" to make the code more understandable.

        * WebCore.exp.in: Export symbol for WebCore System Interface function
        _wkGetAvailableScreenSize.
        * dom/Document.cpp:
        (WebCore::Document::processViewport): Modified to call Chrome::screenSize(); formerly it
        called ChromeClient::viewportScreenSize().
        * page/Chrome.cpp:
        (WebCore::Chrome::screenSize): Added; turns around and calls ChromeClient::screenSize().
        (WebCore::Chrome::availableScreenSize): Added; turns around and calls ChromeClient::availableScreenSize().
        * page/Chrome.h:
        * page/ChromeClient.h:
        (WebCore::ChromeClient::screenSize): Renamed; formerly named viewportScreenSize.
        (WebCore::ChromeClient::availableScreenSize): Added; default implementation, which
        returns the size of Chrome::windowRect().
        * page/ViewportConfiguration.cpp:
        (WebCore::ViewportConfiguration::textDocumentParameters):
        * platform/HostWindow.h: Added declarations for availableScreenSize() and screenSize()
        so that a caller (e.g. WebCore::screenRect()) can query for such screen information using
        only the HostWindow interface. That is, a caller doesn't need to know about ChromeClient.
        * platform/ios/PlatformScreenIOS.mm:
        (WebCore::screenRect): Modified to query HostWindow::screenSize() when computing the
        screen rectangle in WebKit2 for iOS.
        (WebCore::screenAvailableRect): Modified to query HostWindow::availableScreenSize()
        when computing the available screen rectangle in WebKit2 for iOS.
        * platform/ios/WebCoreSystemInterfaceIOS.mm:
        * platform/mac/WebCoreSystemInterface.h:

2014-04-17  Darin Adler  <darin@apple.com>

        origin spoofing possible (HTTP Origin, postMessage event.origin) due to inappropriate URL escape sequence decoding
        https://bugs.webkit.org/show_bug.cgi?id=131837
        rdar://problem/15211936

        Reviewed by Anders Carlsson and Dave Hyatt.

        Tests: fast/dom/DOMURL/parsing.html
               fast/dom/HTMLAnchorElement/anchor-element-href-parsing.html

        * platform/URL.cpp:
        (WebCore::URL::host): Removed unnecessary call to decodeURLEscapeSequences, which caused
        problems and was not needed.

2014-04-17  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Pagination mode messed up with non-inline axis and reversed direction.
        https://bugs.webkit.org/show_bug.cgi?id=131811

        Reviewed by Dean Jackson.

        Added fast/multicol/newmulticol/compare-with-old-impl/BottomToTop-tb.html
        
        With block axis pagination mode, it is possible to set a column height that is not the same
        as the available fill height for a block. The new multi-column code had the assumption that
        the column height was the same as the amount of fill room you had available. This is not
        the case.
        
        To correct the issue, I added a member variable to RenderMultiColumnSet that stores the
        available column height as a separate variable from the computed column height. This allows
        the pagination API to specify a different column height that is not the same as the view's
        content height.

        Even though it isn't involved in the solution, I also patched pageOrViewLogicalHeight on
        RenderView to work with the new column code as well.

        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::RenderMultiColumnSet):
        (WebCore::RenderMultiColumnSet::setAndConstrainColumnHeight):
        (WebCore::RenderMultiColumnSet::computeLogicalHeight):
        * rendering/RenderMultiColumnSet.h:
        * rendering/RenderView.cpp:
        (WebCore::RenderView::pageOrViewLogicalHeight):

2014-04-17  Anders Carlsson  <andersca@apple.com>

        Build fix.

        * svg/animation/SMILTime.h:

2014-04-17  Bem Jones-Bey  <bjonesbe@adobe.com>

        Unreviewed, rolling out r167384.

        Sounds like this isn't the right fix, and causes generation to
        run far too often.

        Reverted changeset:

        "Fix CodeGenerator.pm to only write files if the generated
        content has changed"
        https://bugs.webkit.org/show_bug.cgi?id=131756
        http://trac.webkit.org/changeset/167384

2014-04-17  Ryuan Choi  <ryuan.choi@samsung.com>

        Remove unnecessary MathExtras.h includes
        https://bugs.webkit.org/show_bug.cgi?id=131789

        Reviewed by Anders Carlsson.

        * platform/FileSystem.h:
        * platform/Scrollbar.h:
        * platform/animation/AnimationUtilities.h:
        * platform/audio/DenormalDisabler.h:
        * platform/graphics/Font.h:
        * platform/graphics/IntPoint.h: Included cmath instad of MathExtras.h.
        * platform/graphics/LayoutPoint.h:
        * platform/graphics/cairo/GraphicsContextPlatformPrivateCairo.h:
        * rendering/svg/SVGMarkerData.h:
        * svg/animation/SMILTime.h:

2014-04-16  Huang Dongsung  <luxtella@company100.net>

        Make RenderLayerBacking get the timingFunction of the correct animation.
        https://bugs.webkit.org/show_bug.cgi?id=100632

        Reviewed by Simon Fraser.

        When an element has multiple animations that have different timingFunctions,
        the progress of each animation should be calculated using its respective
        timingFunction. But at this point, the timingFunction of the first animation is
        only used in RenderLayerBacking::startAnimation(), regardless of how many
        animations the element has.

        getAnimationFromStyleByName() was introduced in r89462 so that the
        timingFunction of the correct animation searched by its name would be
        used. This patch moves the function to KeyframeValue::timingFunction()
        so that RenderLayerBacking reuses this method.

        Test: animations/keyframe-multiple-timing-functions-transform.html

        * page/animation/KeyframeAnimation.cpp:
        (WebCore::KeyframeAnimation::fetchIntervalEndpointsForProperty):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::startAnimation):
        * rendering/style/KeyframeList.cpp:
        (WebCore::KeyframeValue::timingFunction):
        (WebCore):
        * rendering/style/KeyframeList.h:
        (WebCore):
        (KeyframeValue):

2014-04-17  Andreas Kling  <akling@apple.com>

        Rollout: Add a way to cache never-changing IDL attributes in the wrapper.
        <https://webkit.org/b/131759>

        This behavior may be observable from the web, so we can't do it this way.

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):
        * bindings/scripts/IDLAttributes.txt:
        * bindings/scripts/test/*:
        * dom/Element.idl:
        * dom/Node.idl:

2014-04-17  Andreas Kling  <akling@apple.com>

        Cheesy Mountain Lion build fix.

        * platform/MemoryPressureHandler.h:
        (WebCore::MemoryPressureHandler::ReliefLogger::logString):

2014-04-17  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Column rules don't respect the specified stacking order.
        https://bugs.webkit.org/show_bug.cgi?id=131804

        Reviewed by Beth Dakin.

        Added fast/multicol/newmulticol/compare_with_old_impl/column-rules-stacking.html

        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::paintBoxDecorations):
        * rendering/RenderBlockFlow.h:
        Override paintBoxDecorations for block flows so that we can iterate over our column sets
        and paint their rules just after painting our background and border. We can't wait until
        the child column sets paint their backgrounds, since that is specified as being above negative
        z-index children. We have to pretend that the column sets don't exist as
        far as column rule painting is concerned.

        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::paintObject): Deleted.
        * rendering/RenderMultiColumnSet.h:
        Turn paintObject in RenderMultiColumnSet into an override that doesn't paint anything.

2014-04-17  Beth Dakin  <bdakin@apple.com>

        Hit-testing is incorrect for plugins inside iframes when there is a 
        topContentInset
        https://bugs.webkit.org/show_bug.cgi?id=131826
        -and corresponding-
        <rdar://problem/16649996>

        Reviewed by Tim Horton.

        I missed one coordinate-conversion spot when getting hit-testing to work. Like 
        headerHeight() which also manipulates the location of the root layer, 
        topContentInset() has to be factored into all of these conversions.
        * page/FrameView.cpp:
        (WebCore::FrameView::convertFromRenderer):

2014-04-17  Andreas Kling  <akling@apple.com>

        Stub out MemoryPressureHandler::ReliefLogger on older OS X'es.

        * platform/cocoa/MemoryPressureHandlerCocoa.mm:
        (WebCore::MemoryPressureHandler::ReliefLogger::platformLog):
        (WebCore::MemoryPressureHandler::ReliefLogger::platformMemoryUsage):

2014-04-17  Dirk Schulze  <krit@webkit.org>

        Remove CANVAS_PATH where possible
        https://bugs.webkit.org/show_bug.cgi?id=131788

        Reviewed by Dean Jackson.

        Since Firefox and Chrome ship the same interoperable subset of Path2D soon, 
        it is time to remove CANVAS_PATH where possible.

        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::clip):
        (WebCore::CanvasRenderingContext2D::isPointInStroke):
        * html/canvas/CanvasRenderingContext2D.h:
        * html/canvas/CanvasRenderingContext2D.idl:
        * html/canvas/DOMPath.h:
        * html/canvas/DOMPath.idl:

2014-04-17  Brendan Long  <b.long@cablelabs.com>

        [GStreamer] Store TrackPrivateBaseGStreamer's label and language as AtomicStrings
        https://bugs.webkit.org/show_bug.cgi?id=130404

        Reviewed by Philippe Normand.

        No new tests, this just makes things more efficient.

        * platform/graphics/gstreamer/TrackPrivateBaseGStreamer.cpp:
        (WebCore::TrackPrivateBaseGStreamer::getLanguageCode):
        (WebCore::TrackPrivateBaseGStreamer::getTag):
        * platform/graphics/gstreamer/TrackPrivateBaseGStreamer.h:

2014-04-17  Andreas Kling  <akling@apple.com>

        Fix Cocoa build.

        * platform/cocoa/MemoryPressureHandlerCocoa.mm:
        (WebCore::MemoryPressureHandler::ReliefLogger::platformMemoryUsage):

2014-04-17  Rik Cabanier  <cabanier@adobe.com>

        [CSS Blending] Remove the -webkit- prefix for mix-blend-mode and isolation CSS properties
        https://bugs.webkit.org/show_bug.cgi?id=131355

        Reviewed by Dean Jackson.

        Removed webkit prefix from mix-blend-mode and isolation. These properties
        never shipped and their spec is now in CR.

        Covered by existing tests.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::ComputedStyleExtractor::propertyValue):
        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue):
        (WebCore::isKeywordPropertyID):
        (WebCore::CSSParser::parseValue):
        * css/CSSPropertyNames.in:
        * css/DeprecatedStyleBuilder.cpp:
        (WebCore::DeprecatedStyleBuilder::DeprecatedStyleBuilder):

2014-04-17  David Kilzer  <ddkilzer@apple.com>

        Tidy up isIsolatedInline() and highestContainingIsolateWithinRoot()
        <http://webkit.org/b/131117>

        Reviewed by Daniel Bates.

        Based on review feedback for r166650.

        * rendering/InlineIterator.h:
        (WebCore::isIsolatedInline):
        - Switch argument to a reference since it is never called with a
          nullptr.
        (WebCore::highestContainingIsolateWithinRoot):
        - Switch first argument to a reference since it's never a
          nullptr.
        - Use nullptr for pointer initialization.
        - Switch while() loop to for() loop. Pass reference to
          isIsolatedInline().
        (WebCore::numberOfIsolateAncestors):
        - Switch while() loop to for() loop. Pass reference to
          isIsolatedInline().
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::constructBidiRunsForSegment):
        - Rename startObj to startObject.
        - No longer need to pass the address of startObject here.

2014-04-17  Andreas Kling  <akling@apple.com>

        Log number of bytes reclaimed at each step of memory pressure relief.
        <https://webkit.org/b/131751>

        Reviewed by Antti Koivisto.

        * platform/MemoryPressureHandler.h:
        * platform/MemoryPressureHandler.cpp:
        (WebCore::MemoryPressureHandler::ReliefLogger::platformLog):
        (WebCore::MemoryPressureHandler::ReliefLogger::platformMemoryUsage):
        (WebCore::MemoryPressureHandler::ReliefLogger::ReliefLogger):
        (WebCore::MemoryPressureHandler::ReliefLogger::~ReliefLogger):
        * platform/cocoa/MemoryPressureHandlerCocoa.mm:
        (WebCore::MemoryPressureHandlerCocoa::ReliefLogger::platformMemoryUsage):
        (WebCore::MemoryPressureHandlerCocoa::ReliefLogger::platformLog):

            Add a simple RAII helper to check memory usage before and after
            a block of code, and then dump the delta to system log.

        (WebCore::MemoryPressureHandler::releaseMemory):
        * platform/cocoa/MemoryPressureHandlerCocoa.mm:
        (WebCore::MemoryPressureHandler::platformReleaseMemory):

            Use ReliefLogger to annotate the various attempts to reduce
            our memory footprint. This will help us understand the efficiency
            of our current strategy.

2014-04-17  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] columnNumberForOffset is not patched for new multicolumn code yet.
        https://bugs.webkit.org/show_bug.cgi?id=131740

        Reviewed by Enrica Casucci.
        
        I took the opportunity to clean this code up while adding support for the new columns.
        columnNumberForOffset only applied for paginated RenderViews and was really about
        pages and not columns. It also only returns an actual page number if the columns are
        block progressed (e.g., right-to-left vertical Japanese books).
        
        Therefore I renamed columnNumberForOffset to pageNumberForBlockProgressionOffset and
        moved it to RenderView.
        
        I also renamed the member variable of SelectionRect to be pageNumber instead of
        columnNumber in order to make it more obvious that this isn't about columns per se
        (since the fact that we implemented RenderView's pagination mode using columns is an
        implementation detail).

        * dom/Range.cpp:
        (WebCore::coalesceSelectionRects):
        (WebCore::Range::collectSelectionRects):
        * platform/ios/SelectionRect.h:
        (WebCore::SelectionRect::pageNumber):
        (WebCore::SelectionRect::columnNumber): Deleted.
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::collectSelectionRects):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::collectSelectionRects):
        (WebCore::RenderObject::columnNumberForOffset): Deleted.
        * rendering/RenderObject.h:
        * rendering/RenderText.cpp:
        (WebCore::RenderText::collectSelectionRects):
        * rendering/RenderView.cpp:
        (WebCore::RenderView::pageNumberForBlockProgressionOffset):
        * rendering/RenderView.h:

2014-04-16  Brent Fulgham  <bfulgham@apple.com>

        [Win] A few final cleanups to the DataObject classes.
        https://bugs.webkit.org/show_bug.cgi?id=131784

        Reviewed by Anders Carlsson.

        * platform/win/WCDataObject.cpp:
        (WebCore::WCDataObject::clearData): Use 'last()' method.

2014-04-15  Jer Noble  <jer.noble@apple.com>

        Fullscreen media controls are unusable in pagination mode
        https://bugs.webkit.org/show_bug.cgi?id=131705

        Reviewed by Darin Adler.

        When pagination mode is enabled, the full screen media will (depending on the width of the
        pagination columns) overflow its column, and hit testing will be clipped to the column. In extreme
        cases, where the column width < 0.5 * media element width, the media controls will be entirely
        unclickable.

        Rather than making the RenderFullScreen a child of the full screen element's parent's renderer,
        make it a child of the RenderView, putting it outside of the columns entirely. Always create and
        insert the fullscreenRenderer's placeholder, using it as the remembered insertion point for the
        fullscreen element's renderer when we exit full screen.

        Drive-by fix: don't wrap the full screen element's renderer in webkitWillEnterFullScreenForElement();
        it will just be re-wrapped in createRendererIfNeeded().

        * dom/Document.cpp:
        (WebCore::Document::webkitWillEnterFullScreenForElement): Don't wrap the full screen element's renderer.
        (WebCore::Document::setFullScreenRenderer): Call setPlaceholderStyle.
        * rendering/RenderFullScreen.cpp:
        (WebCore::RenderFullScreenPlaceholder::willBeDestroyed): Call clearPlaceholder.
        (WebCore::RenderFullScreen::wrapRenderer): Make fullscreenRenderer a child of the view().
        (WebCore::RenderFullScreen::unwrapRenderer): Return the children to the parent of the placeholder().
        (WebCore::RenderFullScreen::clearPlaceholder): Renamed from setPlaceholder().
        (WebCore::RenderFullScreen::ensurePlaceholder): Added. 
        (WebCore::RenderFullScreen::setPlaceholderStyle): Renamed from createPlaceholder().
        (WebCore::RenderFullScreen::setPlaceholder): Deleted.
        (WebCore::RenderFullScreen::createPlaceholder): Deleted.
        * rendering/RenderFullScreen.h:

2014-04-16  Jer Noble  <jer.noble@apple.com>

        [MSE] Multiple initialization segments with same codecs in tracks fail validation.
        https://bugs.webkit.org/show_bug.cgi?id=131768

        Additional initialization segments added to the same SourceBuffer with the same
        codec values will fail validation. Update the validation check to add the correct
        codec information for the initial segment, and check against the correct codecs during
        the validation step.

        Additionally, after validation, if successful update the Audio, Video, and TextTracks
        for the SourceBuffer with the updated initialization segment information.

        Reviewed by Eric Carlson.

        Test: media/media-source/media-source-multiple-initialization-segments.html

        * Modules/mediasource/SourceBuffer.cpp:
        (WebCore::SourceBuffer::appendBufferTimerFired): m_source may have been cleared
            as a result of the append, so check it before using.
        (WebCore::SourceBuffer::sourceBufferPrivateDidEndStream): Call streamEndedWithError
            instead of endOfStream as the latter is safe to call within an update.
        (WebCore::SourceBuffer::sourceBufferPrivateDidReceiveInitializationSegment): Ditto.
            Update the track lists if validation succeeds.
        (WebCore::SourceBuffer::validateInitializationSegment): Switch the audio and video
            codec checks.

        Add the ability for Audio, Video, and InbandTextTracks to replace their private tracks:
        * html/track/AudioTrack.cpp:
        (WebCore::AudioTrack::AudioTrack): Call updateKindFromPrivate().
        (WebCore::AudioTrack::setPrivate):
        (WebCore::AudioTrack::updateKindFromPrivate): Split out from constructor.
        * html/track/AudioTrack.h:
        * html/track/InbandTextTrack.cpp:
        (WebCore::InbandTextTrack::InbandTextTrack): Call updateKindFromPrivate().
        (WebCore::InbandTextTrack::setPrivate):
        (WebCore::InbandTextTrack::setMode): Split up into setModeInternal().
        (WebCore::InbandTextTrack::setModeInternal): Broke out from setMode().
        (WebCore::InbandTextTrack::updateKindFromPrivate): Split out from constructor.
        * html/track/InbandTextTrack.h:
        * html/track/TextTrack.h:
        (WebCore::TextTrack::isInband): Added, returns false.
        * html/track/VideoTrack.cpp:
        (WebCore::VideoTrack::VideoTrack): Call updateKindFromPrivate().
        (WebCore::VideoTrack::setPrivate):
        (WebCore::VideoTrack::updateKindFromPrivate):  Split out from constructor.
        * html/track/VideoTrack.h:

2014-04-17  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Column sets below spanners don't repaint properly.
        https://bugs.webkit.org/show_bug.cgi?id=131778

        Reviewed by Beth Dakin.

        Added fast/repaint/spanner-with-margins.html.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computeRectForRepaint):
        Turn off some code that was running for in-flow RenderFlowThreads that made no sense.
        I'm not convinced the code is right for other types of RenderFlowThreads either,
        but will leave that to the named flow thread experts. :)

2014-04-17  Koji Ishii  <kojishi@gmail.com>

        Catch up ruby and its tag omission rule changes in HTML5 CR Feb 2014
        https://bugs.webkit.org/show_bug.cgi?id=131175

        Reviewed by Darin Adler.

        Tests: html5lib/resources/ruby.dat
               html5lib/resources/tests19.dat

        This patch makes WebKit HTML parser to match to the tag omission rules of HTML5 CR Feb 2014:
        http://www.w3.org/TR/2014/CR-html5-20140204/syntax.html#syntax-tag-omission
        with the support for two new elements (rb, rtc) which were also defined in the spec:
        http://www.w3.org/TR/2014/CR-html5-20140204/text-level-semantics.html#the-rb-element
        http://www.w3.org/TR/2014/CR-html5-20140204/text-level-semantics.html#the-rtc-element
        to better support use cases presented by W3C I18N WG:
        http://www.w3.org/TR/ruby-use-cases/

        * html/HTMLTagNames.in: rb and rtc added as HTMLElement interfaces.
        * html/parser/HTMLConstructionSite.cpp:
        (WebCore::hasImpliedEndTag): the spec says rb and rtc have implied end tags.
        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::HTMLTreeBuilder::processStartTagForInBody): rb and rtc added. rt excludes rtc from its implied end tags.

2014-04-17  Darin Adler  <darin@apple.com>

        Try to fix EFL and GTK builds.

        * workers/WorkerGlobalScope.idl: Touch file to make it rebuild, assuming that
        module dependencies aren't working right with CMake. Tweaked formatting quite a
        bit while I was in here.

2014-04-17  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] REGRESSION: Column set styles don't update when zooming etc.
        https://bugs.webkit.org/show_bug.cgi?id=131777

        Reviewed by Enrica Casucci.

        Added fast/multicol/zoom-test.html

        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::styleDidChange):
        Put back in the code that propagates new styles to the flow thread and column sets
        when styles change. This propagation was removed when the column span code landed.
        This patch puts it back in but qualifies the types of objects that get styles
        propagated to avoid accidentally propagating the wrong style to column spans.

2014-04-17  Darin Adler  <darin@apple.com>

        Add separate flag for IndexedDatabase in workers since the current implementation is not threadsafe
        https://bugs.webkit.org/show_bug.cgi?id=131785
        rdar://problem/16003108

        Reviewed by Brady Eidson.

        * Configurations/FeatureDefines.xcconfig: Added INDEXED_DATABASE_IN_WORKERS.

        * Modules/indexeddb/WorkerGlobalScopeIndexedDatabase.cpp: Use the new conditional
        instead of the old one.
        * Modules/indexeddb/WorkerGlobalScopeIndexedDatabase.h: Ditto.
        * Modules/indexeddb/WorkerGlobalScopeIndexedDatabase.idl: Ditto.

2014-04-17  Dan Bernstein  <mitz@apple.com>

        WebCore part of <rdar://problem/16601336> [Cocoa] _userInitiated is always NO in WKNavigationAction passed to -webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:
        https://bugs.webkit.org/show_bug.cgi?id=131783

        Reviewed by Tim Horton.

        * loader/NavigationAction.cpp:
        (WebCore::NavigationAction::NavigationAction): Initialize m_processingUserGesture to
        ScriptController::processingUserGesture() at the time the NavigationAction is constructed.
        * loader/NavigationAction.h:
        Added boolean member variable m_processionUserGesture
        (WebCore::NavigationAction::processingUserGesture): Added this getter.

2014-04-17  Ion Rosca  <rosca@adobe.com>

        [CSS Blending] Isolation descendant dependent flags are not updated correctly
        https://bugs.webkit.org/show_bug.cgi?id=130892

        Reviewed by Dean Jackson.

        The isolation descendant dependent flag (m_hasUnisolatedBlendingDescendants)
        will help us to determine if a layer should isolate blending descendants or not.
        The m_hasUnisolatedBlendingDescendants flag should be set for layers that have blending descendant layers
        not isolated by descendant stacking contexts.
        An element isolatesBlending() if it has this flag set and creates stacking context.

        Tests: css3/compositing/blend-mode-isolation-flags-append-non-stacking-context-blending.html
               css3/compositing/blend-mode-isolation-flags-append-stacking-context-blending.html
               css3/compositing/blend-mode-isolation-flags-remove-non-stacking-context-blending.html
               css3/compositing/blend-mode-isolation-flags-remove-stacking-context-blending.html
               css3/compositing/blend-mode-isolation-flags-turn-off-blending-no-isolation.html
               css3/compositing/blend-mode-isolation-flags-turn-off-blending.html
               css3/compositing/blend-mode-isolation-flags-turn-off-stacking-context.html
               css3/compositing/blend-mode-isolation-flags-turn-on-blending.html
               css3/compositing/blend-mode-isolation-flags-turn-on-stacking-context.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::RenderLayer):
        (WebCore::RenderLayer::updateBlendMode):
        (WebCore::RenderLayer::updateAncestorChainHasBlendingDescendants):
            When a layer has blending and it hasn't had it before, we set the isolation
        flag for all its ancestors up to the first layer creating stacking context.
        I removed the isComposited() check here. Isolation flags should be correct regardless
        of compositing state. Moreover, if this method is called from styleChanged(),
        the compositing state might not be accurate, it's going to be recalculated afterwards.  
        (WebCore::RenderLayer::dirtyAncestorChainHasBlendingDescendants):
            When a layer doesn't have blending, but it used to have it before, we mark
        the isolation flag as dirty for all its ancestors up to the first layer
        creating stacking context. The isolation flags will be recalculated by
        RenderLayer::updateDescendantDependentFlags.
        (WebCore::RenderLayer::updateDescendantDependentFlags):
            Evaluates if the layer has unisolated blending descendants by traversing
        the layer subtree.
        (WebCore::RenderLayer::addChild):
            When adding a subtree that has blending or has some unisolated descendants,
        we set the flag for all the ancestors, up to the stacking context layer.
        (WebCore::RenderLayer::removeChild):
            When removing a subtree that had blending or had some unisolated descendants,
        we dirty the flag so that it could be reevaluated.
        (WebCore::RenderLayer::calculateClipRects):
        (WebCore::RenderLayer::updateTransform):
        * rendering/RenderLayer.h:
            Rename m_hasBlendedElementInChildStackingContext => m_hasUnisolatedBlendingDescendants
        and m_hasBlendedElementInChildStackingContextStatusDirty => m_hasUnisolatedBlendingDescendantsStatusDirty,
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::computeCompositingRequirements):
            Add an assert to make sure that if m_hasUnisolatedCompositedBlendingDescendants is true,
        then m_hasUnisolatedBlendingDescendants is true as well.

2014-04-17  Tim Horton  <timothy_horton@apple.com>

        Uninline blend(Color, Color) to get AnimationUtilities out of Color.h
        https://bugs.webkit.org/show_bug.cgi?id=131781

        Reviewed by Simon Fraser.

        * platform/graphics/Color.cpp:
        (WebCore::blend):
        Un-inline.

        * platform/graphics/Color.h:
        No more AnimationUtilities.

2014-04-16  Benjamin Poulain  <bpoulain@apple.com>

        Fix the build after r167412

        * platform/ScrollView.cpp:
        (WebCore::ScrollView::updateScrollbars):

2014-04-16  Benjamin Poulain  <bpoulain@apple.com>

        [iOS][WK2] Fix annoying scrolling bugs
        https://bugs.webkit.org/show_bug.cgi?id=131722

        Reviewed by Simon Fraser.

        * platform/ScrollView.cpp:
        (WebCore::ScrollView::updateScrollbars):
        Since ScrollingStateScrollingNode::setRequestedScrollPosition() was added, we see ScrollView::updateScrollbars()
        keep changing the scroll position to incorrect values.

        On iOS, the scrollbars are handled by the native UI, the code just compute incorrect scroll position. On WebKit1,
        the code does not run because there is a platformWidget().

        Just #ifdef the whole useless code.

2014-04-16  Alexandru Chiculita  <achicu@adobe.com>

        Improve performance of the RenderLayerCompositor::OverlapMap
        https://bugs.webkit.org/show_bug.cgi?id=115063

        Reviewed by Simon Fraser.

        No new tests, no new functionality or behavior.

        Do not use the OverlapMap in RenderLayerCompositor::computeCompositingRequirements if the layer already
        has a 3D transform. This way we can avoid a potential expensive lookups when we know for sure the layer
        is already supposed to be composited. 

        Also, added a bounding box of the overlap map, so that it can catch cases when the new layer is not overlapping
        any of the previous layers. This is pretty common when having composited layers laid out in a vertical/horizontal list.


        * rendering/RenderLayerCompositor.cpp:
        (OverlapMapContainer):
        (WebCore::OverlapMapContainer::add):
        (WebCore::OverlapMapContainer::overlapsLayers):
        (WebCore::OverlapMapContainer::unite):
        (WebCore):
        (WebCore::RenderLayerCompositor::OverlapMap::add):
        (WebCore::RenderLayerCompositor::OverlapMap::overlapsLayers):
        (WebCore::RenderLayerCompositor::OverlapMap::pushCompositingContainer):
        (WebCore::RenderLayerCompositor::OverlapMap::popCompositingContainer):
        (RenderLayerCompositor::OverlapMap):
        (WebCore::RenderLayerCompositor::computeCompositingRequirements):

2014-04-16  Brian J. Burg  <burg@cs.washington.edu>

        Web Replay: memoize fallback time values for document.lastModified
        https://bugs.webkit.org/show_bug.cgi?id=131318

        Reviewed by Joseph Pecoraro.

        If a document's Last-Modified header can't be found or used, then 
        document.lastModified is derived from the current system time or
        from filesystem data, which is obviously nondeterministic.

        It's better to handle this inside Document::lastModified rather than using
        MemoizedDOMResult, because only the fallback case is nondeterministic.

        Test: http/tests/inspector/replay/document-last-modified-fallback-value.html

        The test is skipped for now, as it will be very flaky without the
        functionality introduced by bugs 130728 and 129391.

        * dom/Document.cpp:
        (WebCore::Document::lastModified): Save or reuse memoized fallback value.
        * replay/WebInputs.json: Add input DocumentLastModifiedDate.

2014-04-16  David Hyatt  <hyatt@apple.com>

        [New Multicolumn] Selection gets confused when the mouse is in the column gaps.
        https://bugs.webkit.org/show_bug.cgi?id=131739

        Reviewed by Enrica Casucci.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::selectionGaps):
        Make sure not to paint selection gaps. This matches the old multi-column behavior. Even though
        selection gaps *nearly* work with the new multi-column code, I am disabling them so that we
        can turn them on without visual regressions.
        
        (WebCore::isChildHitTestCandidate):
        Don't allow in-flow RenderFlowThreads to be descended into from positionForPoint. We always want
        to look only at the spanners and at the sets.

        * rendering/RenderMultiColumnFlowThread.cpp:
        (WebCore::RenderMultiColumnFlowThread::nodeAtPoint):
        * rendering/RenderMultiColumnFlowThread.h:
        Override nodeAtPoint to disallow the RenderMultiColumnFlowThread from being considered for hit
        testing when no DOM node is found. It's better to just let RenderBlock's positionForPoint run
        to drill back down into the appropriate column set.

        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::positionForPoint):
        Implement positionForPoint for RenderMultiColumnSets. This is a straight-up port of the
        old multi-column code's adjustPointToColumnContents function.

        * rendering/RenderMultiColumnSet.h:
        Add override of positionForPoint.

2014-04-16  Dean Jackson  <dino@apple.com>

        MediaDocument on iOS should be full page
        https://bugs.webkit.org/show_bug.cgi?id=131774

        Reviewed by Jer Noble.

        A MediaDocument on iOS has two problems. It can't rely
        on intrinsic size, since it doesn't load the content until
        a user gesture. Secondly, on a small screen you want the
        media to fill the page.

        Add width/height 100% for iOS documents.

        Test: platform/iphone-simulator/media/media-document-controls-size.html

        * html/MediaDocument.cpp:
        (WebCore::MediaDocumentParser::createDocumentStructure):

2014-04-16  Roger Fong  <roger_fong@apple.com>

        Add a way for layout tests to determine whether or not a plugin is snapshotted.
        https://bugs.webkit.org/show_bug.cgi?id=131650.
        <rdar://problem/16615528>

        Reviewed by Dean Jackson.

        * testing/Internals.cpp:
        (WebCore::Internals::isPluginSnapshotted):
        * testing/Internals.h:
        * testing/Internals.idl:

2014-04-16  Zoltan Horvath  <zoltan@webkit.org>

        Vanish unnecessary includes from Shapes.{h|cpp}
        https://bugs.webkit.org/show_bug.cgi?id=131762

        Reviewed by Andreas Kling.

        No new tests, no behavior change.

        * rendering/shapes/BoxShape.h:
        * rendering/shapes/Shape.cpp:
        * rendering/shapes/Shape.h:
        * rendering/shapes/ShapeOutsideInfo.h:

2014-04-16  Andreas Kling  <akling@apple.com>

        Revert direct caching of tagName and nodeName from r167383.

        Ryosuke tells me this is not entirely safe, will need to rethink.

        * dom/Element.idl:
        * dom/Node.idl:

2014-04-16  Peter Molnar  <pmolnar.u-szeged@partner.samsung.com>

        Improve security mitigation added in webkit r94001.
        We missed the case where attachLine was called when we already had an inline box wrapper.
        https://bugs.webkit.org/show_bug.cgi?id=127285

        Reviewed by Brent Fulgham.

        Merged from Blink: https://src.chromium.org/viewvc/blink?revision=150697&view=revision

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::positionLineBox):
        * rendering/RenderBox.h:
        (WebCore::RenderBox::setInlineBoxWrapper):

2014-04-16  Bem Jones-Bey  <bjonesbe@adobe.com>

        Fix CodeGenerator.pm to only write files if the generated content has changed
        https://bugs.webkit.org/show_bug.cgi?id=131756

        Reviewed by Sam Weinig.

        To improve build speed, don't touch generated files unless the newly
        generated content is actually different.

        * bindings/scripts/CodeGenerator.pm:
        (UpdateFile):

2014-04-16  Andreas Kling  <akling@apple.com>

        Add a way to cache never-changing IDL attributes in the wrapper.
        <https://webkit.org/b/131759>

        Some IDL attributes will always return the same value when queried
        on an object, so let's have a way to avoid calling into C++ code
        every time they are queried.

        This patch adds a custom IDL thingy called "ReturnsCacheableValue"
        which causes the code generator to emit code to cache the returned
        value directly in the JS wrapper object.

        Reviewed by Oliver Hunt.

        * bindings/scripts/IDLAttributes.txt:
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):

            Add ReturnsCacheableValue custom attribute.

        * dom/Element.idl:
        * dom/Node.idl:

            Annotate some attributes that return fully cacheable values.

        * bindings/scripts/test/*:

            Rebaseline.

2014-04-16  Noel Gordon  <noel.gordon@gmail.com>

        Progressive JPEG outputScanlines() calls should handle failure
        https://bugs.webkit.org/show_bug.cgi?id=116701

        Reviewed by Brent Fulgham.

        outputScanlines() can fail and delete |this|. Copy the decoder pointer
        member and use that copy to detect and handle the failure case.

        * platform/image-decoders/jpeg/JPEGImageDecoder.cpp:
        (WebCore::JPEGImageReader::decode):

2014-04-16  Robert Sipka  <sipka@inf.u-szeged.hu>

        [curl] Add WEB_TIMING support
        https://bugs.webkit.org/show_bug.cgi?id=127555

        Reviewed by Brent Fulgham.

        Access timing information related to navigation.

        * platform/network/curl/ResourceHandleManager.cpp:
        (WebCore::milisecondsSinceRequest):
        (WebCore::calculateWebTimingInformations):
        (WebCore::sockoptfunction):
        (WebCore::headerCallback):
        (WebCore::ResourceHandleManager::downloadTimerCallback):
        (WebCore::ResourceHandleManager::dispatchSynchronousJob):
        (WebCore::ResourceHandleManager::initializeHandle):

2014-04-16  Zoltan Horvath  <zoltan@webkit.org>

        Cleanup header includes in ShapeOutsideInfo.h
        https://bugs.webkit.org/show_bug.cgi?id=131750

        Reviewed by Antti Koivisto.

        Make the build faster by removing unnecessary header includes.

        No new tests, no behavior change.

        * rendering/shapes/ShapeOutsideInfo.h:

2014-04-16  Simon Fraser  <simon.fraser@apple.com>

        Fix the iOS build.

        * platform/graphics/cg/BitmapImageCG.cpp:
        (WebCore::BitmapImage::draw):

2014-04-16  Alexey Proskuryakov  <ap@apple.com>

        DataTransfer should cache its FileList
        https://bugs.webkit.org/show_bug.cgi?id=131694

        Reviewed by Darin Adler.

        Test: fast/events/data-transfer-files-attribute-identity.html

        * bindings/js/SerializedScriptValue.cpp: (WebCore::CloneDeserializer::readTerminal):
        Switched to a new FileList constructor, CloneDeserializer doesn't really need to modify
        the FileList with append().

        * dom/DataTransfer.h:
        * dom/DataTransfer.cpp:
        (WebCore::DataTransfer::types): Added a FIXME.
        (WebCore::DataTransfer::files): Changed to reuse a cached FileList. It's currently
        easy, because we don't support DataTransferItemList. Once we do, making any changes
        through it will also require updating the FileList in a way that doesn't replace
        File objects for unchanged files.

        * fileapi/FileList.h:
        (WebCore::FileList::create):
        (WebCore::FileList::isEmpty):
        (WebCore::FileList::FileList):
        (WebCore::FileList::append):
        (WebCore::FileList::clear):
        Made non-const functions private, because neither DataTransfer nor FileInputType
        expect the list to be modified without their knowledge. Added a new Vector based
        constructor so that a FileList could be created without the use of append().

        * html/FileInputType.cpp: (WebCore::FileInputType::createFileList): Simplified
        the code a little bit. FileInputType still needs to modify the list for clear(),
        but doesn't need to add to it dynamically - unlike with DataTransfer, it's expected
        to create a new FileList when it's modified.

2014-04-15  Brent Fulgham  <bfulgham@apple.com>

        [Win] Eliminate use of deleteAllValues in Windows Files
        https://bugs.webkit.org/show_bug.cgi?id=131631

        Reviewed by Darin Adler.

        Update to use std::unique_ptr for object lifetime. Get rid of
        deleteAllValues now that it is no loner needed. Use ranged for
        loops where possible.

        * platform/win/WCDataObject.cpp:
        (WebCore::WCEnumFormatEtc::WCEnumFormatEtc):
        (WebCore::WCDataObject::~WCDataObject):
        (WebCore::WCDataObject::GetData):
        (WebCore::WCDataObject::QueryGetData):
        (WebCore::WCDataObject::SetData):
        (WebCore::WCDataObject::clearData):
        * platform/win/WCDataObject.h:

2014-04-16  Chris Fleizach  <cfleizach@apple.com>

        AX: Accessing a table cell with an invalid column header crashes
        https://bugs.webkit.org/show_bug.cgi?id=131719

        Reviewed by Darin Adler.

        If no tableCell is available as a column/row header, then do not continue processing.

        Test: accessibility/table-missing-column-header-crash.html

        * accessibility/AccessibilityTableCell.cpp:
        (WebCore::AccessibilityTableCell::columnHeaders):
        (WebCore::AccessibilityTableCell::rowHeaders):

2014-04-16  Brendan Long  <b.long@cablelabs.com>

        [GTK] Fix unused parameter warnings
        https://bugs.webkit.org/show_bug.cgi?id=131721

        Reviewed by Darin Adler.

        * bindings/js/JSMediaStreamCapabilitiesCustom.cpp:
        (WebCore::toJS): Remove unused 'exec' parameter.

2014-04-16  Simon Fraser  <simon.fraser@apple.com>

        Convert the boolean param of Image::startAnimation() to an enum
        https://bugs.webkit.org/show_bug.cgi?id=131742

        Reviewed by Tim Horton.

        Use an enum to make the code more readable.

        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::startAnimation):
        * platform/graphics/BitmapImage.h:
        * platform/graphics/Image.cpp:
        (WebCore::Image::drawTiled):
        * platform/graphics/Image.h:
        (WebCore::Image::startAnimation):
        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::startAnimation):
        * svg/graphics/SVGImage.h:

2014-04-16  David Hyatt  <hyatt@apple.com>

        Make sure to skip the RenderMultiColumnFlowThread when resolving percentage heights inside columns against
        containing blocks. The flow thread's auto height should not interfere if a fixed height is specified on
        an ancestor.

        https://bugs.webkit.org/show_bug.cgi?id=131741

        Reviewed by Simon Fraser.

        Added fast/multicol/percent-height.html.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::skipContainingBlockForPercentHeightCalculation):
        Add an isInFlowRenderFlowThread check so that we skip those blocks and don't consider them at all
        when resolving percentage heights.

2014-04-16  Daewoong Jang  <daewoong.jang@navercorp.com>

        [WinCairo][cURL] Build fix for WinCairo build with USE(CURL).
        https://bugs.webkit.org/show_bug.cgi?id=131614

        Reviewed by Brent Fulgham.

        Build fix, no new tests needed.

        * platform/network/curl/CurlCacheEntry.cpp:
        (WebCore::CurlCacheEntry::loadResponseHeaders):
        * platform/network/curl/CurlCacheManager.cpp:
        (WebCore::CurlCacheManager::loadIndex):
        * platform/network/soup/ResourceError.h:
        * platform/network/soup/SocketStreamHandle.h:

2014-04-16  Martin Hodovan  <mhodovan@inf.u-szeged.hu>

        ASSERTION FAILED: x2 >= x1 in WebCore::RenderObject::drawLineForBoxSide
        https://bugs.webkit.org/show_bug.cgi?id=127835

        In some cases when a negative margin and a positive padding are applied
        together to the right and/or left side of the box, the logical width of
        the borders can be set to a negative value, making the assertion fire.
        The fix checks if the width or height of the box is negative, and if so,
        it will not display the borders and shadows of the box.

        Reviewed by Darin Adler.

        Test: fast/css/padding-margin-negative-border.html

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintBorder):

2014-04-16  Jer Noble  <jer.noble@apple.com>

        [MSE] Seeks into buffered ranges will never complete.
        https://bugs.webkit.org/show_bug.cgi?id=131717

        Reviewed by Eric Carlson.

        Test: media/media-source/media-source-seek-complete.html

        Run the SourceBuffer Monitoring step after initiating a seek.

        * Modules/mediasource/SourceBuffer.cpp:
        (WebCore::SourceBuffer::sourceBufferPrivateSeekToTime):

2014-04-15  Hyowon Kim  <hw1008.kim@samsung.com>

        [EFL] Fix problems with the pixel dump.
        https://bugs.webkit.org/show_bug.cgi?id=131265

        Reviewed by Gyuyoung Kim.

        Painting and compositing paths of WebKit-EFL were totally modified from r166768.
        However pixel dump codes still call deprecated functions like ewk_view_paint(),
        which causes that nothing is drawn.

        This patch adds new member functions to AcceleratedCompositingContext to support pixel dump.
        One of new functions is AcceleratedCompositingContext::extractImageData(),
        which replaces deprecated function calls. Besides the extractImageData() is invoked by
        ewk_view_screenshot_contents_get() in order to take the visible content displayed on the EFL webview.

        * platform/graphics/cairo/CairoUtilities.cpp:
        (WebCore::flipImageSurfaceVertically): Flip pixel data of given cairo_surface_t vertically up/down.
        Whereas Cairo uses the top-left corner as being 0,0 of the coordinate system,
        OpenGL uses the bottom-left corner being 0,0.
        So we need to vertically flip resultant images taken by glReadPixels().
        * platform/graphics/cairo/CairoUtilities.h:

2014-04-15  Hyowon Kim  <hw1008.kim@samsung.com>

        Make page overlay functionality working on coordinated graphics.
        https://bugs.webkit.org/show_bug.cgi?id=131425

        Reviewed by Darin Adler.

        Page overlay functionality did not work on coordinated graphics since r166975.
        This patch removes deprecated code related to the PageOverlay GraphicsLayer management.
        and makes CoordinatedLayerTreeHost use PageOverlayController.

        * platform/graphics/texmap/coordinated/CompositingCoordinator.cpp:
        (WebCore::CompositingCoordinator::setRootCompositingLayer):
        (WebCore::CompositingCoordinator::flushPendingLayerChanges):
        * platform/graphics/texmap/coordinated/CompositingCoordinator.h:

2014-04-10  Roger Fong  <roger_fong@apple.com>

        Snapshotted plugins may need to be restarted if style properties are changed after initial load of plugin.
        https://bugs.webkit.org/show_bug.cgi?id=131553.
        <rdar://problem/15443375>

        Reviewed by Timothy Horton.

        Test: plugins/snapshotting/set-plugin-size-to-tiny.html

        When updating embedded objects during our post layout checks, check for certain style changes
        that may result in the plugin needing to be restarted.

        * html/HTMLPlugInImageElement.h: 
        Add m_plugInDimensionsSpecified field to keep track of whether or not dimensions on the plugin’s renderer have been specified.
        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::HTMLPlugInImageElement):
        Initialize m_plugInDimensionsSpecified.
        (WebCore::isSmallerThanTinySizingThreshold):
        Refactoring, move check for whether or not plugin is smaller than the tiny plugin size threshold to this method.
        (WebCore::HTMLPlugInImageElement::isTopLevelFullPage): 
        Refactoring, move check for whether or not plugin is top level full page to this method.
        (WebCore::HTMLPlugInImageElement::checkSnapshotStatus): 
        Use refactored checks here as well to determine whether or not we need to restart the snapshotted plugin.
        (WebCore::HTMLPlugInImageElement::subframeLoaderWillCreatePlugIn): Use refactored checks.
        If plugin dimensions were specified, set m_plugInDimensionsSpecified to true.

2014-04-15  Andreas Kling  <akling@apple.com>

        [iOS WebKit2] Listen for system memory pressure notifications.
        <https://webkit.org/b/131653>
        <rdar://problem/16208123>

        Reviewed by Antti Koivisto.

        * platform/cocoa/MemoryPressureHandlerCocoa.mm:
        (WebCore::MemoryPressureHandler::install):

            Use the right invocation to summon the memory pressure handler.

        (WebCore::MemoryPressureHandler::install):
        (WebCore::MemoryPressureHandler::uninstall):
        (WebCore::MemoryPressureHandler::holdOff):
        (WebCore::MemoryPressureHandler::respondToMemoryPressure):

            Make stubbed out functions !PLATFORM(COCOA)

2014-04-14  Morten Stenshorne  <mstensho@opera.com>

        [New Multicolumn] Add support for column-span:all
        https://bugs.webkit.org/show_bug.cgi?id=129330

        Reviewed by Dave Hyatt.

        Column spanners are implemented as siblings of RenderMultiColumnSet
        objects (i.e. the regions for the column rows). This means that they
        are pulled out from the flow thread tree where they would otherwise
        live. This causes some complexity, most of which is contained within
        the multicol code.

        A placeholder is put in the flow thread tree where the spanner's
        renderer would otherwise live. This is needed in order make sure that
        we interrupt line layout before after the spanner. We also need this
        to be able to switch from one multicol set to the next.

        Some extra logic is required when dynamically inserting and removing
        flow thread descendants now, because we need to figure out if the
        renderer added should trigger creation of new multi column sets. If
        a spanner is inserted in the middle of a multi column set, we need to
        detect this, split the set and put the spanner in the middle.

        Wrote a bunch of tests. A few of the tests were copied from existing
        (old-impl) tests and put in a separate directory. That directory can
        be wiped when we turn on the new multicol implementation by default.

        Tests: fast/multicol/newmulticol/adjacent-spanners.html
               fast/multicol/newmulticol/block-becomes-spanner.html
               fast/multicol/newmulticol/change-spanner-display.html
               fast/multicol/newmulticol/change-spanner-parent-display.html
               fast/multicol/newmulticol/compare-with-old-impl/anonymous-block-split-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/before-child-anonymous-column-block.html
               fast/multicol/newmulticol/compare-with-old-impl/clone-before-after-content-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/clone-block-children-inline-mismatch-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/clone-flexbox.html
               fast/multicol/newmulticol/compare-with-old-impl/clone-summary.html
               fast/multicol/newmulticol/compare-with-old-impl/column-span-inside-multicol-webkit-box.html
               fast/multicol/newmulticol/compare-with-old-impl/continuation-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/double-merge-anonymous-block-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/empty-anonymous-block-split-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/float-not-removed-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/list-multi-column-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/positioned-child-not-removed-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/positioned-objects-not-removed-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/recursive-split-flow-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/removal-of-multicol-span-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/remove-child-split-flow-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/runin-continuation-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/span-as-immediate-child-complex-splitting.html
               fast/multicol/newmulticol/compare-with-old-impl/span-as-nested-inline-block-child.html
               fast/multicol/newmulticol/compare-with-old-impl/split-flow-anonymous-wrapper-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/split-inline-wrong-post-block-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/table-multi-column-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/textbox-not-removed-crash.html
               fast/multicol/newmulticol/compare-with-old-impl/update-after-content-before-child-crash.html
               fast/multicol/newmulticol/insert-row-content1.html
               fast/multicol/newmulticol/insert-row-content2.html
               fast/multicol/newmulticol/insert-row-content3.html
               fast/multicol/newmulticol/insert-row-content4.html
               fast/multicol/newmulticol/insert-row-content5.html
               fast/multicol/newmulticol/insert-row-content6.html
               fast/multicol/newmulticol/insert-row-content7.html
               fast/multicol/newmulticol/insert-row-content8.html
               fast/multicol/newmulticol/insert-row-content9.html
               fast/multicol/newmulticol/insert-spanner-child1.html
               fast/multicol/newmulticol/insert-spanner-child2.html
               fast/multicol/newmulticol/insert-spanner-child3.html
               fast/multicol/newmulticol/insert-spanner1.html
               fast/multicol/newmulticol/insert-spanner2.html
               fast/multicol/newmulticol/insert-spanner3.html
               fast/multicol/newmulticol/insert-spanner4.html
               fast/multicol/newmulticol/insert-spanner5.html
               fast/multicol/newmulticol/insert-spanner6.html
               fast/multicol/newmulticol/insert-spanner7.html
               fast/multicol/newmulticol/insert-spanner8.html
               fast/multicol/newmulticol/multicol-with-spanner-becomes-regular-block.html
               fast/multicol/newmulticol/remove-row-content1.html
               fast/multicol/newmulticol/remove-row-content2.html
               fast/multicol/newmulticol/remove-row-content3.html
               fast/multicol/newmulticol/remove-row-content4.html
               fast/multicol/newmulticol/remove-row-content5.html
               fast/multicol/newmulticol/remove-row-content6.html
               fast/multicol/newmulticol/remove-row-content7.html
               fast/multicol/newmulticol/remove-row-content8.html
               fast/multicol/newmulticol/remove-row-content9.html
               fast/multicol/newmulticol/remove-spanner1.html
               fast/multicol/newmulticol/remove-spanner2.html
               fast/multicol/newmulticol/remove-spanner3.html
               fast/multicol/newmulticol/remove-spanner4.html
               fast/multicol/newmulticol/remove-spanner5.html
               fast/multicol/newmulticol/remove-spanner6.html
               fast/multicol/newmulticol/sole-spanner.html
               fast/multicol/newmulticol/span-between-text.html
               fast/multicol/newmulticol/spanner-becomes-regular-block.html
               fast/multicol/newmulticol/spanner-first.html
               fast/multicol/newmulticol/spanner-img.html
               fast/multicol/newmulticol/spanner-inline-block.html
               fast/multicol/newmulticol/spanner-last.html
               fast/multicol/newmulticol/spanner-nested-dynamic.html
               fast/multicol/newmulticol/spanner-nested.html
               fast/multicol/newmulticol/spanner-pseudo-after1.html
               fast/multicol/newmulticol/spanner-pseudo-after2.html
               fast/multicol/newmulticol/spanner-pseudo-after3.html
               fast/multicol/newmulticol/spanner-pseudo-after4.html
               fast/multicol/newmulticol/spanner-pseudo-before-after1.html
               fast/multicol/newmulticol/spanner-pseudo-before-after2.html
               fast/multicol/newmulticol/spanner-pseudo-before-after3.html
               fast/multicol/newmulticol/spanner-pseudo-before-after4.html
               fast/multicol/newmulticol/spanner-pseudo-before1.html
               fast/multicol/newmulticol/spanner-pseudo-before2.html
               fast/multicol/newmulticol/spanner-pseudo-before3.html
               fast/multicol/newmulticol/spanner-pseudo-before4.html
               fast/multicol/newmulticol/spanner-table.html
               fast/multicol/newmulticol/spanner-with-margin.html
               fast/multicol/newmulticol/spanner1.html
               fast/multicol/newmulticol/spanner2.html
               fast/multicol/newmulticol/spanner3.html
               fast/multicol/newmulticol/spanner4.html
               fast/multicol/newmulticol/spanner5.html
               fast/multicol/newmulticol/spanner6.html
               fast/multicol/newmulticol/spanner7.html
               fast/multicol/newmulticol/spanner8.html
               fast/multicol/newmulticol/spanner9.html
               fast/multicol/newmulticol/trailing-margin-with-spanner.html
               fast/multicol/newmulticol/trailing-margin-with-spanner2.html

        * CMakeLists.txt:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::addChildIgnoringAnonymousColumnBlocks):
        Disable the old anonymous multicol container and spanner anonymous
        block generation machinery when the new multicol implementation is
        enabled.
        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::createMultiColumnFlowThread):
        (WebCore::RenderBlockFlow::destroyMultiColumnFlowThread):
        (WebCore::RenderBlockFlow::layoutBlockChild): Need to notify the
        flow thread when a descendant's final position is known. Spanner
        placeholders need to know where to terminate the column set that
        it follows.
        (WebCore::RenderBlockFlow::styleDidChange): Remove old code that
        isn't needed anymore. The renderers in question (flow thread and
        column sets) set display:block on themselves already. This code
        caused problems for spanners, which got all their style wiped.
        (WebCore::RenderBlockFlow::setMultiColumnFlowThread): If setting
        the flow thread to nullptr, there's no need to create the "rare
        data" structure.
        (WebCore::RenderBlockFlow::relayoutForPagination):
        (WebCore::RenderBlockFlow::layoutSpecialExcludedChild):
        (WebCore::RenderBlockFlow::addChild): beforeChild is retrieved via
        the DOM. If it is a spanner, we need to locate the placeholder
        here, because that's the correct location to insert siblings,
        DOM-wise.
        (WebCore::RenderBlockFlow::removeChild): The multicol flow thread
        needs to know when children disappear.
        (WebCore::RenderBlockFlow::checkForPaginationLogicalHeightChange):
        Don't modify the height back and forth when calculating the
        multicol container's final height, as that messes up balancing.
        (WebCore::RenderBlockFlow::insertedIntoTree): Deleted.
        (WebCore::RenderBlockFlow::willBeDestroyed): Deleted.
        (WebCore::RenderBlockFlow::styleWillChange): Deleted.
        (WebCore::RenderBlockFlow::lineAtIndex): Deleted.
        * rendering/RenderBlockFlow.h:
        * rendering/RenderElement.cpp:
        (WebCore::RenderElement::insertedIntoTree): Set up an element's
        layer before notifying the flow thread. The multicol flow thread
        may decide to move the element (if it's a spanner), which may
        involve re-insertion of layers.  Calling
        RenderObject::insertedIntoTree() last instead of first also better
        matches the order we used to have prior to the introduction of
        RenderElement, FWIW.
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::layout):
        (WebCore::RenderFlowThread::removeRegionFromThread): Deleted.
        (WebCore::RenderFlowThread::invalidateRegions): Deleted.
        * rendering/RenderFlowThread.h:
        * rendering/RenderMultiColumnFlowThread.cpp:
        (WebCore::RenderMultiColumnFlowThread::RenderMultiColumnFlowThread):
        (WebCore::RenderMultiColumnFlowThread::removeFlowChildInfo): When
        a flow thread descendant is inserted, the multicol flow thread
        needs to be notified.
        (WebCore::RenderMultiColumnFlowThread::firstMultiColumnSet):
        (WebCore::RenderMultiColumnFlowThread::lastMultiColumnSet):
        (WebCore::RenderMultiColumnFlowThread::firstColumnSetOrSpanner):
        (WebCore::RenderMultiColumnFlowThread::nextColumnSetOrSpannerSiblingOf):
        (WebCore::RenderMultiColumnFlowThread::previousColumnSetOrSpannerSiblingOf):
        (WebCore::RenderMultiColumnFlowThread::layout):
        (WebCore::RenderMultiColumnFlowThread::findSetRendering):
        (WebCore::RenderMultiColumnFlowThread::populate):
        (WebCore::RenderMultiColumnFlowThread::evacuateAndDestroy):
        (WebCore::RenderMultiColumnFlowThread::addRegionToThread):
        (WebCore::RenderMultiColumnFlowThread::willBeRemovedFromTree):
        Need to detach column sets here, since they have pointers to their
        flow thread.
        (WebCore::RenderMultiColumnFlowThread::resolveMovedChild):
        (WebCore::isValidColumnSpanner):
        (WebCore::RenderMultiColumnFlowThread::flowThreadDescendantInserted):
        (WebCore::RenderMultiColumnFlowThread::flowThreadRelativeWillBeRemoved):
        (WebCore::RenderMultiColumnFlowThread::flowThreadDescendantBoxLaidOut):
        (WebCore::RenderMultiColumnFlowThread::autoGenerateRegionsToBlockOffset):
        Nothing to be done here for the time being. Column sets are now
        created during box creation. We are going to need to add some code
        here again once multicol properly supports nested fragmentation
        contexts (and you get adjacent column rows because of that).
        (WebCore::RenderMultiColumnFlowThread::regionAtBlockOffset):
        During layout, don't trust the region interval tree, as that one
        depends on the resulting layout.
        (WebCore::RenderMultiColumnFlowThread::setRegionRangeForBox): With
        a convenience method to get the last column set, and column sets
        now being created during normal box creation, this young method
        needs an overhaul.
        (WebCore::RenderMultiColumnFlowThread::setRegionRangeForBox):
        (WebCore::RenderMultiColumnFlowThread::isPageLogicalHeightKnown):
        * rendering/RenderMultiColumnFlowThread.h:
        * rendering/RenderMultiColumnSet.cpp:
        (WebCore::RenderMultiColumnSet::nextSiblingMultiColumnSet):
        (WebCore::RenderMultiColumnSet::previousSiblingMultiColumnSet):
        (WebCore::RenderMultiColumnSet::firstRendererInFlowThread):
        (WebCore::RenderMultiColumnSet::lastRendererInFlowThread):
        (WebCore::precedesRenderer):
        (WebCore::RenderMultiColumnSet::containsRendererInFlowThread):
        (WebCore::RenderMultiColumnSet::setLogicalTopInFlowThread):
        (WebCore::RenderMultiColumnSet::setLogicalBottomInFlowThread):
        (WebCore::RenderMultiColumnSet::pageLogicalTopForOffset):
        (WebCore::RenderMultiColumnSet::distributeImplicitBreaks):
        (WebCore::RenderMultiColumnSet::calculateBalancedHeight):
        (WebCore::RenderMultiColumnSet::addForcedBreak):
        (WebCore::RenderMultiColumnSet::recalculateColumnHeight):
        Previously only needed if columns were to be balanced, now it's
        also needed when not balancing.
        (WebCore::RenderMultiColumnSet::recordSpaceShortage): Some layout
        elements actually have 0 height. Skip them, since they're not
        taking us anywhere.
        (WebCore::RenderMultiColumnSet::updateLogicalWidth):
        (WebCore::RenderMultiColumnSet::requiresBalancing): Column sets
        now have individual balancing needs. If they precede a spanner,
        they must always be balanced. For the last column set, see if
        height is unspecified or column-fill is 'balance' (like before).
        (WebCore::RenderMultiColumnSet::prepareForLayout):
        (WebCore::RenderMultiColumnSet::beginFlow):
        (WebCore::RenderMultiColumnSet::endFlow):
        (WebCore::RenderMultiColumnSet::layout):
        (WebCore::RenderMultiColumnSet::calculateMaxColumnHeight):
        (WebCore::RenderMultiColumnSet::columnRectAt):
        (WebCore::RenderMultiColumnSet::flowThreadPortionOverflowRect):
        (WebCore::RenderMultiColumnSet::paintColumnRules):
        (WebCore::RenderMultiColumnSet::initialBlockOffsetForPainting):
        (WebCore::RenderMultiColumnSet::collectLayerFragments):
        (WebCore::RenderMultiColumnSet::columnTranslationForOffset):
        (WebCore::RenderMultiColumnSet::setAndConstrainColumnHeight): Deleted.
        (WebCore::RenderMultiColumnSet::findRunWithTallestColumns): Deleted.
        (WebCore::RenderMultiColumnSet::clearForcedBreaks): Deleted.
        (WebCore::RenderMultiColumnSet::repaintFlowThreadContent): Deleted.
        * rendering/RenderMultiColumnSet.h:
        * rendering/RenderMultiColumnSpannerPlaceholder.cpp: Added.
        (WebCore::RenderMultiColumnSpannerPlaceholder::createAnonymous):
        (WebCore::RenderMultiColumnSpannerPlaceholder::RenderMultiColumnSpannerPlaceholder):
        (WebCore::RenderMultiColumnSpannerPlaceholder::renderName):
        * rendering/RenderMultiColumnSpannerPlaceholder.h: Added.
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::insertedIntoTree): Need to notify the
        multicol flow thread when descendants are inserted. That may
        trigger insertion of column sets, or, in the case of spanners,
        they need to be moved out from the flow thread.
        * rendering/RenderObject.h:
        (WebCore::RenderObject::isRenderMultiColumnSpannerPlaceholder):
        (WebCore::RenderObject::isAnonymousBlock): Exclude column sets
        here, so that they don't get involved in anonymous block merging
        and other kinds of fun.
        * rendering/RenderRegion.h:
        * rendering/RenderRegionSet.h:

2014-04-15  Simon Fraser  <simon.fraser@apple.com>

        LayerTreeAsTextBehavior should be in the WebCore namespace
        https://bugs.webkit.org/show_bug.cgi?id=131683

        Reviewed by Andrei Bucur.

        Move LayerTreeAsTextBehavior and the bit flags into the WebCore namespace.

        * platform/graphics/GraphicsLayer.cpp:
        (showGraphicsLayerTree):
        * platform/graphics/GraphicsLayer.h:

2014-04-15  Benjamin Poulain  <bpoulain@apple.com>

        ViewportConfiguration handles userZoom incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=131657

        Reviewed by Darin Adler.

        * page/ViewportConfiguration.cpp:
        (WebCore::viewportArgumentUserZoomIsSet):
        (WebCore::ViewportConfiguration::updateConfiguration):
        The other viewport values must be strictly positive, userZoom is always either zero, one or minus one.
        As a result, the value zero was never set.

2014-04-15  Simon Fraser  <simon.fraser@apple.com>

        [iOS WK2] Pages often blank on first load if page loaded by typing the URL
        https://bugs.webkit.org/show_bug.cgi?id=131665

        Reviewed by Tim Horton.

        The document overlay-related code in RemoteLayerTreeDrawingArea::setRootCompositingLayer()
        was triggering a compositing layer flush when called with a null rootLayer, which happens
        for pages going into the page cache. This would trigger a layer flush that would clobber
        the root layer for the visible page, resulting in missing content.
        
        Also, rebuildCompositingLayerTree() is called recursively and the m_documentOverlayRootLayer
        was being added to (and then removed from) every single compositing layers.
        
        Fix both these by changing to a pull model, where RenderLayerCompositor requests
        the overlay layer via ChromeClient, and gets it at the end of every flush,
        adding to the children of the root layer.

        * WebCore.exp.in:
        * page/ChromeClient.h:
        (WebCore::ChromeClient::documentOverlayLayerForFrame):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::RenderLayerCompositor):
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges): Put visibleRect
        into a variable for ease of debugging.
        (WebCore::RenderLayerCompositor::updateCompositingLayers): Asser
        that we're not in the page cache (this would have caught the bug).
        (WebCore::RenderLayerCompositor::appendOverlayLayers):
        (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree):
        (WebCore::RenderLayerCompositor::setDocumentOverlayRootLayer): Deleted.
        * rendering/RenderLayerCompositor.h:

2014-04-15  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167199 and r167251.
        https://bugs.webkit.org/show_bug.cgi?id=131678

        Caused a DYEBench regression and does not seem to improve perf
        on relevant websites (Requested by rniwa on #webkit).

        Reverted changesets:

        "Rewrite Function.bind as a builtin"
        https://bugs.webkit.org/show_bug.cgi?id=131083
        http://trac.webkit.org/changeset/167199

        "Update test result"
        http://trac.webkit.org/changeset/167251

2014-04-15  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        Remove unnecessary null checking in NavigatorContentUtils
        https://bugs.webkit.org/show_bug.cgi?id=131652

        Reviewed by Darin Adler.

        Some functions have checked if document is null. However, document is always not
        null when frame is existed.

        No new tests, no behavior changes.

        * Modules/navigatorcontentutils/NavigatorContentUtils.cpp:
        (WebCore::NavigatorContentUtils::registerProtocolHandler):
        (WebCore::NavigatorContentUtils::isProtocolHandlerRegistered):
        (WebCore::NavigatorContentUtils::unregisterProtocolHandler):

2014-04-15  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167298.
        https://bugs.webkit.org/show_bug.cgi?id=131670

        Broke CSS filters (17 test crashes) (Requested by ap on
        #webkit).

        Reverted changeset:

        "[iOS WK2] Pages often blank on first load if page loaded by
        typing the URL"
        https://bugs.webkit.org/show_bug.cgi?id=131665
        http://trac.webkit.org/changeset/167298

2014-04-14  Pratik Solanki  <psolanki@apple.com>

        Unreviewed. Attempt to fix Windows build after r167277.

        * page/FrameView.cpp:
        (WebCore::FrameView::willPaintContents):

2014-04-14  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167261.
        https://bugs.webkit.org/show_bug.cgi?id=131667

        broke many navigation tests (Requested by ap on #webkit).

        Reverted changeset:

        "Web Replay: memoize fallback time values for
        document.lastModified"
        https://bugs.webkit.org/show_bug.cgi?id=131318
        http://trac.webkit.org/changeset/167261

2014-04-14  Simon Fraser  <simon.fraser@apple.com>

        [iOS WK2] Pages often blank on first load if page loaded by typing the URL
        https://bugs.webkit.org/show_bug.cgi?id=131665

        Reviewed by Tim Horton.

        The document overlay-related code in RemoteLayerTreeDrawingArea::setRootCompositingLayer()
        was triggering a compositing layer flush when called with a null rootLayer, which happens
        for pages going into the page cache. This would trigger a layer flush that would clobber
        the root layer for the visible page, resulting in missing content.
        
        Also, rebuildCompositingLayerTree() is called recursively and the m_documentOverlayRootLayer
        was being added to (and then removed from) every single compositing layers.
        
        Fix both these by changing to a pull model, where RenderLayerCompositor requests
        the overlay layer via ChromeClient, and gets it at the end of every flush,
        adding to the children of the root layer.

        * WebCore.exp.in:
        * page/ChromeClient.h:
        (WebCore::ChromeClient::documentOverlayLayerForFrame):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::RenderLayerCompositor):
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges): Put visibleRect
        into a variable for ease of debugging.
        (WebCore::RenderLayerCompositor::updateCompositingLayers): Asser
        that we're not in the page cache (this would have caught the bug).
        (WebCore::RenderLayerCompositor::appendOverlayLayers):
        (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree):
        (WebCore::RenderLayerCompositor::setDocumentOverlayRootLayer): Deleted.
        * rendering/RenderLayerCompositor.h:

2014-04-14  Jon Honeycutt  <jhoneycutt@apple.com>

        Assertion failure under FEImage::determineAbsolutePaintRect()

        <https://bugs.webkit.org/show_bug.cgi?id=131660>
        <rdar://problem/15669294>

        This patch merges Chromium r149536 (see
        <https://chromiumcodereview.appspot.com/14701012>), which moves
        m_absoluteTransform out of SVGFilter and into the base Filter class, so
        that it isn't necessary to cast a Filter to SVGFilter to get the
        absolute transform.

        Reviewed by Geoffrey Garen.

        Test: svg/filters/feImage-filter-assertion.html

        * platform/graphics/filters/Filter.h:
        (WebCore::Filter::Filter):
        Changed to take the absolute transform.
        (WebCore::Filter::absoluteTransform):
        Moved from SVGFilter.
        (WebCore::Filter::mapAbsolutePointToLocalPoint):
        Ditto.

        * rendering/FilterEffectRenderer.cpp:
        (WebCore::FilterEffectRenderer::FilterEffectRenderer):
        Pass a default AffineTransform() to the Filter base class.

        * svg/graphics/filters/SVGFEImage.cpp:
        (WebCore::FEImage::determineAbsolutePaintRect):
        Use the Filter without casting it to SVGFilter.
        (WebCore::FEImage::platformApplySoftware):
        Ditto.

        * svg/graphics/filters/SVGFilter.cpp:
        (WebCore::SVGFilter::SVGFilter):
        Pass the transform to the base class, and remove initialization of a
        removed member var.

        * svg/graphics/filters/SVGFilter.h:
        Member var moved to Filter.h.

2014-04-14  Darin Adler  <darin@apple.com>

        REGRESSION (r158617): Find on Page can get stuck in a loop when the search string occurs in an <input> in a <fieldset>
        https://bugs.webkit.org/show_bug.cgi?id=126322

        Reviewed by Ryosuke Niwa.

        One additional tweak to the fix for the bug above.
        Fixes crash in editing/editability/ignored-content.html test.

        * html/HTMLObjectElement.cpp:
        (WebCore::HTMLObjectElement::canContainRangeEndPoint): Call through to
        HTMLElement::canContainRangeEndPoint, bypassing HTMLPlugInElement override
        that always returns false. Without this change, this function was always
        returning false.

2014-04-14  Simon Fraser  <simon.fraser@apple.com>

        Crash in TileController::tileRevalidationTimerFired
        https://bugs.webkit.org/show_bug.cgi?id=131656
        <rdar://problem/16583166>

        Reviewed by Sam Weinig.

        It's possible for the TileController revalidation timer to fire after
        the GraphicsLayer has been destroyed, so the PlatformCALayer no longer
        has an owningGraphicsLayer.
        
        Bail from the timer callback if owningGraphicsLayer() is null.
        
        Also some drive-by 0 -> nullptr changes.

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::willBeDestroyed):
        * platform/graphics/ca/PlatformCALayer.cpp:
        (WebCore::PlatformCALayer::~PlatformCALayer):
        * platform/graphics/ca/mac/TileController.mm:
        (WebCore::TileController::tileRevalidationTimerFired):

2014-04-14  Bem Jones-Bey  <bjonesbe@adobe.com>

        [CSS Shapes] Remove some leftover shape-inside code
        https://bugs.webkit.org/show_bug.cgi?id=131641

        Reviewed by Dean Jackson.

        I discovered that some code had been leftover from the shape-inside
        removal. This removes that leftover code.

        No new tests, no behavior change.

        * platform/text/BidiResolver.h:
        * rendering/BidiRun.cpp:
        (WebCore::BidiRun::BidiRun):
        * rendering/RenderBlockFlow.h:
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlockFlow::createLineBoxes):
        (WebCore::RenderBlockFlow::constructLine):
        (WebCore::computeExpansionForJustifiedText):
        (WebCore::RenderBlockFlow::computeInlineDirectionPositionsForSegment):

2014-04-14  Jer Noble  <jer.noble@apple.com>

        [MSE][Mac] video.currentTime is sometimes negative.
        https://bugs.webkit.org/show_bug.cgi?id=131644

        Reviewed by Eric Carlson.

        AVSampleBufferRenderSynchronizer will occasionally return slightly negative values
        when beginning playback. Clamp the return value to 0.

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateMediaSourceAVFObjC.mm:
        (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::currentTimeDouble):

2014-04-14  Bem Jones-Bey  <bjonesbe@adobe.com>

        [CSSExclusions] Remove FIXME referencing closed bug
        https://bugs.webkit.org/show_bug.cgi?id=131645

        Reviewed by Dean Jackson.

        This is silly, but the comment is really confusing as it's entirely
        wrong now.

        No new tests, no behavior change.

        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::changeRequiresRepaint):

2014-04-14  Andreas Kling  <akling@apple.com>

        Build fixage.

        * page/FrameView.cpp:

2014-04-14  Jon Honeycutt  <jhoneycutt@apple.com>

        Assertion failure !node || node->isElementNode() in
        WebCore::RenderBlock::inlineElementContinuation
  
        https://bugs.webkit.org/show_bug.cgi?id=108829
        <rdar://problem/13666405>
  
        I can't reproduce this assertion failure, but there seems to be an
        invalid assumption in RenderBlock::inlineElementContinuation() that
        anything with the "isInline()" bit set is a RenderInline.
        
        No new test because the test case in the bug does not repro for me.

        Reviewed by Brent Fulgham.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::inlineElementContinuation):
        Dave Hyatt says that this function should only return RenderInline
        objects (not non-RenderInline inline objects), so update the checks
        from isInline() to isRenderInline() before casting with
        toRenderInline().

        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::inlineElementContinuation):
        Ditto.

2014-04-14  Andreas Kling  <akling@apple.com>

        Do more things under memory pressure on non-iOS platforms.
        <https://webkit.org/b/131625>

        Reviewed by Antti Koivisto.

        Rename hasReceivedMemoryPressure() to isUnderMemoryPressure() and
        make it use std::atomic<bool> instead of OSAtomic primitives.

        Unmask most of the PLATFORM(IOS) blocks so all platforms can take
        advantage of optimizations done while under pressure. Note that
        isUnderMemoryPressure() will still always return false on platforms
        other than iOS/WK1, but this will change soon.

        * history/PageCache.cpp:
        (WebCore::PageCache::canCache):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::commitProvisionalLoad):
        * page/FrameView.cpp:
        (WebCore::FrameView::willPaintContents):
        (WebCore::FrameView::didPaintContents):
        * platform/MemoryPressureHandler.cpp:
        (WebCore::MemoryPressureHandler::MemoryPressureHandler):
        * platform/MemoryPressureHandler.h:
        (WebCore::MemoryPressureHandler::isUnderMemoryPressure):
        * platform/cocoa/MemoryPressureHandlerCocoa.mm:
        (WebCore::MemoryPressureHandler::setReceivedMemoryPressure):
        (WebCore::MemoryPressureHandler::clearMemoryPressure):
        (WebCore::MemoryPressureHandler::respondToMemoryPressureIfNeeded):
        (WebCore::MemoryPressureHandler::hasReceivedMemoryPressure): Deleted.
        * platform/graphics/FontCache.cpp:
        (WebCore::FontCache::purgeInactiveFontDataIfNeeded):
        * platform/ios/LegacyTileCache.mm:
        (WebCore::LegacyTileCache::createTilesInActiveGrid):
        * platform/ios/LegacyTileGrid.mm:
        (WebCore::LegacyTileGrid::shouldUseMinimalTileCoverage):
        * platform/ios/LegacyTileLayerPool.mm:
        (WebCore::LegacyTileLayerPool::addLayer):
        * platform/ios/TileControllerMemoryHandlerIOS.cpp:
        (WebCore::TileControllerMemoryHandler::tileControllerGainedUnparentedTiles):

2014-04-14  Beth Dakin  <bdakin@apple.com>

        RenderLayerCompositor's m_layerForOverhangAreas should be offset by the 
        topContentInset
        https://bugs.webkit.org/show_bug.cgi?id=131632
        -and corresponding-
        <rdar://problem/16609602>

        Reviewed by Tim Horton.

        Offset m_layerForOverhangAreas by the topContentInset. 
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateOverflowControlsLayers):

2014-04-14  Alexey Proskuryakov  <ap@apple.com>

        Eliminate CachedFrame::m_mousePressNode
        https://bugs.webkit.org/show_bug.cgi?id=131626

        Reviewed by Brady Eidson.

        I couldn't find any observable effect of this change.

        * history/CachedFrame.cpp:
        (WebCore::CachedFrameBase::CachedFrameBase):
        (WebCore::CachedFrameBase::restore):
        (WebCore::CachedFrame::clear):
        * history/CachedFrame.h:
        (WebCore::CachedFrame::documentLoader):
        (WebCore::CachedFrame::mousePressNode): Deleted.
        Eliminated m_mousePressNode, accessor, and code that reached out to EventHandler.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::mousePressNode): Deleted.
        (WebCore::EventHandler::setMousePressNode): Deleted.
        * page/EventHandler.h:
        (WebCore::EventHandler::setMousePressed): Deleted. This function was already unused.

2014-04-14  Simon Fraser  <simon.fraser@apple.com>

        Run filter animations in the UI process with UI-side compositing
        https://bugs.webkit.org/show_bug.cgi?id=131199
        <rdar://problem/16479487>

        Reviewed by Sam Weinig.

        Add FilterOperation::clone() which is used during decoding.
        Export some things.

        * WebCore.exp.in:
        * platform/graphics/filters/FilterOperation.h:

2014-04-14  Jer Noble  <jer.noble@apple.com>

        Use after free in WebCore::CachedResourceHandleBase::~CachedResourceHandleBase / WebCore::removeDetachedChildrenInContainer
        https://bugs.webkit.org/show_bug.cgi?id=131169

        Reviewed by Eric Carlson.

        Invalidate the WebCoreAVFResourceLoader owned by MediaPlayerPrivateAVFoundationObjC
        in its destructor, to prevent a private function being called in response to the
        WebCoreAVFResourceLoader being stopped.

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::~MediaPlayerPrivateAVFoundationObjC):
        * platform/graphics/avfoundation/objc/WebCoreAVFResourceLoader.h:
        * platform/graphics/avfoundation/objc/WebCoreAVFResourceLoader.mm:
        (WebCore::WebCoreAVFResourceLoader::invalidate):

2014-04-14  Simon Fraser  <simon.fraser@apple.com>

        [WK2 iOS] Scrolling to anchor links is broken
        https://bugs.webkit.org/show_bug.cgi?id=131618
        <rdar://problem/16599144>

        Reviewed by Tim Horton.

        Have ScrollingTreeScrollingNode pass RequestedScrollPosition updates
        to the scrolling tree, so that the scrolling tree can have custom behavior
        for them if necessary.

        * page/scrolling/ScrollingTree.h:
        (WebCore::ScrollingTree::scrollingTreeNodeRequestsScroll):
        * page/scrolling/ScrollingTreeScrollingNode.cpp:
        (WebCore::ScrollingTreeScrollingNode::updateAfterChildren):
        * page/scrolling/ScrollingTreeScrollingNode.h:

2014-04-14  Brian J. Burg  <burg@cs.washington.edu>

        Web Replay: memoize fallback time values for document.lastModified
        https://bugs.webkit.org/show_bug.cgi?id=131318

        Reviewed by Joseph Pecoraro.

        If a document's Last-Modified header can't be found or used, then 
        document.lastModified is derived from the current system time or
        from filesystem data, which is obviously nondeterministic.

        It's better to handle this inside Document::lastModified rather than using
        MemoizedDOMResult, because only the fallback case is nondeterministic.

        Test: http/tests/inspector/replay/document-last-modified-fallback-value.html

        * dom/Document.cpp:
        (WebCore::Document::lastModified): Save or reuse memoized fallback value.
        * replay/WebInputs.json: Add input DocumentLastModifiedDate.

2014-04-12  Antti Koivisto  <antti@apple.com>

        Keep secondary tile grid for zoomed-out scale
        https://bugs.webkit.org/show_bug.cgi?id=131586

        Reviewed by Darin Adler.

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::updateContentsScale):
        
            Don't repaint tiled backing with setNeedsDisplay, it invalidates itself correctly in setContentsScale.
            Update custom child layers when tiled backing scale changes.

        * platform/graphics/ca/mac/TileController.h:
        * platform/graphics/ca/mac/TileController.mm:
        (WebCore::TileController::TileController):
        (WebCore::TileController::setNeedsDisplay):
        
            Drop the whole zoomed-out grid on full repaint.

        (WebCore::TileController::setNeedsDisplayInRect):
            
            Drop changed zoomed-out tiles. A more sophisticated strategy is possible.

        (WebCore::TileController::setContentsScale):
        
            Swap the zoomed-out grid in and out as needed.
            Repaint the active grid after scale change so the client does not have to.

        (WebCore::TileController::contentsScale):
        
            Get the content scale from the tile grid so it is not kept in two places.

        (WebCore::TileController::zoomedOutContentsScale):
        (WebCore::TileController::setZoomedOutContentsScale):
        
            Drop the zoomed-out grid if it no longer matches the zoomed-out scale.

        (WebCore::TileController::tileRevalidationTimerFired):
        (WebCore::TileController::retainedTileBackingStoreMemory):
        (WebCore::TileController::containerLayers):
        
            Return both zoomed-out tiles and the active tiles. Active tiles are on top.

        (WebCore::TileController::numberOfUnparentedTiles):
        (WebCore::TileController::removeUnparentedTilesNow):
        * platform/graphics/ca/mac/TileGrid.h:
        * platform/graphics/ca/mac/TileGrid.mm:
        (WebCore::TileGrid::dropTilesInRect):
        
            Add a function for dropping tiles.

        (WebCore::TileGrid::revalidateTiles):

2014-04-14  Oliver Hunt  <oliver@apple.com>

        Update test result

        * bindings/scripts/test/JS/JSTestNondeterministic.cpp:
        (WebCore::JSTestNondeterministicConstructor::finishCreation):

2014-04-14  Dirk Schulze  <krit@webkit.org>

        Optimize Canvas fill and drawImage with SourceIn, DestinationIn, SourceOut, and DestinationAtop using transparencyLayer.
        https://bugs.webkit.org/show_bug.cgi?id=79659

        Reviewed by Darin Adler.

        Optimize fill() and fillRect() operations in Canvas on composited contexts by
        10 to 20 times on CG.

        Replacing the ImageBuffer code by transparency layers allows the
        graphics library to optimize the drawing.

        Doing the same for drawImage() would give performance regressions.

        An inline function will create a transparency layer for CG. Cairo graphics
        does not composite correctly when a transparency layer gets created. 
        The inline function is just a NOOP for Cairo.

        This fixes bug 131303 as well.

        Added performance tests with r167124 already.

        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::fillInternal):
        (WebCore::CanvasRenderingContext2D::strokeInternal):
        (WebCore::CanvasRenderingContext2D::beginCompositeLayer):
        (WebCore::CanvasRenderingContext2D::endCompositeLayer):
        (WebCore::CanvasRenderingContext2D::fillRect):
        (WebCore::CanvasRenderingContext2D::strokeRect):
        (WebCore::CanvasRenderingContext2D::drawTextInternal):
        (WebCore::CanvasRenderingContext2D::fullCanvasCompositedFill): Deleted.
        * html/canvas/CanvasRenderingContext2D.h:

2014-04-14  Tim Horton  <timothy_horton@apple.com>

        Lots of compositing test failures after r167152
        https://bugs.webkit.org/show_bug.cgi?id=131574

        Reviewed by Darin Adler.

        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::dumpChildren):
        (WebCore::GraphicsLayer::dumpProperties):
        Make child-dumping recursive so that we can easily skip layers up to any depth.

2014-04-14  Peter Molnar  <pmolnar.u-szeged@partner.samsung.com>

        Fix incorrect indentations in CodeGeneratorJS.pm introduced in r165521
        https://bugs.webkit.org/show_bug.cgi?id=131613

        Reviewed by Csaba Osztrogonác.

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):
        Fixed 5-space indentation.
        * bindings/scripts/test/JS/JSTestNondeterministic.cpp:
        Updated the tests accordingly.

2014-04-14  Manuel Rego Casasnovas  <rego@igalia.com>

        [JSC] CSSStyleDeclaration report incorrect descriptor
        https://bugs.webkit.org/show_bug.cgi?id=89697

        Reviewed by Benjamin Poulain.

        Change descriptor of CSSStyleDeclaration properties in order to have
        writable and enumerable attributes set to true. Configurable is kept to
        false since the property is not deleteable.

        Test: fast/dom/CSSStyleDeclaration/cssstyledeclaration-properties-descriptor.html

        * bindings/js/JSCSSStyleDeclarationCustom.cpp:
        (WebCore::JSCSSStyleDeclaration::getOwnPropertySlotDelegate): Only set
        DontDelete attribute when creating the descriptor for
        CSSStyleDeclaration properties.

2014-04-14  Benjamin Poulain  <benjamin@webkit.org>

        [JSC] Improve the call site of string comparison in some hot path
        https://bugs.webkit.org/show_bug.cgi?id=131605

        Reviewed by Darin Adler.

        * dom/NodeRareData.h:
        (WebCore::NodeListsNodeData::NodeListCacheMapEntryHash::equal):
        We should use the right comparison operation depending on the Hash Traits.

2014-04-14  Andreas Kling  <akling@apple.com>

        Merge MemoryPressureHandler{Mac,IOS}.mm
        <https://webkit.org/b/131603>

        Join the iOS and Mac platform implementations of MemoryPressureHandler
        under the shared Cocoa banner. Each platform still has its own quirky
        behavior, but this puts them in the same file so we can start sharing.

        Reviewed by Darin Adler.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/cocoa/MemoryPressureHandlerCocoa.mm: Renamed from Source/WebCore/platform/mac/MemoryPressureHandlerMac.mm.
        (WebCore::MemoryPressureHandler::platformReleaseMemory):
        (WebCore::MemoryPressureHandler::install):
        (WebCore::MemoryPressureHandler::uninstall):
        (WebCore::MemoryPressureHandler::holdOff):
        (WebCore::MemoryPressureHandler::respondToMemoryPressure):
        (WebCore::respondToMemoryPressureCallback):
        (WebCore::MemoryPressureHandler::installMemoryReleaseBlock):
        (WebCore::MemoryPressureHandler::setReceivedMemoryPressure):
        (WebCore::MemoryPressureHandler::hasReceivedMemoryPressure):
        (WebCore::MemoryPressureHandler::clearMemoryPressure):
        (WebCore::MemoryPressureHandler::shouldWaitForMemoryClearMessage):
        (WebCore::MemoryPressureHandler::respondToMemoryPressureIfNeeded):
        * platform/ios/MemoryPressureHandlerIOS.mm: Removed.

2014-04-14  Benjamin Poulain  <benjamin@webkit.org>

        CSS JIT: compile the :nth-child() pseudo class
        https://bugs.webkit.org/show_bug.cgi?id=131602

        Reviewed by Andreas Kling.

        Tests: fast/selectors/nth-child-bounds.html
               fast/selectors/nth-child-with-backtracking.html

        Compile the :nth-child() pseudo class function + some related clean up.

        * css/CSSSelector.cpp:
        (WebCore::CSSSelector::nthA):
        (WebCore::CSSSelector::nthB):
        Expose the parsed value of an+b filters. Those values are used to compile
        the selector.

        (WebCore::CSSSelector::RareData::parseNth):
        While working on the patch, I discovered some severe issues with the parsing of large
        values of a and/or b. The problem comes from the way the CSS parser handle the values:
        the values are parsed as a double then converted to an AtomicString for CSSSelector.

        There are many problems related to large values but we never got bug reports because
        they are very uncommon. Fixing those problem would require changing the parser.

        Here, CSSSelector::RareData::parseNth() is hardened a little bit to avoid absurd values
        of a and b.

        * css/CSSSelector.h:
        * cssjit/RegisterAllocator.h:
        It looks like I forgot RDX in the list of register. Add it now since it is required
        for SelectorCodeGenerator::modulo().

        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::addPseudoType):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::modulo):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::moduloIsZero):
        There is no modulo() operation exposed on the macro assemblers. This is a basic
        implementation on top of idiv for x86_64.

        Since idiv works exclusively with RAX and RDX, most of the code is about getting
        those registers efficiently.

        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching):
        (WebCore::SelectorCompiler::setElementChildIndex):
        (WebCore::SelectorCompiler::setElementChildIndexAndUpdateStyle):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementIsNthChild):
        This is pretty much a straightforward implementation of :nth-child().
        The first part counts the number of previous elements.
        The second part updates the tree if this is style resolution.
        The last part compares the number of previous siblings to an+b to find if the filter matches.

        The only part that diverges from SelectorChecker is how childIndex is used. Instead of testing it
        at every iteration, only the first iteration handle the cache.

        * dom/ElementRareData.h:
        (WebCore::ElementRareData::childIndexMemoryOffset):
        * dom/Node.h:
        (WebCore::Node::rareDataMemoryOffset):
        (WebCore::Node::flagHasRareData):
        * rendering/style/RenderStyle.h:

2014-04-14  Tim Horton  <timothy_horton@apple.com>

        Support setting a background color on page overlays
        https://bugs.webkit.org/show_bug.cgi?id=131600

        Reviewed by Darin Adler.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::setDocumentOverlayRootLayer):
        Mark the compositing tree as needing a rebuild when we get a new document-relative
        overlay layer; otherwise we were depending on something else coming along and
        requiring a rebuild, which didn't always happen.

2014-04-14  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSS Regions] Hit testing doesn't work in video
        https://bugs.webkit.org/show_bug.cgi?id=131485

        Reviewed by Andrei Bucur.

        When hit testing flow thread layer through the region layer,
        we have to pass the depth sorting information and take that
        into account for the situation in which an ancestor of the region
        has preserve-3d transform style.

        Test: fast/regions/hit-test-region-preserve3d-container.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::hitTestLayer):
        (WebCore::RenderLayer::hitTestFlowThreadIfRegionForFragments):
        * rendering/RenderLayer.h:

2014-04-13  Darin Adler  <darin@apple.com>

        userVisibleString should not try to "encode" host names
        https://bugs.webkit.org/show_bug.cgi?id=131587
        rdar://problem/14686849

        Reviewed by Alexey Proskuryakov.

        * WebCore.exp.in: Updated for WebCoreNSURLExtras argument type changes.

        * platform/mac/WebCoreNSURLExtras.h: Removed unneeded code to make this
        Objective-C++ header compile in plain C++ files, which we never need to do.
        Added missing argument name, baseURL, and changed mysterious CFIndex arguments
        to the correct type, CFURLComponentType.

        * platform/mac/WebCoreNSURLExtras.mm:
        (WebCore::isLookalikeCharacter): Removed the inline keyword from this, and added
        more lookalike characters from the Mozilla list referenced here.
        (WebCore::URLByTruncatingOneCharacterBeforeComponent): Updated argument type.
        (WebCore::dataForURLComponentType): Ditto.
        (WebCore::userVisibleString): Only call mapHostNames if host name decoding is
        needed; no encoding here.

2014-04-13  Darin Adler  <darin@apple.com>

        REGRESSION (r158617): Find on Page can get stuck in a loop when the search string occurs in an <input> in a <fieldset>
        https://bugs.webkit.org/show_bug.cgi?id=126322

        Reviewed by Ryosuke Niwa.

        * dom/Element.cpp:
        (WebCore::Element::canContainRangeEndPoint): Now returns false when the role of the element
        is "img". This is the same rule that's hard-coded in isRenderReplacedElement for the same
        reason. Need more test coverage to make sure this role feature works consistently.

        * dom/Element.h: Made canContainRangeEndPoint no longer inline since it's not just a
        return statement any more.

        * dom/Position.cpp:
        (WebCore::Position::isCandidate): Took out code that calls isRendererReplacedElement
        that was added in r158617; not needed now that we updated canContainRangeEndPoint.

        * dom/Range.cpp:
        (WebCore::Range::firstNode): Removed code here that called isRendererReplacedElement.
        This was the wrong level to be adding editing logic, and there's a FIXME here to that
        effect, which we are now deleting. This was the change that broke Find.

        * editing/TextIterator.cpp: Added a comment about the redundancy between the
        isRendererReplacedElement and editingIgnoresContent functions.

        * html/HTMLHRElement.cpp:
        (WebCore::HTMLHRElement::canContainRangeEndPoint): Call through to base class instead
        of just returning true when we have child nodes. Lets Element::canContainRangeEndPoint
        do its thing.
        * html/HTMLHRElement.h: Ditto.

        * html/HTMLObjectElement.cpp:
        (WebCore::HTMLObjectElement::canContainRangeEndPoint): Call through to base class instead
        of just returning true when we have fallback content. Lets Element::canContainRangeEndPoint
        do its thing.
        * html/HTMLObjectElement.h: Ditto.

        * testing/Internals.cpp:
        (WebCore::Internals::countMatchesForText): Set the limit to 1000 instead of infinite.

2014-04-12  Darin Adler  <darin@apple.com>

        Use unique_ptr for FillLayer::m_next
        https://bugs.webkit.org/show_bug.cgi?id=75222

        Reviewed by Dan Bernstein.

        * css/DeprecatedStyleBuilder.cpp:
        (WebCore::ApplyPropertyFillLayer::applyInheritValue):
        Renamed currChild to just child and prevChild to previousChild.
        Changed code to pass ownership of the new FillLayer immediately.
        Changed some loops to be for loops.
        (WebCore::ApplyPropertyFillLayer::applyInitialValue): Ditto.
        (WebCore::ApplyPropertyFillLayer::applyValue): Ditto.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::backgroundHasOpaqueTopLayer): Use reference
        instead of pointer.
        (WebCore::RenderBox::paintFillLayers): Ditto.
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintFillLayerExtended): Ditto.

        * rendering/style/FillLayer.cpp:
        (WebCore::FillLayer::FillLayer): Removed m_next initializer since it is now an
        OwnPtr and initializes automatically. In a couple other places, changed m_next
        initializer to use make_unique.
        (WebCore::FillLayer::~FillLayer): Wrote loop for deletion of m_next.
        (WebCore::FillLayer::operator=): Removed unneeded explicit deletion of m_next.
        (WebCore::FillLayer::cullEmptyLayers): Ditto.
        (WebCore::clipMax): Marked inline.
        (WebCore::FillLayer::computeClipMax): Rewrote to use a loop instead of recursion.
        (WebCore::FillLayer::containsImage): Ditto.
        (WebCore::FillLayer::imagesAreLoaded): Ditto.
        (WebCore::FillLayer::hasOpaqueImage): Rewrote to use && instead of multiple if.
        (WebCore::FillLayer::hasImage): Rewrote to use a loop instead of recursion.
        (WebCore::FillLayer::hasFixedImage): Ditto.

        * rendering/style/FillLayer.h: Changed m_next to be a unique_ptr.

2014-04-13  Andy Estes  <aestes@apple.com>

        [QuickLook] Move file system-related code into WebKit
        https://bugs.webkit.org/show_bug.cgi?id=131597

        Reviewed by Dan Bernstein.

        QuickLookHandle should not be responsible for saving a copy of the
        original document to disk as it might be running in a process that
        either can't write to disk or can only write into a sandboxed
        container. To account for this, we need to separate the concern of
        quick look conversion from that of original document saving so that
        each activity can run in the appropriate process.

        Created a new interface between WebCore and WebKit by adding a client
        (QuickLookHandleClient) to QuickLookHandle which is notified of incoming
        bytes. A new function on FrameLoaderClient tells WebKit when a new
        QuickLookHandle is created, giving WebKit the opportunity to register a
        handle client. Moved the existing file system-related code as well as
        code only needed by WebKit1 in QuickLookHandle into a new WebKit1
        QuickLookHandleClient subclass.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj: Made QuickLookHandleClient.h Private.
        * loader/FrameLoaderClient.h:
        (WebCore::FrameLoaderClient::didCreateQuickLookHandle): Added.
        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::didCreateQuickLookHandle): Called FrameLoaderClient::didCreateQuickLookHandle().
        * loader/ResourceLoader.h:
        * platform/network/ResourceHandle.h: Made m_quickLook a unique_ptr.
        (WebCore::ResourceHandle::setQuickLookHandle): Changed to take a unique_ptr.
        * platform/network/ResourceHandleClient.h:
        (WebCore::ResourceHandleClient::didCreateQuickLookHandle): Added.
        * platform/network/ios/QuickLook.h: Added m_client, gave m_converter a stronger type, and made m_nsResponse a RetainPtr.
        (WebCore::QuickLookHandle::setClient): Added.
        (WebCore::QuickLookHandle::firstRequestURL): Added.
        (WebCore::QuickLookHandle::converter): Added.
        * platform/network/ios/QuickLook.mm:
        (WebCore::registerQLPreviewConverterIfNeeded):
        (WebCore::createTemporaryFileForQuickLook): Made non-static.
        (WebCore::emptyClient): Returned a shared empty QuickLookHandleClient.
        (WebCore::QuickLookHandle::QuickLookHandle): Removed file system and WebKit1-only code.
        (WebCore::QuickLookHandle::create): Changed to return a unique_ptr.
        (WebCore::QuickLookHandle::nsResponse):
        (WebCore::QuickLookHandle::didReceiveDataArray): Removed file system code and called QuickLookHandleClient::didReceiveDataArray() instead.
        (WebCore::QuickLookHandle::didReceiveData): Removed file system code and called QuickLookHandleClient::didReceiveData() instead.
        (WebCore::QuickLookHandle::didFinishLoading): Removed file system code and called QuickLookHandleClient::didFinishLoading() instead.
        (WebCore::QuickLookHandle::didFail): Removed file system and WebKit1-only code, calling QuickLookHandleClient::didFail() instead.
        (WebCore::QuickLookHandle::~QuickLookHandle): Removed file system and WebKit1-only code. Cleared our reference to m_client.
        (WebCore::QuickLookHandle::previewFileName): Retrieved from m_converter.
        (WebCore::QuickLookHandle::previewRequestURL): Ditto.
        * platform/network/ios/QuickLookHandleClient.h: Added.
        (WebCore::QuickLookHandleClient::~QuickLookHandleClient):
        (WebCore::QuickLookHandleClient::didReceiveDataArray):
        (WebCore::QuickLookHandleClient::didReceiveData):
        (WebCore::QuickLookHandleClient::didFinishLoading):
        (WebCore::QuickLookHandleClient::didFail):

2014-04-10  Pratik Solanki  <psolanki@apple.com>

        Move early return out of dispatch_async() block so we can return from willSendRequest quickly
        https://bugs.webkit.org/show_bug.cgi?id=131478
        <rdar://problem/16575535>

        Reviewed by Alexey Proskuryakov.

        Do a quick check to see if we need to synthesize the redirect response on the dispatch queue
        and return from willSendRequest callback quickly instead of always doing an effectively synchronous
        call to the main thread. We can't call synthesizeRedirectResponseIfNecessary on the dispatch
        queue since that accesses the ResourceRequest.

        No new tests because no change in functionality.

        * platform/network/cf/ResourceHandleCFURLConnectionDelegate.h:
        * platform/network/cf/ResourceHandleCFURLConnectionDelegateWithOperationQueue.cpp:
        (WebCore::ResourceHandleCFURLConnectionDelegateWithOperationQueue::setupRequest): Save the
        request scheme to use later for early return from willSendRequest.
        (WebCore::ResourceHandleCFURLConnectionDelegateWithOperationQueue::willSendRequest):

2014-04-08  Oliver Hunt  <oliver@apple.com>

        Rewrite Function.bind as a builtin
        https://bugs.webkit.org/show_bug.cgi?id=131083

        Reviewed by Geoffrey Garen.

        Switch WebCore to use the helper functions when defining the
        prototype properties on DOM constructors, and update bindings
        tests accordingly.

        * bindings/js/JSImageConstructor.cpp:
        (WebCore::JSImageConstructor::finishCreation):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateConstructorHelperMethods):
        * bindings/scripts/test/JS/JSTestActiveDOMObject.cpp:
        (WebCore::JSTestActiveDOMObjectConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestCustomNamedGetter.cpp:
        (WebCore::JSTestCustomNamedGetterConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestEventConstructor.cpp:
        (WebCore::JSTestEventConstructorConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestEventTarget.cpp:
        (WebCore::JSTestEventTargetConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestException.cpp:
        (WebCore::JSTestExceptionConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestGenerateIsReachable.cpp:
        (WebCore::JSTestGenerateIsReachableConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestInterface.cpp:
        (WebCore::JSTestInterfaceConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestMediaQueryListListener.cpp:
        (WebCore::JSTestMediaQueryListListenerConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestNamedConstructor.cpp:
        (WebCore::JSTestNamedConstructorConstructor::finishCreation):
        (WebCore::JSTestNamedConstructorNamedConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestNode.cpp:
        (WebCore::JSTestNodeConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestObj.cpp:
        (WebCore::JSTestObjConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestOverloadedConstructors.cpp:
        (WebCore::JSTestOverloadedConstructorsConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestSerializedScriptValueInterface.cpp:
        (WebCore::JSTestSerializedScriptValueInterfaceConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestTypedefs.cpp:
        (WebCore::JSTestTypedefsConstructor::finishCreation):
        * bindings/scripts/test/JS/JSattribute.cpp:
        (WebCore::JSattributeConstructor::finishCreation):
        * bindings/scripts/test/JS/JSreadonly.cpp:
        (WebCore::JSreadonlyConstructor::finishCreation):

2014-04-13  Simon Fraser  <simon.fraser@apple.com>

        [iOS WK2] Hook up scrolling tree nodes when coming out of the page cache
        https://bugs.webkit.org/show_bug.cgi?id=131577

        Reviewed by Tim Horton.

        The call to scrollingCoordinator->frameViewRootLayerDidChange() was inside
        a #if !PLATFORM(IOS) block, but now that we use the ScrollingCoordinator
        for WK2 we want to call this.

        * loader/HistoryController.cpp:
        (WebCore::HistoryController::restoreScrollPositionAndViewState):

2014-04-13  Zan Dobersek  <zdobersek@igalia.com>

        Unreviewed build fix after r167196.

        * platform/RemoteCommandListener.cpp:
        (WebCore::RemoteCommandListener::create): Fall back to using the new operator
        for allocating RemoteCommandListener object. Using std::make_unique() requires
        for the operator to be public, which doesn't work well with the static create()
        method.

2014-04-13  Zan Dobersek  <zdobersek@igalia.com>

        Remove unnecessary uses of std::move() in return statements
        https://bugs.webkit.org/show_bug.cgi?id=131457

        Reviewed by Darin Adler.

        Don't use std::move() in return statements unless necessary as it inhibits
        named return value optimizations as performed by compilers.

        * Modules/battery/BatteryManager.cpp:
        (WebCore::BatteryManager::create):
        * html/FormController.cpp:
        (WebCore::FormController::createSavedFormStateMap):
        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore::WebGLRenderingContext::create):
        * platform/RemoteCommandListener.cpp:
        (WebCore::RemoteCommandListener::create):
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayer::create):
        * platform/ios/RemoteCommandListenerIOS.mm:
        (WebCore::RemoteCommandListener::create):
        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::GridIterator::nextEmptyGridArea):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::setupFilters):
        * rendering/style/CounterDirectives.cpp:
        (WebCore::clone):

2014-04-13  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167168 and r167194.
        https://bugs.webkit.org/show_bug.cgi?id=131589

        Caused massive ASSERTION failures on the GTK Debug bot
        (Requested by philn on #webkit).

        Reverted changesets:

        "[GTK] Add HighDPI support for non-accelerated compositing
        contents"
        https://bugs.webkit.org/show_bug.cgi?id=131562
        http://trac.webkit.org/changeset/167168

        "Unreviewed. Fix GTK+ build with recent cairo and GTK+ after
        r167168."
        http://trac.webkit.org/changeset/167194

2014-04-13  Youenn Fablet  <youenn.fablet@crf.canon.fr>

        [GStreamer] No CORS support for media elements
        https://bugs.webkit.org/show_bug.cgi?id=99037

        Reviewed by Philippe Normand.

        Added CORS access control check to media sources when crossorigin attribute is set.

        Added getter to CORS access control check status (used to compute whether the stream is tainted or not).
        Related test is http/tests/security/video-cross-origin-readback.html.

        Disabled access to cross-origin streams that fail CORS check when crossorigin attribute is set.
        Related test is http/tests/security/video-cross-origin-accessfailure.html.

        Tests: http/tests/security/video-cross-origin-accessfailure.html
               http/tests/security/video-cross-origin-accesssameorigin.html

        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::didPassCORSAccessCheck): Return whether media is cross-origin (tainted) or not by querying the gstreamer source layer.
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h: Added MediaPlayerPrivateGStreamer::didPassCORSAccessCheck declaration.
        * platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp:
        (webKitWebSrcStart): Passed CORS mode parameter to the streaming client. In case of CORS check failure, stop the resource loading.
        (webKitSrcPassedCORSAccessCheck): Return whether CORS access control check was done and successful.
        (StreamingClient::handleResponseReceived): Take a parameter to assign the CORS access control check result.
        (CachedResourceStreamingClient::CachedResourceStreamingClient): Updated setting of the ResourceLoaderOptions according CORS mode.
        (CachedResourceStreamingClient::responseReceived): Check CORS and pass result to handleResponseReceived.
        (ResourceHandleStreamingClient::didReceiveResponse): No CORS check.
        * platform/graphics/gstreamer/WebKitWebSourceGStreamer.h: Added webKitSrcPassedCORSAccessCheck declaration.

2014-04-12  Darin Adler  <darin@apple.com>

        REGRESSION (r166860): ASSERTION FAILED: !isCalculated() on fast/css/image-set-value-not-removed-crash.html
        https://bugs.webkit.org/show_bug.cgi?id=131480

        Reviewed by Andreas Kling.

        Fixes intermittent assertion failure in fast/css/image-set-value-not-removed-crash.html.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::valueForImageSliceSide): Added. Helper used below in valueForNinePieceImageSlice.
        Handles calculated values by returning 0; incorrect but predictable.
        (WebCore::valueForNinePieceImageSlice): Updated to call valueForImageSliceSide.
        (WebCore::positionOffsetValue): Use nullptr.
        (WebCore::ComputedStyleExtractor::propertyValue): Updated to call positionOffsetValue
        by its new name. Removed "get" from the name.
        (WebCore::positionOffsetValue): Renamed from getPositionOffsetValue.

        * platform/Length.h: Made isCalculated public.

2014-04-12  Andy Estes  <aestes@apple.com>

        Fix the iOS build after r167183.

        * platform/network/ResourceHandle.h:
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::ResourceHandle::schedule):
        (WebCore::ResourceHandle::unschedule):

2014-04-12  Andy Estes  <aestes@apple.com>

        [iOS] Move QuickLookHandle from ResourceLoader to WebResourceLoader
        https://bugs.webkit.org/show_bug.cgi?id=131580

        Reviewed by Darin Adler.

        There's no need to bloat WebKit1's ResourceLoader with a pointer that
        only WebKit2's WebResourceLoader cares about.

        * loader/ResourceLoader.h:
        (WebCore::ResourceLoader::quickLookHandle): Deleted.
        (WebCore::ResourceLoader::setQuickLookHandle): Deleted.

2014-04-12  Chris Fleizach  <cfleizach@apple.com>

        AX: Cleanup AccessibilityObject::getAttribute
        https://bugs.webkit.org/show_bug.cgi?id=131555

        Reviewed by Darin Adler.

        No new functionality.

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::getAttribute):

2014-04-12  Youenn Fablet  <youenn.fablet@crf.canon.fr>

        [SOUP] Libsoup internal credential setting should be controlled by loader decision
        https://bugs.webkit.org/show_bug.cgi?id=130963

        Reviewed by Darin Adler.

        Disabled libsoup internal authentication manager for messages for which no credential is available and no stored credentials should be used.
        Updated synchronous loader to return whether using credentials or not according StoredCredential loader option parameter.
        Unskipped test http/tests/xmlhttprequest/cross-origin-no-authorization.html covers the patch.

        * platform/network/ResourceHandleInternal.h:
        (WebCore::ResourceHandleInternal::ResourceHandleInternal): Added m_useAuthenticationManager boolean to control whether disable authentication manager or not.
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::WebCoreSynchronousLoader::WebCoreSynchronousLoader): Added m_storedCredentials member.
        (WebCore::WebCoreSynchronousLoader::shouldUseCredentialStorage): Return true if stored credentials are allowed.
        (WebCore::applyAuthenticationToRequest): Set m_useAuthenticationManager value to disable authentication manager if cannot use stored credentials and ResourceHandleInternal has no username and password.
        (WebCore::createSoupMessageForHandleAndRequest): Disable authentication mananger according m_useAuthenticationManager value.
        (WebCore::ResourceHandle::platformLoadResourceSynchronously): Added StoredCredentials loader option to the sync loader constructor.

2014-04-11  Darin Adler  <darin@apple.com>

        Some small loader refinements and refactoring
        https://bugs.webkit.org/show_bug.cgi?id=131541

        Reviewed by Alexey Proskuryakov.

        Cut down on use of ResourceLoader::handle, which always returns null when
        using a network process. Also streamlined conditionals and did some other
        small refactoring.

        * loader/DocumentLoader.h: Use references rather than pointers for SchedulePair.

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::didChangePriority): Use m_handle instead of handle(),
        since we'd like to delete handle() entirely soon.
        (WebCore::ResourceLoader::didReceiveAuthenticationChallenge): Ditto.
        (WebCore::ResourceLoader::schedule): Added.
        (WebCore::ResourceLoader::unschedule): Ditto.
        * loader/ResourceLoader.h: Rearranged header to eliminate nested conditionals.
        Added schedule and unschedule functions for Mac.

        * loader/mac/DocumentLoaderMac.cpp:
        (WebCore::scheduleAll): Changed to take a reference and call ResourceLoader::schedule.
        (WebCore::unscheduleAll): Ditto.
        (WebCore::DocumentLoader::schedule): Ditto.
        (WebCore::DocumentLoader::unschedule): Ditto.

        * page/mac/PageMac.cpp:
        (WebCore::Page::addSchedulePair): Pass a reference rather than a pointer to schedule.
        (WebCore::Page::removeSchedulePair): Ditto.

        * platform/network/ResourceHandle.h: Did a bit of reformatting and reorganizing of
        conditionals.

        * platform/network/ResourceHandleInternal.h: Removed a tiny bit of unneeded declaration.

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::schedule): Updated to take a reference rather than a pointer.
        (WebCore::ResourceHandle::unschedule): Ditto.

2014-04-11  Andreas Kling  <akling@apple.com>

        Make NodeList.length inline-cacheable by JSC.
        <https://webkit.org/b/131579>

        For objects with custom index or name getters, we have to make sure
        that builtin properties take precedence. We do this by scanning the
        ancestor chain for a suitable property slot before moving on to
        named items.

        With this patch, we now mark such builtins as cacheable. This is
        safe since the whole point of doing this before processing named
        items is to ensure the same slot is returned consistently.

        Reviewed by Benjamin Poulain.

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateGetOwnPropertySlotBody):

2014-04-11  Tim Horton  <timothy_horton@apple.com>

        Lots of compositing test failures after r167152
        https://bugs.webkit.org/show_bug.cgi?id=131574

        Reviewed by Simon Fraser.

        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::dumpProperties):
        We were asking the parent's client whether the child should be dumped,
        but really the child's client is the one who should decide.

2014-04-11  Benjamin Poulain  <bpoulain@apple.com>

        ViewportConfiguration::layoutWidth() compute the width incorrectly when initial-scale+width do not fit in view
        https://bugs.webkit.org/show_bug.cgi?id=131575

        Reviewed by Enrica Casucci.

        I made a mistake when writing the new viewport code: ViewportConfiguration::layoutWidth() uses m_contentSize in one place.
        That make no sense, contentSize depends on the layout width.

        * page/ViewportConfiguration.cpp:
        (WebCore::ViewportConfiguration::layoutWidth):

2014-04-11  Andreas Kling  <akling@apple.com>

        Remove "numeric index getter" stuff from bindings code generator.
        <https://webkit.org/b/131565>

        This was used for an earlier generation of typed arrays. Now that JSC
        has native typed array support, we're not using this functionality and
        can just remove it.

        Reviewed by Geoffrey Garen.

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateGetOwnPropertySlotBody):
        (HasComplexGetOwnProperty):
        (InterfaceRequiresAttributesOnInstance):
        (InstanceOverridesGetOwnPropertySlot):
        (GenerateHeader):
        (GenerateImplementation):

2014-04-11  Brian J. Burg  <burg@cs.washington.edu>

        Web Replay: consolidate decoding macros used in SerializationMethods
        https://bugs.webkit.org/show_bug.cgi?id=131564

        Reviewed by Timothy Hatcher.

        We can use EncodingTraits<T>::DecodedType to create a local variable
        with the appropriate decoded type, rather than special casing.

        * replay/SerializationMethods.cpp:
        (JSC::EncodingTraits<NondeterministicInputBase>::decodeValue):
        (JSC::EncodingTraits<KeypressCommand>::decodeValue):
        (JSC::EncodingTraits<PlatformKeyboardEvent>::decodeValue):
        (JSC::EncodingTraits<PlatformMouseEvent>::decodeValue):
        (JSC::EncodingTraits<PlatformWheelEvent>::decodeValue):
        (JSC::EncodingTraits<PluginData>::decodeValue):

2014-04-11  Beth Dakin  <bdakin@apple.com>

        Need WK2 API to disable rubber-banding
        https://bugs.webkit.org/show_bug.cgi?id=131567

        Reviewed by Simon Fraser.

        Page will now store a vertical and horizontal ScrollElasticity in case the API has 
        been called before the FrameView even exists.

        New Page functions.
        * WebCore.exp.in:

        Use Page’s cached ScrollElasticity.
        * page/FrameView.cpp:
        (WebCore::FrameView::FrameView):

        If there is already a FrameView, then assign it the new ScrollElasticity.
        * page/Page.cpp:
        (WebCore::Page::Page):
        (WebCore::Page::setVerticalScrollElasticity):
        (WebCore::Page::setHorizontalScrollElasticity):
        * page/Page.h:
        (WebCore::Page::verticalScrollElasticity):
        (WebCore::Page::horizontalScrollElasticity):

2014-04-11  Martin Robinson  <mrobinson@igalia.com>

        REGRESSION(167145): Many media tests fail
        https://bugs.webkit.org/show_bug.cgi?id=131569

        Reviewed by Brent Fulgham.

        * PlatformGTK.cmake: Add the localized strings file to the list of user agent scripts.
        * platform/gtk/RenderThemeGtk.cpp:
        (WebCore::RenderThemeGtk::mediaControlsScript): Include the localized strings file in the script body.

2014-04-11  Tim Horton  <timothy_horton@apple.com>

        [iOS WebKit2] Find-in-page indicator
        https://bugs.webkit.org/show_bug.cgi?id=131510
        <rdar://problem/16547777>

        Reviewed by Simon Fraser and Enrica Casucci.

        * editing/Editor.cpp:
        (WebCore::Editor::findString):
        * editing/FindOptions.h:
        Add a find option which prevents WebCore from revealing the selection
        after selecting a successful find match.

2014-04-11  Owen Taylor  <otaylor@redhat.com>

        [GTK] Add HighDPI support for non-accelerated compositing contents
        https://bugs.webkit.org/show_bug.cgi?id=131562

        Reviewed by Martin Robinson.

        No new tests. This will be tested once we have the proper dependencies in the WebKit testing
        JHBuild.

        * platform/cairo/WidgetBackingStore.h:
        (WebCore::WidgetBackingStore::WidgetBackingStore): Accept a device scale argument.
        * platform/cairo/WidgetBackingStoreCairo.cpp: Use the device scale argument to make the surface the proper size and set the surface device scale.
        * platform/cairo/WidgetBackingStoreCairo.h: Accept a device scale argument.
        * platform/graphics/cairo/CairoUtilities.cpp: Add a new helper to set the device scale if Cairo built against is new enough.
        * platform/graphics/cairo/CairoUtilities.h:
        * platform/gtk/GtkVersioning.h: Add the HAVE_GTK_SCALE_FACTOR macro.
        * platform/gtk/WidgetBackingStoreGtkX11.cpp: Use the device scale argument to make the surface the proper size and set the surface device scale.
        * platform/gtk/WidgetBackingStoreGtkX11.h: Accept a device scale argument.

2014-04-11  Jon Honeycutt  <jhoneycutt@apple.com>

        Assertion failure changing select element size during focus event
        dispatch
        <https://bugs.webkit.org/show_bug.cgi?id=131566>
        <rdar://problem/16400735>

        Reviewed by Andy Estes.

        Test: fast/forms/select-change-size-during-focus.html

        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::listBoxDefaultEventHandler):
        Adopt the fix from Chromium r171216; check that the renderer is still
        of the expected type, and return early if it is not.

2014-04-11  Bem Jones-Bey  <bjonesbe@adobe.com>

        Clear sibling floats while splitting inline flow
        https://bugs.webkit.org/show_bug.cgi?id=130905

        Reviewed by David Hyatt.

        This is a port of a Blink patch by kenrb@chromium.org.
        (https://src.chromium.org/viewvc/blink?revision=169658&view=revision)

        During RenderInline::splitFlow(), floats are cleared on an anonymous
        containingBlock() for the inline being split. This is a problem if
        siblings of the block contain references to the same floats, since the
        float removal code in markSiblingsWithFloatsForLayout() will not later
        find them.

        This change also affects RenderBlock::splitFlow() and
        RenderBoxModelObject::moveChildrenTo, since those are called in
        similar situations as RenderInline::splitFlow().

        Test: fast/block/float/split-inline-sibling-of-float-crash.html

        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::removeFloatingObjects): Add call to
            markSiblingsWithFloatsForLayout() before removing floats.

2014-04-11  Gavin Barraclough  <baraclough@apple.com>

        Rollout - Rewrite Function.bind as a builtin
        https://bugs.webkit.org/show_bug.cgi?id=131083

        Unreviewed.

        Rolling out r167020 while investigating a performance regression.

        * bindings/js/JSImageConstructor.cpp:
        (WebCore::JSImageConstructor::finishCreation):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateConstructorHelperMethods):
        * bindings/scripts/test/JS/JSTestActiveDOMObject.cpp:
        (WebCore::JSTestActiveDOMObjectConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestCustomNamedGetter.cpp:
        (WebCore::JSTestCustomNamedGetterConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestEventConstructor.cpp:
        (WebCore::JSTestEventConstructorConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestEventTarget.cpp:
        (WebCore::JSTestEventTargetConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestException.cpp:
        (WebCore::JSTestExceptionConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestGenerateIsReachable.cpp:
        (WebCore::JSTestGenerateIsReachableConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestInterface.cpp:
        (WebCore::JSTestInterfaceConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestMediaQueryListListener.cpp:
        (WebCore::JSTestMediaQueryListListenerConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestNamedConstructor.cpp:
        (WebCore::JSTestNamedConstructorConstructor::finishCreation):
        (WebCore::JSTestNamedConstructorNamedConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestNode.cpp:
        (WebCore::JSTestNodeConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestObj.cpp:
        (WebCore::JSTestObjConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestOverloadedConstructors.cpp:
        (WebCore::JSTestOverloadedConstructorsConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestSerializedScriptValueInterface.cpp:
        (WebCore::JSTestSerializedScriptValueInterfaceConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestTypedefs.cpp:
        (WebCore::JSTestTypedefsConstructor::finishCreation):
        * bindings/scripts/test/JS/JSattribute.cpp:
        (WebCore::JSattributeConstructor::finishCreation):
        * bindings/scripts/test/JS/JSreadonly.cpp:
        (WebCore::JSreadonlyConstructor::finishCreation):

2014-04-11  Myles C. Maxfield  <mmaxfield@apple.com>

        Build Fix after r167151.

        Unreviewed.

        * editing/AlternativeTextController.cpp:
        (WebCore::AlternativeTextController::applyAlternativeTextToRange):

2014-04-10  Jer Noble  <jer.noble@apple.com>

        [EME][Mac] Using KeySession.update([renew]) should trigger KeyMessage event instead of NeedKey event
        https://bugs.webkit.org/show_bug.cgi?id=131527

        Reviewed by Eric Carlson.

        Rather than triggering a needKey() event, necessatating the creation
        of an entirely new MediaKeySession, cause a new key request to be
        created by sending the same initData back into the AVSampleDataParser.

        Also, do some drive-by clean up suggested by Darin in the review for
        r166509.

        * platform/graphics/avfoundation/objc/CDMSessionMediaSourceAVFObjC.mm:
        (WebCore::isEqual): Support an alloc-free equality check between
            Uint8Array and static strings.
        (WebCore::CDMSessionMediaSourceAVFObjC::update):

2014-04-11  David Kilzer  <ddkilzer@apple.com>

        Build fix (r167151): Do not dereference Node::document() before passing to Range::create()
        <https://webkit.org/b/131475>

        Fixes the following build failure:

            WebCore/editing/AlternativeTextController.cpp:275:71: error: indirection requires pointer operand ('WebCore::Document' invalid)
                int paragraphStartIndex = TextIterator::rangeLength(Range::create(*rootNode.document(), &rootNode, 0, paragraphRangeContainingCorrection.get()->startContainer(), paragraphRangeContainingCorrection.get()->startOffset()).get());
                                                                                  ^~~~~~~~~~~~~~~~~~~~

        * editing/AlternativeTextController.cpp:
        (WebCore::AlternativeTextController::applyAlternativeTextToRange):
        Remove unneeded '*' operator since Node::document() returns a
        Document& and Range::create() accepts a Document& for its first
        argument.

2014-04-11  Brian J. Burg  <burg@cs.washington.edu>

        Web Replay: memoize nondeterministic attributes of the Navigator interface
        https://bugs.webkit.org/show_bug.cgi?id=131340

        Reviewed by Timothy Hatcher.

        Most attributes of window.navigator do not change very often, but they
        could be easily changed by the user or embedder. So, memoize attribute values.

        This change does not include navigator.mimeTypes and navigator.plugins,
        which will be handled at a different level. <https://webkit.org/b/131341>

        Test: ManualTests/inspector/replay-window-navigator-basic.html

        * page/Navigator.idl: Add Nondeterministic attribute.

2014-04-10  Jer Noble  <jer.noble@apple.com>

        [iOS][WK2] Videos should animate into and out of fullscreen.
        https://bugs.webkit.org/show_bug.cgi?id=131497

        Reviewed by Simon Fraser.

        Use AVPlayerViewController's new enterFullScreenWithCompletionHandler: and exitFullScreenWithCompletionHandler:
        methods to animate into and out of full screen. To do so, use the provided initialFrame and finalFrame screen
        rects to correctly place the AVPlayerViewController's view before entering or exiting fullscreen.

        * platform/ios/WebVideoFullscreenControllerAVKit.mm:
        (-[WebVideoFullscreenController enterFullscreen:]): Pass the media element's screen rect.
        (-[WebVideoFullscreenController exitFullscreen]): Ditto.
        * platform/ios/WebVideoFullscreenInterfaceAVKit.h:
        * platform/ios/WebVideoFullscreenInterfaceAVKit.mm:
        (-[WebAVPlayerController playerViewController:shouldExitFullScreenWithReason:]): Renamed from shouldDismissWithReason.
        (WebVideoFullscreenInterfaceAVKit::enterFullscreen): Use the new AVKit APIs.
        (WebVideoFullscreenInterfaceAVKit::exitFullscreen): Ditto.
        * WebCore.exp.in: Modify the exported symbols for enter and exitFullscreen.

2014-04-11  Tim Horton  <timothy_horton@apple.com>

        Support document-relative and custom-frame page overlays
        https://bugs.webkit.org/show_bug.cgi?id=131560
        <rdar://problem/16595556>

        Reviewed by Simon Fraser.

        * WebCore.exp.in:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::RenderLayerCompositor):
        (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree):
        (WebCore::RenderLayerCompositor::setDocumentOverlayRootLayer):
        * rendering/RenderLayerCompositor.h:
        Add the concept of a document overlay layer, which is plugged in as the
        last child of the root content layer. Expose it to WebKit2.

2014-04-09  Myles C. Maxfield  <mmaxfield@apple.com>

        Autocorrection causes ASSERT when replacing alternative string
        https://bugs.webkit.org/show_bug.cgi?id=131475

        Reviewed by Ryosuke Niwa.

        In AlternativeTextController::applyAlternativeTextToRange(), we attempt to create
        a Range that crosses from outside of a shadow root to inside of one. Instead,
        we should keep the Range entirely within the shadow root.

        Test: ManualTests/autocorrection/autocorrection-accept-crash.html

        * editing/AlternativeTextController.cpp:
        (WebCore::AlternativeTextController::applyAlternativeTextToRange):

2014-04-11  Hans Muller  <hmuller@adobe.com>

        [CSS Shapes] shape-outside from image doesn't load properly
        https://bugs.webkit.org/show_bug.cgi?id=131491

        Reviewed by Bem Jones-Bey.

        Make RenderImage::imageChanged() call super if there's a shape-outside
        image because the shape-outside imageChanged() logic is in RenderBox.

        Test: http/tests/css/shape-image-file.html

        * rendering/RenderElement.h:
        (WebCore::RenderElement::hasShapeOutside):
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::imageChanged):

2014-04-11  Brady Eidson  <beidson@apple.com>

        Aggregate multiple "respondToChangedSelection" calls to one scan for telephone numbers
        https://bugs.webkit.org/show_bug.cgi?id=131559

        Reviewed by Gavin Barraclough.

        No new tests (Perf-only change to an untested feature)

        * editing/Editor.cpp:
        (WebCore::Editor::Editor):
        (WebCore::Editor::respondToChangedSelection): Start a one shot timer for scanSelectionForTelephoneNumbers
          instead of scanning synchronously.
        (WebCore::Editor::scanSelectionForTelephoneNumbers):
        * editing/Editor.h:

2014-04-11  Antti Koivisto  <antti@apple.com>

        Try to fix windows build.
        
        * platform/graphics/ca/GraphicsLayerCA.h:

2014-04-11  Brent Fulgham  <bfulgham@apple.com>

        Unreviewed follow-up for r167145

        * English.lproj/mediaControlsLocalizedStringsiOS.js:
        (mediaControlsLocalizedStringsiOS): Use smart-quote in
        message string.

2014-04-11  Brent Fulgham  <bfulgham@apple.com>

        Regression: media controls and status messages are no longer localized.
        https://bugs.webkit.org/show_bug.cgi?id=120956

        Reviewed by Jer Noble.

        * English.lproj/mediaControlsLocalizedStrings.js: Added.
        (mediaControlsLocalizedStrings): Moved from mediaControlsApple.js.
        * English.lproj/mediaControlsLocalizedStringsiOS.js: Added.
        (mediaControlsLocalizedStringsiOS): Moved from mediaControlsiOS.js.
        * Modules/mediacontrols/mediaControlsApple.js:
        (Controller.prototype.UIString): Get strings from external file.
        * Modules/mediacontrols/mediaControlsiOS.js:
        (ControllerIOS.prototype.UIString): Ditto.
        * WebCore.vcxproj/copyWebCoreResourceFiles.cmd: Copy to Windows bundle.
        * WebCore.xcodeproj/project.pbxproj: Copy new files to bundle.
        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::mediaControlsScript): Load the locale-specific
        string resource when loading the media controls.
        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::mediaControlsScript): Ditto.
        * rendering/RenderThemeWin.cpp:
        (WebCore::RenderThemeWin::mediaControlsScript): Ditto.

2014-04-11  Brent Fulgham  <bfulgham@apple.com>

        [Win] Build fix after r167138

        * platform/graphics/ca/GraphicsLayerCA.h: The TileController is
        only available on Mac/Cocoa builds.

2014-04-11  Mark Lam  <mark.lam@apple.com>

        JSMainThreadExecState::call() should clear exceptions before returning.
        <https://webkit.org/b/131530>

        Reviewed by Geoffrey Garen.

        Test: fast/dom/regress-131530.html

        Previously, JSMainThreadExecState::call() did not clear any pending
        exceptions in the VM before returning.  On returning, the
        JSMainThreadExecState destructor may re-enter the VM to notify
        MutationObservers.  This may result in a crash because the VM expects
        exceptions to be cleared at entry.

        We now change JSMainThreadExecState::call() to return the exception
        (if present) via an argument, and clear it from the VM before returning.

        As part of this change, I updated various parts of the code base to use the
        new API as needed.

        * bindings/js/JSCallbackData.cpp:
        (WebCore::JSCallbackData::invokeCallback):
        * bindings/js/JSCustomXPathNSResolver.cpp:
        (WebCore::JSCustomXPathNSResolver::lookupNamespaceURI):
        * bindings/js/JSDOMGlobalObjectTask.cpp:
        - Assert that there's no unhandled exception after the Microtask returns.
          See comment for WebCore::JSMainThreadExecState::runTask below for more
          details.

        * bindings/js/JSErrorHandler.cpp:
        (WebCore::JSErrorHandler::handleEvent):
        * bindings/js/JSEventListener.cpp:
        (WebCore::JSEventListener::handleEvent):
        * bindings/js/JSHTMLDocumentCustom.cpp:
        (WebCore::JSHTMLDocument::open):
        - Document.open() cannot be the first function on the JS stack.  Hence,
          there is no need to use JSMainThreadExecState to call into the VM, as
          this is only needed to catch the event of returning from the first
          function for the purpose of notifying MutationObservers.  Change to
          call JSC::call() directly.

        * bindings/js/JSMainThreadExecState.cpp:
        (WebCore::functionCallHandlerFromAnyThread):
        * bindings/js/JSMainThreadExecState.h:
        (WebCore::JSMainThreadExecState::call):
        (WebCore::JSMainThreadExecState::evaluate):
        - Remove the explicitly acquisition of the JSLock here because we now
          acquire the JSLock as part of the JSMainThreadExecState instance.
        (WebCore::JSMainThreadExecState::runTask):
        - Added an assert to verify that the task does not return with an
          unhandled exception.  Currently, the only Microtask in use is for the
          Promise implementation, which will eat the exception before returning.
          This assertion is added here to verify that this contract does not
          inadvertantly change in the future.
        (WebCore::JSMainThreadExecState::JSMainThreadExecState):
        - Now acquires the JSLock as well since by definition, we're only
          instantiating the JSMainThreadExecState because we're about to enter
          the VM.

        * bindings/js/JSMutationCallback.cpp:
        (WebCore::JSMutationCallback::call):
        * bindings/js/JSNodeFilterCondition.cpp:
        (WebCore::JSNodeFilterCondition::acceptNode):
        - acceptNode() is only used in the TreeWalker and NodeIterator APIs which
          cannot be the first function on the JS stack.  Hence, we should call
          JSC::call() directly instead of going through JSMainThreadExecState.

        * bindings/js/ScheduledAction.cpp:
        (WebCore::ScheduledAction::executeFunctionInContext):
        * bindings/objc/WebScriptObject.mm:
        (WebCore::addExceptionToConsole):
        (-[WebScriptObject callWebScriptMethod:withArguments:]):

2014-04-11  Brian J. Burg  <burg@cs.washington.edu>

        Web Replay: CodeGeneratorJS should guard includes of replay-related headers
        https://bugs.webkit.org/show_bug.cgi?id=131407

        Reviewed by Timothy Hatcher.

        This patch adds guards to headers that are only required by generated replay code
        that is itself guarded. Other ports probably haven't added the headers to their
        build files, so we don't want to emit the unused header includes.

        This patch also converts generated uses of DEFINE_STATIC_LOCAL to NeverDestroyed<T>.
        Finally, a new bindings test was added to document changes to generated replay code.

        Test: Source/WebCore/bindings/scripts/test/TestNondeterministic.idl

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):
        (GenerateImplementationFunctionCall):

        * bindings/scripts/test/GObject/WebKitDOMTestNondeterministic.cpp: Added.
        * bindings/scripts/test/GObject/WebKitDOMTestNondeterministic.h: Added.
        * bindings/scripts/test/GObject/WebKitDOMTestNondeterministic.symbols: Added.
        * bindings/scripts/test/GObject/WebKitDOMTestNondeterministicPrivate.h: Added.
        * bindings/scripts/test/JS/JSTestNondeterministic.cpp: Added.
        * bindings/scripts/test/JS/JSTestNondeterministic.h: Added.
        * bindings/scripts/test/ObjC/DOMTestNondeterministic.h: Added.
        * bindings/scripts/test/ObjC/DOMTestNondeterministic.mm: Added.
        * bindings/scripts/test/ObjC/DOMTestNondeterministicInternal.h: Added.
        * bindings/scripts/test/TestNondeterministic.idl: Added.

2014-04-11  Antti Koivisto  <antti@apple.com>

        Pipe initial scale factor to TileController
        https://bugs.webkit.org/show_bug.cgi?id=131521

        Reviewed by Tim Horton.

        * WebCore.exp.in:
        * page/Page.cpp:
        (WebCore::Page::Page):
        (WebCore::Page::setZoomedOutPageScaleFactor):
        * page/Page.h:
        (WebCore::Page::zoomedOutPageScaleFactor):
        * platform/graphics/GraphicsLayerClient.h:
        (WebCore::GraphicsLayerClient::zoomedOutPageScaleFactor):
        * platform/graphics/TiledBacking.h:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::updateContentsScale):
        * platform/graphics/ca/GraphicsLayerCA.h:
        * platform/graphics/ca/mac/TileController.h:
        * platform/graphics/ca/mac/TileController.mm:
        (WebCore::TileController::TileController):
        (WebCore::TileController::setContentsScale):
        (WebCore::TileController::setZoomedOutContentsScale):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::zoomedOutPageScaleFactor):
        * rendering/RenderLayerBacking.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::zoomedOutPageScaleFactor):
        * rendering/RenderLayerCompositor.h:

2014-04-10  Chris Fleizach  <cfleizach@apple.com>

        Heap-use-after-free in WebCore::SpeechSynthesisUtterance::startTime
        https://bugs.webkit.org/show_bug.cgi?id=131482

        Reviewed by David Kilzer.

        Hold onto the utterance until it has time to fire, in case other references have been removed.

        Merged from Blink r171077 by <dmazzoni@chromium.org>

        Test: platform/mac/fast/speechsynthesis/speech-synthesis-gc-utterance-crash.html

        * Modules/speech/SpeechSynthesis.cpp:
        (WebCore::SpeechSynthesis::handleSpeakingCompleted):

2014-04-11  Zan Dobersek  <zdobersek@igalia.com>

        Avoid Vector copies in RenderGrid::placeItemsOnGrid()
        https://bugs.webkit.org/show_bug.cgi?id=131452

        Reviewed by Sergio Villar Senin.

        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::placeSpecifiedMajorAxisItemsOnGrid): Take in a const reference to the
        Vector object. Make the for-loop that iterates through it range-based.
        (WebCore::RenderGrid::placeAutoMajorAxisItemsOnGrid): Ditto.
        * rendering/RenderGrid.h:

2014-04-11  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: Remove shared PageScriptDebugServer, create per-Page
        https://bugs.webkit.org/show_bug.cgi?id=131523

        Reviewed by Timothy Hatcher.

        Having a shared PageScriptDebugServer was causing issues when we called
        JSC::Debugger::clearBreakpoints() closing one inspector while another
        is open for another WebCore::Page in the same process. Having the same
        JSC::Debugger underlying multiple InspectorDebuggerAgent instances
        means that when clearBreakpoints is called, the real JSC breakpoints
        underlying other InspectorDebuggerAgent's get removed. When those
        InspectorDebuggerAgents attempt to remove their breakpoints they
        encounter unexpected issues.

        This entirely rebuilds PageScriptDebugServer to be per-Page instead
        of shared across all pages. So take this opportunity to move the
        file from WebCore/bindings/js to WebCore/inspector.

        * CMakeLists.txt:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSBindingsAllInOne.cpp:
        * bindings/js/PageScriptDebugServer.h: Removed.
        * inspector/InspectorAllInOne.cpp:
        Move PageScriptDebugServer.

        * inspector/InspectorController.h:
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::InspectorController):
        Set the ScriptDebugServer directly on some other agents that
        were previously using the global debug server.

        * inspector/InspectorProfilerAgent.h:
        (WebCore::InspectorProfilerAgent::scriptDebugServer):
        * inspector/InspectorProfilerAgent.cpp:
        (WebCore::InspectorProfilerAgent::InspectorProfilerAgent):
        (WebCore::InspectorProfilerAgent::setScriptDebugServer):
        (WebCore::InspectorProfilerAgent::start):
        (WebCore::InspectorProfilerAgent::willDestroyFrontendAndBackend): Deleted.
        * inspector/InspectorTimelineAgent.h:
        * inspector/InspectorTimelineAgent.cpp:
        (WebCore::InspectorTimelineAgent::start):
        (WebCore::InspectorTimelineAgent::stop):
        (WebCore::InspectorTimelineAgent::setPageScriptDebugServer):
        (WebCore::InspectorTimelineAgent::InspectorTimelineAgent):
        Refactor these two agents to take in a script debug server.
        The server is expected to be set during initialization and
        to always be valid (like debug server on RuntimeAgent).

        * inspector/PageDebuggerAgent.h:
        * inspector/PageDebuggerAgent.cpp:
        (WebCore::PageDebuggerAgent::PageDebuggerAgent):
        (WebCore::PageDebuggerAgent::startListeningScriptDebugServer):
        (WebCore::PageDebuggerAgent::stopListeningScriptDebugServer):
        (WebCore::PageDebuggerAgent::scriptDebugServer):
        Have PageDebuggerAgent hold the PageScriptDebugServer.
        Update for the simplified interfaces.

        * inspector/PageScriptDebugServer.h: Added.
        * inspector/PageScriptDebugServer.cpp: Renamed from Source/WebCore/bindings/js/PageScriptDebugServer.cpp.
        (WebCore::PageScriptDebugServer::PageScriptDebugServer):
        (WebCore::PageScriptDebugServer::addListener):
        (WebCore::PageScriptDebugServer::removeListener):
        (WebCore::PageScriptDebugServer::recompileAllJSFunctions):
        (WebCore::PageScriptDebugServer::didPause):
        (WebCore::PageScriptDebugServer::didContinue):
        (WebCore::PageScriptDebugServer::runEventLoopWhilePaused):
        (WebCore::PageScriptDebugServer::runEventLoopWhilePausedInternal):
        (WebCore::PageScriptDebugServer::isContentScript):
        (WebCore::PageScriptDebugServer::reportException):
        (WebCore::PageScriptDebugServer::setJavaScriptPaused):
        Model after JSGlobalObjectScriptDebugServer, the PageScriptDebugServer
        holds a reference to a Page.

2014-04-11  Bear Travis  <betravis@adobe.com>

        [CSS Shapes] inset args and radial args should serialize to the simplest form
        https://bugs.webkit.org/show_bug.cgi?id=129825

        Reviewed by Dirk Schulze.

        Modify inset serialization to omit components where possible. The insets simplify
        according to the margin shorthand, while the corner radii simplify according to
        the border-radius shorthand.

        Modifying existing parsing tests.

        * css/CSSBasicShapes.cpp:
        (WebCore::buildInsetRadii): Add the necessary radii, omitting components where possible.
        (WebCore::buildInsetString): Omit components where possible.

2014-04-11  Praveen R Jadhav  <praveen.j@samsung.com>

        "playbackTime" parameter is not present in AudioProcessingEvent Interface as per W3C spec
        https://bugs.webkit.org/show_bug.cgi?id=105518

        Reviewed by Jer Noble.

        Attribute "playbackTime" in AudioProcessingEvent implemented to pass playback time of
        audiobuffer associated with ScriptProcessorNode of the context.
 
        Reference: https://codereview.chromium.org/210973002

        Spec: http://www.w3.org/TR/webaudio/#AudioProcessingEvent

        Test: webaudio/audioprocessingevent.html

        * Modules/webaudio/AudioProcessingEvent.cpp:
        (WebCore::AudioProcessingEvent::create):
        (WebCore::AudioProcessingEvent::AudioProcessingEvent):
        * Modules/webaudio/AudioProcessingEvent.h:
        (WebCore::AudioProcessingEvent::playbackTime):
        * Modules/webaudio/AudioProcessingEvent.idl:
        * Modules/webaudio/ScriptProcessorNode.cpp:
        (WebCore::ScriptProcessorNode::fireProcessEvent):

2014-04-11  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: WK1: Trail of cruft in redraw during animations.
        https://bugs.webkit.org/show_bug.cgi?id=131525

        Reviewed by Simon Fraser.

        Use enclosing rect instead of snapping to make sure the repaint rect always
        covers the dirty area when painting is requested in a non-compositing RenderView.
        This only applies to WK1 as WK2 has compositing RenderView and the repainting 
        is managed by RenderLayerBacking.

        This is a temporary solution until after ScrollView/FrameView/RenderView
        is transitioned to device pixels. (tracked here: webkit.org/b/131526).

        Test: fast/repaint/hidpi-block-width-change-leaves-cruft.html

        * rendering/RenderView.cpp:
        (WebCore::RenderView::repaintViewRectangle):

2014-04-10  Dean Jackson  <dino@apple.com>

        WebGL: need error checking after texture uploads
        https://bugs.webkit.org/show_bug.cgi?id=62902
        rdar://problem/9640309

        Reviewed by Brent Fulgham.

        A followup to Darin's r167109. We need to also check for errors
        in the texImage2D case.

        This is difficult to reproducibly test because it would require
        attempting to exhaust GPU memory.

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore::WebGLRenderingContext::compressedTexImage2D): Check for errors by calling
        moveErrorsToSyntheticErrorList twice, once before and once after. If an error
        occurred, explicitly mark the texture as invalid.
        (WebCore::WebGLRenderingContext::texImage2DBase): Ditto.
        * html/canvas/WebGLTexture.cpp:
        (WebCore::WebGLTexture::markInvalid): If the LevelInfo exists for this
        mipmap level, then set the valid flag to false. There is a chance that
        a previous call to texImage2D succeeded for this level, but it's probably
        better to assume that is now invalid.
        * html/canvas/WebGLTexture.h: New markInvalid method.

2014-04-10  Darin Adler  <darin@apple.com>

        WebGL: need error checking after texture and buffer uploads in some cases
        https://bugs.webkit.org/show_bug.cgi?id=62902
        rdar://problem/9640309

        Reviewed by Dean Jackson.

        Not clear how to write a test for this.

        * html/canvas/WebGLBuffer.cpp:
        (WebCore::WebGLBuffer::disassociateBufferData): Added.
        * html/canvas/WebGLBuffer.h: Added disassociateBufferData.

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore::WebGLRenderingContext::bufferData): Check for errors by calling
        moveErrorsToSyntheticErrorList twice, once before and once after. If an error
        occurred, call the WebGLBuffer so it doesn't think it has data.
        (WebCore::WebGLRenderingContext::bufferSubData): Ditto.

        * platform/graphics/GraphicsContext3D.h: Added moveErrorsToSyntheticErrorList.

        * platform/graphics/opengl/GraphicsContext3DOpenGLCommon.cpp:
        (WebCore::GraphicsContext3D::moveErrorsToSyntheticErrorList): Added. Calls
        glError and moves any errors to the synthetic error list.
        (WebCore::GraphicsContext3D::getError): Added call to moveErrorsToSyntheticErrorList
        to preserve error ordering.
        (WebCore::GraphicsContext3D::synthesizeGLError): Ditto.

2014-04-10  Enrica Casucci  <enrica@apple.com>

        iOS build fix to deal with CoreText changes.
        
        Reviewed by Benjamin Poulain.
        
        This is a temporary fix until CT fixes the issue.

        * rendering/RenderThemeIOS.mm:

2014-04-10  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167073.
        https://bugs.webkit.org/show_bug.cgi?id=131516

        This patch caused crashes in video tests. (Requested by
        mrobinson on #webkit).

        Reverted changeset:

        "[GStreamer] No CORS support for media elements"
        https://bugs.webkit.org/show_bug.cgi?id=99037
        http://trac.webkit.org/changeset/167073

2014-04-10  Beth Dakin  <bdakin@apple.com>

        Radio buttons are using the wrong sizes and margins
        https://bugs.webkit.org/show_bug.cgi?id=131503

        Reviewed by Jer Noble.

        This is a regression that I caused recently when I combined radio button and 
        checkbox code. 
        * platform/mac/ThemeMac.mm:
        (WebCore::paintToggleButton):

2014-04-08  Jon Honeycutt  <jhoneycutt@apple.com>

        Assertion failure in WebCore::FlexBoxIterator::next()
        <https://bugs.webkit.org/show_bug.cgi?id=117176>
        <rdar://problem/14054549>

        Code added in r115687 began removing anonymous wrappers when children
        become inline. However, there are some objects, like
        RenderDeprecatedFlexBox, whose children should always be blocks.

        Reviewed by Tim Horton.

        * rendering/RenderBlock.h:
        (WebCore::RenderBlock::canCollapseAnonymousBlockChild):
        Made public.

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::removeAnonymousWrappersForInlinesIfNecessary):
        Return early if we can't collapse anonymous block children.

2014-04-07  Jon Honeycutt  <jhoneycutt@apple.com>

        Assertion failure, !node || node->isElementNode(), in
        WebCore::RenderBlock::clone()
        <https://bugs.webkit.org/show_bug.cgi?id=110489>
        <rdar://problem/13666425>

        Reviewed by Antti Koivisto.

        We're ending up in RenderBlock::splitBlocks() with |this| ==
        |fromBlock|.  We then try to climb the ancestor block chain from
        this->parent() to |fromBlock|, but this->parent() is already above
        |fromBlock|, so we end up climbing up to the RenderView and trying to
        clone it, causing the assertion failure.

        Adopt Chromium's mitigation for this from
        <https://codereview.chromium.org/13852041>. This is not intended as a
        fix for the underlying issue.

        Also, fix another issue that occurs with this fuzzed test case that's
        not handled by the Chromium fix.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::splitBlocks):
        Ensure while we're in the loop that |curr| is a descendant of
        |fromBlock|. From the Chromium patch:

            We need to check in every iteration of the loop because
            moveChildrenTo could have moved |curr|. This is a mitigation and
            not really a fix against a class of tree craziness.

        Finally, before moving children from |fromBlock| to |toBlock|, ensure
        that the children are children of |fromBlock|. If we never entered the
        loop, they will be siblings of |fromBlock|, not children.

2014-04-10  Enrica Casucci  <enrica@apple.com>

        Build fix after http://trac.webkit.org/changeset/167085.

        Reviewed by Timothy Hatcher.

        * plugins/PluginData.h:

2014-04-10  Zalan Bujtas  <zalan@apple.com>

        Web Inspector: Breakpoint in gutter has clipped / broken border image.
        https://bugs.webkit.org/show_bug.cgi?id=131500

        Reviewed by Joseph Pecoraro.

        Typo in r166925.

        Test: fast/borders/border-image-slice-missing-right.html

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintNinePieceImage):

2014-04-10  James Craig  <jcraig@apple.com>

        Web Inspector: AXI: expose aria-busy state of current and ancestor nodes
        https://bugs.webkit.org/show_bug.cgi?id=130826

        Reviewed by Timothy Hatcher.

        Test: inspector-protocol/dom/getAccessibilityPropertiesForNode.html

        Expose if node is contained by any "busy" ancestor nodes, too.

        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::buildObjectForAccessibilityProperties):

2014-04-10  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: Remove unused ruler in overlay code
        https://bugs.webkit.org/show_bug.cgi?id=131507

        Reviewed by Timothy Hatcher.

        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::highlightConfigFromInspectorObject):
        * inspector/InspectorOverlay.cpp:
        (WebCore::buildObjectForHighlight):
        * inspector/InspectorOverlay.h:
        (WebCore::Highlight::Highlight):
        (WebCore::Highlight::setDataFromConfig):
        * inspector/InspectorOverlayPage.js:
        (_drawFragmentHighlight):
        (_drawRegionNumber): Deleted.
        (quadToPath): Deleted.
        (drawOutlinedQuad): Deleted.
        (pathCommand): Deleted.
        (drawPath): Deleted.
        (drawOutlinedQuadWithClip): Deleted.
        (quadEquals): Deleted.
        (drawGutter): Deleted.
        (drawNodeHighlight): Deleted.
        (drawQuadHighlight): Deleted.
        (setPlatform): Deleted.
        (dispatch): Deleted.
        (log): Deleted.

2014-04-10  Brian J. Burg  <burg@cs.washington.edu>

        Web Replay: memoize plugin data for navigator.mimeTypes and navigator.plugins
        https://bugs.webkit.org/show_bug.cgi?id=131341

        Reviewed by Timothy Hatcher.

        Information about plugins and mime types is nondeterministic and can change
        at any time, whether by system events, browser settings changes, or
        triggered by script. To avoid interposing on all those code paths, just
        memoize the plugin data used by DOMPluginArray and DOMMimeTypeArray.

        This is less efficient than controlling mutations to the underlying PluginData
        of a Page, but that can be done later if better plugin support is desired.
        The point of this change is to make analytics trackers deterministic across
        enabling/disabling of plugins.

        Test: LayoutTests/inspector/window-navigator-plugins-memoized.hml

        * plugins/DOMMimeTypeArray.cpp:
        (WebCore::DOMMimeTypeArray::getPluginData):
        * plugins/DOMPluginArray.cpp:
        (WebCore::DOMPluginArray::pluginData): Save or restore memoized plugin
        data during capture and replay, respectively.

        * plugins/PluginData.h:
        (WebCore::PluginData::PluginData): Add a constructor that uses the
        provided plugin data rather than fetching live plugin data. This is
        marked protected so it's only used by a subclass specifically for
        deserialization.

        * replay/SerializationMethods.cpp: Add encoder specializations.
        (JSC::EncodingTraits<MimeClassInfo>::encodeValue):
        (JSC::EncodingTraits<MimeClassInfo>::decodeValue):
        (JSC::EncodingTraits<PluginInfo>::encodeValue):
        (JSC::EncodingTraits<PluginInfo>::decodeValue):
        (JSC::EncodingTraits<PluginData>::encodeValue):
        (JSC::DeserializedPluginData::DeserializedPluginData): Add a custom
        subclass of PluginData that can be initialized from deserialized data.
        (JSC::EncodingTraits<PluginData>::decodeValue):
        * replay/SerializationMethods.h:
        * replay/WebInputs.json: Add new input FetchPluginData.

2014-04-10  Myles C. Maxfield  <mmaxfield@apple.com>

        Remove "System Font" from character width calculations
        https://bugs.webkit.org/show_bug.cgi?id=131411

        Reviewed by Tim Horton.

        Covered by existing tests

        * platform/graphics/Font.cpp:
        (WebCore::Font::hasValidAverageCharWidth):

2014-04-10  Bem Jones-Bey  <bjonesbe@adobe.com>

        Invalid cast in WebCore::RenderLayer::setupClipPath
        https://bugs.webkit.org/show_bug.cgi?id=131368

        Reviewed by Dirk Schulze.

        Only attempt to clip to a box shape if the renderer being clipped is
        actually a box.

        Test: css3/masking/clip-path-box-shape-on-inline-crash.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::setupClipPath): Add isBox() check.

2014-04-10  Owen Taylor  <otaylor@redhat.com>

        [GTK] Remove a comment that was incorrectly cut-and-pasted from WidgetBackingStoreCairo
        https://bugs.webkit.org/show_bug.cgi?id=131499

        Reviewed by Martin Robinson.

        * platform/gtk/WidgetBackingStoreGtkX11.cpp: Remove a comment that was incorrectly copy and pasted
        from the Cairo implementation.

2014-04-09  Alexey Proskuryakov  <ap@apple.com>

        Eliminate DragSession structure
        https://bugs.webkit.org/show_bug.cgi?id=131465

        Reviewed by Benjamin Poulain.

        DragSession is really just a transient response to NSDragDestination delegate methods.
        The "session" name was quite misleading, and thankfully, we don't need a class for this
        bag of data at all.

        * WebCore.xcodeproj/project.pbxproj:
        * page/DragController.cpp:
        (WebCore::DragController::DragController):
        (WebCore::DragController::dragEntered):
        (WebCore::DragController::dragUpdated):
        (WebCore::DragController::dragEnteredOrUpdated):
        (WebCore::DragController::tryDocumentDrag):
        * page/DragController.h:
        (WebCore::DragController::mouseIsOverFileInput):
        (WebCore::DragController::numberOfItemsToBeAccepted):
        * page/DragSession.h: Removed.

2014-04-10  Youenn Fablet  <youenn.fablet@crf.canon.fr>

        [GStreamer] No CORS support for media elements
        https://bugs.webkit.org/show_bug.cgi?id=99037

        Reviewed by Philippe Normand.

        Added CORS access control check to media sources when crossorigin attribute is set.

        Added getter to CORS access control check status (used to compute whether the stream is tainted or not).
        Related test is http/tests/security/video-cross-origin-readback.html.

        Disabled access to cross-origin streams that fail CORS check when crossorigin attribute is set.
        Related test is http/tests/security/video-cross-origin-accessfailure.html.

        Tests: http/tests/security/video-cross-origin-accessfailure.html
               http/tests/security/video-cross-origin-accesssameorigin.html

        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::didPassCORSAccessCheck): Return whether media is cross-origin (tainted) or not by querying the gstreamer source layer.
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h: Added MediaPlayerPrivateGStreamer::didPassCORSAccessCheck declaration.
        * platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp:
        (webKitWebSrcStart): Passed CORS mode parameter to the streaming client. In case of CORS check failure, stop the resource loading.
        (webKitSrcPassedCORSAccessCheck): Return whether CORS access control check was done and successful.
        (StreamingClient::handleResponseReceived): Take a parameter to assign the CORS access control check result.
        (CachedResourceStreamingClient::CachedResourceStreamingClient): Updated setting of the ResourceLoaderOptions according CORS mode.
        (CachedResourceStreamingClient::responseReceived): Check CORS and pass result to handleResponseReceived.
        (ResourceHandleStreamingClient::didReceiveResponse): No CORS check.
        * platform/graphics/gstreamer/WebKitWebSourceGStreamer.h: Added webKitSrcPassedCORSAccessCheck declaration.

2014-04-10  Eva Balazsfalvi  <evab.u-szeged@partner.samsung.com>

        Move UseJSC.cmake back to CMakeLists.txt
        https://bugs.webkit.org/show_bug.cgi?id=130834

        Reviewed by Csaba Osztrogonác.

        No new tests required.

        * CMakeLists.txt:
        * UseJSC.cmake: Removed.

2014-04-09  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r167046.
        https://bugs.webkit.org/show_bug.cgi?id=131479

        Caused 300+ failures on Mavericks WK1 tester (Requested by ap
        on #webkit).

        Reverted changeset:

        "Remove "System Font" from whitelisted DRT fonts and char
        width calculations"
        https://bugs.webkit.org/show_bug.cgi?id=131411
        http://trac.webkit.org/changeset/167046

2014-04-09  Jeremy Jones  <jeremyj@apple.com>

        Fix build failure.
        https://bugs.webkit.org/show_bug.cgi?id=131473

        Reviewed by Dan Bernstein.

        Fix build failure.

        * platform/ios/WebVideoFullscreenInterfaceAVKit.mm:
        (mediaSelectionOptions):

2014-04-09  Enrica Casucci  <enrica@apple.com>

        Unreviewed build fix after http://trac.webkit.org/changeset/167045

        The file contained an invalid character.

        * platform/ios/WebVideoFullscreenInterfaceAVKit.mm:
        (WebVideoFullscreenInterfaceAVKit::enterFullscreen):

2014-04-09  Dean Jackson  <dino@apple.com>

        [iOS] Media controls should resize as the user zooms
        https://bugs.webkit.org/show_bug.cgi?id=131322

        Reviewed by Eric Carlson.

        On iOS the media controls should remain the same size
        independent of user zoom. Have the HTMLMediaElement optionally
        register for updates in the page scale to apply an inverse
        scale.

        * Modules/mediacontrols/MediaControlsHost.cpp: New exposed property that calls
        back into HTMLMediaElement::mediaControlsDependOnPageScaleFactor.
        (WebCore::MediaControlsHost::controlsDependOnPageScaleFactor):
        (WebCore::MediaControlsHost::setControlsDependOnPageScaleFactor):
        * Modules/mediacontrols/MediaControlsHost.h: Keep a reference to the actual
        controls from the JavaScript side so we can talk to it later.
        (WebCore::MediaControlsHost::controllerJSValue):
        (WebCore::MediaControlsHost::setControllerJSValue):
        * Modules/mediacontrols/MediaControlsHost.idl: Expose controlsDependOnPageScaleFactor.

        * Modules/mediacontrols/mediaControlsiOS.css:
        (audio::-webkit-media-controls-panel): Specify the transform origin so that
        scaling will keep the controls pinned to the bottom left corner.
        (audio::-webkit-media-controls-start-playback-button): Update to the correct size
        and provide new artwork.
        (audio::-webkit-media-controls-start-playback-button.failed): New artwork.
        * Modules/mediacontrols/mediaControlsiOS.js:
        (ControllerIOS): Tell the host that these controls care about the page scale.
        (ControllerIOS.prototype.get pageScaleFactor): New getter.
        (ControllerIOS.prototype.set pageScaleFactor): When set, update the play button and the panel.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::ensureMediaControlsInjectedScript): Small naming cleanup.
        (setPageScaleFactorProperty): Static helper to set a JS property value.
        (WebCore::HTMLMediaElement::didAddUserAgentShadowRoot): Keep a reference to the controls object,
        and make sure to set the page scale factor on the controls.
        (WebCore::HTMLMediaElement::pageScaleFactorChanged): Implement the callback, telling
        the controls object that it needs to relayout.

2014-04-09  Antti Koivisto  <antti@apple.com>

        Try to fix iOS build.

        * platform/graphics/ca/mac/TileController.mm:

2014-04-09  Andy Estes  <aestes@apple.com>

        REGRESSION (r165908): ~QuickLookHandle() tries to dereference a null ResourceHandle
        https://bugs.webkit.org/show_bug.cgi?id=131467

        Reviewed by Tim Horton.

        QuickLookHandle stored a ResourceHandle pointer in order to later
        retrive the URL of its firstRequest(), but after r165908 we no longer
        always have a ResourceHandle. Since firstRequest()'s URL is the only
        thing we need from ResourceHandle, store it directly rather than a
        ResourceHandle pointer. In the case where we create a QuickLookHandle
        from a ResourceLoader rather than a ResourceHandle, pass the loader's
        originalRequest(), which represents the same request as firstRequest()
        (i.e. the request after willSendRequest() but before redirects).

        * platform/network/ios/QuickLook.h:
        * platform/network/ios/QuickLook.mm:
        (WebCore::QuickLookHandle::QuickLookHandle):
        (WebCore::QuickLookHandle::create):
        (WebCore::QuickLookHandle::didFail):
        (WebCore::QuickLookHandle::~QuickLookHandle):

2014-04-09  James Craig  <jcraig@apple.com>

        AX: Bug in AccessibilityNodeObject::helpText
        https://bugs.webkit.org/show_bug.cgi?id=130386

        Reviewed by Chris Fleizach.

        Test: accessibility/help-text.html

        Ancestor loop was always checking attribute of original node rather than current node.

        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::helpText):

2014-04-09  Chris Fleizach  <cfleizach@apple.com>

        Regression: AX: list heuristics sometimes determined as presentational even when explicit roles applied
        https://bugs.webkit.org/show_bug.cgi?id=131041

        Reviewed by Mario Sanchez Prada.

        When display:table is used on a list item, it inserts RenderObjects that can be ignored as the children
        of the list. This allows normal list heuristics to be applied.

        * accessibility/AccessibilityTableCell.cpp:
        (WebCore::AccessibilityTableCell::computeAccessibilityIsIgnored):

2014-04-09  Antti Koivisto  <antti@apple.com>

        TileGrid should be PlatformCALayerClient instead of TileController
        https://bugs.webkit.org/show_bug.cgi?id=131456
        
        Switch one more place to use removeTiles.

        * platform/graphics/ca/mac/TileGrid.mm:
        (WebCore::TileGrid::revalidateTiles):

2014-04-09  Myles C. Maxfield  <mmaxfield@apple.com>

        Remove "System Font" from whitelisted DRT fonts and char width calculations
        https://bugs.webkit.org/show_bug.cgi?id=131411

        Reviewed by Tim Horton.

        Covered by existing tests.

        * platform/graphics/Font.cpp:
        (WebCore::Font::hasValidAverageCharWidth):

2014-04-09  Jeremy Jones  <jeremyj@apple.com>

        Fullscreen does two view controller changes at once
        https://bugs.webkit.org/show_bug.cgi?id=131432

        Reviewed by Eric Carlson.

        * platform/ios/WebVideoFullscreenInterfaceAVKit.mm:
        (WebVideoFullscreenInterfaceAVKit::enterFullscreen):
        delay -presentViewController on the main run loop to allow
        previous view controller change to complete.

2014-04-09  Jeremy Jones  <jeremyj@apple.com>

        Enable fullscreen captions selection
        https://bugs.webkit.org/show_bug.cgi?id=131069

        Reviewed by Eric Carlson.

        Enable media selection options from fullscreen. i.e. captions.

        * WebCore.exp.in:
        Add exports for 
        setAudioMediaSelectionOptions
        setLegibleMediaSelectionOptions
        selectAudioMediaOption
        selectLegibleMediaOption

        * platform/ios/WebVideoFullscreenInterface.h:
        Add setAudioMediaSelectionOptions/setLegibleMediaSelectionOptions

        * platform/ios/WebVideoFullscreenInterfaceAVKit.h:
        Add setAudioMediaSelectionOptions/setLegibleMediaSelectionOptions

        * platform/ios/WebVideoFullscreenInterfaceAVKit.mm:
        Add setAudioMediaSelectionOptions/setLegibleMediaSelectionOptions

        (-[WebAVPlayerController dealloc]):
        (-[WebAVPlayerController hasMediaSelectionOptions]):
        (+[WebAVPlayerController keyPathsForValuesAffectingHasMediaSelectionOptions]):
        (-[WebAVPlayerController hasAudioMediaSelectionOptions]):
        (+[WebAVPlayerController keyPathsForValuesAffectingHasAudioMediaSelectionOptions]):
        (-[WebAVPlayerController hasLegibleMediaSelectionOptions]):
        (+[WebAVPlayerController keyPathsForValuesAffectingHasLegibleMediaSelectionOptions]):
        (-[WebAVPlayerController currentAudioMediaSelectionOption]):
        (-[WebAVPlayerController setCurrentAudioMediaSelectionOption:]):
        (-[WebAVPlayerController currentLegibleMediaSelectionOption]):
        (-[WebAVPlayerController setCurrentLegibleMediaSelectionOption:]):
        (WebVideoFullscreenInterfaceAVKit::setAudioMediaSelectionOptions):
        (WebVideoFullscreenInterfaceAVKit::setLegibleMediaSelectionOptions):
        * platform/ios/WebVideoFullscreenModel.h:
        Add selectAudioMediaOption/selectLegibleMediaOption

        * platform/ios/WebVideoFullscreenModelMediaElement.h:
        Add selectAudioMediaOption/selectLegibleMediaOption

        * platform/ios/WebVideoFullscreenModelMediaElement.mm:
        Add selectAudioMediaOption/selectLegibleMediaOption

        (WebVideoFullscreenModelMediaElement::setMediaElement):
        Send initial media selection options.

        (WebVideoFullscreenModelMediaElement::selectAudioMediaOption):
        Will be implemented when audio track slection is implemented.

        (WebVideoFullscreenModelMediaElement::selectLegibleMediaOption):
        Select corresponding text track on HTMLMediaElement.

2014-04-09  Antti Koivisto  <antti@apple.com>

        TileGrid should be PlatformCALayerClient instead of TileController
        https://bugs.webkit.org/show_bug.cgi?id=131456

        Reviewed by Tim Horton.

        The client interface is for the tiles in the grid.

        * platform/graphics/ca/mac/TileController.h:
        * platform/graphics/ca/mac/TileController.mm:
        (WebCore::TileController::setContentsScale):
        (WebCore::TileController::createTileLayer):
        (WebCore::TileController::platformCALayerPaintContents): Deleted.
        (WebCore::TileController::platformCALayerDeviceScaleFactor): Deleted.
        (WebCore::TileController::platformCALayerShowDebugBorders): Deleted.
        (WebCore::TileController::platformCALayerShowRepaintCounter): Deleted.
        (WebCore::TileController::platformCALayerIncrementRepaintCount): Deleted.
        * platform/graphics/ca/mac/TileGrid.h:
        
            Move repaint counter to TileGrid too.

        * platform/graphics/ca/mac/TileGrid.mm:
        (WebCore::TileGrid::removeTiles):
        (WebCore::TileGrid::removeAllSecondaryTiles):
        (WebCore::TileGrid::removeTilesInCohort):
        
           Cleaned up tile removal.

        (WebCore::TileGrid::revalidateTiles):
        (WebCore::TileGrid::ensureTilesForRect):
        (WebCore::TileGrid::platformCALayerPaintContents):
        (WebCore::TileGrid::platformCALayerDeviceScaleFactor):
        (WebCore::TileGrid::platformCALayerShowDebugBorders):
        (WebCore::TileGrid::platformCALayerShowRepaintCounter):
        (WebCore::TileGrid::platformCALayerContentsOpaque):
        (WebCore::TileGrid::platformCALayerIncrementRepaintCount):
        (WebCore::queueTileForRemoval): Deleted.

2014-04-09  Alexey Proskuryakov  <ap@apple.com>

        Rename some dragging functions
        https://bugs.webkit.org/show_bug.cgi?id=131460

        Reviewed by Tim Horton.

        Renamed performDrag to performDragOperation. This function is responsible for
        accepting a drop, not for the whole drag.

        The new name is not perfect either, but I think that it's better, and at least
        it matches AppKit, like the other dragging destination functions already do.

        * WebCore.exp.in:
        * page/DragController.cpp:
        (WebCore::DragController::performDragOperation):
        (WebCore::DragController::performDrag): Deleted.
        * page/DragController.h:

2014-04-08  Samuel White  <samuel_white@apple.com>

        AX: Initial text selection point should respect element focus.
        https://bugs.webkit.org/show_bug.cgi?id=131402

        Reviewed by Chris Fleizach.

        Support the case where we want to set the initial selection and there's already a focused element.

        No new tests, updated existing selection-initial to test this functionality.

        * page/EventHandler.cpp:
        (WebCore::setKeyboardSelection):
        (WebCore::handleKeyboardSelectionMovement):

2014-04-09  Ryosuke Niwa  <rniwa@webkit.org>

        HTMLCollection::updateNamedElementCach iterates over items twice
        https://bugs.webkit.org/show_bug.cgi?id=131448

        Reviewed by Andreas Kling.

        Compute the length first and go through the cache interface to traverse through items.

        * html/HTMLCollection.cpp:
        (WebCore::HTMLCollection::updateNamedElementCache):

2014-04-09  Brendan Long  <b.long@cablelabs.com>

        [GStreamer] Expose MPEG-TS metadata
        https://bugs.webkit.org/show_bug.cgi?id=122001

        Reviewed by Eric Carlson.

        Test: media/track/in-band/track-in-band-mpegts-metadata.html

        * CMakeLists.txt: Add InbandDataTextTrack.
        * PlatformGTK.cmake: Look for gstreamer-mpegts and use it if available.
        * WebCore.vcxproj/WebCore.vcxproj: Add InbandDataTextTrack.
        * WebCore.vcxproj/WebCore.vcxproj.filters: Same.
        * WebCore.xcodeproj/project.pbxproj: Same.
        * html/track/DataCue.cpp:
        (WebCore::DataCue::DataCue): Add a constructor using raw data.
        * html/track/DataCue.h:
        (WebCore::DataCue::create): Same.
        * html/track/InbandDataTextTrack.cpp: Added, InbandTextTrack which implements addDataCue().
        * html/track/InbandDataTextTrack.h:
        * html/track/InbandGenericTextTrack.h: Move unimplemented methods to InbandTextTrack.
        * html/track/InbandWebVTTTextTrack.h: Same.
        * html/track/InbandTextTrack.h: Same, and add inBandMetadataTrackDispatchType.
        * html/track/InbandTextTrack.cpp:
        (WebCore::InbandTextTrack::create): Add constructor for InbandDataTextTrack.
        (WebCore::InbandTextTrack::inBandMetadataTrackDispatchType): Added.
        * html/track/TextTrack.h:
        (WebCore::TextTrack::inBandMetadataTrackDispatchType): Added (empty).
        * html/track/TextTrack.idl: Add inBandMetadataTrackDispatchType.
        * platform/graphics/InbandTextTrackPrivate.h: Add inBandMetadataTrackDispatchType and Data format.
        (WebCore::InbandTextTrackPrivate::inBandMetadataTrackDispatchType):
        * platform/graphics/InbandTextTrackPrivateClient.h: Add addDataCue() method.
        * platform/graphics/gstreamer/InbandMetadataTextTrackPrivateGStreamer.h:
        (WebCore::InbandMetadataTextTrackPrivateGStreamer::create): Allow specifying the cue format and id.
         (WebCore::InbandMetadataTextTrackPrivateGStreamer::InbandMetadataTextTrackPrivateGStreamer): Same.
        (WebCore::InbandMetadataTextTrackPrivateGStreamer::setInBandMetadataTrackDispatchType): Added.
        (WebCore::InbandMetadataTextTrackPrivateGStreamer::addDataCue): Added.
        (WebCore::InbandMetadataTextTrackPrivateGStreamer::addGenericCue): Added.
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::handleMessage): Check for MPEG-TS sections.
        (WebCore::MediaPlayerPrivateGStreamer::processMpegTsSection): Add MPEG-TS section metadata, and get inBandMetadataTrackDispatchType from the PMT.
        (WebCore::MediaPlayerPrivateGStreamer::processTableOfContents): Explicitly use Generic CueFormat.
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h:

2014-04-08  Chris Fleizach  <cfleizach@apple.com>

        AX: Make AXPress much more reliable on the Web
        https://bugs.webkit.org/show_bug.cgi?id=131426

        Reviewed by Mario Sanchez Prada.

        AXPress fails when an event handler is on a node higher in the parent chain than the focused node.

        We need to make AXPress more reliable by 
            1) Using the element that is focused as the target of the event
            2) Search for the inner most control object when dispatching the event

        Updated existing accessibility/press-works-on-control-types.html

        * accessibility/AccessibilityMenuList.cpp:
        (WebCore::AccessibilityMenuList::press):
        * accessibility/AccessibilityMenuList.h:
        * accessibility/AccessibilityMenuListPopup.cpp:
        (WebCore::AccessibilityMenuListPopup::press):
        * accessibility/AccessibilityMenuListPopup.h:
        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::press):
        * accessibility/AccessibilityObject.h:
        (WebCore::AccessibilityObject::performDefaultAction):
        * accessibility/AccessibilitySearchFieldButtons.cpp:
        (WebCore::AccessibilitySearchFieldCancelButton::press):
        * accessibility/AccessibilitySearchFieldButtons.h:
        * accessibility/AccessibilitySpinButton.cpp:
        (WebCore::AccessibilitySpinButtonPart::press):
        * accessibility/AccessibilitySpinButton.h:

2014-04-09  Brady Eidson  <beidson@apple.com>

        ContentFilterMac is broken when NE_FILTER_SOURCE is enabled.
        <rdar://problem/15978793> and https://bugs.webkit.org/show_bug.cgi?id=131445

        Reviewed by Andy Estes.

        No new tests (Not a tested feature).

        * platform/mac/ContentFilterMac.mm:
        (WebCore::ContentFilter::needsMoreData): Only consider m_neFilterSourceStatus if m_neFilterSource exists.
        (WebCore::ContentFilter::didBlockData): Ditto.

2014-04-08  Oliver Hunt  <oliver@apple.com>

        Rewrite Function.bind as a builtin
        https://bugs.webkit.org/show_bug.cgi?id=131083

        Reviewed by Geoffrey Garen.

        Switch WebCore to use the helper functions when defining the
        prototype properties on DOM constructors, and update bindings
        tests accordingly.

        * bindings/js/JSImageConstructor.cpp:
        (WebCore::JSImageConstructor::finishCreation):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateConstructorHelperMethods):
        * bindings/scripts/test/JS/JSTestActiveDOMObject.cpp:
        (WebCore::JSTestActiveDOMObjectConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestCustomNamedGetter.cpp:
        (WebCore::JSTestCustomNamedGetterConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestEventConstructor.cpp:
        (WebCore::JSTestEventConstructorConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestEventTarget.cpp:
        (WebCore::JSTestEventTargetConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestException.cpp:
        (WebCore::JSTestExceptionConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestGenerateIsReachable.cpp:
        (WebCore::JSTestGenerateIsReachableConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestInterface.cpp:
        (WebCore::JSTestInterfaceConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestMediaQueryListListener.cpp:
        (WebCore::JSTestMediaQueryListListenerConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestNamedConstructor.cpp:
        (WebCore::JSTestNamedConstructorConstructor::finishCreation):
        (WebCore::JSTestNamedConstructorNamedConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestNode.cpp:
        (WebCore::JSTestNodeConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestObj.cpp:
        (WebCore::JSTestObjConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestOverloadedConstructors.cpp:
        (WebCore::JSTestOverloadedConstructorsConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestSerializedScriptValueInterface.cpp:
        (WebCore::JSTestSerializedScriptValueInterfaceConstructor::finishCreation):
        * bindings/scripts/test/JS/JSTestTypedefs.cpp:
        (WebCore::JSTestTypedefsConstructor::finishCreation):
        * bindings/scripts/test/JS/JSattribute.cpp:
        (WebCore::JSattributeConstructor::finishCreation):
        * bindings/scripts/test/JS/JSreadonly.cpp:
        (WebCore::JSreadonlyConstructor::finishCreation):

2014-04-09  Enrica Casucci  <enrica@apple.com>

        Unreviewed iOS build fix. Replacing deprecated enum with AVPlayerViewControllerExitFullScreenReason.

        * platform/ios/WebVideoFullscreenInterfaceAVKit.mm:
        (-[WebAVPlayerController playerViewController:shouldDismissWithReason:]):

2014-04-09  Radu Stavila  <stavila@adobe.com>

        [CSS Regions] Monolithic elements should not affect the layout of the content outside its region
        https://bugs.webkit.org/show_bug.cgi?id=130499

        Reviewed by David Hyatt.

        When performing layout on an element flowed into regions, its logical height must not be incremented 
        past the region's logical bottom for monolithic elements in regions different than the last region their containing
        block is fragmented into. This ensures that the following elements are correctly laid out 
        from the top of the next region.
        This change must also be applied to floats in order to prevent text from avoiding part
        of a float that did not actually made it into the current region, but instead overflowed
        the previous one.

        Tests: fast/regions/fragmentation-after-float-overflow-single-region.html
               fast/regions/fragmentation-after-monolithic-overflow-self-collapsed.html
               fast/regions/fragmentation-after-monolithic-overflow-single-region.html
               fast/regions/fragmentation-after-monolithic-overflow.html

        * rendering/FloatingObjects.cpp:
        (WebCore::FloatingObjects::computePlacedFloatsTree):
        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::layoutBlockChild):
        (WebCore::RenderBlockFlow::adjustBlockChildForPagination):
        (WebCore::RenderBlockFlow::lowestFloatLogicalBottom):
        (WebCore::RenderBlockFlow::getClearDelta):
        (WebCore::RenderBlockFlow::applyAfterBreak): Deleted.
        (WebCore::RenderBlockFlow::nextFloatLogicalBottomBelow): Deleted.
        (WebCore::RenderBlockFlow::nextFloatLogicalBottomBelowForBlock): Deleted.
        (WebCore::RenderBlockFlow::flipFloatForWritingModeForChild): Deleted.
        * rendering/RenderBlockFlow.h:
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::isBoxInDifferentRegionsAsFloat):
        * rendering/RenderFlowThread.h:

2014-04-09  Anders Carlsson  <andersca@apple.com>

        Use std::array in AffineTransform, and get rid of setMatrix
        https://bugs.webkit.org/show_bug.cgi?id=131416

        Reviewed by Sam Weinig.

        * platform/graphics/transforms/AffineTransform.cpp:
        (WebCore::AffineTransform::AffineTransform):
        (WebCore::AffineTransform::multiply):
        * platform/graphics/transforms/AffineTransform.h:
        (WebCore::AffineTransform::setMatrix): Deleted.

2014-04-09  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Plugin process crashes when loading totem plugin
        https://bugs.webkit.org/show_bug.cgi?id=131357

        Reviewed by Martin Robinson.

        Remove netscape plugin implementation from WebCore that was only
        used by WebKit1. This removes the conflict between the WebCore NPN
        symbols and the ones used by the plugins.

        * CMakeLists.txt:
        * PlatformEfl.cmake:
        * PlatformGTK.cmake:
        * PlatformWin.cmake:
        * plugins/PluginViewNone.cpp:
        * plugins/gtk/PluginPackageGtk.cpp: Removed.
        * plugins/gtk/PluginViewGtk.cpp: Removed.
        * plugins/gtk/gtk2xtbin.c: Removed.
        * plugins/gtk/gtk2xtbin.h: Removed.
        * plugins/gtk/xembed.h: Removed.

2014-04-09  Jeremy Jones  <jeremyj@apple.com>

        fullscreen controls first show a play button instead of a pause button
        https://bugs.webkit.org/show_bug.cgi?id=131430

        Reviewed by Jer Noble.

        isPlaying() is false while buffering, paused() isn't; use paused() for
        the play button.

        * platform/ios/WebVideoFullscreenModelMediaElement.mm:
        (WebVideoFullscreenModelMediaElement::setMediaElement):
        (WebVideoFullscreenModelMediaElement::handleEvent):
        Use HTMLMediaElement::paused() instead of HTMLMediaElement::isPlaying()

2014-04-09  Eva Balazsfalvi  <evab.u-szeged@partner.samsung.com>

        Remove duplicated files and unnecessary conditions from UseJSC.cmake
        https://bugs.webkit.org/show_bug.cgi?id=131438

        Reviewed by Csaba Osztrogonác.

        No new tests required.

        * UseJSC.cmake:

2014-04-09  Mario Sanchez Prada  <mario.prada@samsung.com>

        [GTK] Layout tests accessibility/children-changed-sends-notification.html and accessibility/notification-listeners.html fails
        https://bugs.webkit.org/show_bug.cgi?id=131380

        Reviewed by Chris Fleizach.

        Don't emit signals for added objects that we know won't be exposed
        to the accessibility hierarchy (e.g. static text).

        * accessibility/atk/AXObjectCacheAtk.cpp:
        (WebCore::AXObjectCache::attachWrapper): Add extra check and early return.

2014-04-09  Mario Sanchez Prada  <mario.prada@samsung.com>

        [AX][GTK] No new lines in some AX tests output
        https://bugs.webkit.org/show_bug.cgi?id=131294

        Reviewed by Martin Robinson.

        Do not implement Hypetext or AtkText for the WebArea. Those
        interfaces will be implemented by the containers (automatically
        generated or not) for the different parts of the DOM and the
        render subtree under this element anyway.

        * accessibility/atk/WebKitAccessibleWrapperAtk.cpp:
        (getInterfaceMaskFromObject): Make sure we don't apply
        WAIHypertext nor WAIText to objects with role WebAreaRole.

2014-04-08  Conrad Shultz  <conrad_shultz@apple.com>

        nil should only be used for objects
        https://bugs.webkit.org/show_bug.cgi?id=131431

        Reviewed by Chris Fleizach.

        * accessibility/mac/WebAccessibilityObjectWrapperMac.mm:
        (-[WebAccessibilityObjectWrapper accessibilityIsAttributeSettable:]):
        nil -> NO.

        * platform/mac/WebVideoFullscreenController.mm:
        (-[WebVideoFullscreenController setMediaElement:]):
        nil -> 0; change a NULL to nullptr while we're here.

2014-04-08  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Crash when video in region exits fullscreen
        https://bugs.webkit.org/show_bug.cgi?id=131366

        Reviewed by Andrei Bucur.

        After fix for https://bugs.webkit.org/show_bug.cgi?id=130392, we compute the region ranges
        information for inline elements collected in named flows with associated region chains.
        The algorithm for this computation, implemented in RenderFlowThread::getRegionRangeForBox,
        walks up the render tree trying to find the top-most unsplittable box under the named flow
        in the case where the region ranges information is not available.

        As this traversal works properly only when the starting box is not detached from the render tree,
        i changed the named flow information clearing in RenderBlock::collapseAnonymousBoxChild
        to occur before the child to be collapsed is removed from the render tree.

        Test: fast/regions/full-screen-video-in-region-crash.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::collapseAnonymousBoxChild):
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::getRegionRangeForBox):

2014-04-08  Chris Fleizach  <cfleizach@apple.com>

        Unreviewed build fix for iOS (redux).

        * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper accessibilityARIAIsBusy]):
        (-[WebAccessibilityObjectWrapper accessibilityARIALiveRegionIsAtomic]):

2014-04-08  Chris Fleizach  <cfleizach@apple.com>
 
        Unreviewed build fix for iOS.

        * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper accessibilityElementCount]):

2014-04-08  Antti Koivisto  <antti@apple.com>

        Factor tile coverage map into a class
        https://bugs.webkit.org/show_bug.cgi?id=131417

        Reviewed by Tim Horton.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/ca/PlatformCALayerClient.h:
        (WebCore::PlatformCALayerClient::platformCALayerLayoutSublayersOfLayer):
        (WebCore::PlatformCALayerClient::platformCALayerRespondsToLayoutChanges):
        (WebCore::PlatformCALayerClient::platformCALayerAnimationStarted):
        (WebCore::PlatformCALayerClient::platformCALayerContentsOrientation):
        (WebCore::PlatformCALayerClient::platformCALayerShowDebugBorders):
        (WebCore::PlatformCALayerClient::platformCALayerShowRepaintCounter):
        (WebCore::PlatformCALayerClient::platformCALayerIncrementRepaintCount):
        (WebCore::PlatformCALayerClient::platformCALayerLayerDidDisplay):
        
            Added default implementation to some of these to make clients less messy.

        * platform/graphics/ca/mac/TileController.h:
        * platform/graphics/ca/mac/TileController.mm:
        (WebCore::TileController::~TileController):
        (WebCore::TileController::platformCALayerPaintContents):
        (WebCore::TileController::setTiledScrollingIndicatorPosition):
        (WebCore::TileController::updateTileCoverageMap):
        (WebCore::TileController::tiledScrollingIndicatorLayer):
        * platform/graphics/ca/mac/TileCoverageMap.h: Added.
        (WebCore::TileCoverageMap::setPosition):
        (WebCore::TileCoverageMap::layer):
        * platform/graphics/ca/mac/TileCoverageMap.mm: Added.
        
            The new class.

        (WebCore::TileCoverageMap::TileCoverageMap):
        (WebCore::TileCoverageMap::~TileCoverageMap):
        (WebCore::TileCoverageMap::update):
        (WebCore::TileCoverageMap::platformCALayerPaintContents):
        (WebCore::TileCoverageMap::platformCALayerDeviceScaleFactor):
        * platform/graphics/ca/mac/TileGrid.h:
        * platform/graphics/ca/mac/TileGrid.mm:
        (WebCore::TileGrid::drawTileMapContents):

2014-04-08  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Clip outer rounded border rect on device pixel boundaries.
        https://bugs.webkit.org/show_bug.cgi?id=131404

        Reviewed by Simon Fraser.

        Use device pixel snapped rectangle to clip out rounded rects, when not all sides are solid/double.
        Snapping it to device pixel boundaries ensures that when we call drawRect(devicePixelSnappedRect) later,
        it leaves no cruft behind.

        Test: fast/borders/hidpi-rounded-border-on-subpixel-position.html

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintBorder):

2014-04-08  Jon Lee  <jonlee@apple.com>

        Turn MSE on by default
        https://bugs.webkit.org/show_bug.cgi?id=131313
        <rdar://problem/16525223>

        Reviewed by Jer Noble.

        * Configurations/FeatureDefines.xcconfig:
        * page/Settings.in: Add MEDIA_SOURCE conditional.

2014-04-08  Anders Carlsson  <andersca@apple.com>

        Remove an unused parameter from loadResource.

        Reviewed by Darin Adler.

        Since the CachedResourceRequest has the charset in it, we don't need to pass it separately to loadRequest.

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::requestResource):
        (WebCore::CachedResourceLoader::loadResource):
        * loader/cache/CachedResourceLoader.h:

2014-04-08  Ryuan Choi  <ryuan.choi@samsung.com>

        Unreviewed EFL build fix attempt since r166956

        * page/efl/DragControllerEfl.cpp: Rename Clipboard to DataTransfer.
        (WebCore::DragController::declareAndWriteDragImage):

2014-04-08  Simon Fraser  <simon.fraser@apple.com>

        REGRESSION (r155998): Elements render at very low resolution with some 3d transforms
        https://bugs.webkit.org/show_bug.cgi?id=131412
        <rdar://problem/16525044>

        Reviewed by Tim Horton.
        
        In r155998 we started to compute a root-relative transform in order to choose
        a good contentsScale to avoid blurring on scaling.
        
        However, the code failed to update this transform when passing over
        GraphicsLayerCAs with no uncommitted changes, which caused us to choose
        an incorrect contentsScale sometimes, resulting in blurriness.
        
        Fix by updating the root-relative transform on layers with no uncommitted
        changes.

        Test: compositing/contents-scale/incremental-change.html

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers):

2014-04-08  Anders Carlsson  <andersca@apple.com>

        Don't call CGPathAddPath with invalid CGAffineTransform objects
        https://bugs.webkit.org/show_bug.cgi?id=131413
        <rdar://problem/16399645>

        Reviewed by Darin Adler.

        Covered by existing tests.

        * platform/graphics/cg/PathCG.cpp:
        (WebCore::Path::addPath):
        Don't try to add the path if the affine transform isn't invertible.

        * platform/graphics/transforms/AffineTransform.cpp:
        (WebCore::AffineTransform::isInvertible):
        Handle infinite and NaN determinants.

        (WebCore::AffineTransform::inverse):
        Handle infinite and NaN determinants.

2014-04-08  Brian J. Burg  <burg@cs.washington.edu>

        Web Replay: memoize nondeterministic attributes of the Screen interface
        https://bugs.webkit.org/show_bug.cgi?id=131339

        Reviewed by Timothy Hatcher.

        The values from the screen interface are nondeterministic. Since we can't
        change the physical screen dimensions, instead memoize values of attributes.

        Test: ManualTests/inspector/replay-window-screen.html

        * page/Screen.idl: Add Nondeterministic attribute.

2014-04-08  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=131408
        Scrollbars layers don't dynamically update when device scale factor changes
        -and corresponding-
        <rdar://problem/16503875>

        Reviewed by Tim Horton.

        The scrollbar layers are not children of the RenderView's layer, so they were 
        completely skipped over by this function before. We need to start this higher up 
        the tree in the rootGraphicsLayer(), which will typically return the 
        m_overflowControlsHostLayer.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::deviceOrPageScaleFactorChanged):

2014-04-08  Ryosuke Niwa  <rniwa@webkit.org>

        HTMLConverter::aggregatedAttributesForAncestors should cache intermediate results
        https://bugs.webkit.org/show_bug.cgi?id=131400

        Reviewed by Sam Weinig.

        Instead of accumulating attributes from a character node to the highest ancestor,
        recursively call aggregatedAttributesForElementAndItsAncestors so that aggregated
        attributes are cached on each ancestor to eliminate the old O(n^2) behavior.

        * editing/cocoa/HTMLConverter.mm:
        (HTMLConverter::aggregatedAttributesForAncestors):
        (HTMLConverter::aggregatedAttributesForElementAndItsAncestors): Extracted from aggregatedAttributesForAncestors.

2014-04-08  Jinwoo Song  <jinwoo7.song@samsung.com>

        Unreviewed CMake build fix after r166965.

        * UseJSC.cmake: Rename JSClipboardCustom.cpp to JSDataTransferCustom.cpp.

2014-04-08  Enrica Casucci  <enrica@apple.com>

        Unreviewed iOS build fix.

        Return false instead of nil in a function that returns BOOL.

        * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper accessibilityCanFuzzyHitTest]):

2014-04-08  Brady Eidson  <beidson@apple.com>

        Non-empty ranges misdetected as empty ranges, avoiding telephone number detection.
        <rdar://problem/16553441> and https://bugs.webkit.org/show_bug.cgi?id=131397 

        Reviewed by Tim Horton.

        No new tests (Only affects a currently untested Mac-only WK2 feature)

        * editing/Editor.cpp:
        (WebCore::Editor::scanSelectionForTelephoneNumbers): Fix detection of empty ranges so we don’t
          early return erroneously.

2014-04-08  Adenilson Cavalcanti  <cavalcantii@gmail.com>

        [SVG] Fix CSS transform handling when zoomed
        https://bugs.webkit.org/show_bug.cgi?id=125836

        Reviewed by Tim Horton.

        Tests: svg/zoom/page/zoom-css-transforms-expected.svg
               svg/zoom/page/zoom-css-transforms.svg

        Adjusts CSS transforms when used in SVG to account for unexpected
        translation scale. Backport from Chromium #174910.

        * svg/SVGGraphicsElement.cpp:
        (WebCore::SVGGraphicsElement::animatedLocalTransform):

2014-04-08  Hans Muller  <hmuller@adobe.com>

        [CSS Shapes] large corner radius combined with 0 radius does not wrap properly
        https://bugs.webkit.org/show_bug.cgi?id=129739

        Reviewed by Bem Jones-Bey.

        Corrected special case handling for shape-outside border-box values with border-radius
        values that greater than or equal to the box's height.

        Tests: fast/shapes/shape-outside-floats/shape-outside-big-box-border-radius-001.html
               fast/shapes/shape-outside-floats/shape-outside-big-box-border-radius-002.html

        * rendering/shapes/BoxShape.cpp:
        (WebCore::BoxShape::getExcludedIntervals):

2014-04-08  Alexey Proskuryakov  <ap@apple.com>

        Rename Clipboard to DataTransfer
        https://bugs.webkit.org/show_bug.cgi?id=131371

        Reviewed by Anders Carlsson.

        This is the name used in HTML5, and it's much better than the confusing Clipboard one.

        Renamed related enums too, and made DataTransferAccessPolicy an enum class.

        * CMakeLists.txt:
        * Configurations/WebCore.xcconfig:
        * DerivedSources.cpp:
        * DerivedSources.make:
        * WebCore.exp.in:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSBindingsAllInOne.cpp:
        * bindings/js/JSClipboardCustom.cpp: Removed.
        * bindings/js/JSDataTransferCustom.cpp: Copied from Source/WebCore/bindings/js/JSClipboardCustom.cpp.
        (WebCore::JSDataTransfer::types):
        (WebCore::JSClipboard::types): Deleted.
        * bindings/js/JSEventCustom.cpp:
        * dom/Clipboard.cpp: Removed.
        * dom/Clipboard.h: Removed.
        * dom/Clipboard.idl: Removed.
        * dom/ClipboardAccessPolicy.h: Removed.
        * dom/ClipboardEvent.cpp:
        (WebCore::ClipboardEvent::ClipboardEvent):
        * dom/ClipboardEvent.h:
        (WebCore::ClipboardEvent::create):
        (WebCore::ClipboardEvent::clipboard): Deleted.
        * dom/ClipboardMac.mm: Removed.
        * dom/DOMAllInOne.cpp:
        * dom/DataTransfer.cpp: Copied from Source/WebCore/dom/Clipboard.cpp.
        (WebCore::DataTransfer::DataTransfer):
        (WebCore::DataTransfer::createForCopyAndPaste):
        (WebCore::DataTransfer::~DataTransfer):
        (WebCore::DataTransfer::setAccessPolicy):
        (WebCore::DataTransfer::canReadTypes):
        (WebCore::DataTransfer::canReadData):
        (WebCore::DataTransfer::canWriteData):
        (WebCore::DataTransfer::clearData):
        (WebCore::DataTransfer::getData):
        (WebCore::DataTransfer::setData):
        (WebCore::DataTransfer::types):
        (WebCore::DataTransfer::files):
        (WebCore::DataTransfer::dropEffect):
        (WebCore::DataTransfer::setDropEffect):
        (WebCore::DataTransfer::effectAllowed):
        (WebCore::DataTransfer::setEffectAllowed):
        (WebCore::DataTransfer::setDragImage):
        (WebCore::DataTransfer::createForDragAndDrop):
        (WebCore::DataTransfer::canSetDragImage):
        (WebCore::DataTransfer::updateDragImage):
        (WebCore::DataTransfer::createDragImage):
        (WebCore::DragImageLoader::DragImageLoader):
        (WebCore::DragImageLoader::imageChanged):
        (WebCore::DataTransfer::sourceOperation):
        (WebCore::DataTransfer::destinationOperation):
        (WebCore::DataTransfer::setSourceOperation):
        (WebCore::DataTransfer::setDestinationOperation):
        (WebCore::Clipboard::Clipboard): Deleted.
        (WebCore::Clipboard::createForCopyAndPaste): Deleted.
        (WebCore::Clipboard::~Clipboard): Deleted.
        (WebCore::Clipboard::setAccessPolicy): Deleted.
        (WebCore::Clipboard::canReadTypes): Deleted.
        (WebCore::Clipboard::canReadData): Deleted.
        (WebCore::Clipboard::canWriteData): Deleted.
        (WebCore::Clipboard::clearData): Deleted.
        (WebCore::Clipboard::getData): Deleted.
        (WebCore::Clipboard::setData): Deleted.
        (WebCore::Clipboard::types): Deleted.
        (WebCore::Clipboard::files): Deleted.
        (WebCore::Clipboard::dropEffect): Deleted.
        (WebCore::Clipboard::setDropEffect): Deleted.
        (WebCore::Clipboard::effectAllowed): Deleted.
        (WebCore::Clipboard::setEffectAllowed): Deleted.
        (WebCore::Clipboard::setDragImage): Deleted.
        (WebCore::Clipboard::createForDragAndDrop): Deleted.
        (WebCore::Clipboard::canSetDragImage): Deleted.
        (WebCore::Clipboard::updateDragImage): Deleted.
        (WebCore::Clipboard::createDragImage): Deleted.
        (WebCore::Clipboard::sourceOperation): Deleted.
        (WebCore::Clipboard::destinationOperation): Deleted.
        (WebCore::Clipboard::setSourceOperation): Deleted.
        (WebCore::Clipboard::setDestinationOperation): Deleted.
        * dom/DataTransfer.h: Copied from Source/WebCore/dom/Clipboard.h.
        * dom/DataTransfer.idl: Copied from Source/WebCore/dom/Clipboard.idl.
        * dom/DataTransferAccessPolicy.h: Copied from Source/WebCore/dom/ClipboardAccessPolicy.h.
        * dom/DataTransferItemList.h:
        * dom/DataTransferMac.mm: Copied from Source/WebCore/dom/ClipboardMac.mm.
        (WebCore::DataTransfer::createDragImage):
        (WebCore::Clipboard::createDragImage): Deleted.
        * dom/Event.h:
        (WebCore::Event::clipboardData):
        (WebCore::Event::internalDataTransfer):
        (WebCore::Event::clipboard): Deleted.
        * dom/Event.idl:
        * dom/MouseEvent.cpp:
        (WebCore::MouseEvent::create):
        (WebCore::MouseEvent::MouseEvent):
        (WebCore::MouseEvent::initMouseEvent):
        * dom/MouseEvent.h:
        (WebCore::MouseEvent::dataTransfer):
        * dom/MouseEvent.idl:
        * dom/WheelEvent.cpp:
        * editing/Editor.cpp:
        (WebCore::Editor::canDHTMLCut):
        (WebCore::Editor::canDHTMLCopy):
        (WebCore::Editor::canDHTMLPaste):
        (WebCore::Editor::tryDHTMLCopy):
        (WebCore::Editor::tryDHTMLCut):
        (WebCore::Editor::tryDHTMLPaste):
        (WebCore::Editor::dispatchCPPEvent):
        (WebCore::Editor::performCutOrCopy):
        (WebCore::Editor::selectedTextForDataTransfer):
        (WebCore::Editor::selectedTextForClipboard): Deleted.
        * editing/Editor.h:
        * editing/ios/EditorIOS.mm:
        (WebCore::Editor::stringSelectionForPasteboardWithImageAltText):
        * editing/mac/EditorMac.mm:
        (WebCore::Editor::takeFindStringFromSelection):
        (WebCore::Editor::stringSelectionForPasteboardWithImageAltText):
        * loader/EmptyClients.h:
        * page/DragClient.h:
        * page/DragController.cpp:
        (WebCore::DragController::dragExited):
        (WebCore::DragController::performDrag):
        (WebCore::DragController::tryDHTMLDrag):
        (WebCore::DragController::startDrag):
        (WebCore::DragController::doImageDrag):
        (WebCore::DragController::doSystemDrag):
        * page/DragController.h:
        * page/DragState.h:
        * page/EventHandler.cpp:
        (WebCore::EventHandler::dispatchDragEvent):
        (WebCore::hasFileOfType):
        (WebCore::hasStringOfType):
        (WebCore::hasDropZoneType):
        (WebCore::findDropZone):
        (WebCore::EventHandler::updateDragAndDrop):
        (WebCore::EventHandler::cancelDragAndDrop):
        (WebCore::EventHandler::performDragAndDrop):
        (WebCore::EventHandler::freeDataTransfer):
        (WebCore::EventHandler::dragSourceEndedAt):
        (WebCore::EventHandler::dispatchDragSrcEvent):
        (WebCore::EventHandler::handleDrag):
        (WebCore::EventHandler::freeClipboard): Deleted.
        * page/EventHandler.h:
        * page/efl/EventHandlerEfl.cpp:
        (WebCore::EventHandler::createDraggingDataTransfer):
        (WebCore::EventHandler::createDraggingClipboard): Deleted.
        * page/gtk/DragControllerGtk.cpp:
        (WebCore::DragController::declareAndWriteDragImage):
        * page/gtk/EventHandlerGtk.cpp:
        (WebCore::EventHandler::createDraggingDataTransfer):
        (WebCore::EventHandler::createDraggingClipboard): Deleted.
        * page/mac/DragControllerMac.mm:
        (WebCore::DragController::declareAndWriteDragImage):
        * page/mac/EventHandlerMac.mm:
        (WebCore::EventHandler::createDraggingDataTransfer):
        (WebCore::EventHandler::createDraggingClipboard): Deleted.
        * page/win/DragControllerWin.cpp:
        (WebCore::DragController::declareAndWriteDragImage):
        * page/win/EventHandlerWin.cpp:
        (WebCore::EventHandler::createDraggingataTransfer):
        (WebCore::EventHandler::createDraggingClipboard): Deleted.
        * platform/Pasteboard.h:
        * platform/gtk/PasteboardGtk.cpp:
        (WebCore::Pasteboard::writeSelection):
        * platform/mac/PasteboardMac.mm:
        * platform/win/PasteboardWin.cpp:
        (WebCore::Pasteboard::writeRangeToDataObject):
        (WebCore::Pasteboard::writeSelection):

2014-04-08  Jer Noble  <jer.noble@apple.com>

        Unreviewed iOS build fix. Pass 0 instead of nil to the options parameter of addObserver:forKeyPath:options:context.

        * platform/graphics/ios/TextTrackRepresentationIOS.mm:
        (-[WebCoreTextTrackRepresentationIOSHelper setParent:]):

2014-04-08  Antti Koivisto  <antti@apple.com>

        Remove exposedRect from TileController
        https://bugs.webkit.org/show_bug.cgi?id=131378

        Reviewed by Simon Fraser.

        Having two separate visible rectangles is confusing. We should compute one on higher level.

        * page/FrameView.cpp:
        (WebCore::FrameView::setExposedRect):
        
            Push exposed rect to tile controller by doing a layer flush (like the changed visible rect is normally passed).

        * platform/graphics/TiledBacking.h:
        * platform/graphics/ca/mac/TileController.h:
        * platform/graphics/ca/mac/TileController.mm:
        
            Remove exposedRect and just use visibleRect.

        (WebCore::TileController::TileController):
        (WebCore::TileController::setTiledScrollingIndicatorPosition):
        
            Update the scrolling indicator position.

        (WebCore::TileController::updateTileCoverageMap):
        (WebCore::TileController::setExposedRect): Deleted.
        * platform/graphics/ca/mac/TileGrid.h:
        * platform/graphics/ca/mac/TileGrid.mm:
        (WebCore::TileGrid::tilesWouldChangeForVisibleRect):
        (WebCore::TileGrid::revalidateTiles):
        (WebCore::TileGrid::scaledExposedRect): Deleted.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::RenderLayerBacking):
        
            No need to push exposedRect anymore.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges):
        
            Integrate exposed rect to visible rect when flushing layers.

2014-04-08  Andreas Kling  <akling@apple.com>

        [Mac] Always do a full GC when simulating memory pressure.
        <https://webkit.org/b/129790>

        To get more consistent accounting on automated memory testers,
        add a synchronous GC as part of the simulated memory pressure event.

        Reviewed by Geoffrey Garen.

        * platform/mac/MemoryPressureHandlerMac.mm:
        (WebCore::MemoryPressureHandler::install):

2014-04-08  Jer Noble  <jer.noble@apple.com>

        Unreviewed iOS build fix. Pass 0 instead of nil to setRate: when pausing.

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::platformPause):

2014-04-08  Mark Lam  <mark.lam@apple.com>

        Refactor to make JSMainThreadExecState's constructor and destructor private.
        <https://webkit.org/b/131372>

        Reviewed by Mark Hahnenberg.

        This is in preparation for subsequent patches to ensure that we don't
        exit the VM with an exception still pending.

        No new tests required.  This is only a refactor of existing behavior.

        * bindings/js/JSDOMGlobalObjectTask.cpp:
        * bindings/js/JSMainThreadExecState.h:
        (WebCore::JSMainThreadExecState::runTask):

2014-04-07  Jer Noble  <jer.noble@apple.com>

        [WK2][iOS] Consecutive videos in full screen display only black
        https://bugs.webkit.org/show_bug.cgi?id=131316

        Reviewed by Eric Carlson.

        Update the MediaPlayer's full screen attributes whenever the underlying engine changes,
        not just when the engine is initially created. Also, clear the videoLayer out of the
        fullscreen layer when destroying the videoLayer.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute):
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::destroyVideoLayer):

2014-04-08  Morten Stenshorne  <mstensho@opera.com>

        [New Multicolumn] Child top margin sometimes ignored for column balancing
        https://bugs.webkit.org/show_bug.cgi?id=122754

        Reviewed by David Hyatt.

        We need to set zero page logical height in LayoutState when column
        height is unknown (when the columns haven't yet been
        balanced). There's code that assumes that non-zero page height means
        that page height is known. Lying about this makes the pagination code
        believe that every top margin is adjacent to a column break, which
        makes it eat and ignore all top margins.

        This should be cleaned up, but it's easier to wait until the old
        multicol code has been removed.

        Tests: fast/multicol/break-in-scrollable.html
               fast/multicol/newmulticol/leading-and-trailing-margin.html
               fast/multicol/newmulticol/leading-margin.html

        * rendering/LayoutState.cpp:
        (WebCore::LayoutState::LayoutState):
        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::checkForPaginationLogicalHeightChange):
        * rendering/RenderFlowThread.h:
        * rendering/RenderMultiColumnFlowThread.cpp:
        (WebCore::RenderMultiColumnFlowThread::isPageLogicalHeightKnown):
        * rendering/RenderMultiColumnFlowThread.h:

2014-04-07  Dean Jackson  <dino@apple.com>

        Allow elements to register for changes in page scale
        https://bugs.webkit.org/show_bug.cgi?id=131319

        Reviewed by Eric Carlson.

        Some parts of WebCore need to react to changes in the page
        scale factor, such as resizing when the user zooms. A followup
        patch will enable this for media controls - this simply lays
        the groundwork.

        At the moment we only allow HTMLMediaElements to register, but if
        necessary this could be expanded in the future.

        * dom/Document.cpp: New methods to keep a list of HTMLMediaElements that
        are interested in updates.
        (WebCore::Document::registerForPageScaleFactorChangedCallbacks):
        (WebCore::Document::unregisterForPageScaleFactorChangedCallbacks):
        (WebCore::Document::pageScaleFactorChanged):
        * dom/Document.h:
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement):
        (WebCore::HTMLMediaElement::registerWithDocument): Add ourselves to the
        the document's pageScale callback.
        (WebCore::HTMLMediaElement::unregisterWithDocument): Remove ourselves from the
        the document's pageScale callback.
        (WebCore::HTMLMediaElement::setMediaControlsDependOnPageScaleFactor): Add/remove ourselves to/from
        the callback if necessary.
        (WebCore::HTMLMediaElement::pageScaleFactorChanged): The callback function. Empty for now.
        * html/HTMLMediaElement.h:
        (WebCore::HTMLMediaElement::mediaControlsDependOnPageScaleFactor): Accessor.
        * page/Page.cpp:
        (WebCore::Page::setPageScaleFactor): Tell all documents that the user has zoomed.

2014-04-08  peavo@outlook.com  <peavo@outlook.com>

        [WinCairo] Compile error in TextureMapper.h
        https://bugs.webkit.org/show_bug.cgi?id=131360

        Reviewed by Brent Fulgham.

        The TextureMapper class has pure virtual methods, and cannot be instantiated.

        * platform/graphics/texmap/TextureMapper.h:
        (WebCore::TextureMapper::platformCreateAccelerated):

2014-04-08  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Slow paint path for inlines should snap to device pixels.
        https://bugs.webkit.org/show_bug.cgi?id=131259

        Reviewed by Simon Fraser.

        InlineTextBox::paint needs to round to the same device pixel position as SimpleLineLayout does.

        Test: fast/inline/hidpi-slow-path-text-on-subpixel-position.html

        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paint):
        * rendering/TextPainter.h: Cleanup. No reason to have them as references here.

2014-04-07  Brent Fulgham  <bfulgham@apple.com>

        Keep 'webkitClosedCaptionsVisible' API in sync with captions display preferences
        https://bugs.webkit.org/show_bug.cgi?id=131344

        Reviewed by Eric Carlson.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::configureTextTrackGroup) If we decide that captions should
        be active (due to user preferences) make sure the 'webkitClosedCaptionsVisible' state
        is turned on.

2014-04-08  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Paint the filter effect result image on device pixel position.
        https://bugs.webkit.org/show_bug.cgi?id=131255

        Reviewed by Simon Fraser.

        This patch moves filter effect images from integral to device pixel position. However,
        result images are still integral based.

        Test: css3/filters/hidpi-filter-is-on-subpixel-position.html

        * rendering/FilterEffectRenderer.cpp:
        (WebCore::FilterEffectRendererHelper::applyFilterEffect):

2014-04-08  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Make border images device pixel aware.
        https://bugs.webkit.org/show_bug.cgi?id=131209

        Reviewed by Simon Fraser.

        Snap border-image size and position to device pixels. It works both on generated and bitmap images.

        Test: fast/borders/hidpi-border-image-gradient-on-subpixels.html

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintNinePieceImage):

2014-04-08  Youenn Fablet  <youenn.fablet@crf.canon.fr>

        [SOUP] Control cookie management according ResourceRequest.allowCookies()
        https://bugs.webkit.org/show_bug.cgi?id=131026

        Reviewed by Sergio Villar Senin.

        Added per soup-message disabling of cookie jar manager when related ResourceRequest does not allow cookies (e.g. some cross-origin requests).

        Patch is covered by unskipped test http/tests/xmlhttprequest/cross-origin-cookie-storage.html.

        * platform/network/soup/ResourceRequestSoup.cpp:
        (WebCore::ResourceRequest::updateSoupMessageMembers): Added disabling of cookie jar manager if cookies are not allowed.

2014-04-08  Sergio Villar Senin  <svillar@igalia.com>

        [CSS Grid Layout] Handle min/max height in the grid element
        https://bugs.webkit.org/show_bug.cgi?id=131302

        Reviewed by Darin Adler.

        Removed a FIXME in the code as we're already handling min/max
        height in the code. Added a couple of test cases to improve the
        test coverage.

        Merged from Blink r161876 by <jchaffraix@chromium.org>

        Tests: fast/css-grid-layout/flex-content-sized-columns-resize.html
               fast/css-grid-layout/grid-element-min-max-height.html

        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::layoutGridItems):

2014-04-08  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Remove unused RenderBox::clearRenderBoxRegionInfo
        https://bugs.webkit.org/show_bug.cgi?id=131352

        Reviewed by Andrei Bucur.

        No new tests, code clean-up.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::clearRenderBoxRegionInfo): Deleted.
        * rendering/RenderBox.h:

2014-04-08  Zsolt Borbely  <zsborbely.u-szeged@partner.samsung.com>

        Buildfix after r166917
        https://bugs.webkit.org/show_bug.cgi?id=131351

        Reviewed by Andrei Bucur.

        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::accessibleNameForNode):

2014-04-08  Darin Adler  <darin@apple.com>

        Fix assertions triggered by CSS calc changes in r166860
        https://bugs.webkit.org/show_bug.cgi?id=131346

        Reviewed by Andrei Bucur.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::getBorderRadiusCornerValues): Use isPercentNotCalculated() instead of
        type() == Percent; no behavior change.
        (WebCore::getBorderRadiusCornerValue): Ditto.
        (WebCore::lineHeightFromStyle): Use isPercentNotCalculated() before code
        that calls percent(), which won't work for a calculated length.

        * css/DeprecatedStyleBuilder.cpp:
        (WebCore::ApplyPropertyBorderRadius::applyValue): Use isNegative and isZero rather
        than calling value() unconditionally. Should make calculated values work better.

        * html/HTMLPlugInImageElement.cpp:
        (WebCore::is100Percent): Use isPercentNotCalculated() before code
        that calls percent(), which won't work for a calculated length.

        * platform/Length.cpp:
        (WebCore::CalculationValueMap::deref): Use adoptRef here instead of calling deref
        immediately, so the deref will happen after calling remove. This makes the code
        work properly even if it's reentered inside the calculation value's destructor.

        * platform/Length.h:
        (WebCore::Length::percent): Change assert to isPercentNotCalculated, since the
        value function this calls only works for non-calculated values anyway.
        (WebCore::Length::isPercentNotCalculated): Added.
        (WebCore::Length::isPercent): Changed to call isPercentNotCalculated.
        (WebCore::Length::isSpecified): Changed to call isPercent.

        * platform/graphics/transforms/TranslateTransformOperation.h:
        (WebCore::TranslateTransformOperation::apply): Use isPercentNotCalculated()
        instead of type() == Percent; no behavior change.

        * rendering/AutoTableLayout.cpp:
        (WebCore::AutoTableLayout::recalcColumn): Use isPercentNotCalculated()
        before code that calls value() or percent(), which won't work for a calculated length.
        (WebCore::AutoTableLayout::computeIntrinsicLogicalWidths): Ditto.
        (WebCore::AutoTableLayout::calcEffectiveLogicalWidth): Ditto.
        (WebCore::AutoTableLayout::layout): Ditto.
        * rendering/FixedTableLayout.cpp:
        (WebCore::FixedTableLayout::layout): Ditto.
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::calculateImageIntrinsicDimensions): Ditto.
        * rendering/RenderTableSection.cpp:
        (WebCore::updateLogicalHeightForCell): Ditto.
        (WebCore::RenderTableSection::distributeExtraLogicalHeightToPercentRows): Ditto.
        (WebCore::RenderTableSection::distributeExtraLogicalHeightToRows): Ditto.

        * rendering/style/RenderStyle.cpp:
        (WebCore::requireTransformOrigin): Use modern for loop. Also marked function static,
        since it's private to this file.
        (WebCore::RenderStyle::applyTransform): Use isPercentNotCalculated() instead of
        type() == Percent; no behavior change. Also use a modern for loop and auto& to avoid
        a really long type name.

        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::computeIntrinsicRatioInformation): Use isPercentNotCalculated()
        before code that calls percent(), which won't work for a calculated length.

        * platform/Length.h:
        (WebCore::Length::percent):
        (WebCore::Length::isPercentNotCalculated):
        (WebCore::Length::isPercent):
        (WebCore::Length::isSpecified):
        * platform/graphics/transforms/TranslateTransformOperation.h:
        (WebCore::TranslateTransformOperation::apply):
        * rendering/AutoTableLayout.cpp:
        (WebCore::AutoTableLayout::recalcColumn):
        (WebCore::AutoTableLayout::computeIntrinsicLogicalWidths):
        (WebCore::AutoTableLayout::calcEffectiveLogicalWidth):
        (WebCore::AutoTableLayout::layout):
        * rendering/FixedTableLayout.cpp:
        (WebCore::FixedTableLayout::layout):
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::calculateImageIntrinsicDimensions):
        * rendering/RenderTableSection.cpp:
        (WebCore::updateLogicalHeightForCell):
        (WebCore::RenderTableSection::distributeExtraLogicalHeightToPercentRows):
        (WebCore::RenderTableSection::distributeExtraLogicalHeightToRows):
        * rendering/style/RenderStyle.cpp:
        (WebCore::requireTransformOrigin):
        (WebCore::RenderStyle::applyTransform):
        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::computeIntrinsicRatioInformation):

2014-04-08  Xabier Rodriguez Calvar  <calvaris@igalia.com>

        [GTK] Remove media controls dead code
        https://bugs.webkit.org/show_bug.cgi?id=131300

        Reviewed by Eric Carlson.

        MediaControlsGtk.cpp is no longer used so we can remove it from
        the repo.

        No new tests needed.

        * PlatformGTK.cmake: Remove html/shadow/MediaControlsGtk.cpp from
        compilation.
        * html/shadow/MediaControlsGtk.cpp: Removed.

2014-04-08  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Fixed positioned elements in named flows have fragmented content
        https://bugs.webkit.org/show_bug.cgi?id=130595

        Reviewed by Darin Adler.

        Fixed positioned elements that have the named flow as parent are positioned
        and sized relative to the viewport. Because of that, when the named flow
        has an associated region chain, the fixed positioned elements should not
        be fragmented.

        By making a fixed positioned element with a named flow parent unsplittable
        for fragmentation, we prevent this wrong behavior.

        Test: fast/regions/fixed-pos-content-fragmented.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::isUnsplittableForPagination):

2014-04-07  Chris Fleizach  <cfleizach@apple.com>

        Regression: AX: image labels no longer exposed to AX API in SVG test case
        https://bugs.webkit.org/show_bug.cgi?id=131208

        Reviewed by Daniel Bates.

        accessibleNameForNode should work on any Element, not just HTML elements.

        Test: accessibility/svg-labelledby.html

        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::accessibleNameForNode):

2014-04-08  Andres Gomez  <agomez@igalia.com>

        [GTK] [EFL] Build fails with GCC < 4.8.x
        https://bugs.webkit.org/show_bug.cgi?id=130585

        Reviewed by Martin Robinson.

        The behavior in lower versions of GCC seem to be related to
        http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2132.

        Provided explicit casts for the failing ambiguous overloads.

        * platform/audio/gstreamer/AudioFileReaderGStreamer.cpp:
        (WebCore::AudioFileReader::createBus):
        * platform/graphics/gstreamer/WebKitMediaSourceGStreamer.cpp:
        (webKitMediaSrcChangeState):
        (webKitMediaVideoSrcNeedDataCb):
        (webKitMediaAudioSrcNeedDataCb):
        (webKitMediaVideoSrcEnoughDataCb):
        (webKitMediaAudioSrcEnoughDataCb):
        (webKitMediaVideoSrcSeekDataCb):
        (webKitMediaAudioSrcSeekDataCb):
        * platform/gtk/GtkDragAndDropHelper.cpp:
        (WebCore::GtkDragAndDropHelper::handleDragLeave):
        * platform/gtk/SharedTimerGtk.cpp:
        (WebCore::setSharedTimerFireInterval):

2014-04-08  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        Change NavigatorContentUtils client ownership from port side to NavigatorContentUtils
        https://bugs.webkit.org/show_bug.cgi?id=131299

        Reviewed by Darin Adler.

        EFL and GTK ports have managed own client of NavigatorContentUtils though it is only passed to
        NavigatorContentUtils. The NavigatorContentUtils has used the client to call port functions. So,
        there is no reason port implementation needs to manage the ownership. To manage the client is
        unnecessary work in current implementation.

        No new tests, no behavior changes.

        * Modules/navigatorcontentutils/NavigatorContentUtils.cpp:
        (WebCore::NavigatorContentUtils::create):
        (WebCore::provideNavigatorContentUtilsTo):
        * Modules/navigatorcontentutils/NavigatorContentUtils.h:
        * Modules/navigatorcontentutils/NavigatorContentUtilsClient.h:

2014-04-07  Zoltan Horvath  <zoltan@webkit.org>

        [CSS Shapes] Simplify the parsing of width arguments for Inset shapes
        https://bugs.webkit.org/show_bug.cgi?id=131305

        Reviewed by Andreas Kling.

        This code introduces some helper functions for setting the size arguments of inset shapes. This change
        also modifies the code to be the same as in Blink, so it helps us to keep the shapes code similar.

        No new tests, no behavior change.

        * css/CSSBasicShapes.h:
        (WebCore::CSSBasicShapeInset::updateShapeSize4Values):
        (WebCore::CSSBasicShapeInset::updateShapeSize1Value):
        (WebCore::CSSBasicShapeInset::updateShapeSize2Values):
        (WebCore::CSSBasicShapeInset::updateShapeSize3Values):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseBasicShapeInset):

2014-04-07  Martin Robinson  <mrobinson@igalia.com>

        fast/css3-text/css3-text-decoration/text-decoration-thickness.html fails on GTK
        https://bugs.webkit.org/show_bug.cgi?id=129957

        Reviewed by Dean Jackson.

        Causes existing tests to pass.

        * platform/graphics/cairo/GraphicsContextCG.cpp: Use the now-shared computeLineBoundsAndAntialiasingModeForText.
        * platform/graphics/cairo/GraphicsContextCairo.cpp: Align the Cairo version of text underline drawing with the CG version.
        * platform/graphics/GraphicsContext.h: Add computeLineBoundsAndAntialiasingModeForText.
        * platform/graphics/GraphicsContext.cpp: Ditto.

2014-04-07  Beth Dakin  <bdakin@apple.com>

        REGRESSION (r163194-r163227): Garbage tiles in overflow of RTL page with 
        background image
        https://bugs.webkit.org/show_bug.cgi?id=131323
        -and corresponding-
        <rdar://problem/16402013>

        Reviewed by Tim Horton.

        Returning the TiledBacking::bounds() for the 
        FrameView::extendedBackgroundRectForPainting() in convenient for ltr pages, but it 
        is simply incorrect in rtl. There is no easy way to map the rect into the right 
        coordinate space, so this patch re-works the code to use computations in 
        RenderView to get the right rect.

        Call RenderView::unextendedBackgroundRect() and expand and move it based on the 
        TiledBacking’s margins.
        * page/FrameView.cpp:
        (WebCore::FrameView::extendedBackgroundRectForPainting):

        The logic that used to be in backgroundRect() has been moved to 
        unextendedBackgroundRect(). 
        * rendering/RenderView.cpp:
        (WebCore::RenderView::unextendedBackgroundRect):
        (WebCore::RenderView::backgroundRect):
        * rendering/RenderView.h:

2014-04-07  Zoltan Horvath  <zoltan@webkit.org>

        [CSS Shapes] inset complex calc() args vanish in serialized computed style
        https://bugs.webkit.org/show_bug.cgi?id=129838

        Reviewed by Bem Jones-Bey.

        We didn't pass the style parameter when setting the width members of CSSBasicShapeInset,
        which lead to a 'should never reach asserttion' in CSSPrimitiveValue::init. This patch
        adds the missing parameters to the call sites.

        Extended existing parsing test script.

        * css/BasicShapeFunctions.cpp:
        (WebCore::valueForBasicShape):

2014-04-07  Eric Carlson  <eric.carlson@apple.com>

        [iOS] MediaDocument should allow autoplay
        https://bugs.webkit.org/show_bug.cgi?id=131301

        Reviewed by Jer Noble.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement): Don't add the RequireUserGestureForRateChange
            behavior restriction when in a MediaDocument.

2014-04-07  Hyowon Kim  <hw1008.kim@samsung.com>

        Move to using std::unique_ptr for opengl, texmap, transforms and efl in WebCore/platform/graphics.
        https://bugs.webkit.org/show_bug.cgi?id=131276

        Reviewed by Darin Adler.

        Replace uses of OwnPtr and PassOwnPtr in code under WebCore/platform/graphics/
        opengl, texmap, transforms and efl with std::unique_ptr.

        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore::WebGLRenderingContext::initializeNewContext):
        * platform/graphics/GraphicsContext3D.h:
        * platform/graphics/GraphicsContext3DPrivate.cpp:
        (WebCore::GraphicsContext3DPrivate::create): Deleted.
        * platform/graphics/GraphicsContext3DPrivate.h:
        * platform/graphics/cairo/GraphicsContext3DCairo.cpp:
        (WebCore::GraphicsContext3D::GraphicsContext3D):
        (WebCore::GraphicsContext3D::setContextLostCallback):
        (WebCore::GraphicsContext3D::setErrorMessageCallback):
        * platform/graphics/efl/EvasGLContext.h:
        * platform/graphics/efl/EvasGLSurface.h:
        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::setContextLostCallback):
        (WebCore::GraphicsContext3D::setErrorMessageCallback):
        * platform/graphics/efl/GraphicsContext3DPrivate.cpp:
        (WebCore::GraphicsContext3DPrivate::create):
        (WebCore::GraphicsContext3DPrivate::setContextLostCallback):
        * platform/graphics/efl/GraphicsContext3DPrivate.h:
        * platform/graphics/mac/GraphicsContext3DMac.mm:
        (WebCore::GraphicsContext3D::GraphicsContext3D):
        (WebCore::GraphicsContext3D::setContextLostCallback):
        (WebCore::GraphicsContext3D::setErrorMessageCallback):
        * platform/graphics/opengl/Extensions3DOpenGLES.cpp:
        (WebCore::Extensions3DOpenGLES::setEXTContextLostCallback):
        * platform/graphics/opengl/Extensions3DOpenGLES.h:
        * platform/graphics/opengl/GLPlatformContext.cpp:
        (WebCore::createOffScreenContext):
        (WebCore::GLPlatformContext::createContext):
        * platform/graphics/opengl/GLPlatformContext.h:
        * platform/graphics/opengl/GLPlatformSurface.cpp:
        (WebCore::GLPlatformSurface::createOffScreenSurface):
        * platform/graphics/opengl/GLPlatformSurface.h:
        * platform/graphics/surfaces/efl/GraphicsSurfaceCommon.cpp:
        * platform/graphics/surfaces/egl/EGLSurface.cpp:
        (WebCore::EGLOffScreenSurface::createOffScreenSurface):
        * platform/graphics/surfaces/egl/EGLSurface.h:
        * platform/graphics/texmap/GraphicsLayerTextureMapper.cpp:
        (WebCore::GraphicsLayerTextureMapper::GraphicsLayerTextureMapper):
        * platform/graphics/texmap/GraphicsLayerTextureMapper.h:
        * platform/graphics/texmap/TextureMapper.cpp:
        (WebCore::TextureMapper::create):
        (WebCore::TextureMapper::TextureMapper):
        * platform/graphics/texmap/TextureMapper.h:
        (WebCore::TextureMapper::platformCreateAccelerated):
        * platform/graphics/texmap/TextureMapperGL.cpp:
        (WebCore::TextureMapper::platformCreateAccelerated):
        * platform/graphics/texmap/TextureMapperGL.h:
        (WebCore::TextureMapperGL::create): Deleted.
        * platform/graphics/texmap/TextureMapperImageBuffer.h:
        (WebCore::TextureMapperImageBuffer::TextureMapperImageBuffer):
        (WebCore::TextureMapperImageBuffer::create): Deleted.
        * platform/graphics/texmap/coordinated/CoordinatedGraphicsScene.cpp:
        (WebCore::CoordinatedGraphicsScene::purgeGLResources):
        * platform/graphics/texmap/coordinated/CoordinatedGraphicsScene.h:
        * platform/graphics/transforms/TransformState.cpp:
        (WebCore::TransformState::operator=):
        (WebCore::TransformState::applyTransform):
        * platform/graphics/transforms/TransformState.h:
        * platform/graphics/win/GraphicsContext3DWin.cpp:
        (WebCore::GraphicsContext3D::GraphicsContext3D):
        (WebCore::GraphicsContext3D::setContextLostCallback):
        (WebCore::GraphicsContext3D::setErrorMessageCallback):

2014-04-07  Tim Horton  <timothy_horton@apple.com>

        [iOS WebKit2] Make back-buffers purgeable when possible
        https://bugs.webkit.org/show_bug.cgi?id=131213
        <rdar://problem/15373906>

        Reviewed by Simon Fraser.

        * WebCore.exp.in:
        * platform/graphics/cg/IOSurfacePool.cpp:
        (WebCore::IOSurfacePool::takeSurface):
        (WebCore::IOSurfacePool::markOlderSurfacesPurgeable):
        (WebCore::IOSurfacePool::showPoolStatistics):
        * platform/graphics/cocoa/IOSurface.h:
        * platform/graphics/cocoa/IOSurface.mm:
        (IOSurface::isVolatile):
        (IOSurface::setIsVolatile):
        Rename purgeability functions to match the system
        and reduce confusion between purgeable memory
        and volatile vs. non-volatile memory.

2014-04-07  Benjamin Poulain  <benjamin@webkit.org>

        Split CSS Selectors pseudo class and pseudo elements
        https://bugs.webkit.org/show_bug.cgi?id=131295

        Reviewed by Andreas Kling.

        Split pseudo class and pseudo element to make it clearer what pseudo types
        are possible for a given match type.

        Pseudo Element types are separated and Pseudo Class are left in place. The Pseudo Class
        will have to be renamed too but that will be done separately to make this change smaller.

        * css/CSSGrammar.y.in:
        * css/CSSParser.cpp:
        (WebCore::CSSParser::rewriteSpecifiersWithElementName):
        (WebCore::CSSParser::rewriteSpecifiers):
        Use a method isPseudoElementCueFunction() to abstract the #ifdef out of the parser.

        * css/CSSParserValues.cpp:
        (WebCore::CSSParserSelector::parsePseudoElementSelector):

        (WebCore::CSSParserSelector::parsePseudoElementCueFunctionSelector):
        Rename to specify this is for the pseudo element cue function, not the pseudo element cue.

        (WebCore::CSSParserSelector::parsePseudoClassAndCompatibilityElementSelector):
        (WebCore::CSSParserSelector::parsePseudoCueFunctionSelector): Deleted.
        * css/CSSParserValues.h:
        (WebCore::CSSParserSelector::isPseudoElementCueFunction):
        * css/CSSSelector.cpp:
        (WebCore::CSSSelector::specificityForOneSelector):
        (WebCore::CSSSelector::pseudoId):
        (WebCore::CSSSelector::parsePseudoElementType):
        (WebCore::CSSSelector::operator==):
        * css/CSSSelector.h:
        (WebCore::CSSSelector::pseudoType):
        (WebCore::CSSSelector::setPseudoElementType):
        (WebCore::CSSSelector::pseudoElementType):
        (WebCore::CSSSelector::isUnknownPseudoElement):
        (WebCore::CSSSelector::isCustomPseudoElement):
        (WebCore::pseudoClassIsRelativeToSiblings):
        (WebCore::CSSSelector::isSiblingSelector):
        * css/RuleFeature.cpp:
        (WebCore::RuleFeatureSet::collectFeaturesFromSelector):
        * css/RuleSet.cpp:
        (WebCore::determinePropertyWhitelistType):
        (WebCore::RuleSet::findBestRuleSetAndAdd):
        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::matchRecursively):
        (WebCore::SelectorChecker::checkOne):
        (WebCore::SelectorChecker::checkScrollbarPseudoClass):
        (WebCore::SelectorChecker::determineLinkMatchType):
        * css/SelectorPseudoClassAndCompatibilityElementMap.in:
        * css/SelectorPseudoElementTypeMap.in:
        * css/SelectorPseudoTypeMap.h:
        * css/makeSelectorPseudoClassAndCompatibilityElementMap.py:
        * css/makeSelectorPseudoElementsMap.py:
        (enumerablePseudoType):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::getMatchedCSSRules):

        * rendering/style/RenderStyleConstants.h:
        All the fullscreen pseudo types are pseudo class selectors. They should not have a pseudo ID.

2014-04-07  Brian J. Burg  <burg@cs.washington.edu>

        Web Replay: detect possible replay divergence from unexpected DOM event dispatches
        https://bugs.webkit.org/show_bug.cgi?id=131193

        Reviewed by Andreas Kling.

        Add assertions to catch potential nondeterministic behavior.

        The assertion added by this patch catches dispatched DOM events
        that are triggered by nondeterministic event loop cycles. If we
        did not capture an event loop input in the current event loop
        cycle nor are we manually simulating an event loop input during
        playback, then DOM events fired during the unordered cycle could
        run JavaScript and diverge the execution.

        During playback, we can assert that EventLoopInputDispatcher is dispatching
        when a DOM event is be dispatched to a document that is being replayed.

        During capturing, event loop inputs are captured rather than
        dispatched, so we add some accounting to track what caused a DOM
        event. To approximate the extent of computation triggered by an
        event loop input, we add RAII helpers to call sites where event
        loop inputs are captured.

        The assertions are disabled by default until the most common
        sources of nondeterminism are handled and playback errors are
        gracefully surfaced to the user. <https://webkit.org/b/131279>

        No new tests. This patch adds extra assertions for debugging purposes.

        * WebCore.xcodeproj/project.pbxproj:
        * inspector/InspectorInstrumentation.cpp: Notify ReplayAgent of dispatched DOM event.
        (WebCore::InspectorInstrumentation::willDispatchEventImpl):
        (WebCore::InspectorInstrumentation::willDispatchEventOnWindowImpl):
        * inspector/InspectorReplayAgent.cpp: Forward dispatched DOM events to ReplayController.
        (WebCore::InspectorReplayAgent::willDispatchEvent): Added.
        * inspector/InspectorReplayAgent.h:
        * replay/CapturingInputCursor.cpp:
        (WebCore::CapturingInputCursor::CapturingInputCursor):
        (WebCore::CapturingInputCursor::setWithinEventLoopInputExtent): Added.
        * replay/CapturingInputCursor.h:
        * replay/EventLoopInput.cpp: Added.
        (WebCore::EventLoopInputExtent::EventLoopInputExtent): Added.
        (WebCore::EventLoopInputExtent::~EventLoopInputExtent): Added.
        * replay/EventLoopInput.h:
        * replay/EventLoopInputDispatcher.h:
        (WebCore::EventLoopInputDispatcher::isDispatching): Add a getter.
        * replay/ReplayController.cpp:
        (WebCore::logDispatchedDOMEvent): Added. This is useful for understanding script-visible events.
        (WebCore::ReplayController::willDispatchEvent): Added.
        * replay/ReplayController.h:
        * replay/UserInputBridge.cpp: Add extent helpers to call sites that capture inputs.
        (WebCore::UserInputBridge::handleMousePressEvent):
        (WebCore::UserInputBridge::handleMouseReleaseEvent):
        (WebCore::UserInputBridge::handleMouseMoveEvent):
        (WebCore::UserInputBridge::handleMouseMoveOnScrollbarEvent):
        (WebCore::UserInputBridge::handleKeyEvent):
        (WebCore::UserInputBridge::handleWheelEvent):
        (WebCore::UserInputBridge::scrollRecursively):
        (WebCore::UserInputBridge::logicalScrollRecursively):

2014-04-07  Timothy Hatcher  <timothy@apple.com>

        Remove copy of combine-javascript-resources.pl that isn't used anymore
        https://bugs.webkit.org/show_bug.cgi?id=131307

        Reviewed by Joseph Pecoraro.

        * WebCore.xcodeproj/project.pbxproj:
        * inspector/combine-javascript-resources.pl: Removed.

2014-04-07  Zoltan Horvath  <zoltan@webkit.org>

        [CSS Shapes] Clean up invalid FIXME
        https://bugs.webkit.org/show_bug.cgi?id=131304

        Reviewed by Andreas Kling.

        No new tests, no behavior change.

        * page/animation/CSSPropertyAnimation.cpp:
        (WebCore::blendFunc):

2014-04-07  Ryuan Choi  <ryuan.choi@samsung.com>

        [EFL] Turn on ENABLE_MEDIA_CONTROLS_SCRIPT
        https://bugs.webkit.org/show_bug.cgi?id=131257

        Reviewed by Gyuyoung Kim.

        no new tests. just rebased exisiting tests.

        * PlatformEfl.cmake: Added the media controls script associated files.
        * css/mediaControlsEfl.css: Removed.
        * css/mediaControlsEflFullscreen.css: Removed.
        * platform/efl/DefaultTheme/CMakeLists.txt:
        * platform/efl/DefaultTheme/default.edc:
        * platform/efl/DefaultTheme/widget/mediacontrol/fullscreenbutton/enterfullscreenbutton.png: Removed.
        * platform/efl/DefaultTheme/widget/mediacontrol/fullscreenbutton/exitfullscreenbutton.png: Removed.
        * platform/efl/DefaultTheme/widget/mediacontrol/fullscreenbutton/fullscreen_button.edc: Removed.
        * platform/efl/DefaultTheme/widget/mediacontrol/mutebutton/mute_button.edc: Removed.
        * platform/efl/DefaultTheme/widget/mediacontrol/mutebutton/mutebutton.png: Removed.
        * platform/efl/DefaultTheme/widget/mediacontrol/mutebutton/unmutebutton.png: Removed.
        * platform/efl/DefaultTheme/widget/mediacontrol/playpausebutton/pausebutton.png: Removed.
        * platform/efl/DefaultTheme/widget/mediacontrol/playpausebutton/playbutton.png: Removed.
        * platform/efl/DefaultTheme/widget/mediacontrol/playpausebutton/playpause_button.edc: Removed.
        * platform/efl/DefaultTheme/widget/mediacontrol/seekbackwardbutton/seekbackward_button.edc: Removed.
        * platform/efl/DefaultTheme/widget/mediacontrol/seekbackwardbutton/seekbackwardbutton.png: Removed.
        * platform/efl/DefaultTheme/widget/mediacontrol/seekforwardbutton/seekforward_button.edc: Removed.
        * platform/efl/DefaultTheme/widget/mediacontrol/seekforwardbutton/seekforwardbutton.png: Removed.
        * platform/efl/DefaultTheme/widget/mediacontrol/togglecaptionsbutton/closedcaption.png: Removed.
        * platform/efl/DefaultTheme/widget/mediacontrol/togglecaptionsbutton/closedcaption_disabled.png: Removed.
        * platform/efl/DefaultTheme/widget/mediacontrol/togglecaptionsbutton/toggle_captions_button.edc: Removed.
        * platform/efl/RenderThemeEfl.cpp:
        (WebCore::toEdjeGroup):
        (WebCore::RenderThemeEfl::RenderThemeEfl):
        (WebCore::RenderThemeEfl::adjustSliderThumbSize):
        (WebCore::RenderThemeEfl::mediaControlsStyleSheet): Modified to load bundle style sheet.
        (WebCore::RenderThemeEfl::mediaControlsScript): Added to load bundle scripts.
        (WebCore::RenderThemeEfl::emitMediaButtonSignal): Deleted.
        (WebCore::RenderThemeEfl::extraMediaControlsStyleSheet): Deleted.
        (WebCore::RenderThemeEfl::extraFullScreenStyleSheet): Deleted.
        (WebCore::RenderThemeEfl::formatMediaControlsCurrentTime): Deleted.
        (WebCore::RenderThemeEfl::hasOwnDisabledStateHandlingFor): Deleted.
        (WebCore::RenderThemeEfl::paintMediaFullscreenButton): Deleted.
        (WebCore::RenderThemeEfl::paintMediaMuteButton): Deleted.
        (WebCore::RenderThemeEfl::paintMediaPlayButton): Deleted.
        (WebCore::RenderThemeEfl::paintMediaSeekBackButton): Deleted.
        (WebCore::RenderThemeEfl::paintMediaSeekForwardButton): Deleted.
        (WebCore::RenderThemeEfl::paintMediaSliderTrack): Deleted.
        (WebCore::RenderThemeEfl::paintMediaSliderThumb): Deleted.
        (WebCore::RenderThemeEfl::paintMediaVolumeSliderContainer): Deleted.
        (WebCore::RenderThemeEfl::paintMediaVolumeSliderTrack): Deleted.
        (WebCore::RenderThemeEfl::paintMediaVolumeSliderThumb): Deleted.
        (WebCore::RenderThemeEfl::paintMediaCurrentTime): Deleted.
        (WebCore::RenderThemeEfl::supportsClosedCaptioning): Deleted.
        (WebCore::RenderThemeEfl::paintMediaToggleClosedCaptionsButton): Deleted.
        * platform/efl/RenderThemeEfl.h:

2014-04-07  Benjamin Poulain  <benjamin@webkit.org>

        CSS JIT: change the node flags directly instead of using function calls when possible
        https://bugs.webkit.org/show_bug.cgi?id=131292

        Reviewed by Andreas Kling.

        For historical reasons, changing the node flags was always done with function calls.
        This patch changes those calls to modify the nodes directly.

        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateDirectAdjacentTreeWalker):
        (WebCore::SelectorCompiler::setNodeFlag):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::markParentElementIfResolvingStyle):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementIsFirstChild):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementIsLastChild):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementIsOnlyChild):
        (WebCore::SelectorCompiler::markElementWithSetChildrenAffectedByLastChildRules): Deleted.
        (WebCore::SelectorCompiler::markElementWithSetChildrenAffectedByFirstChildAndLastChildRules): Deleted.
        * dom/Element.cpp:
        (WebCore::Element::setChildrenAffectedByFirstChildRules): Deleted.
        (WebCore::Element::setChildrenAffectedByDirectAdjacentRules): Deleted.
        * dom/Element.h:
        * dom/Node.h:
        (WebCore::Node::flagChildrenAffectedByFirstChildRulesFlag):
        (WebCore::Node::flagChildrenAffectedByLastChildRulesFlag):
        (WebCore::Node::flagChildrenAffectedByDirectAdjacentRulesFlag):

2014-04-07  Krzysztof Czech  <k.czech@samsung.com>

        Remove unused header from PlatformSpeechSynthesizer.h
        https://bugs.webkit.org/show_bug.cgi?id=131103

        Reviewed by Anders Carlsson.

        Since WebSpeech has switched to use std::unique_ptr, we do not need to include PassOwnPtr.

        No new tests. No behaviour change, just quick fix.

        * platform/PlatformSpeechSynthesizer.h:

2014-04-06  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Use RenderRegion::isValid() before using a region
        https://bugs.webkit.org/show_bug.cgi?id=131232

        Reviewed by Andreas Kling.

        RenderRegion method isValid() should be used to test whether a region
        is good to use instead of a mix between isValid() and flowThread().
        When the region is designed to fragment content from a parent flow thread,
        the m_flowThread is not nullified anymore, thus ensuring the same treatment for all invalid
        regions.
        Covered by existing regions tests.

        * inspector/InspectorOverlay.cpp:
        (WebCore::buildObjectForElementInfo):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::layoutOverflowRectForPropagation):
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintMaskForTextFillBox):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateLayerPositions):
        (WebCore::RenderLayer::paintLayer):
        (WebCore::RenderLayer::hitTestLayer):
        (WebCore::RenderLayer::calculateClipRects):
        * rendering/RenderNamedFlowFragment.cpp:
        (WebCore::RenderNamedFlowFragment::pageLogicalHeight):
        (WebCore::RenderNamedFlowFragment::maxPageLogicalHeight):
        * rendering/RenderNamedFlowThread.cpp:
        (WebCore::RenderNamedFlowThread::getRanges):
        (WebCore::RenderNamedFlowThread::clearRenderObjectCustomStyle):
        (WebCore::RenderNamedFlowThread::checkRegionsWithStyling):
        * rendering/RenderRegion.cpp:
        (WebCore::RenderRegion::RenderRegion):
        (WebCore::RenderRegion::positionForPoint):
        (WebCore::RenderRegion::pageLogicalWidth):
        (WebCore::RenderRegion::pageLogicalHeight):
        (WebCore::RenderRegion::styleDidChange):
        (WebCore::RenderRegion::installFlowThread):
        (WebCore::RenderRegion::attachRegion):
        (WebCore::RenderRegion::detachRegion):
        (WebCore::RenderRegion::ensureOverflowForBox):
        (WebCore::RenderRegion::renderBoxRegionInfo):

2014-04-06  Benjamin Poulain  <benjamin@webkit.org>

        Fix the debug bots after r166863

        * css/PageRuleCollector.cpp:
        (WebCore::checkPageSelectorComponents): I forgot to update one call site for PagePseudoClass.

2014-04-06  Darin Adler  <darin@apple.com>

        Make some bindings improvements, with smaller code size for error message generation
        https://bugs.webkit.org/show_bug.cgi?id=131285

        Reviewed by Andreas Kling.

        * WebCore.exp.in: Updated to remove old and add new functions, for use by the Internals
        JavaScript bindings.

        * bindings/js/JSDOMBinding.cpp:
        (WebCore::makeDOMBindingsTypeErrorStringInternal): Deleted.
        (WebCore::throwTypeError): Added. Helper to avoid repeating throwVMError/createTypeError.
        (WebCore::appendArgumentMustBe): Added. Helper for building up argument error strings.
        (WebCore::reportDeprecatedGetterError): Added. For bindings to use.
        (WebCore::throwArgumentMustBeEnumError): Ditto.
        (WebCore::throwArgumentMustBeFunctionError): Ditto.
        (WebCore::throwArgumentTypeError): Ditto.
        (WebCore::throwArrayElementTypeError): Ditto.
        (WebCore::throwAttributeTypeError): Ditto.
        (WebCore::throwConstructorDocumentUnavailableError): Ditto.
        (WebCore::throwGetterTypeError): Ditto.
        (WebCore::throwSequenceTypeError): Ditto.
        (WebCore::throwSetterTypeError): Ditto.
        (WebCore::throwThisTypeError): Ditto.

        * bindings/js/JSDOMBinding.h: Added declarations for new functions. Removed forward
        declarations for things not used in this file. Use nullptr instead of 0. Format
        templates consistently. Use a better for loop in the jsArray function. Removed
        unused HasMemoryCostMemberFunction, makeDOMBindingsTypeErrorString, and
        makeDOMBindingsTypeErrorStringInternal.

        * bindings/js/JSNavigatorCustom.cpp: Fixed a hand-written binding that was using
        makeDOMBindingsTypeErrorString to make a string.

        * bindings/js/ScriptController.h: Updated forward declarations.

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation): Cut down on use of UNUSED_PARAM. Use the new functions
        for errors, keeping the code in the generated file to a minimum.
        (GenerateParametersCheck): Ditto.
        (GenerateConstructorDefinition): Ditto.

        * bindings/scripts/test/JS/JSTestActiveDOMObject.cpp:
        * bindings/scripts/test/JS/JSTestCustomNamedGetter.cpp:
        * bindings/scripts/test/JS/JSTestEventConstructor.cpp:
        * bindings/scripts/test/JS/JSTestEventTarget.cpp:
        * bindings/scripts/test/JS/JSTestException.cpp:
        * bindings/scripts/test/JS/JSTestGenerateIsReachable.cpp:
        * bindings/scripts/test/JS/JSTestInterface.cpp:
        * bindings/scripts/test/JS/JSTestMediaQueryListListener.cpp:
        * bindings/scripts/test/JS/JSTestNamedConstructor.cpp:
        * bindings/scripts/test/JS/JSTestNode.cpp:
        * bindings/scripts/test/JS/JSTestObj.cpp:
        * bindings/scripts/test/JS/JSTestOverloadedConstructors.cpp:
        * bindings/scripts/test/JS/JSTestSerializedScriptValueInterface.cpp:
        * bindings/scripts/test/JS/JSTestTypedefs.cpp:
        * bindings/scripts/test/JS/JSattribute.cpp:
        * bindings/scripts/test/JS/JSreadonly.cpp:
        Updated expected results for changes above.

2014-04-06  Benjamin Poulain  <benjamin@webkit.org>

        Move the PseudoPageClass types out of the pseudo element/class mix
        https://bugs.webkit.org/show_bug.cgi?id=131284

        Reviewed by Darin Adler.

        Some more cleanup of Selector's pseudo types. This patch moves the page pseudo
        class types into their own enumeration (PagePseudoClassType).

        * css/CSSParserValues.cpp:
        (WebCore::CSSParserSelector::parsePagePseudoSelector):
        * css/CSSSelector.cpp:
        (WebCore::CSSSelector::specificityForPage):
        (WebCore::CSSSelector::pseudoId):
        (WebCore::CSSSelector::selectorText):
        * css/CSSSelector.h:
        (WebCore::CSSSelector::setPagePseudoType):
        (WebCore::CSSSelector::pagePseudoClassType):
        * css/PageRuleCollector.cpp:
        (WebCore::checkPageSelectorComponents):
        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator):

2014-04-06  Benjamin Poulain  <benjamin@webkit.org>

        CSS JIT: add support for :last-child and :only-child
        https://bugs.webkit.org/show_bug.cgi?id=131283

        Reviewed by Andreas Kling.

        This is the straightforward implementation of :last-child and :only-child.

        Both are extremely similar to :first-child. There are only minor differences:
        -:last-child has an additional check for the flag IsParsingChildrenFinished.
        -:only-child is like :first-child + :last-child but with combined marking.

        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::addPseudoType):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToNextAdjacentElement):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::jumpIfNoPreviousAdjacentElement):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementIsFirstChild):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::jumpIfNoNextAdjacentElement):
        (WebCore::SelectorCompiler::markElementWithSetChildrenAffectedByLastChildRules):
        (WebCore::SelectorCompiler::setLastChildState):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementIsLastChild):
        (WebCore::SelectorCompiler::markElementWithSetChildrenAffectedByFirstChildAndLastChildRules):
        (WebCore::SelectorCompiler::setOnlyChildState):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementIsOnlyChild):
        * dom/Node.h:
        (WebCore::Node::nextSiblingMemoryOffset):
        (WebCore::Node::flagIsParsingChildrenFinished):
        * rendering/style/RenderStyle.h:
        Removed the unused flags, I will add them back later as needed.

2014-04-06  Darin Adler  <darin@apple.com>

        Rework CSS calc logic, fixing some reference count mistakes in Length
        https://bugs.webkit.org/show_bug.cgi?id=131280
        rdar://problem/16400823

        Reviewed by Andreas Kling.

        New unit test in TestWebKitAPI.

        Changed the classes related to CSS "calc" to make the code a bit easier to read by
        moving code out of class definitions. Also used final some more, made more things private,
        used references instead of pointers, and other such changes. Biggest change, though, is to
        Length, which had a broken system for managing reference counted calculated objects.
        There were multiple bugs including a basic design mistake of not having a reference count
        and trying to use the reference count in the object itself. Fixed and covered by the unit
        test now; test found multiple problems in both the old and new implementations.

        * WebCore.exp.in: Updated exports, including symbols to make the unit test practical.

        * WebCore.xcodeproj/project.pbxproj: Made CalculationValue.h a Private file so it can
        be used in a unit test. Also let Xcode update the file type for a gperf file.

        * css/CSSCalculationValue.cpp:
        (WebCore::CSSCalcValue::equals): Updated since m_expression is a Ref now.
        (WebCore::CSSCalcValue::clampToPermittedRange): Marked inline and updated for data member
        name change.
        (WebCore::isIntegerResult): Changed argument order to put the operator first and use
        references instead of pointers. Also marked inline.
        (WebCore::createBlendHalf): Added. Helper to make the other functions more readable.
        (WebCore::createExpressionNode): Made non-member function private to this file. Also made
        many small improvements.
        (WebCore::CSSCalcValue::create): Updated so both of these call the same constructor.

        * css/CSSCalculationValue.h: Cut down CSSCalcValue class by making more things private
        and deleting unneeded things. Also use Ref instead of RefPtr.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::getPositionOffsetValue): Use isFixed function instead of type function.

        * css/CSSGradientValue.cpp:
        (WebCore::CSSGradientValue::addStops): Updated code since toCalcValue now returns PassRef
        instead of PassRefPtr. Unfortunately the new code is a bit more verbose.
        (WebCore::positionFromValue): Ditto.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseCalculation):

        * css/CSSPrimitiveValue.cpp:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue): Updated to pass reference rather than pointer.
        (WebCore::CSSPrimitiveValue::init): Ditto.

        * css/CSSToStyleMap.h: Removed unneeded include of LengthBox.h.

        * css/DeprecatedStyleBuilder.cpp:
        (WebCore::ApplyPropertyLength::applyValue): Updated for function name change.
        (WebCore::ApplyPropertyBorderRadius::applyValue): Removed extra parentheses.
        (WebCore::ApplyPropertyFontSize::applyValue): Ditto. Also updated since toCalcValue returns Ref.

        * css/LengthFunctions.cpp:
        (WebCore::floatValueForLength): Updated to call value instead of getFloatValue; both are the same.

        * css/StyleResolver.cpp:
        (WebCore::addIntrinsicMargins): Updated for function name change.
        (WebCore::createGridTrackBreadth): Ditto.

        * platform/CalculationValue.cpp:
        (WebCore::CalculationValue::create): Changed to return PassRef.
        (WebCore::CalcExpressionNumber::evaluate): Moved this function out of the header, since it's
        virtual and not really going to be inlined.
        (WebCore::CalcExpressionNumber::operator==): Ditto.
        (WebCore::CalculationValue::evaluate): Ditto.
        (WebCore::CalcExpressionBinaryOperation::operator==): Ditto.
        (WebCore::CalcExpressionLength::evaluate): Ditto.
        (WebCore::CalcExpressionLength::operator==): Ditto.
        (WebCore::CalcExpressionBlendLength::evaluate): Ditto.
        (WebCore::CalcExpressionBlendLength::operator==): Ditto.

        * platform/CalculationValue.h: Moved most functions out of the class bodies so the classes are
        easier to see. Made all the == operator functions non-member ones except for the polymorphic
        one from the base class. Changed the casting functions to work on references instead of pointers.
        Tweaked name of some members.

        * platform/Length.cpp: Reworked the CalculationValueMap (formerly CalculationValueHandleMap) to
        use unsigned instead of int, and store reference counts in the map rather than trying to share the
        reference count of the underlying CalculationValue object, which can lead to storage leaks where
        handles end up in the map permanently.
        (WebCore::calculationValues): Use NeverDestroyed instead of DEPRECATED_DEFINE_STATIC_LOCAL.
        (WebCore::Length::Length): Updated some data member names.
        (WebCore::Length::calculationValue): Updated to return a reference instead of a PassRefPtr.
        (WebCore::Length::ref): Renamed and updated for new interface to the map.
        (WebCore::Length::deref): Ditto.
        (WebCore::Length::nonNanCalculatedValue): Updated to use a reference instead of a pointer.
        (WebCore::Length::isCalculatedEqual): Updated since this is now only called if both objects are
        known to be calculated values.

        * platform/Length.h: Moved most functions out of the class definition to make the class definition
        easier to read. Reworked the constructors and assignment operators to handle the reference counting
        correctly. Added various FIXMEs and assertions. Removed some unused functions, made others private.

        * platform/LengthBox.h: Renamed some one-letter arguments to use words instead.

        * rendering/AutoTableLayout.cpp:
        (WebCore::AutoTableLayout::recalcColumn): Updated for change to Length::setValue.
        * rendering/FixedTableLayout.cpp:
        (WebCore::FixedTableLayout::calcWidthArray): Ditto.

        * rendering/style/FillLayer.h:
        (WebCore::FillLayer::initialFillXPosition): Updated to not convert a double to a float at runtime.
        (WebCore::FillLayer::initialFillYPosition): Ditto.

        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::setWordSpacing): Removed a bogus FALLTHROUGH that was clearly wrong, but
        harmless. Updated for changes to Length.

        * rendering/style/RenderStyle.h: Updated for name changes and to avoid converting doubles to floats
        at runtime.

2014-04-06  Brent Fulgham  <bfulgham@apple.com>

        Honor System-Level User Preferences for Caption Display
        https://bugs.webkit.org/show_bug.cgi?id=131258

        Reviewed by Eric Carlson.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::setSelectedTextTrack): Allow preferenced change to fully dispatch
        so we can properly deal with captions being turned off.
        (WebCore::HTMLMediaElement::captionPreferencesChanged): Use 'webkit' variant of the
        setWebKitClosedCaptionsVisible method so we properly adjust settings needed for the JS API call.
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlTextTrackContainerElement::updateDisplay): When captions are turned off, e.g.
        because the user turned off the preference, don't inadvertently turn them back on just bacause there
        was an existing track that was not in a 'hidden' state.

2014-04-06  Brian J. Burg  <burg@cs.washington.edu>

        Web Replay: add methods to encode a frame's index based on its FrameTree position
        https://bugs.webkit.org/show_bug.cgi?id=131281

        Reviewed by Timothy Hatcher.

        Given a frame, its encoded index is computed by traversing the frame tree
        and saving how many nodes have been traversed to reach a given frame.

        This is used to disambiguate frames when dispatching frame-specific event
        loop inputs during replay, such as timers and resource loaders.

        * replay/SerializationMethods.cpp:
        (WebCore::frameIndexFromDocument): Added.
        (WebCore::frameIndexFromFrame): Added.
        (WebCore::documentFromFrameIndex): Added.
        (WebCore::frameFromFrameIndex): Added.
        * replay/SerializationMethods.h:

2014-04-06  Alexey Proskuryakov  <ap@apple.com>

        iOS build fix.

        * WebCore.exp.in: Move newly exported function to a right section of this file.

2014-04-06  Darin Adler  <darin@apple.com>

        Refactor post-attach and HTMLObjectElement-related code
        https://bugs.webkit.org/show_bug.cgi?id=131282

        Reviewed by Antti Koivisto.

        * dom/ContainerNode.cpp: Moved the post-attach callback code from here to
        StyleResolveTree.h/cpp.
        * dom/ContainerNode.h: Ditto.

        * dom/Document.cpp:
        (WebCore::Document::recalcStyle): Use Style::PostResolutionCallbackDisabler instead of
        PostAttachCallbackDisabler.

        * dom/Element.h: Moved the post-attach callback code from here to StyleResolveTree.h/cpp.

        * html/HTMLEmbedElement.cpp:
        (WebCore::HTMLEmbedElement::parseAttribute): Simplified the code for typeAttr, turning
        it into a 1-liner. Added a FIXME in codeAttr about the fact that it does not have the
        code to trigger image loads.

        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::didAttachRenderers): Updated to use
        Style::queuePostResolutionCallback and use a lambda instead of a function.
        (WebCore::HTMLFormControlElement::didRecalcStyle): Ditto. Also added RefPtr instead
        of just using wishful thinking to keep the object alive.
        * html/HTMLFrameOwnerElement.cpp:
        (WebCore::HTMLFrameOwnerElement::scheduleSetNeedsStyleRecalc): Ditto.

        * html/HTMLObjectElement.cpp:
        (WebCore::HTMLObjectElement::parseAttribute):: Simplified the code for typeAttr, turning
        it into a 1-liner. Made dataAttr call setNeedsWidgetUpdate(true) unconditionally after
        checking carefully to see that's harmless if there is no renderer. Changed classidAttr
        to call setNeedsWidgetUpdate(true) unconditionally and not set m_classId.
        (WebCore::HTMLObjectElement::shouldAllowQuickTimeClassIdQuirk): Use fastGetAttribute
        instead of classId and descendantsOfType instead of getElementsByTagName.
        (WebCore::HTMLObjectElement::hasValidClassId): Use fastGetAttribute instead of classId.
        (WebCore::HTMLObjectElement::renderFallbackContent): Use imageLoader instead of m_imageLoader.

        * html/HTMLObjectElement.h: Removed classId, since there is no reason to cache that
        attribute in a data member. Rearranged header, making more private, and fixing some typos,
        and doing a "using" instead of a function to disambiguate the inherited form functions.

        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::createElementRenderer): Fixed some code that assumed the
        first child of the shadow root is guaranteed to be an element.
        (WebCore::HTMLPlugInImageElement::didMoveToNewDocument): Removed null check on oldDocument,
        since m_needsDocumentActivationCallbacks can't be true if the old document was null.
        (WebCore::is100Percent): Added helper to make function below more readable.
        (WebCore::HTMLPlugInImageElement::subframeLoaderWillCreatePlugIn): Restructured the code a
        bit. The part that attracted my attention was the local variable of type RenderBox, which
        was named renderEmbeddedObject. Turns out the caller guarantees to only call this if there
        is a renderer of type RenderEmbeddedObject, so depend on that.

        * html/HTMLPlugInImageElement.h: Trimmed includes a bit. Made more members private.
        Marked more function members final. Made a protected imageLoader function so that
        m_imageLoader can be private eventually. Made m_imageLoader be std::unique_ptr.

        * style/StyleResolveTree.cpp:
        (WebCore::Style::needsPseudoElement): Fixed spelling error in the name of this function.
        (WebCore::Style::attachBeforeOrAfterPseudoElementIfNeeded): Updated for name change.
        (WebCore::Style::attachRenderTree): Update for new name of PostResolutionCallbackDisabler.
        (WebCore::Style::updateBeforeOrAfterPseudoElement): Updated for name change.
        (WebCore::Style::postResolutionCallbackQueue): Added.
        (WebCore::Style::queuePostResolutionCallback): Added.
        (WebCore::Style::suspendMemoryCacheClientCalls): Added. This is a side effect of the original
        PostAttachCallbackDisabler that is now done in a cleaner way, using the callback queue, instead
        of as a special case. It should not work for multiple documents across multiple pages instead of
        only the outermost one.
        (WebCore::Style::PostResolutionCallbackDisabler::PostResolutionCallbackDisabler): Added.
        Calls suspendMemoryCacheClientCalls, but a FIXME tries to point out why that isn't so great.
        (WebCore::Style::PostResolutionCallbackDisabler::~PostResolutionCallbackDisabler): Added.
        (WebCore::Style::postResolutionCallbacksAreSuspended): Added.

        * style/StyleResolveTree.h: Added queuePostResolutionCallback and
        postResolutionCallbacksAreSuspended. Also added PostResolutionCallbackDisabler, which should
        eventually become a private implementation detail.

2014-04-04  Brian J. Burg  <burg@cs.washington.edu>

        Enable WEB_REPLAY for PLATFORM(MAC)
        https://bugs.webkit.org/show_bug.cgi?id=130700

        Reviewed by Timothy Hatcher.

        Switch on WEB_REPLAY feature flag for non-production builds.

        * Configurations/FeatureDefines.xcconfig:
        * replay/ReplayInputDispatchMethods.cpp: Fix the ENABLE(WEB_REPLAY) build.
        It was broken by the bool to enum refactoring in r166684.
        (WebCore::InitialNavigation::dispatch):

2014-04-05  Brian J. Burg  <burg@cs.washington.edu>

        Web Inspector: remove unused test hook setInspectorResourcesDataSizeLimits
        https://bugs.webkit.org/show_bug.cgi?id=131268

        Reviewed by Timothy Hatcher.

        This was used in the old inspector frontend tests for the Network panel.
        It's no longer used by any tests or frontend code.

        * WebCore.exp.in: Remove symbols.
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::setInspectorResourcesDataSizeLimits): Deleted.
        * inspector/InspectorController.h:
        * inspector/InspectorResourceAgent.cpp:
        (WebCore::InspectorResourceAgent::setResourcesDataSizeLimitsFromInternals): Deleted.
        * inspector/InspectorResourceAgent.h:
        * inspector/NetworkResourcesData.cpp:
        (WebCore::NetworkResourcesData::setResourcesDataSizeLimits): Deleted.
        * inspector/NetworkResourcesData.h:
        * testing/Internals.cpp:
        (WebCore::Internals::setInspectorResourcesDataSizeLimits): Deleted.
        * testing/Internals.h:
        * testing/Internals.idl:

2014-04-05  Alexey Proskuryakov  <ap@apple.com>

        REGRESSION (NetworkProcess): Subresources fail to load from AppCache
        https://bugs.webkit.org/show_bug.cgi?id=131262
        <rdar://problem/15370653>

        Reviewed by Sam Weinig.

        Exported ApplicationCacheHost::maybeLoadResource. Changed it to take a const
        reference to ResourceRequest, as appropriate for WebResourceLoadScheduler.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * loader/appcache/ApplicationCacheHost.cpp:
        (WebCore::ApplicationCacheHost::maybeLoadResource):
        * loader/appcache/ApplicationCacheHost.h:

2014-04-05  Brian J. Burg  <burg@cs.washington.edu>

        Web Inspector: remove unused metrics and commands from the Timeline agent
        https://bugs.webkit.org/show_bug.cgi?id=131184

        Reviewed by Timothy Hatcher.

        This patch removes several instrumentation hooks that are not being
        used by the frontend in any way. Most of them are not hooked up to
        produce any data, so they just clutter up InspectorClient and the agent.

        * WebCore.exp.in: Remove didBeginFrame/didCancelFrame.
        * inspector/InspectorClient.h: Remove client methods that are never overridden.
        (WebCore::InspectorClient::canMonitorMainThread): Deleted.
        (WebCore::InspectorClient::supportsFrameInstrumentation): Deleted.
        (WebCore::InspectorClient::getAllocatedObjects): Deleted.
        (WebCore::InspectorClient::dumpUncountedAllocatedObjects): Deleted.

        * inspector/InspectorController.cpp: Remove unused instrumentation.
        (WebCore::InspectorController::didBeginFrame): Deleted.
        (WebCore::InspectorController::didCancelFrame): Deleted.
        (WebCore::InspectorController::didComposite): Deleted.
        (WebCore::InspectorController::wilComposite): Deleted.
        * inspector/InspectorController.h:

        * inspector/InspectorTimelineAgent.cpp: Remove the backend's BeginFrame enum
        value, but keep it in the protocol for when it is reimplemented. Remove
        management of the current frame record, and simplify some code.
        (WebCore::toProtocol):
        (WebCore::InspectorTimelineAgent::addRecordToTimeline):
        (WebCore::InspectorTimelineAgent::didCompleteCurrentRecord):
        (WebCore::InspectorTimelineAgent::pushCurrentRecord):
        (WebCore::InspectorTimelineAgent::clearRecordStack):
        (WebCore::InspectorTimelineAgent::canMonitorMainThread): Deleted.
        (WebCore::InspectorTimelineAgent::supportsFrameInstrumentation): Deleted.
        (WebCore::InspectorTimelineAgent::didBeginFrame): Deleted.
        (WebCore::InspectorTimelineAgent::didCancelFrame): Deleted.
        (WebCore::InspectorTimelineAgent::didComposite): Deleted.
        (WebCore::InspectorTimelineAgent::wilComposite): Deleted.
        (WebCore::InspectorTimelineAgent::innerAddRecordToTimeline): Deleted. Undo telescoping.
        (WebCore::usedHeapSize): Deleted.
        (WebCore::InspectorTimelineAgent::commitFrameRecord): Deleted.
        * inspector/InspectorTimelineAgent.h:
        (WebCore::InspectorTimelineAgent::TimelineRecordEntry::TimelineRecordEntry):
        * inspector/protocol/Timeline.json:

        * platform/graphics/texmap/coordinated/CompositingCoordinator.cpp: Remove
        instrumentation hook for beginFrame. This is the only backend that implements it.
        (WebCore::CompositingCoordinator::syncDisplayState):

        * testing/Internals.cpp: Remove crufty test methods that aren't used.
        (WebCore::Internals::emitInspectorDidBeginFrame): Deleted.
        (WebCore::Internals::emitInspectorDidCancelFrame): Deleted.
        * testing/Internals.h:
        * testing/Internals.idl:

2014-04-05  Alexey Proskuryakov  <ap@apple.com>

        REGRESSION (r163914): Application cache cannot be used in main frame
        https://bugs.webkit.org/show_bug.cgi?id=131263
        <rdar://problem/16532063>

        Reviewed by Sam Weinig.

        * loader/appcache/ApplicationCacheHost.cpp: (WebCore::ApplicationCacheHost::isApplicationCacheBlockedForRequest):
        Don't check main frame origin when loading into main frame, it's not a 3rd party
        subframe, and the URL is unrelated to the page we are loading now.

        * loader/appcache/ApplicationCacheGroup.cpp: (WebCore::ApplicationCacheGroup::cacheForMainRequest):
        Removed the same incorrect check that was duplicated here. The only caller already
        checks isApplicationCacheBlockedForRequest().

2014-04-05  Dan Bernstein  <mitz@apple.com>

        [Xcode] Clean up the platform/graphics group
        https://bugs.webkit.org/show_bug.cgi?id=131271

        Reviewed by Eric Carlson.

        * WebCore.xcodeproj/project.pbxproj: Created an opentype group and moved opentype file
        references into it. Removed duplicate file references.

2014-04-05  Andreas Kling  <akling@apple.com>

        Remove unused type casting helpers for HTMLUnknownElement...

        ...to fix the debug build.

        * html/HTMLUnknownElement.h:

2014-04-05  Dirk Schulze  <krit@webkit.org>

        Canvas strokeText and fillText with SourceIn, DestinationIn, SourceOut, DestinationAtop and Copy have errors
        https://bugs.webkit.org/show_bug.cgi?id=66766

        Reviewed by Andreas Kling.

        Use transparency layers to draw text with certain compositing modes on
        the canvas. This follows the Canvas specification and makes WebKit fully
        compatible with IE. It also makes it more compatible with Firefox, even though
        Firefox still has some bugs.

        Test: fast/canvas/canvas-composite-text-alpha.html

        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::drawTextInternal):

2014-04-05  Andreas Kling  <akling@apple.com>

        Devirtualize isHTMLUnknownElement().
        <https://webkit.org/b/131269>

        We were hitting isHTMLUnknownElement() pretty hard when marking
        out-of-document Nodes. (The check is part of isHTMLAudioElement()
        which is called by JSNodeOwner::isReachableFromOpaqueRoots().)

        This patch uses a Node flag for the unknown element instead.
        I'm also adding HTMLUnknownElement.{h,idl} to the Xcode project
        since they were suspiciously missing.

        Reviewed by Benjamin Poulain.

        * WebCore.xcodeproj/project.pbxproj:
        * dom/Node.h:
        * html/HTMLElement.h:
        (WebCore::HTMLElement::isHTMLUnknownElement):
        * html/HTMLUnknownElement.h:
        (WebCore::toHTMLUnknownElement): Deleted.

2014-04-05  Dirk Schulze  <krit@webkit.org>

        Canvas stroke and strokeRect with SourceIn, DestinationIn, SourceOut, DestinationAtop and Copy have errors
        https://bugs.webkit.org/show_bug.cgi?id=66762

        Reviewed by Andreas Kling.

        For fill operations we create a new ImageBuffer to ensure that the results are composited
        correctly according to the Canvas spec. This patch creates a new transparency layer
        for stroking on certain compositing operators to archive the same. This makes WebKit's
        behavior interoperable with Firefox and IE as well. 

        Test: fast/fast/canvas/canvas-composite-stroke-alpha.html

        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::strokeInternal):
        (WebCore::CanvasRenderingContext2D::strokeRect):

2014-04-05  Yusuke Suzuki  <utatane.tea@gmail.com>

        Use preallocated stack reference to store adjacentBacktrackingStart
        https://bugs.webkit.org/show_bug.cgi?id=131237

        Reviewed by Benjamin Poulain.

        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::computeBacktrackingInformation):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateSelectorChecker):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateDirectAdjacentTreeWalker):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateAdjacentBacktrackingTail):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateBacktrackingTailsIfNeeded):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToPreviousAdjacent): Deleted.
        (WebCore::SelectorCompiler::SelectorCodeGenerator::linkFailures): Deleted.
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateDescendantBacktrackingTail): Deleted.
        * cssjit/StackAllocator.h:
        (WebCore::StackAllocator::allocateUninitialized):

2014-04-05  Jeongeun Kim  <je_julie.kim@samsung.com>

        bad values from HTMLImageElement x and y attributes (CSSOM-View)
        https://bugs.webkit.org/show_bug.cgi?id=130308
        
        Reviewed by Simon Fraser.

        According to CSSOM-View, interface HTMLImageElement,
        The x attribute must return the x-coordinate.
        If style is not updated when x() is called, it can’t return anything.
        Style and layout should be done before getting value for x() and y(). 

        Test: cssom/cssom-view-img-attributes-001.html

        * html/HTMLImageElement.cpp:
        (WebCore::HTMLImageElement::x):
        (WebCore::HTMLImageElement::y):

2014-04-05  Zoltan Horvath  <zoltan@webkit.org>

        [CSS Shapes] Remove CSSBoxType member from BasicShape and CSSBasicShape
        https://bugs.webkit.org/show_bug.cgi?id=129706

        Reviewed by Andreas Kling.

        The CSSBoxType has been moved up to ShapeValue and is no longer needed in the BasicShape classes.

        No new tests, no behavior change.

        * css/BasicShapeFunctions.cpp:
        (WebCore::valueForBasicShape):
        (WebCore::basicShapeForValue):
        * rendering/style/BasicShapes.cpp:
        (WebCore::BasicShape::canBlend):
        * rendering/style/BasicShapes.h:
        (WebCore::BasicShape::referenceBox): Deleted.
        (WebCore::BasicShape::setReferenceBox): Deleted.
        (WebCore::BasicShape::BasicShape): Deleted.

2014-04-05  Mark Rowe  <mrowe@apple.com>

        Fix the 32-bit build after r166818.

        * WebCore.exp.in:

2014-04-03  Brian J. Burg  <burg@cs.washington.edu>

        Web Inspector: hook up probe samples to TimelineAgent's records
        https://bugs.webkit.org/show_bug.cgi?id=131127

        Reviewed by Timothy Hatcher.

        Hook up probe callbacks from ScriptDebugListener so that timeline records are
        created for probe samples. The record includes the probe identifier and hit count.
        The actual probe evaluation result is sent separately by DebuggerAgent, and
        can be looked up in frontend models using the identifier and hit count.

        * inspector/InspectorTimelineAgent.cpp: Only listen to the debug server when recording.
        (WebCore::InspectorTimelineAgent::start):
        (WebCore::InspectorTimelineAgent::stop):
        (WebCore::InspectorTimelineAgent::breakpointActionProbe):
        (WebCore::toProtocol):
        * inspector/InspectorTimelineAgent.h:
        * inspector/TimelineRecordFactory.cpp:
        (WebCore::TimelineRecordFactory::createProbeSampleData):
        * inspector/TimelineRecordFactory.h:
        * inspector/protocol/Timeline.json: Add new enum value.

2014-04-04  Andreas Kling  <akling@apple.com>

        Streamline cached wrapper lookup for Nodes in the normal world.
        <https://webkit.org/b/131249>

        Inline the hot path for toJS(..., Node*) for cached wrapper lookups
        in the normal world. (Or really, out-of-line the cold path, since
        that was preventing the compiler from inlining this function.)

        Also have JSDOMGlobalObject cache the "is normal world" flag from
        the DOMWrapperWorld so we can avoid the extra load.

        Reviewed by Benjamin Poulain.

        * WebCore.exp.in:
        * bindings/js/JSDOMGlobalObject.cpp:
        (WebCore::JSDOMGlobalObject::JSDOMGlobalObject):
        * bindings/js/JSDOMGlobalObject.h:
        (WebCore::JSDOMGlobalObject::worldIsNormal):
        * bindings/js/JSNodeCustom.cpp:
        (WebCore::getOutOfLineCachedWrapper):
        * bindings/js/JSNodeCustom.h:
        (WebCore::toJS):

2014-04-04  Brady Eidson  <beidson@apple.com>

        Show DataDetector UI on scanned phone numbers.
        <rdar://problem/16379588> and https://bugs.webkit.org/show_bug.cgi?id=131247

        Reviewed by Tim Horton.

        Gather the ranges of the scanned telephone numbers and send them up to WK2:
        * editing/Editor.cpp:
        (WebCore::Editor::respondToChangedSelection):
        (WebCore::Editor::scanSelectionForTelephoneNumbers):
        (WebCore::Editor::scanRangeForTelephoneNumbers):
        * editing/Editor.h:

        Add client method to receive scanned telephone number ranges:
        * page/EditorClient.h:
        (WebCore::EditorClient::selectedTelephoneNumberRangesChanged):

        Remove unneeded placeholder UI:
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paintDocumentMarkers):
        (WebCore::InlineTextBox::computeRectForReplacementMarker): Deleted.
        (WebCore::InlineTextBox::paintCompositionUnderline): Deleted.
        * rendering/InlineTextBox.h:
        (WebCore::InlineTextBox::expansionBehavior): Deleted.

2014-04-04  James Craig  <jcraig@apple.com>

        AX: supportsARIAExpanded should always return true for a few roles: combobox, disclosure.
        https://bugs.webkit.org/show_bug.cgi?id=129787

        Reviewed by Chris Fleizach.

        Test: inspector-protocol/dom/getAccessibilityPropertiesForNode.html

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::supportsARIAExpanded):

2014-04-04  Andreas Kling  <akling@apple.com>

        JSGenerateToNativeObject should use fast JSNode/JSElement casts.
        <https://webkit.org/b/131245>

        Make JSGenerateToNativeObject spit out code using the fast new wrapper
        casts for JSNode and JSElement.

        This avoids walking the ClassInfo chain in many core functions, e.g:

            - Node.insertBefore()
            - Node.replaceChild()
            - Node.removeChild()
            - Node.appendChild()
            - window.getComputedStyle()

        Reviewed by Geoff Garen.

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):

2014-04-04  Zoltan Horvath  <zoltan@webkit.org>

        [CSS Shapes] polygon y-value calc() args serialize incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=129842

        Reviewed by Bem Jones-Bey.

        The code hit ASSERT(isCalculation(value)) in CSSParser::createPrimitiveNumbericValue, because
        CSSParser::validUnit had been called on both coordinates, which set the value for m_parsedCalculation,
        but only one of the coordinates was calculation value. I reordered calling valudUnit and
        createPrimitiveNumbericValue to be called in the correct order on the coordinates.

        I added the new test case to parsing-test-utils.js.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseBasicShapePolygon):

2014-04-04  Brian J. Burg  <burg@cs.washington.edu>

        Web Replay: capture and replay wheel events and scroll commands
        https://bugs.webkit.org/show_bug.cgi?id=129402

        Reviewed by Timothy Hatcher and Simon Fraser.

        To capture and replay scrolling, the scrolling coordinator will force synchronous 
        scrolling during capture and replay. If the page is capturing or replaying,
        ForceOnMainThread will be added to the coordinator's SynchronousScrollingReasons.

        A callback was added to signal that replay session state have changed,
        and thus the synchronous scrolling reasons should be recomputed.

        Automated replay reftests for scrolling are not included, because they will be
        too flaky until more nondeterminism is handled. Specifically, resource loading,
        initial focus/active state, and parsing are known blocking issues.

        Test: ManualTests/inspector/replay-wheel-events.html

        * page/scrolling/ScrollingCoordinator.cpp: Add a new callback for replay state
        session changes. Add ForceOnMainThread if the page's active input cursor is
        capturing or replaying.

        (WebCore::ScrollingCoordinator::synchronousScrollingReasons):
        (WebCore::ScrollingCoordinator::replaySessionStateDidChange): Added.
        * page/scrolling/ScrollingCoordinator.h:

        * platform/PlatformWheelEvent.h:
        * platform/ScrollTypes.h: Add explicit enum storage types so these enums can
        be forward-declared. This is necessary to generate enum encode/decode implementations.

        * replay/ReplayController.cpp:
        (WebCore::ReplayController::setForceDeterministicSettings): If async scrolling
        support is available, tell the scrolling tree to behave deterministically.

        * replay/ReplayInputDispatchMethods.cpp:
        (WebCore::HandleWheelEvent::dispatch): Added.
        (WebCore::LogicalScrollPage::dispatch): Added.
        (WebCore::ScrollPage::dispatch): Added.
        * replay/SerializationMethods.cpp: Introduce more specific macros for values
        deserialized to arbitraray lvalues, scalars, RefPtr, and unique_ptr. Fix existing
        uses of decode macros.

        (JSC::EncodingTraits<NondeterministicInputBase>::encodeValue): Fix macro name.
        (JSC::EncodingTraits<KeypressCommand>::encodeValue): Fix macro name.
        (JSC::EncodingTraits<PlatformKeyboardEvent>::encodeValue): Fix macro name.
        (JSC::EncodingTraits<PlatformMouseEvent>::encodeValue): Fix macro name.
        (JSC::PlatformWheelEventCocoa::PlatformWheelEventCocoa): Added. Encapsulate
        and initialize data members specific to PLATFORM(COCOA).

        (JSC::EncodingTraits<PlatformWheelEvent>::encodeValue): Added.
        (JSC::EncodingTraits<PlatformWheelEvent>::decodeValue): Added.
        * replay/SerializationMethods.h:
        * replay/UserInputBridge.cpp: Fill in bridge methods to capture inputs.
        (WebCore::UserInputBridge::handleWheelEvent):
        (WebCore::UserInputBridge::scrollRecursively):
        (WebCore::UserInputBridge::logicalScrollRecursively):
        * replay/WebInputs.json: Add inputs and new enum types.

2014-04-04  Yusuke Suzuki  <utatane.tea@gmail.com>

        Upgrade to SelectorFailsAllSiblings when Child selector is failed.
        https://bugs.webkit.org/show_bug.cgi?id=130961

        Reviewed by Benjamin Poulain.

        When Child selector fails, we should resume matching from the closest
        Descendant selector.
        So upgrading SelectorFailsLocally to SelectorFailsAllSibling at least
        to prevent unnecessary direct/indirect adjacent selectors matching.

        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::matchRecursively):

2014-04-04  Roger Fong  <roger_fong@apple.com>

        Keep track of filtered active attribute/uniform indices per shader program.
        https://bugs.webkit.org/show_bug.cgi?id=131235.

        Reviewed by Dean Jackson.

        Tests: Covered by existing Khronos Conformance tests. 
        Will create a test to use multiple shader programs in a follow-up patch.

        * html/canvas/WebGLProgram.cpp:
        (WebCore::WebGLProgram::cacheActiveAttribLocations): Use getActiveAttribImpl. We do not need to use the filtered list of attributes here.
        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore::WebGLRenderingContext::getUniformLocation): Use filtered list of uniforms for uniform count.
        * platform/graphics/GraphicsContext3D.h: Create a map of shader programs to ActiveShaderSymbolCounts.
        * platform/graphics/opengl/GraphicsContext3DOpenGLCommon.cpp:
        (WebCore::GraphicsContext3D::attachShader): 
        When attaching or detaching a shader the shader program's active symbols list will change. Clear it so that it will be updated later.
        (WebCore::GraphicsContext3D::detachShader): Ditto.
        (WebCore::GraphicsContext3D::compileShader): No need to clear symbol counts here.
        (WebCore::GraphicsContext3D::getActiveAttrib): getActiveAttrib should only be able to query for attributes in the filtered list.
        (WebCore::GraphicsContext3D::getActiveUniform): getActiveUniform should only be able to query for uniforms in the filtered list.
        (WebCore::GraphicsContext3D::getNonBuiltInActiveSymbolCount): Return the filtered symbol count for a shader program.

2014-04-04  Ion Rosca  <rosca@adobe.com>

        [CSS Blending] Add compositing reason for isolation.
        https://bugs.webkit.org/show_bug.cgi?id=131153

        Reviewed by Joseph Pecoraro.

        There are 2 reasons involving blend modes for a layer to be composited:
        1) the layer has blend mode and has composited descendants: CompositingReasonBlendingWithCompositedDescendants.
        2) the layer has to isolate composited blending descendants: CompositingReasonIsolatesCompositedBlendingDescendants

        Test: inspector-protocol/layers/layers-blending-compositing-reasons.html

        * inspector/InspectorLayerTreeAgent.cpp:
        (WebCore::InspectorLayerTreeAgent::reasonsForCompositingLayer):
        * inspector/protocol/LayerTree.json:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::reasonsForCompositing):
        (WebCore::RenderLayerCompositor::logReasonsForCompositing):
        * rendering/RenderLayerCompositor.h: adding CompositingReasonIsolatesCompositedBlendingDescendants.

2014-04-04  Bem Jones-Bey  <bjonesbe@adobe.com>

        Use more const refs in ShapeOutsideInfo and some misc cleanup
        https://bugs.webkit.org/show_bug.cgi?id=131192

        Reviewed by Dirk Schulze.

        Use const refs for pretty much everything that can't be null. Also
        cleanup some code that got a bit messy when ShapeInfo was merged into
        ShapeOutsideInfo.

        No new tests, no behavior change.

        * rendering/shapes/ShapeOutsideInfo.cpp:
        (WebCore::ShapeOutsideInfo::shapeToRendererPoint):
        (WebCore::ShapeOutsideInfo::shapeToRendererSize):
        (WebCore::referenceBox):
        (WebCore::ShapeOutsideInfo::setReferenceBoxLogicalSize):
        (WebCore::getShapeImageAndRect):
        (WebCore::ShapeOutsideInfo::computedShape):
        (WebCore::ShapeOutsideInfo::logicalTopOffset):
        (WebCore::ShapeOutsideInfo::logicalLeftOffset):
        * rendering/shapes/ShapeOutsideInfo.h:

2014-04-04  Alexey Proskuryakov  <ap@apple.com>

        REGRESSION (r166615): Pressing return doesn’t submit search term at bing.com
        https://bugs.webkit.org/show_bug.cgi?id=131212
        <rdar://problem/16521788>

        Reviewed by Dan Bernstein.

        Test: fast/forms/submit-while-you-submit.html

        Turns out that m_shouldSubmit can actually be modified in a code path where we can't
        directly return the result. I'm not sure if the current behavior is entirely correct
        (we have open bugs about submitting forms multiple times), but let's restore it to
        pre-r166615 state.

        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::HTMLFormElement):
        (WebCore::HTMLFormElement::prepareForSubmission):
        (WebCore::HTMLFormElement::submit):
        * html/HTMLFormElement.h:

2014-04-04  Martin Hock  <mhock@apple.com>

        [Mac] Change operation queue width to NSOperationQueueDefaultMaxConcurrentOperationCount.
        https://bugs.webkit.org/show_bug.cgi?id=131231

        <rdar://problem/13913483>

        Reviewed by Brady Eidson.

        No new tests, no behavior change.

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::operationQueueForAsyncClients):

2014-04-04  Hans Muller  <hmuller@adobe.com>

        [CSS Shapes] Simplify Polygon implementation
        https://bugs.webkit.org/show_bug.cgi?id=130975

        Reviewed by Andreas Kling.

        Only floats can specify shape-outside. For polygon shape-outside values, the problem
        of finding the left and right exclusion edges reduces to finding the X axis
        limits of the polygon edges that overlap a particular layout line. This is a much
        simpler version of the problem that PolygonShape was originally designed for, and so
        the implementation can also be simplified. There's more about the new algorithm in
        http://hansmuller-webkit.blogspot.com/2014/03/a-simpler-algorithm-for-css-shapes.html.

        No new tests, since functionality was only removed.

        * platform/graphics/FloatRect.h:
        (WebCore::FloatRect::overlapsYRange):
        (WebCore::FloatRect::overlapsXRange):
        * rendering/shapes/PolygonShape.cpp:
        (WebCore::OffsetPolygonEdge::xIntercept):
        (WebCore::circleXIntercept):
        (WebCore::OffsetPolygonEdge::clippedEdgeXRange): X axis extent of the edge clipped to a vertical interval.
        (WebCore::clippedCircleXRange): X axis extent of a circle clipped to a vertical interval.
        (WebCore::PolygonShape::shapeMarginLogicalBoundingBox):
        (WebCore::PolygonShape::getExcludedIntervals):
        (WebCore::PolygonShape::buildDisplayPaths):
        * rendering/shapes/PolygonShape.h:
        (WebCore::OffsetPolygonEdge::OffsetPolygonEdge):
        (WebCore::OffsetPolygonEdge::isWithinYRange):
        (WebCore::OffsetPolygonEdge::overlapsYRange):
        (WebCore::PolygonShape::PolygonShape):
        * rendering/shapes/ShapeInterval.h:
        (WebCore::ShapeInterval::isEmpty):
        (WebCore::ShapeInterval::unite):

2014-04-04  Bem Jones-Bey  <bjonesbe@adobe.com>

        [CSS Shapes] shape-margin in percentage units always computes to 0px
        https://bugs.webkit.org/show_bug.cgi?id=130369

        Reviewed by Andreas Kling.

        Make shape-margin parsing accept percentages and properly compute the
        length once the percentage is accepted.

        Test: fast/shapes/shape-outside-floats/shape-outside-floats-shape-margin-percent.html

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        * rendering/shapes/Shape.cpp:
        (WebCore::Shape::createShape):
        (WebCore::Shape::createRasterShape):
        (WebCore::Shape::createBoxShape):
        * rendering/shapes/Shape.h:
        * rendering/shapes/ShapeOutsideInfo.cpp:
        (WebCore::ShapeOutsideInfo::computedShape):

2014-04-04  Zoltan Horvath  <zoltan@webkit.org>

        [CSS Shapes] Remove outside-shape CSS value
        https://bugs.webkit.org/show_bug.cgi?id=131201

        Reviewed by Bem Jones-Bey.

        Outside-shape is not a valid CSS value anymore. This patch removes it.

        No new tests, existing tests are removed.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::shapePropertyValue):
        * css/CSSValueKeywords.in:
        * css/DeprecatedStyleBuilder.cpp:
        (WebCore::ApplyPropertyShape::applyValue):
        * rendering/shapes/ShapeOutsideInfo.cpp:
        (WebCore::ShapeOutsideInfo::computedShape):
        (WebCore::ShapeOutsideInfo::isEnabledFor):
        * rendering/style/ShapeValue.h:
        (WebCore::ShapeValue::createOutsideValue): Deleted.

2014-04-04  Dirk Schulze  <krit@webkit.org>

        Gradient offsets are off if compositing operator != source-over
        https://bugs.webkit.org/show_bug.cgi?id=129791

        Reviewed by Andreas Kling.

        Instead of transforming the path before drawing it on the context,
        the whole context should be transformed. This will make the gradient
        map correctly to the context space.

        Test: fast/canvas/canvas-gradient-on-compositing.html

        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::fullCanvasCompositedFill):

2014-04-04  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Move background images to device pixel boundaries.
        https://bugs.webkit.org/show_bug.cgi?id=131144

        Reviewed by Simon Fraser.

        Replace integral snapping with device pixel snapping.
        Background image geometry calculation uses LayoutUnits and we snap to device pixels right before painting.

        Tests: fast/backgrounds/hidpi-bitmap-background-on-subpixel-position.html
               fast/backgrounds/hidpi-bitmap-background-origin-on-subpixel-position.html
               fast/backgrounds/hidpi-bitmap-background-repeat-on-subpixel-position.html
               fast/backgrounds/hidpi-generated-gradient-background-on-subpixel-position.html

        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::setContentsTilePhase):
        (WebCore::GraphicsLayer::contentsTilePhase):
        (WebCore::GraphicsLayer::setContentsTileSize):
        (WebCore::GraphicsLayer::contentsTileSize):
        * platform/graphics/texmap/TextureMapperLayer.cpp:
        (WebCore::TextureMapperLayer::setContentsTileSize):
        (WebCore::TextureMapperLayer::setContentsTilePhase):
        * platform/graphics/texmap/TextureMapperLayer.h:
        * platform/graphics/texmap/coordinated/CoordinatedGraphicsLayer.cpp:
        (WebCore::CoordinatedGraphicsLayer::setContentsTileSize):
        (WebCore::CoordinatedGraphicsLayer::setContentsTilePhase):
        * platform/graphics/texmap/coordinated/CoordinatedGraphicsLayer.h:
        * platform/graphics/texmap/coordinated/CoordinatedGraphicsState.h:
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::repaintLayerRectsForImage):
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintFillLayerExtended):
        (WebCore::resolveWidthForRatio):
        (WebCore::resolveHeightForRatio):
        (WebCore::resolveAgainstIntrinsicWidthOrHeightAndRatio):
        (WebCore::resolveAgainstIntrinsicRatio):
        (WebCore::RenderBoxModelObject::calculateImageIntrinsicDimensions):
        (WebCore::RenderBoxModelObject::calculateFillTileSize):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::setNoRepeatX):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::setNoRepeatY):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::useFixedAttachment):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::clip):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::relativePhase):
        (WebCore::getSpace):
        (WebCore::RenderBoxModelObject::pixelSnapBackgroundImageGeometryForPainting):
        (WebCore::RenderBoxModelObject::calculateBackgroundImageGeometry):
        (WebCore::RenderBoxModelObject::getGeometryForBackgroundImage):
        (WebCore::RenderBoxModelObject::paintNinePieceImage):
        (WebCore::applySubPixelHeuristicForTileSize): Deleted.
        * rendering/RenderBoxModelObject.h:
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::destOrigin):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::setDestOrigin):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::destRect):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::setDestRect):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::phase):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::setPhase):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::tileSize):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::setTileSize):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::spaceSize):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::setSpaceSize):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::setPhaseX):
        (WebCore::RenderBoxModelObject::BackgroundImageGeometry::setPhaseY):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateDirectlyCompositedBackgroundImage):
        * rendering/shapes/ShapeOutsideInfo.cpp:
        (WebCore::getShapeImageAndRect):

2014-04-04  Brent Fulgham  <bfulgham@apple.com>

        [Win] Unreviewed test fix (crash in debug build).

        * platform/graphics/avfoundation/cf/MediaPlayerPrivateAVFoundationCF.cpp:
        (WebCore::AVFWrapper::legibleOutputCallback): Correct assertion. This
        callback is scheduled for the caption queue, not the main queue.

2014-04-03  Brent Fulgham  <bfulgham@apple.com>

        [Win] Load Media Controls js/css from bundle
        https://bugs.webkit.org/show_bug.cgi?id=131194

        Reviewed by Dean Jackson.

        * DerivedSources.cpp: Remove no-longer generated file.
        * DerivedSources.make: Don't generate unneeded files.
        * WebCore.vcxproj/WebCore.vcxproj: Don't compile unneeded files.
        * WebCore.vcxproj/WebCore.vcxproj.filters: Ditto.
        * WebCore.vcxproj/copyWebCoreResourceFiles.cmd: Copy css/js to resource
        * rendering/RenderThemeSafari.cpp:
        * rendering/RenderThemeSafari.h:
        * rendering/RenderThemeWin.cpp:
        * rendering/RenderThemeWin.h:

2014-04-04  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Region's behaviour not updated when becoming valid from invalid
        https://bugs.webkit.org/show_bug.cgi?id=131211

        Reviewed by Andrei Bucur.

        When a region becomes valid again from invalid, it was part of a dependency cycle and the dependency cycle was broken,
        it needs to behave like a valid region again: if it has autoheight then it should compute its height based on the
        named flow content, if it has region styling then it should apply the additional style to the flowed content.

        Added a new method, updateRegionFlags, that is used to ensure that auto-height and region-styling flags
        are properly set in several situations. Checking the behaviour, autoheight or styling, is done only
        if the region is valid.

        Tests: fast/regions/auto-size/autoheight-region-valid-from-invalid.html
               fast/regions/region-styling/region-withstyling-valid-from-invalid.html

        * rendering/RenderNamedFlowFragment.cpp:
        (WebCore::RenderNamedFlowFragment::updateRegionFlags):
        (WebCore::RenderNamedFlowFragment::styleDidChange):
        (WebCore::RenderNamedFlowFragment::updateRegionHasAutoLogicalHeightFlag):
        (WebCore::RenderNamedFlowFragment::checkRegionStyle):
        (WebCore::RenderNamedFlowFragment::attachRegion):
        (WebCore::RenderNamedFlowFragment::detachRegion):
        * rendering/RenderNamedFlowFragment.h:
        * rendering/RenderNamedFlowThread.cpp:
        (WebCore::RenderNamedFlowThread::addFragmentToNamedFlowThread):

2014-04-04  Raphael Kubo da Costa  <raphael.kubo.da.costa@intel.com>

        [GTK][CMake] Remove FindXt.cmake.
        https://bugs.webkit.org/show_bug.cgi?id=131227

        Reviewed by Anders Carlsson.

        * PlatformGTK.cmake: Use FindX11.cmake's Xt variables instead of our own FindXt.cmake's ones.

2014-04-03  Andreas Kling  <akling@apple.com>

        Fast-path for casting JS wrappers to JSElement.
        <https://webkit.org/b/131210>

        Add an extended JSType for Element wrappers so we can avoid walking
        the ClassInfo chain in those bindings as well.

        Generalized the code to select a casting helper in the bindings
        generator into a function (GetCastingHelperForThisObject.)
        Updated all the jsDynamicCast call sites to go through this, in case
        there's an optimized cast available for the desired type.

        Reviewed by Benjamin Poulain.

        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSDOMWrapper.h:
        * bindings/js/JSElementCustom.h: Added.
        (WebCore::jsElementCast):
        * bindings/js/JSNodeCustom.h:
        (WebCore::jsNodeCast):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateHeader):
        (GetCastingHelperForThisObject):
        (GenerateImplementation):
        * dom/Element.idl:

2014-04-03  Andreas Kling  <akling@apple.com>

        Rebaseline a bindings test.

        * bindings/scripts/test/JS/JSTestNode.h:
        (WebCore::JSTestNode::createStructure):

2014-04-03  Andreas Kling  <akling@apple.com>

        Fast-path for casting JS wrappers to JSNode.
        <https://webkit.org/b/131196>

        Add a way to quickly determine that a given JSObject is a JSNode.
        This lets us avoid walking the ClassInfo chain in the DOM bindings
        for WebCore::Node.

        Reviewed by Mark Hahnenberg and Geoff Garen.

        * bindings/js/JSDOMWrapper.h:

            Added a JSNodeType constant that extends beyond JSC::JSType.

        * bindings/js/JSNodeCustom.h:
        (WebCore::jsNodeCast):

            Added. Fast cast from JSValue to JSNode.

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateHeader):
        (GenerateImplementation):

            Generate code that uses jsNodeCast in Node interfaces.

2014-04-03  Bem Jones-Bey  <bjonesbe@adobe.com>

        Merge ShapeInfo & ShapeOutsideInfo now that ShapeInsideInfo is no more
        https://bugs.webkit.org/show_bug.cgi?id=131180

        Reviewed by Andreas Kling.

        Now that ShapeInsideInfo is gone, having a class hiearachy and
        templates doesn't make any sense. As a first step to cleaning up the
        code, this remove ShapeInfo and puts all of its functionality into
        ShapeOutsideInfo.

        No new tests, no behavior change.

        * CMakeLists.txt:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * rendering/shapes/ShapeInfo.cpp: Removed.
        * rendering/shapes/ShapeInfo.h: Removed.
        * rendering/shapes/ShapeOutsideInfo.cpp:
        (WebCore::ShapeOutsideInfo::computedShapePhysicalBoundingBox):
        (WebCore::ShapeOutsideInfo::shapeToRendererPoint):
        (WebCore::ShapeOutsideInfo::shapeToRendererSize):
        (WebCore::referenceBox):
        (WebCore::ShapeOutsideInfo::setReferenceBoxLogicalSize):
        (WebCore::checkShapeImageOrigin):
        (WebCore::getShapeImageAndRect):
        (WebCore::getShapeImageMarginRect):
        (WebCore::ShapeOutsideInfo::computedShape):
        (WebCore::borderBeforeInWritingMode):
        (WebCore::borderAndPaddingBeforeInWritingMode):
        (WebCore::ShapeOutsideInfo::logicalTopOffset):
        (WebCore::borderStartWithStyleForWritingMode):
        (WebCore::borderAndPaddingStartWithStyleForWritingMode):
        (WebCore::ShapeOutsideInfo::logicalLeftOffset):
        (WebCore::ShapeOutsideInfo::computeSegmentsForLine):
        (WebCore::ShapeOutsideInfo::updateDeltasForContainingBlockLine):
        (WebCore::ShapeOutsideInfo::shapeValue): Deleted.
        (WebCore::ShapeOutsideInfo::styleForWritingMode): Deleted.
        * rendering/shapes/ShapeOutsideInfo.h:

2014-04-03  Andreas Kling  <akling@apple.com>

        Fix over-retain in SharedBufferCF's createCFData().
        <https://webkit.org/b/131139>

        Constructing the return type (RetainPtr<CFDataRef>) will also retain
        the pointee, so this would end up leaking.

        Reviewed by Anders Carlsson.

        * platform/cf/SharedBufferCF.cpp:
        (WebCore::SharedBuffer::createCFData):

2014-04-03  Brent Fulgham  <bfulgham@apple.com>

        [Win] Turn on ENABLE_CSS_GRID_LAYOUT
        https://bugs.webkit.org/show_bug.cgi?id=131147

        Reviewed by Simon Fraser.

        Covered by existing fast/css/getComputedStyle tests.

        * css/CSSAllInOne.cpp: Add CSSGridLineNamesValue.cpp when building
        with ENABLE(CSS_GRID_LAYOUT)

2014-04-03  Simon Fraser  <simon.fraser@apple.com>

        Pixelated WebView when display is changed from hiDPI to regularDPI
        https://bugs.webkit.org/show_bug.cgi?id=131185

        Reviewed by Tim Horton.

        r166309 added a short circuit in GraphicsLayerCA::updateContentsScale()
        when the scale didn't change. This broke layers which expected to
        unconditionally receive a setContentsScale(), namely the WebTiledBackingLayer
        which owns the TileController. WebTiledBackingLayer overrode -setContentsScale:
        to pass the scale down to the TileController; however, it didn't override
        -contentsScale, and it mucked with the scale passed in.
        
        Fix by having setting and fetching contentsScale on a WebTiledBackingLayer
        work as expected. Also rename the TileController functions to mirror the
        CALayer functions better.

        * WebCore.exp.in:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::updateContentsScale):
        * platform/graphics/ca/mac/TileController.h:
        * platform/graphics/ca/mac/TileController.mm:
        (WebCore::TileController::TileController):
        (WebCore::TileController::contentsScale):
        (WebCore::TileController::setContentsScale):
        (WebCore::TileController::scale): Deleted.
        (WebCore::TileController::setScale): Deleted.
        * platform/graphics/ca/mac/WebTiledBackingLayer.mm:
        (-[WebTiledBackingLayer setContentsScale:]):
        (-[WebTiledBackingLayer contentsScale]):

2014-04-03  Zoltan Horvath  <zoltan@webkit.org>

        [CSS Shapes] LineSegment logicalLeft and logicalRight members should be floats
        https://bugs.webkit.org/show_bug.cgi?id=116160

        Reviewed by Andreas Kling. 

        LineSegment edges should not have been changed to LayoutUnit. These are
        used only as floats. I modified them back to floats. 

        No new tests are needed, no behavior change.

        * rendering/shapes/Shape.h:

2014-04-03  Dirk Schulze  <krit@webkit.org>

        [CG] Canvas lineDashOffset does not handle negative numbers correctly
        https://bugs.webkit.org/show_bug.cgi?id=80560

        Reviewed by Dean Jackson.

        CG ignores negative dash array offsets. Check if we have a negative offset, if yes
        then calculate the length of the dash array and modulo the dash array offset with
        the dash array length.

        Test: fast/canvas/canvas-negative-lineDashOffset.html

        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::setLineDash):

2014-04-03  David Hyatt  <hyatt@apple.com>

        REGRESSION: fast/css/relative-positioned-block-nested-with-inline-parent-multiple-descendant-blocks-dynamic.html broken
        https://bugs.webkit.org/show_bug.cgi?id=131183

        Reviewed by Simon Fraser.

        Revert the loop to continue rather than breaking when an invalid block is encountered.
        This is what it used to do if it encountered a non-continuation block.

        * rendering/RenderInline.cpp:
        (WebCore::updateStyleOfAnonymousBlockContinuations):

2014-04-02  Simon Fraser  <simon.fraser@apple.com>

        Harden FilterOperation type casting
        https://bugs.webkit.org/show_bug.cgi?id=131142

        Reviewed by Sam Weinig.

        DefaultFilterOperation had an error-prone behavior where it set the base class
        OperationType to the type of some other filter class, but overrode isDefault(). 
        This made it very easy to write incorrect code that casted incorrectly based on type().
        
        Fix by making adding a DEFAULT filter operation type, and storing the represented
        type on DefaultFilterOperation().
        
        Also remove the OperationType argument for constructors of FilterOperations that
        can only be of one type, to avoid possible mistakes.
        
        Make the type cast macros a bit more normal, and use them in a few places.
        
        Fixed PlatformCAFiltersMac to handle the default filter case more cleanly.

        * WebCore.exp.in:
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::ComputedStyleExtractor::valueForFilter):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::createFilterOperations):
        * platform/graphics/ca/PlatformCAFilters.h:
        * platform/graphics/ca/mac/PlatformCAFiltersMac.mm:
        (PlatformCAFilters::filterValueForOperation):
        (PlatformCAFilters::colorMatrixValueForFilter):
        * platform/graphics/filters/FilterOperation.cpp:
        (WebCore::DefaultFilterOperation::operator==):
        (WebCore::ReferenceFilterOperation::ReferenceFilterOperation):
        (WebCore::ReferenceFilterOperation::operator==):
        (WebCore::BlurFilterOperation::operator==):
        (WebCore::BlurFilterOperation::blend):
        (WebCore::DropShadowFilterOperation::operator==):
        (WebCore::DropShadowFilterOperation::blend):
        * platform/graphics/filters/FilterOperation.h:
        (WebCore::FilterOperation::blend):
        (WebCore::FilterOperation::type):
        (WebCore::FilterOperation::isBasicColorMatrixFilterOperation):
        (WebCore::FilterOperation::isBasicComponentTransferFilterOperation):
        (WebCore::FilterOperation::isSameType):
        (WebCore::DefaultFilterOperation::create):
        (WebCore::DefaultFilterOperation::representedType):
        (WebCore::DefaultFilterOperation::DefaultFilterOperation):
        (WebCore::ReferenceFilterOperation::create):
        (WebCore::BlurFilterOperation::create):
        (WebCore::BlurFilterOperation::BlurFilterOperation):
        (WebCore::DropShadowFilterOperation::create):
        (WebCore::DropShadowFilterOperation::DropShadowFilterOperation):
        (WebCore::FilterOperation::isDefault): Deleted.
        * platform/graphics/filters/FilterOperations.cpp:
        (WebCore::FilterOperations::outsets):
        * rendering/FilterEffectRenderer.cpp:
        (WebCore::FilterEffectRenderer::build):
        * rendering/RenderLayerFilterInfo.cpp:
        (WebCore::RenderLayer::FilterInfo::updateReferenceFilterClients):

2014-04-03  Andreas Kling  <akling@apple.com>

        Stop throwing away the Document's StyleResolver on a timer.
        <https://webkit.org/b/131168>
        <rdar://problem/15227045>

        This was causing some unfortunate pauses when returning to idle pages
        after a long-ish time. There's already a mechanism in place that will
        throw these away if the system comes under memory pressure.

        Reviewed by Sam Weinig.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::styleForElement):
        (WebCore::StyleResolver::styleForKeyframe):
        (WebCore::StyleResolver::pseudoStyleForElement):
        (WebCore::StyleResolver::styleForPage):
        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::didAccessStyleResolver): Deleted.
        (WebCore::Document::styleResolverThrowawayTimerFired): Deleted.
        * dom/Document.h:

2014-04-02  Simon Fraser  <simon.fraser@apple.com>

        Assertion under RenderLayerCompositor::updateScrollCoordinatedLayer on time.com on iOS
        https://bugs.webkit.org/show_bug.cgi?id=131150

        Reviewed by Beth Dakin.

        When calling updateScrollCoordinatedLayer() under styleChanged, we haven't done
        layout yet so our composting layers haven't been hooked together. Don't try
        to add a zero nodeID to the map in this case.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateScrollCoordinatedLayer):

2014-04-03  David Hyatt  <hyatt@apple.com>

        Continuations casting issue.
        https://bugs.webkit.org/show_bug.cgi?id=130057
        <rdar://problem/16283406>

        Reviewed by Simon Fraser.

        The code to update relative positioned anonymous block continuations should not
        have assumed that all siblings were RenderBlocks. Make the code smarter and
        make it bail when it hits something that isn't part of the block continuation
        chain.

        Added fast/block/continuation-crash.html

        * rendering/RenderInline.cpp:
        (WebCore::updateStyleOfAnonymousBlockContinuations):

2014-04-03  Bem Jones-Bey  <bjonesbe@adobe.com>

        [CSS Shapes] CRASH with calc() value args in inset round
        https://bugs.webkit.org/show_bug.cgi?id=129816

        Reviewed by Andreas Kling.

        The code to parse the inset rounded corners was adding the parser
        value arguments to a temporary CSSParserValueList. Unfortunately,
        CSSParserValueList expects to own the values it contains, and it frees
        the values it contains when the list is destroyed. This was a problem
        because the values are owned by the CSSParserValueList passed in to
        parseInsetRoundedCorners, and thus the calc's argument list would get
        double freed, resulting in a crash. This patch fixes this by using a
        Vector to hold the pointers instead.

        Test: fast/shapes/shape-outside-floats/shape-outside-inset-round-calc-crash.html

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseInsetRoundedCorners):

2014-04-03  Jer Noble  <jer.noble@apple.com>

        Leaving a streaming movie by going "Back" keeps playing the audio
        https://bugs.webkit.org/show_bug.cgi?id=131149

        Reviewed by Eric Carlson.

        When stopping a HTMLMediaElement, call userCancelledLoad() (which clears the
        MediaPlayer) only after calling setPausedInternal() (which pauses the MediaPlayer).
        Previously, and in the reverse order, the MediaPlayer would never get a chance to pause
        before being cleared. There is an underlying error with the QTKit media engine which
        is causing it to continue playing even after its last reference is released, but this
        does fix the symptom of playback continuing even after stopping.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::stop):

2014-04-03  Jer Noble  <jer.noble@apple.com>

        [EME] Crash when passing a NULL initData to MediaKeys.createSession()
        https://bugs.webkit.org/show_bug.cgi?id=131156

        Reviewed by Eric Carlson.

        Update the checks at the start of createSession() to match the current spec, notably
        bailing early if the initData parameter is NULL or empty.

        * Modules/encryptedmedia/MediaKeys.cpp:
        (WebCore::MediaKeys::createSession):

2014-04-03  Eric Carlson  <eric.carlson@apple.com>

        [iOS] add missing QuickTime plug-in replacement API
        https://bugs.webkit.org/show_bug.cgi?id=131042

        Reviewed by Dean Jackson.

        Rename QuickTimePluginReplacement.cpp to QuickTimePluginReplacement.mm to make it possible
        to use the ObjC JSC API.
        * Modules/plugins/QuickTimePluginReplacement.cpp:
        * Modules/plugins/QuickTimePluginReplacement.h:
        (WebCore::QuickTimePluginReplacement::parentElement):
        * Modules/plugins/QuickTimePluginReplacement.idl:

        * Modules/plugins/QuickTimePluginReplacement.js:
        (Replacement.prototype.timedMetadataUpdates): Implement.
        (Replacement.prototype.accessLog): Ditto.
        (Replacement.prototype.errorLog): Ditto.

        Use the JSC ObjC API to create a JavaScript object from an array of AVMetadataItems. The
        JSC ObjC API supports basic NSTypes, but an AVMetadataItem can also contain NSData which 
        the existing plug-in returns as base-64 encoded data, so create wrappers for NSDictionary
        and NSArray.
        * Modules/plugins/QuickTimePluginReplacement.mm: Copied from Source/WebCore/Modules/plugins/QuickTimePluginReplacement.cpp.
        (WebCore::QuickTimePluginReplacement::ensureReplacementScriptInjected): Disambiguate with "JSC::"
        (WebCore::QuickTimePluginReplacement::installReplacement): Ditto.
        (WebCore::jsValueWithDataInContext): Create JSValue* from NSData.
        (WebCore::jsValueWithArrayInContext): Create JSValue* from NSArray.
        (WebCore::jsValueWithDictionaryInContext): Create JSValue* from NSDictionary.
        (WebCore::jsValueWithValueInContext): Create JSValue* from basic NSTypes plus AVMetadataItem
            and NSData.
        (WebCore::jsValueWithAVMetadataItemInContext): Create JSValue* from AVMetadataItem.
        (WebCore::JSQuickTimePluginReplacement::timedMetaData): Script interface.
        (WebCore::JSQuickTimePluginReplacement::accessLog): Ditto.
        (WebCore::JSQuickTimePluginReplacement::errorLog): Ditto.

        * WebCore.xcodeproj/project.pbxproj: QuickTimePluginReplacement.cpp -> QuickTimePluginReplacement.mm.

        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::timedMetadata): iOS only accessor.
        (WebCore::MediaPlayer::accessLog): Ditto.
        (WebCore::MediaPlayer::errorLog): Ditto.
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/MediaPlayerPrivate.h:

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::timedMetadata):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::accessLog):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::errorLog):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::metadataDidArrive):
        (WebCore::itemKVOProperties):
        (-[WebCoreAVFMovieObserver observeValueForKeyPath:ofObject:change:context:]):

2014-04-03  Andrei Bucur  <abucur@adobe.com>

        [CSS Regions] Include region range information when printing the render tree
        https://bugs.webkit.org/show_bug.cgi?id=131159

        Reviewed by Mihnea Ovidenie.

        With this change showRenderObject() will print the region range for objects inside
        a flow thread. The format is:
        Rs: <startRegion> Re: <endRegion>

        Because this can be called anytime during debugging, it's necessary to disable the
        current flow thread caching to prevent using the wrong flow thread for an object.

        Tests: No new tests, no functional change.

        * rendering/RenderFlowThread.cpp:
        (WebCore::CurrentRenderFlowThreadDisabler::CurrentRenderFlowThreadDisabler):
        (WebCore::CurrentRenderFlowThreadDisabler::~CurrentRenderFlowThreadDisabler):
        * rendering/RenderFlowThread.h:
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::showRegionsInformation): Added.
        (WebCore::RenderObject::showRenderObject):
        * rendering/RenderObject.h:

2014-04-03  Antti Koivisto  <antti@apple.com>

        RenderSnapshottedPlugIn::paint should use iterator for traversal.
        https://bugs.webkit.org/show_bug.cgi?id=131158

        Reviewed by Dean Jackson.

        * rendering/RenderSnapshottedPlugIn.cpp:
        (WebCore::RenderSnapshottedPlugIn::paint):

2014-03-27  Sergio Villar Senin  <svillar@igalia.com>

        [CSS Grid Layout] <string> not allowed in grid-{area | row | column} syntax
        https://bugs.webkit.org/show_bug.cgi?id=129713

        Reviewed by Darin Adler.

        Grid positioning properties no longer accept <string> values for
        named grid lines as they did in previous versions of the specs. They
        were first replaced by <ident> and since the beginning of 2014 they
        should only accept <custom-ident>.

        Updated the parser and the style resolver to this new syntax. Also
        updated the tests accordingly.

        Test: fast/css-grid-layout/grid-container-change-named-grid-lines-recompute-child.html

        * css/CSSParser.cpp:
        (WebCore::isValidCustomIdent): New function that checks that the
        <custom-ident> is valid.
        (WebCore::CSSParser::parseIntegerOrCustomIdentFromGridPosition):
        (WebCore::CSSParser::parseGridPosition):
        (WebCore::CSSParser::parseIntegerOrStringFromGridPosition):
        Replaced by WebCore::CSSParser::parseIntegerOrCustomIdentFromGridPosition.
        * css/CSSParser.h:
        * css/StyleResolver.cpp:
        (WebCore::createGridPosition):

2014-04-03  Antti Koivisto  <antti@apple.com>

        Crash after mutating after pseudo style
        https://bugs.webkit.org/show_bug.cgi?id=130881

        Reviewed by Andreas Kling.

        Test: fast/css/pseudo-after-crash.html

        * style/StyleResolveTree.cpp:
        (WebCore::Style::updateBeforeOrAfterPseudoElement):
        
            Invalidate the cached renderer for pseudo elements too.
    
        (WebCore::Style::needsPseudeElement): Deleted.
        
            Fix spelling.

2014-04-02  Chris Fleizach  <cfleizach@apple.com>

        AX: AccessibilityObject::children() returns invalid results sometimes
        https://bugs.webkit.org/show_bug.cgi?id=130563

        Reviewed by Joseph Pecoraro.

        Allow the DOM inspector to handle AX objects that do not have Node equivalents
        (e.g. anonymous renderers).

        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::processAccessibilityChildren):
        (WebCore::InspectorDOMAgent::buildObjectForAccessibilityProperties):
        * inspector/InspectorDOMAgent.h:

2014-04-02  Alexey Proskuryakov  <ap@apple.com>

        Sandbox violation in NetworkProcess when uploading a bundle
        https://bugs.webkit.org/show_bug.cgi?id=131133

        Reviewed by Brady Eidson.

        Track generated file ownership explicitly, so that each copy of FormData would know
        whether to delete the file.

        This part is needed to prevent asserting in FormData destructor in NetworkProcess,
        because it doesn't delete the files. Also, some cleanup.

        * WebCore.exp.in: Don't export FormData::removeGeneratedFilesIfNeeded(), WebKit2
        doesn't need it any more.
        * platform/network/FormData.cpp: Removed m_hasGeneratedFiles. There is no problem
        iterating over FormDataElements to compute it, and that's more robust when FormDatas
        are passed or stored on disk permanently.
        Updated touched functions to use C++ iteration, and renamed "e" to "element".
        (WebCore::FormData::encode): Keep encoding a boolean for hasGeneratedFiles, because
        the encoded FormData can be stored persitently, and we can't change the format.

        * platform/network/FormData.h: (WebCore::FormDataElement::FormDataElement):
        Added m_ownsGeneratedFile. FormData will only delete files it owns. Since files
        are generated immediately before form submission, it's always the FormData being
        submitted that owns the generated files.

2014-04-02  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Use RenderStyle::hasFlowInto when needed
        https://bugs.webkit.org/show_bug.cgi?id=131092

        Reviewed by Andrei Bucur.

        Add hasFlowInto() helper method on RenderStyle to be used
        instead of directly checking the presence or absence of flowThread value.
        No new functionality, no new tests.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::ComputedStyleExtractor::propertyValue):
        * dom/Element.cpp:
        (WebCore::Element::shouldMoveToFlowThread):
        * rendering/style/RenderStyle.h:
        * style/StyleResolveTree.cpp:
        (WebCore::Style::isRendererReparented):

2014-04-02  Benjamin Poulain  <benjamin@webkit.org>

        CSS JIT: the adjacent position is never reset
        https://bugs.webkit.org/show_bug.cgi?id=131145

        Reviewed by Andreas Kling.

        Corresponding radar: <rdar://problem/16440036>. The backtracking action would use a tail
        when not needed.

        Test: fast/selectors/multiple-adjacent-chain-without-adjacent-tail.html

        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::updateChainStates):

2014-04-02  Brent Fulgham  <bfulgham@apple.com>

        Speculative build fix for Windows.

        * DerivedSources.make: Make sure we generate our media control
        scripts for Apple Windows (but not WinCairo)

2014-04-02  Tim Horton  <timothy_horton@apple.com>

        Fix the !USE(IOSURFACE) iOS build.

        * platform/ios/MemoryPressureHandlerIOS.mm:
        (WebCore::MemoryPressureHandler::platformReleaseMemory):

2014-04-02  Mark Rowe  <mrowe@apple.com>

        <https://webkit.org/b/131136> Remove FrameLoadRequest's m_lockHistory member since it's always false.

        Reviewed by Andreas Kling.

        * loader/FrameLoadRequest.cpp:
        (WebCore::FrameLoadRequest::FrameLoadRequest):
        * loader/FrameLoadRequest.h:
        (WebCore::FrameLoadRequest::FrameLoadRequest):
        (WebCore::FrameLoadRequest::lockHistory): Deleted.
        (WebCore::FrameLoadRequest::setLockHistory): Deleted.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::load): Remove an if whose body was never executed.

2014-04-02  Mark Rowe  <mrowe@apple.com>

        <https://webkit.org/b/131135> Introduce LockHistory and LockBackForwardList enums to use in place of bools.

        These arguments are often passed using literals at the call site, where the use of bools severely hinders
        the readability of the code.

        Reviewed by Andreas Kling.

        * WebCore.exp.in:
        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::handleClick):
        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::submit):
        * html/HTMLFrameElementBase.cpp:
        (WebCore::HTMLFrameElementBase::openURL):
        (WebCore::HTMLFrameElementBase::setLocation):
        * html/HTMLFrameElementBase.h:
        * inspector/InspectorFrontendClientLocal.cpp:
        (WebCore::InspectorFrontendClientLocal::openInNewTab):
        * inspector/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::navigate):
        * loader/FormSubmission.cpp:
        (WebCore::FormSubmission::FormSubmission):
        (WebCore::FormSubmission::create):
        * loader/FormSubmission.h:
        (WebCore::FormSubmission::lockHistory):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::changeLocation):
        (WebCore::FrameLoader::urlSelected):
        (WebCore::FrameLoader::loadURLIntoChildFrame):
        (WebCore::FrameLoader::loadFrameRequest):
        (WebCore::FrameLoader::loadURL):
        (WebCore::FrameLoader::loadWithNavigationAction):
        (WebCore::FrameLoader::clientRedirected):
        (WebCore::FrameLoader::loadPostRequest):
        (WebCore::FrameLoader::continueLoadAfterNewWindowPolicy):
        (WebCore::FrameLoader::loadDifferentDocumentItem):
        * loader/FrameLoader.h:
        * loader/FrameLoaderTypes.h:
        * loader/NavigationScheduler.cpp:
        (WebCore::ScheduledNavigation::ScheduledNavigation):
        (WebCore::ScheduledNavigation::lockHistory):
        (WebCore::ScheduledNavigation::lockBackForwardList):
        (WebCore::ScheduledURLNavigation::ScheduledURLNavigation):
        (WebCore::ScheduledRedirect::ScheduledRedirect):
        (WebCore::ScheduledLocationChange::ScheduledLocationChange):
        (WebCore::ScheduledRefresh::ScheduledRefresh):
        (WebCore::ScheduledHistoryNavigation::ScheduledHistoryNavigation):
        (WebCore::ScheduledFormSubmission::ScheduledFormSubmission):
        (WebCore::NavigationScheduler::scheduleRedirect):
        (WebCore::NavigationScheduler::mustLockBackForwardList):
        (WebCore::NavigationScheduler::scheduleLocationChange):
        (WebCore::NavigationScheduler::scheduleFormSubmission):
        * loader/NavigationScheduler.h:
        * loader/SubframeLoader.cpp:
        (WebCore::SubframeLoader::requestFrame):
        (WebCore::SubframeLoader::requestObject):
        (WebCore::SubframeLoader::loadOrRedirectSubframe):
        * loader/SubframeLoader.h:
        * page/ContextMenuController.cpp:
        (WebCore::openNewWindow):
        (WebCore::ContextMenuController::contextMenuItemSelected):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::setLocation):
        (WebCore::DOMWindow::createWindow):
        (WebCore::DOMWindow::open):
        * svg/SVGAElement.cpp:
        (WebCore::SVGAElement::defaultEventHandler):

2014-04-02  Tim Horton  <timothy_horton@apple.com>

        Pool IOSurfaces to help with allocation cost
        https://bugs.webkit.org/show_bug.cgi?id=131096
        <rdar://problem/15373942>

        Reviewed by Simon Fraser.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        
        * platform/Timer.h:
        (WebCore::TimerBase::startRepeating): Add a std::chrono startRepeating.

        * platform/graphics/cg/IOSurfacePool.h: Added.
        (WebCore::IOSurfacePool::CachedSurfaceDetails::CachedSurfaceDetails):
        (WebCore::IOSurfacePool::CachedSurfaceDetails::resetLastUseTime):
        * platform/graphics/cg/ImageBufferBackingStoreCache.cpp: Removed.
        * platform/graphics/cg/ImageBufferBackingStoreCache.h: Removed.
        * platform/graphics/cg/IOSurfacePool.cpp: Added.
        (WebCore::IOSurfacePool::IOSurfacePool):
        (WebCore::IOSurfacePool::sharedPool):
        (WebCore::surfaceMatchesParameters):
        (WebCore::IOSurfacePool::willAddSurface):
        (WebCore::IOSurfacePool::didRemoveSurface):
        (WebCore::IOSurfacePool::didUseSurfaceOfSize):
        (WebCore::IOSurfacePool::takeSurface):
        (WebCore::IOSurfacePool::addSurface):
        (WebCore::IOSurfacePool::insertSurfaceIntoPool):
        (WebCore::IOSurfacePool::setPoolSize):
        (WebCore::IOSurfacePool::tryEvictInUseSurface):
        (WebCore::IOSurfacePool::tryEvictOldestCachedSurface):
        (WebCore::IOSurfacePool::evict):
        (WebCore::IOSurfacePool::collectInUseSurfaces):
        (WebCore::IOSurfacePool::markOlderSurfacesPurgeable):
        (WebCore::IOSurfacePool::collectionTimerFired):
        (WebCore::IOSurfacePool::scheduleCollectionTimer):
        (WebCore::IOSurfacePool::discardAllSurfaces):
        (WebCore::IOSurfacePool::showPoolStatistics):
        Add a pool of IOSurfaces. It behaves as such:

            - Keeps up to 64MB of surfaces.
            - Keeps unused and in-use surfaces (but never gets more than 1/2 full with the latter)
            - Marks surfaces purgeable after they've been unused for 2 seconds.
            - Tries to move surfaces from the in-use pool to the unused pool every 500ms.
            - Evicts in an LRU-ish fashion, interleaving eviction of the oldest
              surfaces and the in-use surfaces (since in-use surfaces are not immediately
              useful for the pool, but they are desirous because they were recently used).
            - Throws everything away under memory pressure.

        * platform/graphics/cocoa/IOSurface.mm:
        (IOSurface::create):
        Try to grab a surface from the IOSurfacePool.

        * platform/ios/MemoryPressureHandlerIOS.mm:
        (WebCore::MemoryPressureHandler::platformReleaseMemory):
        * platform/mac/MemoryPressureHandlerMac.mm:
        (WebCore::MemoryPressureHandler::install):
        (WebCore::MemoryPressureHandler::platformReleaseMemory):
        * platform/MemoryPressureHandler.cpp:
        (WebCore::MemoryPressureHandler::platformReleaseMemory):
        Fix some includes, and throw away all surfaces when we're under memory pressure.

2014-04-02  Stephanie Lewis  <slewis@apple.com>

        Roll out http://trac.webkit.org/changeset/166144
        <rdar://problem/16481284> PLT stops loading on news.google.com

        Unreviewed rollout.

        Rollout 166144 since it prevents the PLT from completing.

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::suspendPostAttachCallbacks):
        (WebCore::ContainerNode::resumePostAttachCallbacks):
        (WebCore::ContainerNode::queuePostAttachCallback):
        (WebCore::ContainerNode::postAttachCallbacksAreSuspended):
        (WebCore::ContainerNode::dispatchPostAttachCallbacks):
        * dom/ContainerNode.h:
        * dom/Document.cpp:
        (WebCore::Document::recalcStyle):
        * dom/Element.h:
        (WebCore::PostAttachCallbackDisabler::PostAttachCallbackDisabler):
        (WebCore::PostAttachCallbackDisabler::~PostAttachCallbackDisabler):
        * html/HTMLEmbedElement.cpp:
        (WebCore::HTMLEmbedElement::parseAttribute):
        * html/HTMLFormControlElement.cpp:
        (WebCore::focusPostAttach):
        (WebCore::HTMLFormControlElement::didAttachRenderers):
        (WebCore::updateFromElementCallback):
        (WebCore::HTMLFormControlElement::didRecalcStyle):
        * html/HTMLFrameOwnerElement.cpp:
        (WebCore::needsStyleRecalcCallback):
        (WebCore::HTMLFrameOwnerElement::scheduleSetNeedsStyleRecalc):
        * html/HTMLObjectElement.cpp:
        (WebCore::HTMLObjectElement::parseAttribute):
        (WebCore::HTMLObjectElement::shouldAllowQuickTimeClassIdQuirk):
        (WebCore::HTMLObjectElement::hasValidClassId):
        (WebCore::HTMLObjectElement::renderFallbackContent):
        * html/HTMLObjectElement.h:
        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::HTMLPlugInImageElement):
        (WebCore::HTMLPlugInImageElement::createElementRenderer):
        (WebCore::HTMLPlugInImageElement::didAttachRenderers):
        (WebCore::HTMLPlugInImageElement::willDetachRenderers):
        (WebCore::HTMLPlugInImageElement::updateWidgetIfNecessary):
        (WebCore::HTMLPlugInImageElement::didMoveToNewDocument):
        (WebCore::HTMLPlugInImageElement::updateWidgetCallback):
        (WebCore::HTMLPlugInImageElement::startLoadingImage):
        (WebCore::HTMLPlugInImageElement::startLoadingImageCallback):
        (WebCore::HTMLPlugInImageElement::createShadowIFrameSubtree):
        (WebCore::HTMLPlugInImageElement::subframeLoaderWillCreatePlugIn):
        (WebCore::HTMLPlugInImageElement::didRecalcStyle): Deleted.
        (WebCore::HTMLPlugInImageElement::scheduleUpdateForAfterStyleResolution): Deleted.
        (WebCore::HTMLPlugInImageElement::updateAfterStyleResolution): Deleted.
        (WebCore::HTMLPlugInImageElement::removedFrom): Deleted.
        (WebCore::is100Percent): Deleted.
        (WebCore::HTMLPlugInImageElement::setNeedsImageReload): Deleted.
        * html/HTMLPlugInImageElement.h:
        (WebCore::HTMLPlugInImageElement::imageLoader): Deleted.
        (WebCore::HTMLPlugInImageElement::updateImageLoaderWithNewURLSoon): Deleted.
        * style/StyleResolveTree.cpp:
        (WebCore::Style::needsPseudeElement):
        (WebCore::Style::attachBeforeOrAfterPseudoElementIfNeeded):
        (WebCore::Style::attachRenderTree):
        (WebCore::Style::updateBeforeOrAfterPseudoElement):
        (WebCore::Style::needsPseudoElement): Deleted.
        (WebCore::Style::postResolutionCallbackQueue): Deleted.
        (WebCore::Style::queuePostResolutionCallback): Deleted.
        (WebCore::Style::suspendMemoryCacheClientCalls): Deleted.
        (WebCore::Style::PostResolutionCallbackDisabler::PostResolutionCallbackDisabler): Deleted.
        (WebCore::Style::PostResolutionCallbackDisabler::~PostResolutionCallbackDisabler): Deleted.
        (WebCore::Style::postResolutionCallbacksAreSuspended): Deleted.
        * style/StyleResolveTree.h:

2014-04-02  Jinwoo Song  <jinwoo7.song@samsung.com>

        Page should use std::unique_ptr for PointerLockController
        https://bugs.webkit.org/show_bug.cgi?id=131098

        Reviewed by Anders Carlsson.

        Make Page keep a std::unique_ptr to PointerLockController. Store page 
        references and return controller references where possible.

        * dom/Document.cpp:
        (WebCore::Document::prepareForDestruction):
        (WebCore::Document::webkitExitPointerLock):
        (WebCore::Document::webkitPointerLockElement):
        * dom/Element.cpp:
        (WebCore::Element::removedFrom):
        (WebCore::Element::webkitRequestPointerLock):
        * page/Page.cpp:
        (WebCore::Page::Page):
        * page/Page.h:
        (WebCore::Page::pointerLockController):
        * page/PointerLockController.cpp:
        (WebCore::PointerLockController::PointerLockController):
        (WebCore::PointerLockController::requestPointerLock):
        (WebCore::PointerLockController::requestPointerUnlock):
        (WebCore::PointerLockController::create): Deleted.
        * page/PointerLockController.h:

2014-04-02  Dean Jackson  <dino@apple.com>

        Load Media Controls js/css from bundle
        https://bugs.webkit.org/show_bug.cgi?id=131086

        Followup comments from Eric Carlson.

        Remove the booleans that were guarding loading the resources.

        * rendering/RenderThemeIOS.h:
        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::mediaControlsStyleSheet):
        (WebCore::RenderThemeIOS::mediaControlsScript):
        (WebCore::RenderThemeIOS::RenderThemeIOS):
        * rendering/RenderThemeMac.h:
        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::RenderThemeMac):
        (WebCore::RenderThemeMac::mediaControlsStyleSheet):
        (WebCore::RenderThemeMac::mediaControlsScript):

2014-04-01  Dean Jackson  <dino@apple.com>

        Load Media Controls js/css from bundle
        https://bugs.webkit.org/show_bug.cgi?id=131086

        Reviewed by Eric Carlson.

        Rather than embed encoded versions of the JS and CSS files
        into C++ source, just load the files directly from the bundle.

        * DerivedSources.make: Removed now unnecessary rules.
        * WebCore.xcodeproj/project.pbxproj: Copy mediaControls files to the bundle.
        * rendering/RenderThemeIOS.h:
        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::RenderThemeIOS):
        (WebCore::RenderThemeIOS::mediaControlsStyleSheet): Load from the bundle.
        (WebCore::RenderThemeIOS::mediaControlsScript): Ditto.
        * rendering/RenderThemeMac.h:
        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::RenderThemeMac):
        (WebCore::RenderThemeMac::mediaControlsStyleSheet):
        (WebCore::RenderThemeMac::mediaControlsScript):

2014-04-02  Daniel Bates  <dabates@apple.com>

        Move focus management API from HTMLDocument to Document
        https://bugs.webkit.org/show_bug.cgi?id=131079
        <rdar://problem/16220103>

        Reviewed by Timothy Hatcher.

        Merged from Blink (patch by Christophe Dumez):
        https://src.chromium.org/viewvc/blink?view=rev&revision=165515

        Move hasFocus() and attribute activeElement from interface HTMLDocument
        to DOMDocument as per section Focus management APIs of the HTML5 standard:
        <http://www.whatwg.org/specs/web-apps/current-work/#focus-management-apis> (1 April 2014).

        Test: fast/dom/Document/xml-document-focus.xml

        * bindings/objc/PublicDOMInterfaces.h: Moved hasFocus() and property activeElement from
        interface DOMHTMLDocument to DOMDocument.
        * dom/Document.cpp:
        (WebCore::Document::activeElement): Added.
        (WebCore::Document::hasFocus): Added.
        * dom/Document.h:
        * dom/Document.idl:
        * html/HTMLDocument.cpp:
        (WebCore::HTMLDocument::activeElement): Deleted.
        (WebCore::HTMLDocument::hasFocus): Deleted.
        * html/HTMLDocument.h:
        * html/HTMLDocument.idl:

2014-04-02  Benjamin Poulain  <benjamin@webkit.org>

        Refactor the function call generator to take the arguments by value
        https://bugs.webkit.org/show_bug.cgi?id=131129

        Reviewed by Andreas Kling.

        Nothing forces the pointed address to stay alive between setOneArgument/setTwoArguments
        and prepareAndCall.

        This patch changes FunctionCall to:
        -Keep the register by value instead of using pointers.
        -Crash at compile time if a register is invalid.

        * cssjit/FunctionCall.h:
        (WebCore::FunctionCall::FunctionCall):
        (WebCore::FunctionCall::setOneArgument):
        (WebCore::FunctionCall::setTwoArguments):
        (WebCore::FunctionCall::swapArguments):
        (WebCore::FunctionCall::prepareAndCall):
        * cssjit/RegisterAllocator.h:
        (WebCore::RegisterAllocator::isValidRegister):

2014-04-02  Daniel Bates  <dabates@apple.com>

        Remove Settings::maximumDecodedImageSize()
        https://bugs.webkit.org/show_bug.cgi?id=131057
        <rdar://problem/15626368>

        Reviewed by Darin Adler.

        The setting Settings::maximumDecodedImageSize() and its related logic have various
        shortcomings, including the inability to cancel an image load when the estimated
        decoded image size exceeds the maximum decoded image size. In the iOS port, this
        setting is less useful given image subsampling support. For now, we remove this
        setting and its related logic. Should it turn out that such a setting is useful
        then we can implement it again taking care to address the shortcomings in the
        original design.

        * html/HTMLCanvasElement.cpp: For the iOS port, define MaxCanvasArea to be 4580 * 1145
        pixels such that the maximum size of the image buffer is 20 MB (assumes 4 bytes per pixel).
        (WebCore::HTMLCanvasElement::HTMLCanvasElement):
        (WebCore::HTMLCanvasElement::createImageBuffer):
        * html/HTMLCanvasElement.h:
        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::createImageData):
        (WebCore::CanvasRenderingContext2D::getImageData):
        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::addIncrementalDataBuffer):
        (WebCore::CachedImage::finishLoading):
        * loader/cache/CachedImage.h:
        * page/Settings.in:

2014-04-02  Martin Hock  <mhock@apple.com>

        Unify private browsing with sessions.
        https://bugs.webkit.org/show_bug.cgi?id=130099

        Reviewed by Alexey Proskuryakov.

        Unless otherwise noted, the following consists solely of mechanical changes to replace querying WebCore::Settings::privateBrowsingEnabled() with Page::usesEphemeralSession().

        * Modules/webdatabase/DatabaseContext.cpp:
        (WebCore::DatabaseContext::allowDatabaseAccess):
        * WebCore.exp.in: Remove Settings::setPrivateBrowsingEnabled, add Page::legacyPrivateBrowsingEnabled.
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute):
        * loader/HistoryController.cpp:
        (WebCore::HistoryController::updateForStandardLoad):
        (WebCore::HistoryController::updateForRedirectWithLockedBackForwardList):
        (WebCore::HistoryController::updateForClientRedirect):
        (WebCore::HistoryController::updateForSameDocumentNavigation):
        (WebCore::HistoryController::pushState):
        (WebCore::HistoryController::replaceState):
        * loader/appcache/ApplicationCacheGroup.cpp:
        (WebCore::ApplicationCacheGroup::cacheForMainRequest):
        (WebCore::ApplicationCacheGroup::selectCache):
        (WebCore::ApplicationCacheGroup::selectCacheWithoutManifestURL):
        (WebCore::ApplicationCacheGroup::update):
        * loader/appcache/ApplicationCacheHost.cpp:
        (WebCore::ApplicationCacheHost::isApplicationCacheEnabled):
        * loader/icon/IconController.cpp:
        (WebCore::IconController::continueLoadWithDecision):
        * page/Page.cpp:
        (WebCore::Page::Page): Initialize with defaultSessionID.
        (WebCore::Page::legacyPrivateBrowsingEnabled): Legacy setting for private browsing.
        (WebCore::Page::privateBrowsingStateChanged): Move implementation to setSessionID.
        (WebCore::Page::sessionID): Simplify to just return m_sessionID.
        (WebCore::Page::setSessionID): Also perform privateBrowsingStateChanged action.a
        (WebCore::Page::privateBrowsingStateChanged): Deleted.
        (WebCore::Page::checkSubframeCountConsistency): Deleted.
        * page/Page.h:
        * page/PageConsole.cpp:
        (WebCore::PageConsole::addMessage):
        (WebCore::PageConsole::messageWithTypeAndLevel):
        * page/Settings.cpp: Remove privateBrowsingEnabled setting.
        (WebCore::Settings::Settings):
        (WebCore::Settings::setPrivateBrowsingEnabled): Page reflects setting using session.
        * page/Settings.h:
        * plugins/PluginView.cpp:
        (WebCore::PluginView::getValue):
        * rendering/RenderSearchField.cpp:
        (WebCore::RenderSearchField::addSearchResult):
        * storage/Storage.cpp:
        (WebCore::Storage::isDisabledByPrivateBrowsing):

2014-04-02  Antti Koivisto  <antti@apple.com>

        Try to fix test failures.

        * platform/graphics/ca/mac/TileGrid.mm:
        (WebCore::TileGrid::TileGrid):  Initialize a field.

2014-04-02  Timothy Hatcher  <timothy@apple.com>

        Remove Input domain from the Web Inspector protocol.

        https://bugs.webkit.org/show_bug.cgi?id=131073

        Reviewed by Joseph Pecoraro.

        * CMakeLists.txt:
        * DerivedSources.make:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * inspector/InspectorAllInOne.cpp:
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::InspectorController):
        * inspector/InspectorInputAgent.cpp: Removed.
        * inspector/InspectorInputAgent.h: Removed.
        * inspector/protocol/Input.json: Removed.

2014-04-02  Antti Koivisto  <antti@apple.com>

        Split tile grid out from TileController
        https://bugs.webkit.org/show_bug.cgi?id=131102

        Reviewed by Simon Fraser.

        Add a TileGrid class that encapsulates tiles, zoom level and the related metadata.
        This will make it possible to have multiple grids per TileController later.

2014-03-31  Brent Fulgham  <bfulgham@apple.com>

        [Win] Correct media controls for test harness
        https://bugs.webkit.org/show_bug.cgi?id=131008 

        Reviewed by Eric Carlson.

        * rendering/RenderThemeSafari.cpp: Revise to match RenderThemeWin logic.
        (WebCore::RenderThemeSafari::systemFont):
        (WebCore::RenderThemeSafari::paintMenuList):
        (WebCore::RenderThemeSafari::paintSearchFieldResultsButton):
        (WebCore::RenderThemeSafari::mediaControlsStyleSheet):
        (WebCore::RenderThemeSafari::mediaControlsScript):
        (WebCore::RenderThemeSafari::paintMediaFullscreenButton): Deleted.
        (WebCore::RenderThemeSafari::paintMediaMuteButton): Deleted.
        (WebCore::RenderThemeSafari::paintMediaPlayButton): Deleted.
        (WebCore::RenderThemeSafari::paintMediaSeekBackButton): Deleted.
        (WebCore::RenderThemeSafari::paintMediaSeekForwardButton): Deleted.
        (WebCore::RenderThemeSafari::paintMediaSliderTrack): Deleted.
        (WebCore::RenderThemeSafari::paintMediaSliderThumb): Deleted.
        * rendering/RenderThemeSafari.h:

2014-04-02  peavo@outlook.com  <peavo@outlook.com>

        [WinCairo] Compile error.
        https://bugs.webkit.org/show_bug.cgi?id=131110

        Reviewed by Simon Fraser.

        Image::size() now returns a FloatSize instead of an IntSize.

        * platform/win/DragImageCairoWin.cpp:
        (WebCore::createDragImageFromImage):

2014-04-02  David Kilzer  <ddkilzer@apple.com>

        Use outermost containing isolate when constructing bidi runs
        <http://webkit.org/b/131107>
        <rdar://problem/15690021>

        Reviewed by Darin Adler.

        Merged from Blink (patch by jww@chromium.org):
        https://src.chromium.org/viewvc/blink?revision=157268&view=revision
        http://crbug.com/279277

            Update containingIsolate to go back all the way to top
            isolate from current root, rather than stopping at the first
            isolate it finds. This works because the current root is
            always updated with each isolate run.

        Tests: fast/text/international/unicode-bidi-isolate-nested-with-removes-not-adjacent.html
               fast/text/international/unicode-bidi-isolate-nested-with-removes.html

        * rendering/InlineIterator.h:
        (WebCore::highestContainingIsolateWithinRoot):
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::constructBidiRunsForSegment):

2014-04-02  Chris Fleizach  <cfleizach@apple.com>

        AX: Improve ARIA live region reliability by sending notifications when live regions are created/shown and hidden/destroyed
        https://bugs.webkit.org/show_bug.cgi?id=124381

        Reviewed by Mario Sanchez Prada.

        Re-organize some code so that when we detect a new node has been created, we can safely determine its live region status.
        If it is a live region, we fire off a live region created notification.

        Test: platform/mac/accessibility/live-region-creation-notification.html

        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::handleLiveRegionCreated):
        (WebCore::AXObjectCache::childrenChanged):
        (WebCore::AXObjectCache::handleAttributeChanged):
        * accessibility/AXObjectCache.h:
        (WebCore::AXObjectCache::childrenChanged):
        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::defaultLiveRegionStatusForRole):
        (WebCore::AccessibilityObject::liveRegionStatusIsEnabled):
        (WebCore::AccessibilityObject::supportsARIALiveRegion):
        * accessibility/AccessibilityObject.h:
        (WebCore::AccessibilityObject::ariaLiveRegionStatus):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::ariaLiveRegionStatus):
        * accessibility/AccessibilityRenderObject.h:
        * accessibility/ios/AXObjectCacheIOS.mm:
        (WebCore::AXObjectCache::postPlatformNotification):
        * accessibility/ios/WebAccessibilityObjectWrapperIOS.h:
        * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper postLiveRegionCreatedNotification]):
        * accessibility/mac/AXObjectCacheMac.mm:
        (WebCore::AXObjectCache::postPlatformNotification):

2014-04-02  Martin Robinson  <mrobinson@igalia.com>

        REGRESSION(r165704): [GTK] Inspector resources not correctly generated
        https://bugs.webkit.org/show_bug.cgi?id=130343

        Reviewed by Gustavo Noronha Silva.

        * CMakeLists.txt: Generate the web inspector JS file into the new WebInspectorUI derived sources
        directory.

2014-04-02  Zalan Bujtas  <zalan@apple.com>

        Unreviewed build fix after r166642.
        (WinCairo should really turn subpixel layout on.)

        * platform/graphics/LayoutSize.h:
        (WebCore::flooredForPainting):

2014-04-02  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Make GraphicsContext::drawTiledImage* functions float based.
        https://bugs.webkit.org/show_bug.cgi?id=131062

        Reviewed by Simon Fraser.

        This is in preparation to support subpixel positioned/sized background images. Generated images
        need to be able to sized on device pixels.

        No change in behavior.

        * platform/graphics/GraphicsContext.cpp:
        (WebCore::GraphicsContext::drawImage):
        (WebCore::GraphicsContext::drawTiledImage):
        * platform/graphics/GraphicsContext.h:

2014-04-02  Alex Christensen  <achristensen@webkit.org>

        [WinCairo] Build fix after r166496.
        https://bugs.webkit.org/show_bug.cgi?id=131006

        Reviewed by Carlos Garcia Campos.

        * platform/graphics/gstreamer/InbandTextTrackPrivateGStreamer.cpp:
        (WebCore::InbandTextTrackPrivateGStreamer::handleSample):
        (WebCore::InbandTextTrackPrivateGStreamer::streamChanged):
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::changePipelineState):
        (WebCore::MediaPlayerPrivateGStreamer::videoChanged):
        (WebCore::MediaPlayerPrivateGStreamer::videoCapsChanged):
        (WebCore::MediaPlayerPrivateGStreamer::audioChanged):
        (WebCore::MediaPlayerPrivateGStreamer::textChanged):
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.cpp:
        (WebCore::MediaPlayerPrivateGStreamerBase::volumeChanged):
        (WebCore::MediaPlayerPrivateGStreamerBase::muteChanged):
        * platform/graphics/gstreamer/TrackPrivateBaseGStreamer.cpp:
        (WebCore::TrackPrivateBaseGStreamer::activeChanged):
        (WebCore::TrackPrivateBaseGStreamer::tagsChanged):
        * platform/graphics/gstreamer/VideoSinkGStreamer.cpp:
        (webkitVideoSinkRender):
        * platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp:
        (webKitWebSrcChangeState):
        (webKitWebSrcNeedDataCb):
        (webKitWebSrcEnoughDataCb):
        (webKitWebSrcSeekDataCb):
        Added std::function<void()> constructors to help Visual Studio decide which version of 
        GMainLoopSource::schedule or GMainLoopSource::scheduleAfterDelay to use.

2014-04-02  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Transition class CSSImageGeneratorValue/class StyleImage (and its dependencies) from 
        IntSize to FloatSize to enable subpixel sized (generated)images.
        https://bugs.webkit.org/show_bug.cgi?id=130659

        Reviewed by Simon Fraser and Andreas Kling.

        This is in preparation to support subpixel positioned/sized background images. Generated images
        needs to be able to sized on device pixels.

        No change in behavior.

        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSCanvasValue.cpp:
        (WebCore::CSSCanvasValue::fixedSize):
        (WebCore::CSSCanvasValue::image):
        * css/CSSCanvasValue.h:
        * css/CSSCrossfadeValue.cpp:
        (WebCore::CSSCrossfadeValue::fixedSize):
        (WebCore::CSSCrossfadeValue::image):
        * css/CSSCrossfadeValue.h:
        * css/CSSFilterImageValue.cpp:
        (WebCore::CSSFilterImageValue::fixedSize):
        (WebCore::CSSFilterImageValue::image):
        * css/CSSFilterImageValue.h:
        * css/CSSGradientValue.cpp:
        (WebCore::CSSGradientValue::image):
        (WebCore::positionFromValue):
        (WebCore::CSSGradientValue::computeEndPoint):
        (WebCore::endPointsFromAngle):
        (WebCore::CSSLinearGradientValue::createGradient):
        (WebCore::CSSRadialGradientValue::createGradient):
        * css/CSSGradientValue.h:
        (WebCore::CSSGradientValue::fixedSize):
        * css/CSSImageGeneratorValue.cpp:
        (WebCore::CSSImageGeneratorValue::cachedImageForSize):
        (WebCore::CSSImageGeneratorValue::saveCachedImageForSize):
        (WebCore::CSSImageGeneratorValue::evictCachedGeneratedImage):
        (WebCore::CSSImageGeneratorValue::CachedGeneratedImage::CachedGeneratedImage):
        (WebCore::CSSImageGeneratorValue::image):
        (WebCore::CSSImageGeneratorValue::fixedSize):
        * css/CSSImageGeneratorValue.h:
        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::setContainerSizeForRenderer):
        * loader/cache/CachedImage.h:
        * platform/graphics/FloatSizeHash.h: Added.
        (WTF::FloatHash<WebCore::FloatSize>::hash):
        (WTF::FloatHash<WebCore::FloatSize>::equal):
        (WTF::HashTraits<WebCore::FloatSize>::constructDeletedValue):
        (WTF::HashTraits<WebCore::FloatSize>::isDeletedValue):
        * platform/graphics/LayoutSize.h:
        (WebCore::flooredForPainting):
        * rendering/RenderImageResourceStyleImage.h:
        * rendering/RenderListMarker.cpp:
        (WebCore::RenderListMarker::computePreferredLogicalWidths):
        * rendering/style/StyleCachedImage.cpp:
        (WebCore::StyleCachedImage::imageSize):
        (WebCore::StyleCachedImage::setContainerSizeForRenderer):
        (WebCore::StyleCachedImage::image):
        * rendering/style/StyleCachedImage.h:
        * rendering/style/StyleCachedImageSet.cpp:
        (WebCore::StyleCachedImageSet::imageSize):
        (WebCore::StyleCachedImageSet::setContainerSizeForRenderer):
        (WebCore::StyleCachedImageSet::image):
        * rendering/style/StyleCachedImageSet.h:
        * rendering/style/StyleGeneratedImage.cpp:
        (WebCore::StyleGeneratedImage::imageSize):
        (WebCore::StyleGeneratedImage::computeIntrinsicDimensions):
        (WebCore::StyleGeneratedImage::image):
        * rendering/style/StyleGeneratedImage.h:
        * rendering/style/StyleImage.h:
        * rendering/style/StylePendingImage.h:
        * svg/graphics/SVGImageCache.cpp:
        (WebCore::SVGImageCache::setContainerSizeForRenderer):
        * svg/graphics/SVGImageCache.h:

2014-04-02  Gergo Balogh  <gbalogh.u-szeged@partner.samsung.com>

        Warning fix for RenderLayer.
        https://bugs.webkit.org/show_bug.cgi?id=131090

        Reviewed by Csaba Osztrogonác.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateDescendantDependentFlags):

2014-04-02  Frédéric Wang  <fred.wang@free.fr>

        Operator stretching: read the Open Type MATH table
        https://bugs.webkit.org/show_bug.cgi?id=130324

        Reviewed by Chris Fleizach.

        We parse and expose some data from the OpenType MATH table that will be
        be relevant for at least the MathML operator stretching (bug 130322):
        math constants, italic corrections and size variants / glyph assembly.
        This will be tested when the MathML code uses the data.

        * WebCore.xcodeproj/project.pbxproj: Add OpenTypeTypes.h to the Mac build.
        * platform/graphics/opentype/OpenTypeMathData.cpp: We implement the low-level parsing of the MATH table.
        (WebCore::OpenType::MathItalicsCorrectionInfo::getItalicCorrection):
        (WebCore::OpenType::MathGlyphInfo::mathItalicsCorrectionInfo):
        (WebCore::OpenType::GlyphAssembly::getAssemblyParts):
        (WebCore::OpenType::MathGlyphConstruction::getSizeVariants):
        (WebCore::OpenType::MathGlyphConstruction::getAssemblyParts):
        (WebCore::OpenType::MathVariants::mathGlyphConstruction):
        (WebCore::OpenType::MATHTable::mathConstants):
        (WebCore::OpenType::MATHTable::mathGlyphInfo):
        (WebCore::OpenType::MATHTable::mathVariants):
        (WebCore::OpenTypeMathData::OpenTypeMathData): We load the MATH table.
        (WebCore::OpenTypeMathData::getMathConstant): We add a function to get values from the MathConstant subtable.
        (WebCore::OpenTypeMathData::getItalicCorrection): We add a function to get italic correction from the MathGlyphInfo subtable.
        (WebCore::OpenTypeMathData::getMathVariants): We add a function to get size variants / glyph assembly from the MathVariants subtable.
        * platform/graphics/opentype/OpenTypeMathData.h: We expose three new functions to get math data.
        * platform/graphics/opentype/OpenTypeTypes.h: We share the coverage tables that are common to vertical and math data.
        (WebCore::OpenType::TableWithCoverage::getCoverageIndex): We add a function to get the coverage index from a given glyph.
        * platform/graphics/opentype/OpenTypeVerticalData.cpp: We move the coverage tables to OpenTypeTypes.h.

2014-04-02  Ion Rosca  <rosca@adobe.com>

        [CSS Blending] Compositing requirements for blending are not computed correctly
        https://bugs.webkit.org/show_bug.cgi?id=130664

        Reviewed by Dean Jackson.

        Tests: css3/compositing/blend-mode-accelerated-with-multiple-stacking-contexts.html
               css3/compositing/blend-mode-with-accelerated-sibling.html

        Compositing requirements for blending: if a layer having blend mode
        other than normal is composited for any reason, its closest stacking
        context ancestor should be composited as well.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::RenderLayer):
        * rendering/RenderLayer.h: added a new field,
        m_hasUnisolatedCompositedBlendingDescendants, which is true if the layer
        has composited blending descendants not isolated by any stacking context child;
        added a new method: isolatesCompositedBlending(), which is true if we should
        accelerate that layer in order to perform isolation correctly.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::CompositingState::CompositingState): m_subtreeHasBlending was renamed
        m_hasUnisolatedCompositedBlendingDescendants in order to be more self-explanatory.
        (WebCore::RenderLayerCompositor::computeCompositingRequirements):
        computes the isolation requirements for composited blending by
        (re)setting RenderLayer::m_hasUnisolatedCompositedBlendingDescendants flag.

        (WebCore::RenderLayerCompositor::reasonsForCompositing):
        fixed the reason of compositing: isolation instead of blending.

        (WebCore::RenderLayerCompositor::requiresCompositingForIndirectReason):
        * rendering/RenderLayerCompositor.h:

2014-04-02  Frédéric Wang  <fred.wang@free.fr>

        Operator stretching: expose a math data API
        https://bugs.webkit.org/show_bug.cgi?id=130572

        Reviewed by Chris Fleizach.

        We expose a new SimpleFontData API to give access to the data from the
        OpenType MATH table. The class OpenTypeMathData will
        be implemented in bug 130324. On Darwin platform, we also implement the
        missing FontPlatformData::openTypeTable function which will be necessary
        to load the OpenType MATH table. The changes are intended to be used
        for MathML operator stretching (bug 130322) so tests are not added yet.

        * CMakeLists.txt: add new OpenTypeMathData files.
        * WebCore.vcxproj/WebCore.vcxproj: ditto.
        * WebCore.vcxproj/WebCore.vcxproj.filters: ditto.
        * WebCore.xcodeproj/project.pbxproj: ditto.
        * platform/graphics/FontPlatformData.cpp:
        (WebCore::FontPlatformData::openTypeTable): We implement openTypeTable() on Darwin platform.
        * platform/graphics/FontPlatformData.h: We expose openTypeTable() on Darwin platform.
        * platform/graphics/SimpleFontData.cpp:
        (WebCore::SimpleFontData::SimpleFontData):
        (WebCore::SimpleFontData::mathData): Initialize and return the math data.
        * platform/graphics/SimpleFontData.h: We expose a mathData() function to access the MATH data.
        * platform/graphics/opentype/OpenTypeMathData.cpp: Added. This is a new class that will be used to parse the data from the OpenType MATH table.
        (WebCore::OpenTypeMathData::OpenTypeMathData):
        * platform/graphics/opentype/OpenTypeMathData.h: Added.
        (WebCore::OpenTypeMathData::create):
        (WebCore::OpenTypeMathData::hasMathData):

2014-04-01  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Displaying region's children in another region not supported
        https://bugs.webkit.org/show_bug.cgi?id=130735

        Reviewed by David Hyatt.

        With http://trac.webkit.org/changeset/166353, we disabled the possibility
        of collecting the region's children into another flow and displaying them
        in another region.
        I added a new test for this and also changed the plain ASSERT in Element dtor
        to ASSERT_WITH_SECURITY_IMPLICATION to better reflect the meaning of the assertion.

        Test: fast/regions/region-child-not-flowed.html

        * dom/Element.cpp:
        (WebCore::Element::~Element):

2014-04-01  Andrei Bucur  <abucur@adobe.com>

        [CSS Regions] Simplify the RenderFlowThread state pusher
        https://bugs.webkit.org/show_bug.cgi?id=131035

        Reviewed by David Hyatt.

        The RenderFlowThread state pusher is desynchronized from the RenderView layout state pusher
        by one renderer. This patch fixes the anomaly by correctly ordering the push and pop operations
        between the two systems.

        Tests: no functional change, no new tests.

        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::pushFlowThreadLayoutState):
        (WebCore::RenderFlowThread::popFlowThreadLayoutState):
        (WebCore::RenderFlowThread::offsetFromLogicalTopOfFirstRegion):
        * rendering/RenderView.cpp:
        (WebCore::RenderView::pushLayoutState):
        * rendering/RenderView.h:

2014-04-01  Beth Dakin  <bdakin@apple.com>

        willReveal edge events should be hooked up for overflow:scroll
        https://bugs.webkit.org/show_bug.cgi?id=131071
        -and corresponding-
        <rdar://problem/16190392>

        Reviewed by Sam Weinig.

        This patch moves the will reveal logic from FrameView to Document so that it can 
        be shared for RenderLayers.

        This is mostly just a moved function, but now the function takes an Element* that 
        represents the target of the event if the target is not the window.
        * dom/Document.cpp:
        (WebCore::Document::sendWillRevealEdgeEventsIfNeeded):
        * dom/Document.h:

        No longer implement sendWillRevealEdgeEventsIfNeeded() on FrameView or 
        ScrollableArea at all. Call into Document instead.
        * page/FrameView.cpp:
        (WebCore::FrameView::scrollPositionChanged):
        (WebCore::FrameView::sendWillRevealEdgeEventsIfNeeded): Deleted.
        * page/FrameView.h:
        * platform/ScrollableArea.h:
        (WebCore::ScrollableArea::sendWillRevealEdgeEventsIfNeeded): Deleted.

        Call sendWillRevealEdgeEventsIfNeeded() after sending scroll events. 
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::scrollTo):

2014-04-01  Jon Honeycutt  <jhoneycutt@apple.com>

        Crash in WebCore::RenderLayer::FilterInfo::updateReferenceFilterClients

        <https://bugs.webkit.org/show_bug.cgi?id=121887>
        <rdar://problem/15073043>

        Reviewed by Dean Jackson.

        Test: svg/filters/first-letter-crash.html

        * rendering/FilterEffectRenderer.cpp:
        (WebCore::FilterEffectRenderer::buildReferenceFilter):
        Added a null check to prevent crashes for anonymous RenderObjects.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::filterNeedsRepaint):
        Get the enclosing element, if there is one, and recalculate its style.
        We use the enclosing element so that we recalculate style for the
        ancestor of an anonymous RenderElement.
        (WebCore::RenderLayer::enclosingElement):
        Remove an assertion; we may now reach this condition if loading a
        cached SVG document results in RenderLayer::filterNeedsRepaint() being
        called before the object has been inserted into the render tree.

        * rendering/RenderLayerFilterInfo.cpp:
        (WebCore::RenderLayer::FilterInfo::notifyFinished):
        Tell the RenderLayer that the filter needs repainting.
        (WebCore::RenderLayer::FilterInfo::updateReferenceFilterClients):
        Get the Element from the renderer rather than asking the renderer's
        Element, which will be null for anonymous RenderObjects.

        * rendering/RenderLayerFilterInfo.h:
        Removed declaration for the old workaround function, layerElement().

2014-04-01  Ryuan Choi  <ryuan.choi@samsung.com>

        Build break when disabled VIDEO since r166261
        https://bugs.webkit.org/show_bug.cgi?id=131087

        Reviewed by Gyuyoung Kim.

        * testing/Internals.cpp: Added ENABLE(VIDEO) guards
        (WebCore::Internals::simulateSystemSleep):
        (WebCore::Internals::simulateSystemWake):

2014-04-01  Timothy Hatcher  <timothy@apple.com>

        Remove HeapProfiler from the Web Inspector protocol.

        https://bugs.webkit.org/show_bug.cgi?id=131070

        Reviewed by Joseph Pecoraro.

        * CMakeLists.txt:
        * DerivedSources.make:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/ScriptHeapSnapshot.h: Removed.
        * bindings/js/ScriptProfiler.h:
        (WebCore::ScriptProfiler::takeHeapSnapshot): Deleted.
        (WebCore::ScriptProfiler::isSampling): Deleted.
        (WebCore::ScriptProfiler::hasHeapProfiler): Deleted.
        * inspector/InspectorAllInOne.cpp:
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::InspectorController):
        * inspector/InspectorHeapProfilerAgent.cpp: Removed.
        * inspector/InspectorHeapProfilerAgent.h: Removed.
        * inspector/InspectorInstrumentation.cpp:
        (WebCore::InspectorInstrumentation::didCommitLoadImpl):
        * inspector/InspectorProfilerAgent.cpp:
        (WebCore::InspectorProfilerAgent::InspectorProfilerAgent):
        (WebCore::InspectorProfilerAgent::getProfileHeaders):
        (WebCore::InspectorProfilerAgent::removeProfile):
        (WebCore::InspectorProfilerAgent::resetState): The CommandLineAPIHost call to
        clear inspected objects should have not been here. It was only needed by the
        HeapProfilerAgent.
        (WebCore::InspectorProfilerAgent::resetFrontendProfiles):
        (WebCore::InspectorProfilerAgent::collectGarbage): Deleted.
        (WebCore::InspectorProfilerAgent::createSnapshotHeader): Deleted.
        (WebCore::InspectorProfilerAgent::isSampling): Deleted.
        (WebCore::InspectorProfilerAgent::hasHeapProfiler): Deleted.
        (WebCore::InspectorProfilerAgent::getHeapSnapshot): Deleted.
        (WebCore::InspectorProfilerAgent::takeHeapSnapshot): Deleted.
        (WebCore::InspectorProfilerAgent::getObjectByHeapObjectId): Deleted.
        (WebCore::InspectorProfilerAgent::getHeapObjectId): Deleted.
        * inspector/InspectorProfilerAgent.h:
        * inspector/InstrumentingAgents.h:
        (WebCore::InstrumentingAgents::inspectorHeapProfilerAgent): Deleted.
        (WebCore::InstrumentingAgents::setInspectorHeapProfilerAgent): Deleted.
        * inspector/WebConsoleAgent.cpp:
        (WebCore::WebConsoleAgent::addInspectedHeapObject): Deleted.
        * inspector/WebConsoleAgent.h:
        * inspector/WorkerInspectorController.cpp:
        (WebCore::WorkerInspectorController::WorkerInspectorController):
        * inspector/protocol/HeapProfiler.json: Removed.
        * inspector/protocol/Profiler.json:

2014-04-01  Zoltan Horvath  <zoltan@webkit.org>

        [CSS Exclusions] Remove exclusions parsing support
        https://bugs.webkit.org/show_bug.cgi?id=131046

        Reviewed by David Hyatt.

        CSS Exclusions specification [1] needs some evolution before the actual implementation happens.
        We have only the parsing code in WebKit for -webkit-wrap-flow and -webkit-wrap-through.
        This patch removes the code from the trunk for now, it doesn't make sense to keep it around.

        [1] http://www.w3.org/TR/css3-exclusions/

        Removed existing parsing tests.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::ComputedStyleExtractor::propertyValue):
        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue):
        (WebCore::isKeywordPropertyID):
        (WebCore::CSSParser::parseValue):
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue): Deleted.
        (WebCore::CSSPrimitiveValue::operator WrapFlow): Deleted.
        (WebCore::CSSPrimitiveValue::operator WrapThrough): Deleted.
        * css/CSSPropertyNames.in:
        * css/CSSValueKeywords.in:
        * css/DeprecatedStyleBuilder.cpp:
        (WebCore::DeprecatedStyleBuilder::DeprecatedStyleBuilder):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::changeRequiresLayout):
        * rendering/style/RenderStyle.h:
        * rendering/style/RenderStyleConstants.h:
        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        (WebCore::StyleRareNonInheritedData::operator==):
        * rendering/style/StyleRareNonInheritedData.h:

2014-04-01  Timothy Hatcher  <timothy@apple.com>

        Remove the rest of the old Canvas inspection support.

        https://bugs.webkit.org/show_bug.cgi?id=131066

        Reviewed by Joseph Pecoraro.

        * CMakeLists.txt: Removed Canvas.json.
        * DerivedSources.make: Ditto.
        * inspector/InjectedScriptCanvasModuleSource.js: Removed.
        * inspector/protocol/Canvas.json: Removed.

2014-04-01  Alexey Proskuryakov  <ap@apple.com>

        Eliminate HTMLFormElement::m_shouldSubmit
        https://bugs.webkit.org/show_bug.cgi?id=131055

        Reviewed by Tim Horton.

        m_shouldSubmit was used for two purposes:
        - as a return value in a function whose return value is ignored by all callers;
        - to make a decision that's local to a function.

        There is no need for it to be an instance variable.

        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::HTMLFormElement):
        (WebCore::HTMLFormElement::prepareForSubmission):
        (WebCore::HTMLFormElement::submit):
        * html/HTMLFormElement.h:

2014-04-01  Benjamin Poulain  <bpoulain@apple.com>

        Remove a couple of useless static strings
        https://bugs.webkit.org/show_bug.cgi?id=131003

        Reviewed by David Kilzer.

        There is zero value in keeping those strings alive.

        * css/StyleProperties.cpp:
        (WebCore::isInitialOrInherit):

2014-04-01  Myles C. Maxfield  <mmaxfield@apple.com>

        svg/text/text-overflow-ellipsis-svgfont-kerning-ligatures.html and svg/css/font-face-crash.html frequently assert in ComplexTextController::offsetForPosition
        https://bugs.webkit.org/show_bug.cgi?id=119747

        Reviewed by Simon Fraser.

        Even though kerning and ligatures currently don't work with the
        simple text path, messing those up is better than creating null
        CTRun and CTLine objects.

        Rather than calling the badly-named renderingContext() function on TextRun objects
        to determine if they are drawn with an SVG font, this patch creates a wrapper function
        with a better name and uses that instead.

        Test: svg/text/svg-font-hittest.html

        * platform/graphics/Font.cpp:
        (WebCore::isDrawnWithSVGFont): Wrapper around renderingContext()
        (WebCore::Font::drawText): Use wrapper function
        (WebCore::Font::drawEmphasisMarks): Use wrapper function
        (WebCore::Font::width): Use wrapper function
        (WebCore::Font::selectionRectForText): Use wrapper function
        (WebCore::Font::offsetForPosition): If we are using an SVG font, use the simple path
        instead of the complex one
        (WebCore::Font::codePath): Use wrapper function
        * platform/graphics/cocoa/FontPlatformDataCocoa.mm:
        (WebCore::FontPlatformData::ctFont):

2014-04-01  Daniel Bates  <dabates@apple.com>

        RenderQuote must destroy remaining text renderer before first letter renderer
        https://bugs.webkit.org/show_bug.cgi?id=78023
        <rdar://problem/10830009>

        Reviewed by Brent Fulgham.

        Merged from Blink (patch by Abhishek Arya):
        https://src.chromium.org/viewvc/blink?view=rev&revision=151270

        Following the fix for <https://bugs.webkit.org/show_bug.cgi?id=114586>, a
        RenderQuote may have child render objects for the first letter of its text
        and everything following the first letter so as to support the CSS first-
        letter property. The latter renderer is responsible for destroying the former
        on destruction. It's sufficient to reverse the destruction of the children of
        RenderQuote to ensure that we destroy the remaining text renderer before we
        destroy the first letter renderer.

        Test: fast/css-generated-content/quote-first-letter-crash.html

        * rendering/RenderQuote.cpp:
        (WebCore::RenderQuote::updateText):

2014-04-01  David Kilzer  <ddkilzer@apple.com>

        Do not allow HTTP refresh headers to refresh to javascript: URLs
        <http://webkit.org/b/119051>
        <rdar://problem/14536453>

        Reviewed by Alexey Proskuryakov.

        Merged from Blink (patch by tsepez@chromium.org):
        https://src.chromium.org/viewvc/blink?revision=153912&view=revision
        http://crbug.com/258151

            This behaviour has been standard in IE since IE7.  This makes us both
            more compatible and less vulnerable to XSS.

        Tests: http/tests/security/no-javascript-location-percent-escaped.html
               http/tests/security/no-javascript-location.html
               http/tests/security/no-javascript-refresh-percent-escaped.php
               http/tests/security/no-javascript-refresh-spaces.php
               http/tests/security/no-javascript-refresh-static-percent-escaped.html
               http/tests/security/no-javascript-refresh-static-spaces.html
               http/tests/security/no-javascript-refresh-static.html
               http/tests/security/no-javascript-refresh.php

        * dom/Document.cpp:
        (WebCore::Document::processHttpEquiv):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::receivedFirstData):
        - Do not fire meta http refresh for a javascript: URL protocol.

2014-04-01  Pratik Solanki  <psolanki@apple.com>

        Unreviewed build fix. Remove duplicate file entries.

        * WebCore.xcodeproj/project.pbxproj:

2014-03-31  Simon Fraser  <simon.fraser@apple.com>

        Enable WEB_TIMING on Mac and iOS
        https://bugs.webkit.org/show_bug.cgi?id=128064

        Reviewed by Sam Weinig, Brent Fulgham.

        Enable WEB_TIMING. Add PerformanceTiming.cpp and JSPerformanceTiming.cpp
        to the project.
        
        * Configurations/FeatureDefines.xcconfig:
        * WebCore.xcodeproj/project.pbxproj:

2014-04-01  James Craig  <jcraig@apple.com>

        AX: AccessibilityRenderObject::ariaLiveRegionAtomic() should default to true if
        roleValue is ApplicationAlertRole || ApplicationStatusRole
        https://bugs.webkit.org/show_bug.cgi?id=130907

        Reviewed by Chris Fleizach.

        Tests: inspector-protocol/dom/getAccessibilityPropertiesForNode_liveRegion.html:
               platform/mac/accessibility/aria-liveregions-attributes.html:

        Updated AccessibilityRenderObject::ariaLiveRegionAtomic() to match ARIA spec.

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::ariaLiveRegionAtomic):

2014-04-01  Zan Dobersek  <zdobersek@igalia.com>

        Unreviewed. Fixing debug builds after r166586.

        * svg/SVGElement.cpp:
        (WebCore::SVGElement::addEventListener): Fix the ASSERT.
        (WebCore::SVGElement::removeEventListener): Ditto.

2014-04-01  Zan Dobersek  <zdobersek@igalia.com>

        Prevent unnecessary copies in compareEqual template
        https://bugs.webkit.org/show_bug.cgi?id=131014

        Reviewed by Antti Koivisto.

        * rendering/style/RenderStyle.h:
        (compareEqual): Casting the second parameter to a non-const, non-reference type
        causes an extra copy of that object. Casting to the const reference type of the
        first parameter avoids that.

2014-04-01  Zan Dobersek  <zdobersek@igalia.com>

        Avoid unnecessary HashSet copies when calling collectInstancesForSVGElement
        https://bugs.webkit.org/show_bug.cgi?id=131020

        Reviewed by Andreas Kling.

        Remove collectInstancesForSVGElement() to avoid HashSet copies when assigning a const
        HashSet reference to a non-const HashSet reference. Instead, range-based for-loops are
        deployed to iterate directly over the const reference to HashSet that's returned by
        SVGElement::instancesForElement(). SVGElement::containingShadowRoot() return value
        is checked to see if the iteration should be performed in the first place, preserving
        the behavior of collectInstancesForSVGElement().

        * svg/SVGElement.cpp:
        (WebCore::SVGElement::addEventListener):
        (WebCore::SVGElement::removeEventListener):
        (WebCore::collectInstancesForSVGElement): Deleted.

2014-04-01  Zan Dobersek  <zdobersek@igalia.com>

        Move the attributes HashMap out of the parseAttributes function
        https://bugs.webkit.org/show_bug.cgi?id=131019

        Reviewed by Andreas Kling.

        * xml/parser/XMLDocumentParserLibxml2.cpp:
        (WebCore::parseAttributes): Avoid copying the HashMap object that's being returned by
        converting it to an xvalue through using std::move() in the return statement.

2014-04-01  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Transition class Image (and its dependencies) from int to float to enable subpixel positioned/sized images.
        https://bugs.webkit.org/show_bug.cgi?id=130643

        Reviewed by Simon Fraser.

        This is in preparation to support subpixel positioned/sized background images. While 1x bitmap images can't take
        subpixel sizing on hidpi resolutions, both generated and hidpi images can.
        This patch does not change Image behavior in general as both position and size are still snapped to integral values.  

        No change in behavior.

        * WebCore.exp.in:
        * css/CSSCrossfadeValue.cpp:
        (WebCore::CSSCrossfadeValue::fixedSize):
        * css/CSSFilterImageValue.cpp:
        (WebCore::CSSFilterImageValue::fixedSize):
        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore::WebGLRenderingContext::drawImageIntoBuffer):
        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::imageSizeForRenderer):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::selectCursor):
        * platform/Cursor.cpp:
        (WebCore::determineHotSpot):
        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::size):
        (WebCore::BitmapImage::currentFrameSize):
        * platform/graphics/BitmapImage.h:
        * platform/graphics/CrossfadeGeneratedImage.cpp:
        (WebCore::CrossfadeGeneratedImage::CrossfadeGeneratedImage):
        (WebCore::drawCrossfadeSubimage):
        (WebCore::CrossfadeGeneratedImage::drawCrossfade):
        * platform/graphics/CrossfadeGeneratedImage.h:
        * platform/graphics/GeneratedImage.h:
        * platform/graphics/Gradient.cpp:
        (WebCore::Gradient::adjustParametersForTiledDrawing):
        * platform/graphics/Gradient.h:
        * platform/graphics/GradientImage.cpp:
        (WebCore::GradientImage::drawPattern):
        * platform/graphics/GradientImage.h:
        * platform/graphics/GraphicsContext.cpp:
        (WebCore::GraphicsContext::createCompatibleBuffer):
        * platform/graphics/GraphicsContext.h:
        * platform/graphics/Image.cpp:
        (WebCore::Image::adjustSourceRectForDownSampling):
        * platform/graphics/Image.h:
        (WebCore::Image::setContainerSize):
        (WebCore::Image::rect):
        (WebCore::Image::width):
        (WebCore::Image::height):
        * platform/graphics/ImageBuffer.cpp:
        (WebCore::ImageBuffer::createCompatibleBuffer):
        * platform/graphics/ImageBuffer.h:
        (WebCore::ImageBuffer::create):
        * platform/graphics/IntPoint.cpp:
        (WebCore::IntPoint::IntPoint):
        * platform/graphics/IntPoint.h:
        * platform/graphics/IntSize.cpp:
        (WebCore::IntSize::IntSize):
        * platform/graphics/IntSize.h:
        * platform/graphics/cairo/ImageBufferCairo.cpp:
        (WebCore::ImageBuffer::ImageBuffer):
        * platform/graphics/cairo/ImageCairo.cpp:
        (WebCore::Image::drawPattern):
        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::ImageBuffer::ImageBuffer):
        * platform/graphics/cg/ImageBufferDataCG.cpp:
        * platform/graphics/cg/PDFDocumentImage.cpp:
        (WebCore::PDFDocumentImage::size):
        (WebCore::PDFDocumentImage::updateCachedImageIfNeeded):
        (WebCore::applyRotationForPainting):
        * platform/graphics/cg/PDFDocumentImage.h:
        * platform/graphics/cg/PatternCG.cpp:
        (WebCore::Pattern::createPlatformPattern):
        * platform/graphics/mac/GraphicsContextMac.mm:
        * platform/graphics/mac/IconMac.mm:
        * platform/graphics/texmap/TextureMapperTiledBackingStore.cpp:
        (WebCore::TextureMapperTiledBackingStore::updateContentsFromImageIfNeeded):
        * platform/graphics/texmap/coordinated/CoordinatedImageBacking.cpp:
        (WebCore::CoordinatedImageBacking::update):
        * platform/graphics/win/ImageCGWin.cpp:
        (WebCore::BitmapImage::getHBITMAPOfSize):
        (WebCore::BitmapImage::drawFrameMatchingSourceSize):
        * platform/graphics/win/ImageCairoWin.cpp:
        (WebCore::BitmapImage::getHBITMAPOfSize):
        (WebCore::BitmapImage::drawFrameMatchingSourceSize):
        * platform/mac/DragImageMac.mm:
        (WebCore::createDragImageFromImage):
        * platform/win/DragImageCGWin.cpp:
        (WebCore::createDragImageFromImage):
        * platform/win/PasteboardWin.cpp:
        (WebCore::Pasteboard::writeImage):
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::imageSizeForError):
        (WebCore::RenderImage::paintReplaced):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::drawPlatformResizerImage):
        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::setContainerSize):
        * svg/graphics/SVGImage.h:
        * svg/graphics/SVGImageCache.cpp:
        (WebCore::SVGImageCache::imageSizeForRenderer):
        * svg/graphics/SVGImageCache.h:
        * svg/graphics/SVGImageForContainer.cpp:
        (WebCore::SVGImageForContainer::size):
        * svg/graphics/SVGImageForContainer.h:
        * svg/graphics/filters/SVGFEImage.cpp:
        (WebCore::FEImage::externalRepresentation):
        * testing/Internals.cpp:
        (WebCore::Internals::getCurrentCursorInfo):

2014-04-01  Ryuan Choi  <ryuan.choi@samsung.com>

        Unreviewed build fix when disabled ACCESSIBILITY

        * accessibility/atk/WebKitAccessibleInterfaceTableCell.cpp:
        Separated macros not to check ATK version when disabled ACCESSIBILITY

2014-04-01  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        [CMake][EFL] Enable CSS JIT
        https://bugs.webkit.org/show_bug.cgi?id=131010

        Reviewed by Benjamin Poulain.

        Add an inclusion path for enabling CSS JIT on EFL and GTK ports.
        This patch only enables it for EFL port.

        * CMakeLists.txt:

2014-04-01  Martin Robinson  <mrobinson@igalia.com>

        [GTK] Readonly attributes installed as readwrite in GObject DOM bindings
        https://bugs.webkit.org/show_bug.cgi?id=130978

        Reviewed by Carlos Garcia Campos.

        Unify how we decide if an attribute is readable or writeable and improve the code.
        This results in some attributes now being marked as read-only which didn't have
        corresponding case statements in the set_property switch statements and also correctly
        installs set_property support for some more POD types.

        * bindings/scripts/CodeGeneratorGObject.pm:
        (IsPropertyReadable): Added this helper to simplify deciding if an attribute is readable.
        (IsPropertyWriteable): Added this helper to simplify deciding if an attribute is writeable. Also
        update the list of types to reflect the full list of types we can generate setters for.
        (GenerateProperty): Use the IsPropertyWriteable helper instead of checking whether the attribute is read-only.
        Also fix generation of the blurb by using $mutableString instead of $mutableStringconst which isn't used.
        (GenerateProperties): Use grep and the new helpers to simplify the code.
        (GetReadableProperties): Deleted.
        (GetWriteableProperties): Deleted.
        * bindings/scripts/test/GObject: Update results

2014-03-31  Ryuan Choi  <ryuan.choi@samsung.com>

        [EFL][WK2] Extract the control of page background out of color_set
        https://bugs.webkit.org/show_bug.cgi?id=127539

        Reviewed by Gyuyoung Kim.

        * platform/graphics/texmap/coordinated/CoordinatedGraphicsScene.cpp:
        Added m_viewBackgroundColor to clear when m_setDrawsBackground is false.
        (WebCore::CoordinatedGraphicsScene::CoordinatedGraphicsScene):
        (WebCore::CoordinatedGraphicsScene::paintToCurrentGLContext):
        (WebCore::CoordinatedGraphicsScene::paintToGraphicsContext):
        * platform/graphics/texmap/coordinated/CoordinatedGraphicsScene.h:
        (WebCore::CoordinatedGraphicsScene::setViewBackgroundColor):
        (WebCore::CoordinatedGraphicsScene::viewBackgroundColor):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::createPrimaryGraphicsLayer):
        Added EFL guard not to set opaque as a default for MainFrameRenderViewLayer.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::ensureRootLayer):
        Added EFL guard to apply page scale on RenderView like IOS.

2014-03-31  Byungseon Shin  <sun.shin@lge.com>

        [WebGL][OpenGLES] Enable MSAA support for WebGL Canvas
        https://bugs.webkit.org/show_bug.cgi?id=130955

        Reviewed by Dean Jackson.

        To avoid aliasing issues when we render content to WebGL canvas,
         we need to implement MSAA support.
        - Imagination OpenGLES GPU Driver already support MSAA, so we
         need a separate code path to enable it.

        * platform/graphics/Extensions3D.h:
        * platform/graphics/opengl/Extensions3DOpenGLCommon.cpp:
        (WebCore::Extensions3DOpenGLCommon::Extensions3DOpenGLCommon):
        * platform/graphics/opengl/Extensions3DOpenGLCommon.h:
        (WebCore::Extensions3DOpenGLCommon::isImagination):
        * platform/graphics/opengl/GraphicsContext3DOpenGLES.cpp:
        (WebCore::GraphicsContext3D::reshapeFBOs):

2014-03-31  Alexey Proskuryakov  <ap@apple.com>

        Crashes in PageConsole::addMessage
        https://bugs.webkit.org/show_bug.cgi?id=130991
        <rdar://problem/14795232>

        Reviewed by Geoffrey Garen.

        Test: http/tests/misc/detached-frame-console.html

        * page/DOMWindow.cpp: (WebCore::DOMWindow::printErrorMessage): Added a null check.
        It's legitimate for this to be called for a window that is not currently displayed
        in a frame.

2014-03-31  Simon Fraser  <simon.fraser@apple.com>

        [UI-side compositing] Proxy animations to the UI process
        https://bugs.webkit.org/show_bug.cgi?id=130946

        Reviewed by Tim Horton.
        
        To proxy CA animations, make PlatformCAAnimation a pure virtual base class
        and subclass for Mac, Windows, and Remote (just like PlatformCALayer).
        
        Add coding support for TimingFunctions.
        
        Do some minor #include tidyup.
        
        Minor refactor in GraphicsLayerCA to share some animations code.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/animation/TimingFunction.h: Add setters need for encode/decode.
        (WebCore::CubicBezierTimingFunction::setValues):
        (WebCore::CubicBezierTimingFunction::setTimingFunctionPreset):
        (WebCore::StepsTimingFunction::create):
        (WebCore::StepsTimingFunction::setNumberOfSteps):
        (WebCore::StepsTimingFunction::setStepAtStart):
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::createPlatformCAAnimation):
        (WebCore::GraphicsLayerCA::animationCanBeAccelerated): Minor refactor so we can share
        code with GraphicsLayerCARemote.
        (WebCore::GraphicsLayerCA::addAnimation):
        (WebCore::GraphicsLayerCA::createBasicAnimation):
        (WebCore::PassRefPtr<PlatformCAAnimation>GraphicsLayerCA::createKeyframeAnimation):
        * platform/graphics/ca/GraphicsLayerCA.h:
        * platform/graphics/ca/PlatformCAAnimation.h:
        (WebCore::PlatformCAAnimation::~PlatformCAAnimation):
        (WebCore::PlatformCAAnimation::isPlatformCAAnimationMac):
        (WebCore::PlatformCAAnimation::isPlatformCAAnimationWin):
        (WebCore::PlatformCAAnimation::isPlatformCAAnimationRemote):
        (WebCore::PlatformCAAnimation::PlatformCAAnimation):
        (WebCore::PlatformCAAnimation::setType):
        * platform/graphics/ca/PlatformCALayer.h:
        * platform/graphics/ca/mac/PlatformCAAnimationMac.h: Added.
        * platform/graphics/ca/mac/PlatformCAAnimationMac.mm:
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayerMac::addAnimationForKey):
        (PlatformCALayerMac::animationForKey):
        * platform/graphics/ca/mac/TileController.mm:
        * platform/graphics/ca/win/PlatformCAAnimationWin.cpp:
        * platform/graphics/ca/win/PlatformCAAnimationWin.h: Added.

2014-03-31  Benjamin Poulain  <benjamin@webkit.org>

        CSS JIT: compile the first-child pseudo class
        https://bugs.webkit.org/show_bug.cgi?id=130954

        Reviewed by Andreas Kling.

        * css/ElementRuleCollector.cpp:
        (WebCore::ElementRuleCollector::collectMatchingRules):
        The compiler use the context's style directly when resolving style. An error introduced
        in the rule collector would cause a crash in the compiled code which would be hard to debug.
        Add an assertion early in the stack to catch errors where it is easier to debug them.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::State::initForStyleResolve):
        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::addPseudoType):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToPreviousAdjacentElement):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToPreviousAdjacent):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateDirectAdjacentTreeWalker):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateIndirectAdjacentTreeWalker):
        Refactor those to be able to reuse the code getting a sibling element preceding the current element.

        (WebCore::SelectorCompiler::SelectorCodeGenerator::jumpIfNotResolvingStyle):
        Extract the code checking the current mode from SelectorCodeGenerator::markParentElementIfResolvingStyle()
        in a separate function. This will be useful for all the pseudo class with marking.

        (WebCore::SelectorCompiler::SelectorCodeGenerator::markParentElementIfResolvingStyle):
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching):
        (WebCore::SelectorCompiler::setFirstChildState):
        This is the slow path for when the first-child pseudo class is on a fragment that is not
        the rightmost.
        The reason to use a slow path is accessing renderStyle() is not trivial and this case isn't not
        as common. We should improve this later.

        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementIsFirstChild):
        This is just implementing the test for first-child plus the tree marking. Nothing fancy,
        this is basically the same thing as SelectorChecker.

        * dom/Element.cpp:
        (WebCore::Element::setChildrenAffectedByFirstChildRules):
        * dom/Element.h:
        C++ fallback to set the flag, to be improved later with the other flags.

        * rendering/style/RenderStyle.h:
        I accidentaly put noninheritedFlagsMemoryOffset() as private in the RenderStyle refactoring.

        Also update the flags accessor to make them easier to work with from the compiler. In particular,
        setFirstChildStateFlags() sets both isUnique and firstChild. Currently the JIT does not need to access
        the value so individual flags are made private.

2014-03-31  Dean Jackson  <dino@apple.com>

        Remove WEB_ANIMATIONS
        https://bugs.webkit.org/show_bug.cgi?id=130989

        Reviewed by Simon Fraser.

        Remove this feature flag until we plan to implement.

        * Configurations/FeatureDefines.xcconfig:

2014-03-31  Simon Fraser  <simon.fraser@apple.com>

        Fix iOS build.

        * page/scrolling/ios/ScrollingTreeScrollingNodeIOS.mm:
        (WebCore::ScrollingTreeScrollingNodeIOS::updateLayersAfterDelegatedScroll):

2014-03-31  Pratik Solanki  <psolanki@apple.com>

        Unreviewed. iOS build fix after r166532. Add missing comma.

        * dom/DocumentMarker.h:

2014-03-31  Brady Eidson  <beidson@apple.com>

        Add variant of phone number parsing that use DocumentMarker in the current selection
        <rdar://problem/16379566> and https://bugs.webkit.org/show_bug.cgi?id=130917

        Reviewed by Darin Adler.

        * dom/DocumentMarker.h:
        (WebCore::DocumentMarker::AllMarkers::AllMarkers): Add a new TelephoneNumber document marker type.

        * editing/Editor.cpp:
        (WebCore::Editor::respondToChangedSelection):
        (WebCore::Editor::scanSelectionForTelephoneNumbers): TextIterate over the selected range looking for numbers.
        (WebCore::Editor::scanRangeForTelephoneNumbers): Scan the given range for a telephone number,
          adding the DocumentMarker to any that are found.
        (WebCore::Editor::clearDataDetectedTelephoneNumbers):
        * editing/Editor.h:

        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::HTMLTreeBuilder::processCharacterBufferForInBody): Only linkify on iOS.

        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paintTelephoneNumberMarker): Placeholder UI while the feature is developed.
        (WebCore::InlineTextBox::paintDocumentMarkers):
        * rendering/InlineTextBox.h:

        * testing/Internals.cpp:
        (WebCore::markerTypesFrom):

2014-03-31  Simon Fraser  <simon.fraser@apple.com>

        [iOS WK2] Hook up scroll events for accelerated overflow:scroll
        https://bugs.webkit.org/show_bug.cgi?id=130976

        Reviewed by Tim Horton.

        When an accelerated overflow:scroll is scrolled in the UI process,
        tell the WebProcess that the scroll happened to update RenderLayer
        state and fire events.
        
        In the WebProcess, RemoteScrollingCoordinator gets a message from the
        UI process and calls AsyncScrollingCoordinator::updateScrollPositionAfterAsyncScroll().
        Fixed that function to handle scrolling nodes other than the root, which
        required storing a map of ScrollingNodeID->RenderLayer* on RenderLayerCompositor,
        accessible through FrameView::scrollableAreaForScrollLayerID().

        * WebCore.exp.in:
        * page/FrameView.cpp:
        (WebCore::FrameView::scrollableAreaForScrollLayerID):
        * page/FrameView.h:
        * page/scrolling/AsyncScrollingCoordinator.cpp:
        (WebCore::AsyncScrollingCoordinator::updateScrollPositionAfterAsyncScroll): Handle
        overflow as well as main frame scrolling nodes.
        * page/scrolling/ScrollingTree.cpp:
        (WebCore::ScrollingTree::viewportChangedViaDelegatedScrolling): Use isScrollingNode().
        (WebCore::ScrollingTree::scrollPositionChangedViaDelegatedScrolling): When an overflow
        scroll node was scrolled externally, we have to update layers in decendant nodes,
        and then call scrollingTreeNodeDidScroll() which tells the ScrollingCoordinator that
        we scrolled.
        * page/scrolling/ScrollingTree.h: Try to reduce confusion between the roles played
        by these various functions, some of which happen in the UI process with UI-side
        compositing.
        * page/scrolling/ScrollingTreeScrollingNode.h:
        * page/scrolling/ios/ScrollingTreeScrollingNodeIOS.h: Need some functions to be
        callable by subclasses.
        * page/scrolling/ios/ScrollingTreeScrollingNodeIOS.mm:
        (WebCore::ScrollingTreeScrollingNodeIOS::updateLayersAfterDelegatedScroll):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateScrollCoordinatedLayer): Add
        scrolling layers to the m_scrollingNodeToLayerMap
        (WebCore::RenderLayerCompositor::detachScrollCoordinatedLayer): Remove
        layer from the m_scrollingNodeToLayerMap.
        (WebCore::RenderLayerCompositor::scrollableAreaForScrollLayerID):
        * rendering/RenderLayerCompositor.h:

2014-03-31  Antti Koivisto  <antti@apple.com>

        Rename TileCache to LegacyTileCache
        https://bugs.webkit.org/show_bug.cgi?id=130986

        Reviewed by Simon Fraser.

        Rename iOS WebKit1 tile cache classes to reflect its status.
        This also frees some good type names.

        TileCache -> LegacyTileCache
        TileGrid -> LegacyTileGrid
        TileGridTile -> LegacyTileGridTile
        etc.

2014-03-31  Tim Horton  <timothy_horton@apple.com>

        Small adjustments to WebCore::IOSurface
        https://bugs.webkit.org/show_bug.cgi?id=130981

        Reviewed by Simon Fraser.

        * WebCore.exp.in:
        Export some more things.

        * platform/graphics/cocoa/IOSurface.h:
        createImage() can't be const because it calls ensurePlatformContext().

        * platform/graphics/cocoa/IOSurface.mm:
        (IOSurface::createImage):
        We should be able to create an image even if the CGContext has been cleared (or never created).

        (IOSurface::isInUse):
        Rename inUse() to isInUse().

        (IOSurface::clearGraphicsContext):
        Add clearGraphicsContext().

2014-03-31  Tim Horton  <timothy_horton@apple.com>

        Allocate IOSurfaces with the same cache mode that CoreAnimation uses
        https://bugs.webkit.org/show_bug.cgi?id=130982

        Reviewed by Simon Fraser.

        * platform/graphics/cocoa/IOSurface.mm:
        (IOSurface::IOSurface):
        CA uses kIOMapWriteCombineCache for IOSurfaces allocated on iOS.

2014-03-31  Ion Rosca  <rosca@adobe.com>

        [CSS Blending] Blend mode property is propagated to multiple GraphicLayers
        https://bugs.webkit.org/show_bug.cgi?id=130337

        Reviewed by Dean Jackson.

        Resets the blend mode for graphicsLayer when it has an ancestorClippingLayer.

        Test: css3/compositing/blend-mode-ancestor-clipping-layer.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateBlendMode):
        (WebCore::RenderLayer::calculateClipRects):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateBlendMode):
        * rendering/RenderLayerBacking.h:

2014-03-31  Ion Rosca  <rosca@adobe.com>

        [CSS Blending] showLayerTree should dump layer's blend mode and isolation properties
        https://bugs.webkit.org/show_bug.cgi?id=130922

        Reviewed by Simon Fraser.

        This change only updates existing tests involving blending. No new test required,
        as there is no new or changed functionality.

        * rendering/RenderLayer.h: adding blendMode() getter.
        * rendering/RenderTreeAsText.cpp:
        (WebCore::write):
        adding blendMode property and layer's isolation status (does layer isolate blending descendants or not?).

2014-03-31  Benjamin Poulain  <benjamin@webkit.org>

        CSS JIT: clean up the functions ending when generating a checker with context
        https://bugs.webkit.org/show_bug.cgi?id=130959

        Reviewed by Andreas Kling.

        This code got refactored over time and now both branches do the exact same action
        on the stack.
        This patch removes the stack split and move the stack cleanup in the common ending
        just before restoring the callee saved registers.

        * cssjit/SelectorCompiler.cpp:
        (WebCore::SelectorCompiler::SelectorCodeGenerator::generateSelectorChecker):

2014-03-31  Beth Dakin  <bdakin@apple.com>

        ThemeMac should use std::array instead of IntSize* for control sizes
        https://bugs.webkit.org/show_bug.cgi?id=130985

        Reviewed by Darin Adler.

        Replace uses of const IntSize* with const std::array<IntSize, 3>
        * platform/mac/ThemeMac.mm:
        (WebCore::sizeFromNSControlSize):
        (WebCore::sizeFromFont):
        (WebCore::controlSizeFromPixelSize):
        (WebCore::setControlSize):
        (WebCore::checkboxSizes):
        (WebCore::radioSizes):
        (WebCore::buttonSizes):
        (WebCore::setUpButtonCell):
        (WebCore::stepperSizes):

2014-03-31  Hans Muller  <hmuller@adobe.com>

        [CSS Shapes] Simplify RasterShape implementation
        https://bugs.webkit.org/show_bug.cgi?id=130916

        Reviewed by Dean Jackson.

        Since only floats can specify shape-outside, the RasterShapeIntervals
        class only needs to track the first and last above threshold pixel column
        (x1 and x2 in the implementation) for each row. Removed code for dealing with
        multiple "runs" per row as well as shape-inside internals.

        No new tests, since functionality was only removed.

        * rendering/shapes/RasterShape.cpp:
        (WebCore::RasterShapeIntervals::computeShapeMarginIntervals):
        (WebCore::RasterShapeIntervals::initializeBounds):
        (WebCore::RasterShapeIntervals::buildBoundsPath):
        (WebCore::RasterShape::getExcludedIntervals):
        * rendering/shapes/RasterShape.h:
        (WebCore::RasterShapeIntervals::RasterShapeIntervals):
        (WebCore::RasterShapeIntervals::intervalAt):
        (WebCore::RasterShape::RasterShape):
        * rendering/shapes/Shape.cpp:
        (WebCore::Shape::createRasterShape):
        * rendering/shapes/ShapeInterval.h:
        (WebCore::ShapeInterval::unite):

2014-03-31  Andreas Kling  <akling@apple.com>

        Always inline toJS() for NodeList.
        <https://webkit.org/b/130974>

        This is a pretty cheesy optimization, but it's a 3% progression on
        Dromaeo/dom-query.html on my MBP.

        Reviewed by Benjamin Poulain.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSNodeListCustom.h: Added.
        (WebCore::toJS):
        * dom/NodeList.idl:

2014-03-31  Benjamin Poulain  <bpoulain@apple.com>

        Attempt to fix the 32bits debug builds

        The additional debug flags in RefCounted cause the structure to have different alignment
        with the 64bits flags.

        * rendering/style/RenderStyle.cpp:

2014-03-29  Simon Fraser  <simon.fraser@apple.com>

        Clarify some scrolling tree terminology
        https://bugs.webkit.org/show_bug.cgi?id=130929

        Reviewed by Tim Horton.

        Attempt to reduce some ambiguity in scrolling tree terminology.
        When async scrolling occurs, there are two tasks we have to perform:
        1. Layers need to be updated to reflect the scroll
        2. WebCore state has to be updated.
        The "updateForViewport" name didn't clearly reflect which of these
        tasks was being performed, so rename it to updateLayersAfterViewportChange()
        to reflect the fact that it only does the first.
        
        Remove the Mac implementation of updateLayersAfterViewportChange(), since
        it was confsued about this, and was never called anyway.

        * WebCore.exp.in:
        * page/scrolling/ScrollingTree.cpp:
        (WebCore::ScrollingTree::viewportChangedViaDelegatedScrolling):
        * page/scrolling/ScrollingTreeScrollingNode.h:
        * page/scrolling/ios/ScrollingTreeScrollingNodeIOS.h:
        * page/scrolling/ios/ScrollingTreeScrollingNodeIOS.mm:
        (WebCore::ScrollingTreeScrollingNodeIOS::updateLayersAfterViewportChange):
        (WebCore::ScrollingTreeScrollingNodeIOS::updateForViewport): Deleted.
        * page/scrolling/mac/ScrollingTreeScrollingNodeMac.h:
        * page/scrolling/mac/ScrollingTreeScrollingNodeMac.mm:
        (WebCore::ScrollingTreeScrollingNodeMac::updateLayersAfterViewportChange):
        (WebCore::ScrollingTreeScrollingNodeMac::updateForViewport): Deleted.

2014-03-31  Tim Horton  <timothy_horton@apple.com>

        [iOS WebKit2] Disable tile cohort retention for now
        https://bugs.webkit.org/show_bug.cgi?id=130926
        <rdar://problem/16465413>

        Reviewed by Simon Fraser.

        * WebCore.exp.in:
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        (WebCore::Settings::setScrollingPerformanceLoggingEnabled):
        (WebCore::Settings::setAggressiveTileRetentionEnabled): Deleted.
        * page/Settings.h:
        (WebCore::Settings::aggressiveTileRetentionEnabled): Deleted.
        * page/Settings.in:
        Use Settings.in for these simple settings.

        * platform/graphics/GraphicsLayerClient.h:
        (WebCore::GraphicsLayerClient::shouldAggressivelyRetainTiles):
        (WebCore::GraphicsLayerClient::shouldTemporarilyRetainTileCohorts):
        * platform/graphics/TiledBacking.h:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::platformCALayerShouldAggressivelyRetainTiles):
        (WebCore::GraphicsLayerCA::platformCALayerShouldTemporarilyRetainTileCohorts):
        * platform/graphics/ca/GraphicsLayerCA.h:
        * platform/graphics/ca/PlatformCALayerClient.h:
        (WebCore::PlatformCALayerClient::platformCALayerShouldAggressivelyRetainTiles):
        (WebCore::PlatformCALayerClient::platformCALayerShouldTemporarilyRetainTileCohorts):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::shouldAggressivelyRetainTiles):
        (WebCore::RenderLayerBacking::shouldTemporarilyRetainTileCohorts):
        * rendering/RenderLayerBacking.h:
        Plumb the two tile-retention settings through to TileController in a pull manner
        instead of a push manner, as there were some cases (especially on iOS) where
        the settings weren't always getting pushed down.

        * platform/graphics/ca/mac/TileController.h:
        * platform/graphics/ca/mac/TileController.mm:
        (WebCore::TileController::TileController):
        (WebCore::TileController::tileRevalidationTimerFired):
        (WebCore::TileController::revalidateTiles):
        (WebCore::TileController::drawTileMapContents):
        Aggressive tile retention wins over temporary retention. If we aren't
        using temporary (cohort) retention, throw away the cohort as soon as it
        is created.

2014-03-31  Beth Dakin  <bdakin@apple.com>

        Radio buttons and checkboxes should share code
        https://bugs.webkit.org/show_bug.cgi?id=130915

        Reviewed by Sam Weinig.

        Radio buttons and checkboxes now share a lot of code. The common term for both is 
        toggle buttons.

        Move these radio-sizing functions up in the file to be next to the checkbox sizing 
        functions.
        * platform/mac/ThemeMac.mm:
        (WebCore::radioSizes):
        (WebCore::radioMargins):
        (WebCore::radioSize):

        Configures a radio button or a checkbox.
        (WebCore::configureToggleButton):

        Creates a radio button or a checkbox.
        (WebCore::createToggleButtonCell):

        Still have a shared cell for each.
        (WebCore::sharedRadioCell):
        (WebCore::sharedCheckboxCell):

        Does the work of the old paintRadio() and paintCheckbox().
        (WebCore::paintToggleButton):

        Use sharedRadioCell() here.
        (WebCore::ThemeMac::inflateControlPaintRect):

        Call paintToggleButton() for radio buttons and checkboxes.
        (WebCore::ThemeMac::paint):

        All gone.
        (WebCore::configureCheckbox): Deleted.
        (WebCore::createCheckboxCell): Deleted.
        (WebCore::paintCheckbox): Deleted.
        (WebCore::radio): Deleted.
        (WebCore::paintRadio): Deleted.

2014-03-31  Samuel White  <samuel_white@apple.com>

        AX: Need ability to get line range for text marker.
        https://bugs.webkit.org/show_bug.cgi?id=130906

        Reviewed by Chris Fleizach.

        Added ability to get line range from any marker on that line. This matches the functionality of existing
        attributes such as AXParagraphTextMarkerRangeForTextMarker and AXSentenceTextMarkerRangeForTextMarker.

        Test: platform/mac/accessibility/line-range-for-text-marker.html

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::visiblePositionRangeForRange):
        (WebCore::AccessibilityObject::lineRangeForPosition):
        * accessibility/AccessibilityObject.h:
        * accessibility/mac/WebAccessibilityObjectWrapperMac.mm:
        (-[WebAccessibilityObjectWrapper accessibilityParameterizedAttributeNames]):
        (-[WebAccessibilityObjectWrapper accessibilityAttributeValue:forParameter:]):

2014-03-31  Anders Carlsson  <andersca@apple.com>

        Fix iOS build.

        * page/ChromeClient.h:
        (WebCore::ChromeClient::updateViewportConstrainedLayers):

2014-03-31  Jer Noble  <jer.noble@apple.com>

        [MSE][Mac] Support lease-renewal.
        https://bugs.webkit.org/show_bug.cgi?id=130919

        Reviewed by Eric Carlson.

        Trigger a new key request when receiving an update message containting "renew".

        * platform/graphics/avfoundation/objc/CDMSessionMediaSourceAVFObjC.mm:
        (WebCore::CDMSessionMediaSourceAVFObjC::generateKeyRequest): Drive-by fix; generate a UTF-8
            based array.
        (WebCore::CDMSessionMediaSourceAVFObjC::update):

2014-03-31  Alexey Proskuryakov  <ap@apple.com>

        Remove special handling of soft hyphens in search code
        https://bugs.webkit.org/show_bug.cgi?id=130940

        Reviewed by Anders Carlsson.

        ICU knows to ignore soft hyphens, so we don't need to replace them before searching.

        Covered by existing tests.

        * editing/TextIterator.cpp:
        (WebCore::foldQuoteMark):
        (WebCore::foldQuoteMarks):
        (WebCore::SearchBuffer::SearchBuffer):
        (WebCore::SearchBuffer::append):
        (WebCore::foldQuoteMarkOrSoftHyphen): Deleted.
        (WebCore::foldQuoteMarksAndSoftHyphens): Deleted.

2014-03-31  Alex Christensen  <achristensen@webkit.org>

        Preparation for using Soup on Windows.
        https://bugs.webkit.org/show_bug.cgi?id=130615

        Reviewed by Carlos Garcia Campos.

        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        Added Soup source files in WinCairo build.
        * loader/soup/CachedRawResourceSoup.cpp:
        * loader/soup/SubresourceLoaderSoup.cpp:
        * platform/soup/SharedBufferSoup.cpp:
        * platform/soup/URLSoup.cpp:
        * platform/network/NetworkStorageSessionStub.cpp:
        Only build if USE(SOUP) to prevent building when USE(CURL) is true.
        * platform/network/soup/ResourceHandleSoup.cpp:
        Only include unistd.h in non-Visual Studio builds.
        This would normally be done with a HAVE_UNISTD_H macro when compiling glib and Soup,
        but that would need to be left undefined for Visual Studio.

2014-03-31  Zan Dobersek  <zdobersek@igalia.com>

        Unreviewed. Addressing reviewing comments for r166491 that I forgot
        to address before landing.

        * html/FormController.cpp:
        (WebCore::SavedFormState::deserialize): No need to move the std::unique_ptr
        object on the way out.
        (WebCore::FormController::createSavedFormStateMap): FormKeyGenerator can be
        allocated on the stack.
        (WebCore::FormController::formStatesFromStateVector): Use auto.

2014-03-20  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Use GMainLoopSource for idle and timeout sources in WebCore
        https://bugs.webkit.org/show_bug.cgi?id=130078

        Reviewed by Philippe Normand.

        * platform/audio/gstreamer/AudioFileReaderGStreamer.cpp:
        * platform/graphics/gstreamer/InbandTextTrackPrivateGStreamer.cpp:
        * platform/graphics/gstreamer/InbandTextTrackPrivateGStreamer.h:
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h:
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.cpp:
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.h:
        * platform/graphics/gstreamer/TrackPrivateBaseGStreamer.cpp:
        * platform/graphics/gstreamer/TrackPrivateBaseGStreamer.h:
        * platform/graphics/gstreamer/VideoSinkGStreamer.cpp:
        * platform/graphics/gstreamer/WebKitMediaSourceGStreamer.cpp:
        * platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp:
        * platform/gtk/GtkDragAndDropHelper.cpp:
        * platform/gtk/SharedTimerGtk.cpp:

2014-03-31  Andrei Bucur  <abucur@adobe.com>

        Wrong layout while animating content in regions
        https://bugs.webkit.org/show_bug.cgi?id=125086

        Reviewed by David Hyatt.

        The region to layer and regions to layer mappings should be cleared when the region chain changes.

        Test: fast/regions/layers/region-removed-during-animation.html

        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::invalidateRegions): Clear the two maps and flag them for recomputation.
        (WebCore::RenderFlowThread::cachedRegionForCompositedLayer): Assert that the returned region exists.

2014-03-31  Dániel Bátyai  <dbatyai.u-szeged@partner.samsung.com>

        Remove hostThisRegister() and hostThisValue()
        https://bugs.webkit.org/show_bug.cgi?id=130895

        Reviewed by Geoffrey Garen.

        Removed hostThisRegister() and hostThisValue() and instead use thisArgumentOffset() and thisValue() respectively.

        No new tests, no behavior changes.

        * bindings/js/JSNavigatorCustom.cpp:
        (WebCore::JSNavigator::webkitGetUserMedia):
        * bindings/js/JSPluginElementFunctions.cpp:
        (WebCore::callPlugin):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):
        * bindings/scripts/test/JS/JSFloat64Array.cpp:
        (WebCore::jsFloat64ArrayPrototypeFunctionFoo):
        (WebCore::jsFloat64ArrayPrototypeFunctionSet):
        * bindings/scripts/test/JS/JSTestActiveDOMObject.cpp:
        (WebCore::jsTestActiveDOMObjectPrototypeFunctionExcitingFunction):
        (WebCore::jsTestActiveDOMObjectPrototypeFunctionPostMessage):
        * bindings/scripts/test/JS/JSTestCustomNamedGetter.cpp:
        (WebCore::jsTestCustomNamedGetterPrototypeFunctionAnotherFunction):
        * bindings/scripts/test/JS/JSTestEventTarget.cpp:
        (WebCore::jsTestEventTargetPrototypeFunctionItem):
        (WebCore::jsTestEventTargetPrototypeFunctionAddEventListener):
        (WebCore::jsTestEventTargetPrototypeFunctionRemoveEventListener):
        (WebCore::jsTestEventTargetPrototypeFunctionDispatchEvent):
        * bindings/scripts/test/JS/JSTestInterface.cpp:
        (WebCore::jsTestInterfacePrototypeFunctionImplementsMethod1):
        (WebCore::jsTestInterfacePrototypeFunctionImplementsMethod2):
        (WebCore::jsTestInterfacePrototypeFunctionImplementsMethod3):
        (WebCore::jsTestInterfacePrototypeFunctionSupplementalMethod1):
        (WebCore::jsTestInterfacePrototypeFunctionSupplementalMethod2):
        (WebCore::jsTestInterfacePrototypeFunctionSupplementalMethod3):
        * bindings/scripts/test/JS/JSTestMediaQueryListListener.cpp:
        (WebCore::jsTestMediaQueryListListenerPrototypeFunctionMethod):
        * bindings/scripts/test/JS/JSTestObj.cpp:
        (WebCore::jsTestObjPrototypeFunctionVoidMethod):
        (WebCore::jsTestObjPrototypeFunctionVoidMethodWithArgs):
        (WebCore::jsTestObjPrototypeFunctionByteMethod):
        (WebCore::jsTestObjPrototypeFunctionByteMethodWithArgs):
        (WebCore::jsTestObjPrototypeFunctionOctetMethod):
        (WebCore::jsTestObjPrototypeFunctionOctetMethodWithArgs):
        (WebCore::jsTestObjPrototypeFunctionLongMethod):
        (WebCore::jsTestObjPrototypeFunctionLongMethodWithArgs):
        (WebCore::jsTestObjPrototypeFunctionObjMethod):
        (WebCore::jsTestObjPrototypeFunctionObjMethodWithArgs):
        (WebCore::jsTestObjPrototypeFunctionMethodWithSequenceArg):
        (WebCore::jsTestObjPrototypeFunctionMethodReturningSequence):
        (WebCore::jsTestObjPrototypeFunctionMethodWithEnumArg):
        (WebCore::jsTestObjPrototypeFunctionMethodThatRequiresAllArgsAndThrows):
        (WebCore::jsTestObjPrototypeFunctionSerializedValue):
        (WebCore::jsTestObjPrototypeFunctionOptionsObject):
        (WebCore::jsTestObjPrototypeFunctionMethodWithException):
        (WebCore::jsTestObjPrototypeFunctionCustomMethod):
        (WebCore::jsTestObjPrototypeFunctionCustomMethodWithArgs):
        (WebCore::jsTestObjPrototypeFunctionAddEventListener):
        (WebCore::jsTestObjPrototypeFunctionRemoveEventListener):
        (WebCore::jsTestObjPrototypeFunctionWithScriptStateVoid):
        (WebCore::jsTestObjPrototypeFunctionWithScriptStateObj):
        (WebCore::jsTestObjPrototypeFunctionWithScriptStateVoidException):
        (WebCore::jsTestObjPrototypeFunctionWithScriptStateObjException):
        (WebCore::jsTestObjPrototypeFunctionWithScriptExecutionContext):
        (WebCore::jsTestObjPrototypeFunctionWithScriptExecutionContextAndScriptState):
        (WebCore::jsTestObjPrototypeFunctionWithScriptExecutionContextAndScriptStateObjException):
        (WebCore::jsTestObjPrototypeFunctionWithScriptExecutionContextAndScriptStateWithSpaces):
        (WebCore::jsTestObjPrototypeFunctionWithScriptArgumentsAndCallStack):
        (WebCore::jsTestObjPrototypeFunctionMethodWithOptionalArg):
        (WebCore::jsTestObjPrototypeFunctionMethodWithNonOptionalArgAndOptionalArg):
        (WebCore::jsTestObjPrototypeFunctionMethodWithNonOptionalArgAndTwoOptionalArgs):
        (WebCore::jsTestObjPrototypeFunctionMethodWithOptionalString):
        (WebCore::jsTestObjPrototypeFunctionMethodWithOptionalStringIsUndefined):
        (WebCore::jsTestObjPrototypeFunctionMethodWithOptionalStringIsNullString):
        (WebCore::jsTestObjPrototypeFunctionMethodWithCallbackArg):
        (WebCore::jsTestObjPrototypeFunctionMethodWithNonCallbackArgAndCallbackArg):
        (WebCore::jsTestObjPrototypeFunctionMethodWithCallbackAndOptionalArg):
        (WebCore::jsTestObjPrototypeFunctionConditionalMethod1):
        (WebCore::jsTestObjPrototypeFunctionConditionalMethod2):
        (WebCore::jsTestObjPrototypeFunctionConditionalMethod3):
        (WebCore::jsTestObjPrototypeFunctionOverloadedMethod1):
        (WebCore::jsTestObjPrototypeFunctionOverloadedMethod2):
        (WebCore::jsTestObjPrototypeFunctionOverloadedMethod3):
        (WebCore::jsTestObjPrototypeFunctionOverloadedMethod4):
        (WebCore::jsTestObjPrototypeFunctionOverloadedMethod5):
        (WebCore::jsTestObjPrototypeFunctionOverloadedMethod6):
        (WebCore::jsTestObjPrototypeFunctionOverloadedMethod7):
        (WebCore::jsTestObjPrototypeFunctionOverloadedMethod8):
        (WebCore::jsTestObjPrototypeFunctionOverloadedMethod9):
        (WebCore::jsTestObjPrototypeFunctionOverloadedMethod10):
        (WebCore::jsTestObjPrototypeFunctionOverloadedMethod11):
        (WebCore::jsTestObjPrototypeFunctionClassMethodWithClamp):
        (WebCore::jsTestObjPrototypeFunctionMethodWithUnsignedLongSequence):
        (WebCore::jsTestObjPrototypeFunctionStringArrayFunction):
        (WebCore::jsTestObjPrototypeFunctionDomStringListFunction):
        (WebCore::jsTestObjPrototypeFunctionGetSVGDocument):
        (WebCore::jsTestObjPrototypeFunctionConvert1):
        (WebCore::jsTestObjPrototypeFunctionConvert2):
        (WebCore::jsTestObjPrototypeFunctionConvert4):
        (WebCore::jsTestObjPrototypeFunctionConvert5):
        (WebCore::jsTestObjPrototypeFunctionMutablePointFunction):
        (WebCore::jsTestObjPrototypeFunctionImmutablePointFunction):
        (WebCore::jsTestObjPrototypeFunctionOrange):
        (WebCore::jsTestObjPrototypeFunctionStrictFunction):
        (WebCore::jsTestObjPrototypeFunctionStrictFunctionWithSequence):
        (WebCore::jsTestObjPrototypeFunctionStrictFunctionWithArray):
        (WebCore::jsTestObjPrototypeFunctionVariadicStringMethod):
        (WebCore::jsTestObjPrototypeFunctionVariadicDoubleMethod):
        (WebCore::jsTestObjPrototypeFunctionVariadicNodeMethod):
        (WebCore::jsTestObjPrototypeFunctionAny):
        * bindings/scripts/test/JS/JSTestTypedefs.cpp:
        (WebCore::jsTestTypedefsPrototypeFunctionFunc):
        (WebCore::jsTestTypedefsPrototypeFunctionSetShadow):
        (WebCore::jsTestTypedefsPrototypeFunctionMethodWithSequenceArg):
        (WebCore::jsTestTypedefsPrototypeFunctionNullableArrayArg):
        (WebCore::jsTestTypedefsPrototypeFunctionFuncWithClamp):
        (WebCore::jsTestTypedefsPrototypeFunctionImmutablePointFunction):
        (WebCore::jsTestTypedefsPrototypeFunctionStringArrayFunction):
        (WebCore::jsTestTypedefsPrototypeFunctionStringArrayFunction2):
        (WebCore::jsTestTypedefsPrototypeFunctionCallWithSequenceThatRequiresInclude):
        (WebCore::jsTestTypedefsPrototypeFunctionMethodWithException):
        * bridge/objc/objc_runtime.mm:
        (JSC::Bindings::callObjCFallbackObject):
        * bridge/runtime_method.cpp:
        (JSC::callRuntimeMethod):

2014-03-31  Zan Dobersek  <zdobersek@igalia.com>

        Move the rest of Source/WebCore/html/ code to std::unique_ptr
        https://bugs.webkit.org/show_bug.cgi?id=129669

        Reviewed by Anders Carlsson.

        Replace the remaining uses of OwnPtr, PassOwnPtr under Source/WebCore/html/ with std::unique_ptr.

        * html/FormController.cpp:
        (WebCore::SavedFormState::SavedFormState):
        (WebCore::SavedFormState::deserialize):
        (WebCore::FormController::createSavedFormStateMap):
        (WebCore::FormController::formElementsState):
        (WebCore::FormController::takeStateForFormElement):
        (WebCore::FormController::formStatesFromStateVector):
        * html/FormController.h:
        * html/HTMLAreaElement.cpp:
        (WebCore::HTMLAreaElement::mapMouseEvent):
        * html/HTMLAreaElement.h:
        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::setSurfaceSize):
        (WebCore::HTMLCanvasElement::createImageBuffer):
        * html/HTMLCanvasElement.h:
        * html/HTMLCollection.h:
        * html/HTMLEmbedElement.cpp:
        (WebCore::HTMLEmbedElement::parseAttribute):
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::updateVisibleValidationMessage):
        * html/HTMLFormControlElement.h:
        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::addToPastNamesMap):
        * html/HTMLFormElement.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::imageLoader):
        (WebCore::HTMLInputElement::resetListAttributeTargetObserver):
        * html/HTMLInputElement.h:
        (WebCore::HTMLInputElement::hasImageLoader):
        * html/HTMLObjectElement.cpp:
        (WebCore::HTMLObjectElement::parseAttribute):
        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::startLoadingImage):
        * html/HTMLPlugInImageElement.h:
        * html/HTMLVideoElement.cpp:
        (WebCore::HTMLVideoElement::didAttachRenderers):
        (WebCore::HTMLVideoElement::parseAttribute):
        * html/HTMLVideoElement.h:
        * html/ValidationMessage.cpp:
        (WebCore::ValidationMessage::ValidationMessage):
        (WebCore::ValidationMessage::setMessage):
        (WebCore::ValidationMessage::setMessageDOMAndStartTimer):
        (WebCore::ValidationMessage::requestToHideMessage):
        * html/ValidationMessage.h:

2014-03-31  Maurice van der Pot  <griffon26@kfk4ever.com>

        Fix mixed use of booleans in JPEGImageDecoder.cpp
        https://bugs.webkit.org/show_bug.cgi?id=122412

        Reviewed by Darin Adler.

        Trivial fix for compilation error; no new tests.

        * platform/image-decoders/jpeg/JPEGImageDecoder.cpp:
        (WebCore::JPEGImageReader::decode):
        (WebCore::fill_input_buffer):
        Use TRUE/FALSE defined by libjpeg for libjpeg booleans

2014-03-23  Zan Dobersek  <zdobersek@igalia.com>

        Move Source/WebCore/rendering/ code to std::unique_ptr
        https://bugs.webkit.org/show_bug.cgi?id=129664

        Reviewed by Anders Carlsson.

        Replace uses of OwnPtr and PassOwnPtr in code under Source/WebCore/rendering/ with std::unique_ptr.

        * platform/graphics/FloatPolygon.cpp:
        (WebCore::FloatPolygon::FloatPolygon):
        * platform/graphics/FloatPolygon.h:
        * rendering/ClipPathOperation.h:
        * rendering/FlowThreadController.cpp:
        (WebCore::FlowThreadController::ensureRenderFlowThreadWithName):
        * rendering/FlowThreadController.h:
        * rendering/HitTestLocation.h:
        * rendering/HitTestResult.cpp:
        (WebCore::HitTestResult::HitTestResult):
        (WebCore::HitTestResult::operator=):
        (WebCore::HitTestResult::rectBasedTestResult):
        (WebCore::HitTestResult::mutableRectBasedTestResult):
        * rendering/HitTestResult.h:
        * rendering/HitTestingTransformState.cpp:
        * rendering/ImageQualityController.h:
        * rendering/RenderBlock.cpp:
        (WebCore::removeBlockFromDescendantAndContainerMaps):
        (WebCore::RenderBlock::finishDelayUpdateScrollInfo):
        (WebCore::RenderBlock::addContinuationWithOutline):
        (WebCore::RenderBlock::paintContinuationOutlines):
        (WebCore::RenderBlock::insertIntoTrackedRendererMaps):
        (WebCore::RenderBlock::removeFromTrackedRendererMaps):
        (WebCore::RenderBlock::setComputedColumnCountAndWidth):
        * rendering/RenderBlock.h:
        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::createFloatingObjects):
        * rendering/RenderBlockFlow.h:
        * rendering/RenderBoxRegionInfo.h:
        * rendering/RenderButton.cpp:
        (WebCore::RenderButton::styleDidChange):
        * rendering/RenderButton.h:
        * rendering/RenderCounter.cpp:
        (WebCore::makeCounterNode):
        * rendering/RenderFlowThread.cpp:
        (WebCore::RenderFlowThread::updateAllLayerToRegionMappings):
        (WebCore::RenderFlowThread::logicalWidthChangedInRegionsForBlock):
        * rendering/RenderFlowThread.h:
        * rendering/RenderGeometryMap.cpp:
        (WebCore::RenderGeometryMap::push):
        (WebCore::RenderGeometryMap::pushView):
        * rendering/RenderGeometryMap.h:
        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::GridIterator::nextEmptyGridArea):
        (WebCore::RenderGrid::placeItemsOnGrid):
        (WebCore::RenderGrid::populateExplicitGridAndOrderIterator):
        (WebCore::RenderGrid::placeSpecifiedMajorAxisItemsOnGrid):
        (WebCore::RenderGrid::placeAutoMajorAxisItemOnGrid):
        (WebCore::RenderGrid::resolveGridPositionsFromStyle):
        (WebCore::RenderGrid::resolveGridPositionAgainstOppositePosition):
        (WebCore::RenderGrid::resolveNamedGridLinePositionAgainstOppositePosition):
        (WebCore::RenderGrid::resolveRowStartColumnStartNamedGridLinePositionAgainstOppositePosition):
        (WebCore::RenderGrid::resolveRowEndColumnEndNamedGridLinePositionAgainstOppositePosition):
        * rendering/RenderGrid.h:
        * rendering/RenderImageResource.h:
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateDescendantsAreContiguousInStackingOrder):
        (WebCore::RenderLayer::updateTransform):
        (WebCore::RenderLayer::setupFilters):
        (WebCore::RenderLayer::paintLayerContents):
        (WebCore::RenderLayer::paintChildLayerIntoColumns):
        (WebCore::RenderLayer::hitTestChildLayerColumns):
        (WebCore::RenderLayer::updateClipRects):
        (WebCore::RenderLayer::calculateClipRects):
        * rendering/RenderLayer.h:
        (WebCore::RenderLayer::clearZOrderLists):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::notifyFlushBeforeDisplayRefresh):
        (WebCore::RenderLayerCompositor::registerAllViewportConstrainedLayers):
        * rendering/RenderLayerCompositor.h:
        * rendering/RenderLayerFilterInfo.cpp:
        (WebCore::RenderLayer::FilterInfo::map):
        (WebCore::RenderLayer::FilterInfo::get):
        * rendering/RenderLayerFilterInfo.h:
        * rendering/RenderRegion.cpp:
        (WebCore::RenderRegion::setRenderBoxRegionInfo):
        (WebCore::RenderRegion::takeRenderBoxRegionInfo):
        * rendering/RenderRegion.h:
        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::styleDidChange):
        * rendering/RenderTable.h:
        * rendering/RenderView.cpp:
        (WebCore::RenderView::selectionBounds):
        (WebCore::RenderView::setSelection):
        (WebCore::RenderView::compositor):
        (WebCore::RenderView::flowThreadController):
        (WebCore::RenderView::imageQualityController):
        * rendering/RenderView.h:
        * rendering/RootInlineBox.h:
        (WebCore::RootInlineBox::appendFloat):
        * rendering/TextAutosizer.h:
        * rendering/shapes/PolygonShape.cpp:
        (WebCore::computeShapePaddingBounds):
        (WebCore::computeShapeMarginBounds):
        * rendering/shapes/PolygonShape.h:
        (WebCore::PolygonShape::PolygonShape):
        * rendering/shapes/RasterShape.cpp:
        (WebCore::RasterShapeIntervals::computeShapeMarginIntervals):
        * rendering/shapes/RasterShape.h:
        (WebCore::RasterShape::RasterShape):
        * rendering/shapes/Shape.cpp:
        (WebCore::createInsetShape):
        (WebCore::createRectangleShape):
        (WebCore::createCircleShape):
        (WebCore::createEllipseShape):
        (WebCore::createPolygonShape):
        (WebCore::Shape::createShape):
        (WebCore::Shape::createRasterShape):
        (WebCore::Shape::createLayoutBoxShape):
        * rendering/shapes/Shape.h:
        * rendering/shapes/ShapeInfo.h:
        (WebCore::ShapeInfo::markShapeAsDirty):
        (WebCore::ShapeInfo::isShapeDirty):
        * rendering/shapes/ShapeInsideInfo.h:
        * rendering/style/ContentData.h:
        * rendering/style/CounterDirectives.cpp:
        (WebCore::clone):
        * rendering/style/CounterDirectives.h:
        * rendering/style/GridCoordinate.h:
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::addCachedPseudoStyle):
        (WebCore::RenderStyle::accessCounterDirectives):
        (WebCore::RenderStyle::accessAnimations):
        (WebCore::RenderStyle::accessTransitions):
        * rendering/style/RenderStyle.h:
        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        * rendering/style/StyleRareNonInheritedData.h:
        * rendering/svg/RenderSVGResourceGradient.cpp:
        (WebCore::RenderSVGResourceGradient::applyResource):
        * rendering/svg/RenderSVGResourceGradient.h:
        * rendering/svg/RenderSVGResourcePattern.cpp:
        (WebCore::RenderSVGResourcePattern::buildPattern):
        * rendering/svg/RenderSVGResourcePattern.h:
        * rendering/svg/RenderSVGShape.cpp:
        (WebCore::RenderSVGShape::updateShapeFromElement):
        * rendering/svg/RenderSVGShape.h:
        * rendering/svg/SVGResources.cpp:
        (WebCore::SVGResources::setClipper):
        (WebCore::SVGResources::setFilter):
        (WebCore::SVGResources::setMarkerStart):
        (WebCore::SVGResources::setMarkerMid):
        (WebCore::SVGResources::setMarkerEnd):
        (WebCore::SVGResources::setMasker):
        (WebCore::SVGResources::setFill):
        (WebCore::SVGResources::setStroke):
        * rendering/svg/SVGResources.h:
        * rendering/svg/SVGResourcesCache.cpp:
        (WebCore::SVGResourcesCache::addResourcesFromRenderer):
        (WebCore::SVGResourcesCache::removeResourcesFromRenderer):
        * rendering/svg/SVGResourcesCache.h:
        * rendering/svg/SVGTextMetricsBuilder.cpp:
        (WebCore::SVGTextMetricsBuilder::initializeMeasurementWithTextRenderer):
        * rendering/svg/SVGTextMetricsBuilder.h:

2014-03-28  Sergio Villar Senin  <svillar@igalia.com>

        Replace DEPRECATED_DEFINE_STATIC_LOCAL by static NeverDestroyed<T> in loader
        https://bugs.webkit.org/show_bug.cgi?id=130893

        Reviewed by Darin Adler.

        * loader/ImageLoader.cpp:
        (WebCore::beforeLoadEventSender):
        (WebCore::loadEventSender):
        (WebCore::errorEventSender):
        * loader/appcache/ApplicationCacheStorage.cpp:
        (WebCore::cacheStorage):
        * loader/appcache/ApplicationCacheStorage.h:
        * loader/archive/ArchiveFactory.cpp:
        (WebCore::archiveMIMETypes):
        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::brokenImage):
        * loader/cache/CachedRawResource.cpp:
        (WebCore::shouldIgnoreHeaderForCacheReuse):
        * loader/cache/MemoryCache.cpp:
        (WebCore::dummyCachedImageClient):

2014-03-28  Sergio Villar Senin  <svillar@igalia.com>

        Replace DEPRECATED_DEFINE_STATIC_LOCAL by static NeverDestroyed<T> in css
        https://bugs.webkit.org/show_bug.cgi?id=130409

        Reviewed by Darin Adler.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::logUnimplementedPropertyID):
        * css/CSSDefaultStyleSheets.cpp:
        (WebCore::screenEval):
        (WebCore::printEval):
        * css/CSSParser.cpp:
        (WebCore::strictCSSParserContext):
        * css/CSSPrimitiveValue.cpp:
        (WebCore::cssTextCache):
        * css/CSSProperty.cpp:
        (WebCore::borderDirections):
        * css/CSSStyleRule.cpp:
        (WebCore::selectorTextCache):
        * css/CSSValuePool.cpp:
        (WebCore::cssValuePool):
        * css/CSSValuePool.h:
        * css/DeprecatedStyleBuilder.cpp:
        (WebCore::ApplyPropertyPageSize::getPageSizeFromName):
        (WebCore::DeprecatedStyleBuilder::sharedStyleBuilder):
        * css/DeprecatedStyleBuilder.h:

2014-03-30  Xabier Rodriguez Calvar  <calvaris@igalia.com>

        [GTK] [TextureMapper] Weird brightness with some videos with acceletared compositing
        https://bugs.webkit.org/show_bug.cgi?id=130665

        Reviewed by Martin Robinson.

        When we uploaded a video texture to the mapper we were not
        considering that some videos could be decoded into a format
        without alpha component. Now we check if the video has alpha and
        if it does not, we remove the alpha flag when retrieving the
        texture from the pool. For this, the method to get the texture
        from the pool was modified to receive the flags, that is mapped to
        have alpha by default in order not to break any other existing
        code.

        Though we have a problem with AC in WTR and that makes it
        currently not testable, no new tests are needed because once this
        is fixed the current test set suffices to detect a possible
        regression in this.

        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.cpp:
        (WebCore::MediaPlayerPrivateGStreamerBase::updateTexture): Check
        the video format and decide if the texture shall be pulled with
        alpha support or not.
        * platform/graphics/texmap/TextureMapper.cpp:
        (WebCore::TextureMapper::acquireTextureFromPool): Use the flags
        when resetting the texture.
        * platform/graphics/texmap/TextureMapper.h:
        (WebCore::BitmapTexture::Flag::None): Added with 0x00.
        (WebCore::TextureMapper::acquireTextureFromPool): Added flag
        parameter to set up the texture with the default for including
        alpha channel.

2014-03-30  Jinwoo Song  <jinwoo7.song@samsung.com>

        Adopt range-based for loops to TextCheckerEnchant
        https://bugs.webkit.org/show_bug.cgi?id=130714

        Reviewed by Darin Adler.

        * platform/text/enchant/TextCheckerEnchant.cpp:
        (WebCore::TextCheckerEnchant::ignoreWord):
        (WebCore::TextCheckerEnchant::learnWord):
        (WebCore::TextCheckerEnchant::checkSpellingOfWord):
        (WebCore::TextCheckerEnchant::getGuessesForWord):
        (WebCore::TextCheckerEnchant::updateSpellCheckingLanguages):
        (WebCore::TextCheckerEnchant::loadedSpellCheckingLanguages):
        (WebCore::TextCheckerEnchant::availableSpellCheckingLanguages):
        (WebCore::TextCheckerEnchant::freeEnchantBrokerDictionaries):

2014-03-30  Benjamin Poulain  <benjamin@webkit.org>

        Second attempt to fix 32bits build after r166465

        * rendering/style/RenderStyle.h:
        The compiler probably complain about the return value, that makes more sense.

2014-03-30  Benjamin Poulain  <benjamin@webkit.org>

        Attempt to fix 32bits build after r166465

        * rendering/style/RenderStyle.h:

2014-03-30  Benjamin Poulain  <benjamin@webkit.org>

        Make RenderStyle's non inherited flags more JSC friendly
        https://bugs.webkit.org/show_bug.cgi?id=130939

        Reviewed by Andreas Kling.

        Make RenderStyle::NonInheritedFlags accessible to the JIT:
        -Make the struct public to give access to the offset.
        -Move away from a bit field to static offsets we can use
         with the MacroAssembler.
        -Reorder the field to simplify bit access of the flags we need.

        * css/DeprecatedStyleBuilder.cpp:
        (WebCore::ApplyPropertyVerticalAlign::createHandler):
        (WebCore::ApplyPropertyDisplay::applyInitialValue):
        (WebCore::DeprecatedStyleBuilder::DeprecatedStyleBuilder):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::adjustRenderStyle):
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::RenderStyle):
        (WebCore::RenderStyle::copyNonInheritedFrom):
        (WebCore::RenderStyle::hashForTextAutosizing):
        (WebCore::RenderStyle::equalForTextAutosizing):
        (WebCore::RenderStyle::changeRequiresLayout):
        * rendering/style/RenderStyle.h:
        (WebCore::RenderStyle::hasAnyPublicPseudoStyles):
        (WebCore::RenderStyle::hasPseudoStyle):
        (WebCore::RenderStyle::setHasPseudoStyle):
        * rendering/style/StyleMultiColData.cpp:
        (WebCore::StyleMultiColData::StyleMultiColData):
        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):

2014-03-30  David Kilzer  <ddkilzer@apple.com>

        [iOS] Fix build of HTMLConverter.mm after r166454

        Fixes the following build failures:

            WebCore/editing/cocoa/HTMLConverter.mm:1507:13: error: value of type 'WebCore::Element' is not contextually convertible to 'bool'
                    if (element)
                        ^~~~~~~
            WebCore/editing/cocoa/HTMLConverter.mm:1508:49: error: no matching function for call to 'core'
                        _caches->floatPropertyValueForNode(*core(element), CSSPropertyVerticalAlign, verticalAlign);
                                                            ^~~~
            In file included from WebCore/editing/cocoa/HTMLConverter.mm:41:
            In file included from WebCore/page/Frame.h:42:
            In file included from WebCore/editing/VisibleSelection.h:30:
            In file included from WebCore/editing/VisiblePosition.h:30:
            In file included from WebCore/dom/Position.h:31:
            WebCore/editing/TextAffinity.h:54:27: note: candidate function not viable: no known conversion from 'WebCore::Element' to 'NSSelectionAffinity' (aka '_NSSelectionAffinity') for 1st argument
            inline WebCore::EAffinity core(NSSelectionAffinity affinity)
                                      ^
            WebCore/editing/cocoa/HTMLConverter.mm:1509:81: error: reference to non-static member function must be called; did you mean to call it with no arguments?
                    attachment.get().bounds = CGRectMake(0, (verticalAlign / 100) * element.clientHeight, element.clientWidth, element.clientHeight);
                                                                                    ~~~~~~~~^~~~~~~~~~~~
                                                                                                        ()
            WebCore/editing/cocoa/HTMLConverter.mm:1509:103: error: reference to non-static member function must be called; did you mean to call it with no arguments?
                    attachment.get().bounds = CGRectMake(0, (verticalAlign / 100) * element.clientHeight, element.clientWidth, element.clientHeight);
                                                                                                          ~~~~~~~~^~~~~~~~~~~
                                                                                                                             ()
            WebCore/editing/cocoa/HTMLConverter.mm:1509:124: error: reference to non-static member function must be called; did you mean to call it with no arguments?
                    attachment.get().bounds = CGRectMake(0, (verticalAlign / 100) * element.clientHeight, element.clientWidth, element.clientHeight);
                                                                                                                               ~~~~~~~~^~~~~~~~~~~~
                                                                                                                                                   ()
            5 errors generated.

        * editing/cocoa/HTMLConverter.mm:
        (HTMLConverter::_addAttachmentForElement):

2014-03-30  Andreas Kling  <akling@apple.com>

        Make NodeList and HTMLCollection caching helpers use PassRef.
        <https://webkit.org/b/130943>

        Tweak the helpers in NodeListsNodeData to return PassRef instead of
        PassRefPtr. This knocks 2 branches off of some pretty hot code on
        Dromaeo/dom-query.

        Reviewed by Antti Koivisto.

        * dom/ChildNodeList.h:
        * dom/ClassNodeList.h:
        * dom/NameNodeList.h:
        * dom/NodeRareData.h:
        (WebCore::NodeListsNodeData::ensureChildNodeList):
        (WebCore::NodeListsNodeData::ensureEmptyChildNodeList):
        (WebCore::NodeListsNodeData::addCacheWithAtomicName):
        (WebCore::NodeListsNodeData::addCacheWithName):
        (WebCore::NodeListsNodeData::addCacheWithQualifiedName):
        (WebCore::NodeListsNodeData::addCachedCollection):
        * dom/TagNodeList.h:
        * html/HTMLCollection.cpp:
        (WebCore::HTMLCollection::create):
        * html/HTMLCollection.h:
        * html/HTMLFormControlsCollection.cpp:
        (WebCore::HTMLFormControlsCollection::create):
        * html/HTMLFormControlsCollection.h:
        * html/RadioNodeList.h:

2014-03-29  Antti Koivisto  <antti@apple.com>

        LiveNodeLists should use ElementDescendantIterator
        https://bugs.webkit.org/show_bug.cgi?id=130931

        Reviewed by Andreas Kling.
        
        Make LiveNodeList traversal use the common DOM tree iterator.

        * dom/ChildNodeList.cpp:
        (WebCore::ChildNodeList::ChildNodeList):
        (WebCore::ChildNodeList::collectionBegin):
        (WebCore::ChildNodeList::collectionTraverseForward):
        (WebCore::ChildNodeList::collectionTraverseBackward):
        (WebCore::ChildNodeList::invalidateCache):
        (WebCore::ChildNodeList::collectionFirst): Deleted.
        
            Iterator for ChildNodeList is still just Node*.

        * dom/ChildNodeList.h:
        * dom/CollectionIndexCache.h:
        (WebCore::CollectionIndexCache::hasValidCache):
        (WebCore::Iterator>::CollectionIndexCache):
        (WebCore::Iterator>::nodeCount):
        (WebCore::Iterator>::computeNodeCountUpdatingListCache):
        (WebCore::Iterator>::traverseBackwardTo):
        (WebCore::Iterator>::traverseForwardTo):
        (WebCore::Iterator>::nodeAt):
        (WebCore::Iterator>::invalidate):
        
            Make CollectionIndexCache iterator based instead of using NodeType*. The iterator type may
            still be a Node* though.

        (WebCore::NodeType>::CollectionIndexCache): Deleted.
        (WebCore::NodeType>::nodeCount): Deleted.
        (WebCore::NodeType>::computeNodeCountUpdatingListCache): Deleted.
        (WebCore::NodeType>::nodeBeforeCached): Deleted.
        (WebCore::NodeType>::nodeAfterCached): Deleted.
        (WebCore::NodeType>::nodeAt): Deleted.
        (WebCore::NodeType>::invalidate): Deleted.
        * dom/ElementDescendantIterator.h:
        (WebCore::ElementDescendantIterator::operator--):
        
            Add backward iteration support.

        (WebCore::ElementDescendantIteratorAdapter::last):
        (WebCore::ElementDescendantConstIteratorAdapter::last):
        
            Add a way to get the last item.
            Provide std::iterator_traits so we can extract the type.

        * dom/LiveNodeList.h:
        (WebCore::CachedLiveNodeList::collectionEnd):
        (WebCore::CachedLiveNodeList<NodeListType>::CachedLiveNodeList):
        (WebCore::CachedLiveNodeList<NodeListType>::~CachedLiveNodeList):
        (WebCore::CachedLiveNodeList<NodeListType>::collectionBegin):
        (WebCore::CachedLiveNodeList<NodeListType>::collectionLast):
        (WebCore::CachedLiveNodeList<NodeListType>::collectionTraverseForward):
        (WebCore::CachedLiveNodeList<NodeListType>::collectionTraverseBackward):
        (WebCore::CachedLiveNodeList<NodeListType>::invalidateCache):
        (WebCore::CachedLiveNodeList<NodeListType>::collectionFirst): Deleted.
        
            Make LiveNodeList traversal use ElementDescendantIterator.

        (WebCore::nextMatchingElement): Deleted.
        (WebCore::previousMatchingElement): Deleted.
        * html/HTMLCollection.cpp:
        (WebCore::HTMLCollection::HTMLCollection):
        (WebCore::HTMLCollection::~HTMLCollection):
        (WebCore::HTMLCollection::collectionBegin):
        (WebCore::HTMLCollection::collectionTraverseForward):
        (WebCore::HTMLCollection::collectionTraverseBackward):
        (WebCore::HTMLCollection::invalidateCache):
        (WebCore::HTMLCollection::collectionFirst): Deleted.
        * html/HTMLCollection.h:
        (WebCore::HTMLCollection::collectionEnd):
        
            HTMLCollection still uses Element* as iterator for now.

2014-03-29  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r166434.
        https://bugs.webkit.org/show_bug.cgi?id=130938

        Caused crashes and other failures on cache tests (Requested by
        ap on #webkit).

        Reverted changeset:

        "Web Replay: add page-level setting to bypass the MemoryCache"
        https://bugs.webkit.org/show_bug.cgi?id=130728
        http://trac.webkit.org/changeset/166434

2014-03-29  David Kilzer  <ddkilzer@apple.com>

        Preserve selection end positions in directionOfSelection
        <http://webkit.org/b/104813>
        <rdar://problem/13666417>

        Reviewed by Brent Fulgham.

        Merged from Blink (patch by kenrb@chromium.org):
        https://src.chromium.org/viewvc/blink?revision=150621&view=revision
        http://crbug.com/164263

            VisibleSelection::visibleStart() and VisibleSelection::visibleEnd()
            can both cause layouts, which has the potential to invalidate any
            rendertree-based objects. This was causing a problem in
            FrameSelection::directionOfSelection(), where a reference to a
            lineBox was being held across a call to visibleEnd().

            This patch ensures that the any layout is completed before linebox
            references are retrieved.

        Test: editing/selection/layout-during-move-selection-crash.html

        * editing/FrameSelection.cpp:
        (WebCore::FrameSelection::directionOfSelection):

2014-03-29  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Simple line layout should not round to integral position while painting.
        https://bugs.webkit.org/show_bug.cgi?id=130934

        Reviewed by Simon Fraser.

        Remove rounding to integral position. When RenderLayer is injected and hides subpixel positions,
        integral rounding produces different paint position.

        Test: fast/flexbox/hidpi-simple-line-layout-with-flexbox-and-transition.html

        * rendering/SimpleLineLayoutFunctions.cpp:
        (WebCore::SimpleLineLayout::paintFlow):

2014-03-29  Zalan Bujtas  <zalan@apple.com>

        Subpixel rendering: Make GraphicsContext::drawImageBuffer* functions float based.
        https://bugs.webkit.org/show_bug.cgi?id=130932

        Reviewed by Simon Fraser.
        
        This is in preparation to support device pixel based filter painting.
        Filter calculation is still integral based.

        No change in behavior.

        * platform/graphics/GraphicsContext.cpp:
        (WebCore::GraphicsContext::drawImageBuffer):
        * platform/graphics/GraphicsContext.h:
        * platform/graphics/filters/FilterEffect.cpp: This will eventually be fully float based.
        Right now, this IntRect->FloatRect change is only to ensure that we can call 
        the float based drawImageBuffer(). 
        (WebCore::FilterEffect::drawingRegionOfInputImage):
        * platform/graphics/filters/FilterEffect.h:

2014-03-27  Sam Weinig  <sam@webkit.org>

        Convert yet more of HTMLConverter to C++
        https://bugs.webkit.org/show_bug.cgi?id=130850

        Reviewed by Anders Carlsson.

        * editing/cocoa/HTMLConverter.mm:
        (HTMLConverterCaches::isAncestorsOfStartToBeConverted):
        (HTMLConverter::HTMLConverter):
        (HTMLConverter::~HTMLConverter):
        (HTMLConverter::convert):
        (HTMLConverter::computedAttributesForElement):
        (HTMLConverter::attributesForElement):
        (HTMLConverter::_newParagraphForElement):
        (HTMLConverter::_newLineForElement):
        (HTMLConverter::_newTabForElement):
        (HTMLConverter::_addAttachmentForElement):
        (HTMLConverter::_addQuoteForElement):
        (HTMLConverter::_addValue):
        (HTMLConverter::_processHeadElement):
        (HTMLConverter::_enterElement):
        (HTMLConverter::_addTableCellForElement):
        (HTMLConverter::_processElement):
        (HTMLConverter::_addMarkersToList):
        (HTMLConverter::_exitElement):
        (HTMLConverter::_processText):
        (HTMLConverter::_traverseNode):
        (HTMLConverter::_traverseFooterNode):
        (WebCore::attributedStringFromRange):
        (_childrenForNode): Deleted.
        (HTMLConverter::_computedAttributesForElement): Deleted.
        (HTMLConverter::_attributesForElement): Deleted.
        (HTMLConverter::_loadFromDOMRange): Deleted.

2014-03-28  Csaba Osztrogonác  <ossy@webkit.org>

        Unreviewed buildfix after r166441 and r166443.

        * CMakeLists.txt: Add platform/audio/AudioHardwareListener.cpp.

2014-03-28  Javier Fernandez  <jfernandez@igalia.com>

        [CSS Grid Layout] The 'auto' height must be adapted to the item's margin.
        https://bugs.webkit.org/show_bug.cgi?id=130920

        Reviewed by Darin Adler.

        Adding the grid-item's marginLogicalHeight to the used breadth when computing
        content based grid-track sizes.

        Test: fast/css-grid-layout/grid-item-margin-auto-columns-rows.html

        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::logicalContentHeightForChild):

2014-03-28  James Craig  <jcraig@apple.com>

        Web Inspector: AXI: support for live regions
        https://bugs.webkit.org/show_bug.cgi?id=130725

        Reviewed by Timothy Hatcher.

        Tests: inspector-protocol/dom/getAccessibilityPropertiesForNode.html
               inspector-protocol/dom/getAccessibilityPropertiesForNode_liveRegion.html

        Initial support for @aria-live, @aria-atomic, and @aria-busy.

        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::buildObjectForAccessibilityProperties):
        * inspector/protocol/DOM.json:

2014-03-28  Darin Adler  <darin@apple.com>

        Fix recently-introduced off-by-one error in centerTruncateToBuffer
        https://bugs.webkit.org/show_bug.cgi?id=130889
        <rdar://problem/16408694>

        Reviewed by Alexey Proskuryakov.

        * platform/graphics/StringTruncator.cpp:
        (WebCore::centerTruncateToBuffer): Simplified expression that computes truncatedLength.
        Removed incorrect "+ 1" from computation of where to write characters.

2014-03-28  Benjamin Poulain  <bpoulain@apple.com>

        Update the code related to SelectorPseudoTypeMap to reflect its new purpose
        https://bugs.webkit.org/show_bug.cgi?id=130620

        Reviewed by Andreas Kling.

        Since r166094, SelectorPseudoTypeMap only contains PseudoClass instances and the 4 compatibility PseudoElement.

        This patch rename SelectorPseudoTypeMap to SelectorPseudoClassAndCompatibilityElementMap and update the parsing
        to split PseudoClass and PseudoElement.

        * CMakeLists.txt:
        * DerivedSources.make:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSGrammar.y.in:
        * css/CSSParserValues.cpp:
        (WebCore::CSSParserSelector::parsePseudoClassAndCompatibilityElementSelector):
        (WebCore::CSSParserSelector::setPseudoClassValue):
        * css/CSSParserValues.h:
        * css/CSSSelector.cpp:
        (WebCore::appendPseudoClassFunctionTail):
        (WebCore::CSSSelector::selectorText):
        * css/SelectorPseudoClassAndCompatibilityElementMap.in: Renamed from Source/WebCore/css/SelectorPseudoTypeMap.in.
        * css/SelectorPseudoTypeMap.h:
        * css/makeSelectorPseudoClassAndCompatibilityElementMap.py: Renamed from Source/WebCore/css/makeSelectorPseudoTypeMap.py.
        (enumerablePseudoType):
        (expand_ifdef_condition):

2014-03-28  Stephanie Lewis  <slewis@apple.com>

        Unreviewed build fix.

        * platform/audio/AudioHardwareListener.cpp:
        (WebCore::AudioHardwareListener::create):
        (WebCore::AudioHardwareListener::audioHardwareListenerIsSupported): Deleted.
        * platform/audio/AudioHardwareListener.h:

2014-03-28  Lukasz Bialek  <l.bialek@samsung.com>

        Refactor cut and copy functions as suggested in FIXME line
        https://bugs.webkit.org/show_bug.cgi?id=129867

        Reviewed by Darin Adler.

        Cut and Copy functions in Editor.cpp use lots of common code.
        Those functions are merged into one to share code, several
        additional conditions are added to preserve Cut and Copy
        functionality.

        * editing/Editor.cpp:
        (WebCore::Editor::cut):
        (WebCore::Editor::copy):
        (WebCore::Editor::performCutOrCopy):
        * editing/Editor.h:

2014-03-28  Stephanie Lewis  <slewis@apple.com>

        Rename pluginDidEvaluate to better represent when it’s called.
        Part of <rdar://problem/16061257> PluginProcess should AppNap when no plugins on active tab.

        Reviewed by Anders Carlsson.

        No new test because it’s just a name change.

        * page/PageThrottler.h:
        (WebCore::PageThrottler::pluginDidEvaluateWhileAudioIsPlaying):

2014-03-28  Stephanie Lewis  <slewis@apple.com>

        Notification handler for telling if audio hardware is active.
        https://bugs.webkit.org/show_bug.cgi?id=130743

        Reviewed by Jer Noble.

        Not web-exposed so no easy way to test.

        Listen to CoreAudio to see if audio hardware is active in the current process.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/audio/AudioHardwareListener.cpp: Added.
        (WebCore::AudioHardwareListener::create):
        (WebCore::AudioHardwareListener::AudioHardwareListener):
        * platform/audio/AudioHardwareListener.h: Added.
        (WebCore::AudioHardwareListener::Client::~Client):
        (WebCore::AudioHardwareListener::~AudioHardwareListener):
        (WebCore::AudioHardwareListener::isHardwareActive):
        * platform/audio/mac/AudioHardwareListenerMac.cpp: Added.
        (WebCore::isAudioHardwareProcessRunning):
        (WebCore::AudioHardwareListener::create):
        (WebCore::AudioHardwareListenerMac::create):
        (WebCore::AudioHardwareListenerMac::AudioHardwareListenerMac):
        (WebCore::AudioHardwareListenerMac::~AudioHardwareListenerMac):
        (WebCore::AudioHardwareListenerMac::setHardwareActive):
        * platform/audio/mac/AudioHardwareListenerMac.h: Added.

2014-03-28  James Craig  <jcraig@apple.com>

        Web Inspector: AXI: expose what elements get generic "clickable" status
        https://bugs.webkit.org/show_bug.cgi?id=130721

        Reviewed by Timothy Hatcher.

        Test: inspector-protocol/dom/getAccessibilityPropertiesForNode.html:
        Test: inspector-protocol/dom/getAccessibilityPropertiesForNode_mouseEventNodeId.html

        Expose ancestor element link to "Click Listener" or generic "Clickable: Yes" if current node has mouse handler.

        Update AccessibilityNodeObject::mouseButtonListener() to optionally return body element if 
            requested so that Web Inspector can display body event delegate handlers.

        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::mouseButtonListener):
        * accessibility/AccessibilityNodeObject.h:
        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::buildObjectForAccessibilityProperties):
        * inspector/protocol/DOM.json:

2014-03-28  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: Really drop all locks in nested run loop on iOS if WebThread is enabled
        https://bugs.webkit.org/show_bug.cgi?id=130912

        Reviewed by Geoffrey Garen.

        Previously we were calling DropAllLocks inside of a single line if statement,
        so the JSLock was getting reaquired very quickly. We really want to DropAllLocks
        for the duration of running the nested run loop on iOS if there is a WebThread.

        * bindings/js/PageScriptDebugServer.h:
        * bindings/js/PageScriptDebugServer.cpp:
        (WebCore::PageScriptDebugServer::runEventLoopWhilePaused):
        (WebCore::PageScriptDebugServer::runEventLoopWhilePausedInternal):

2014-03-28  Brent Fulgham  <bfulgham@apple.com>

        [Win] Enable Media Track testing features on Windows
        https://bugs.webkit.org/show_bug.cgi?id=130851

        Reviewed by Eric Carlson.

        * testing/Internals.cpp:
        (WebCore::Internals::resetToConsistentState): Execute code on Windows as well.
        (WebCore::Internals::Internals): Ditto.
        (WebCore::Internals::captionsStyleSheetOverride): Ditto.
        (WebCore::Internals::setCaptionsStyleSheetOverride): Ditto.
        (WebCore::Internals::setPrimaryAudioTrackLanguageOverride): Ditto.
        (WebCore::Internals::setCaptionDisplayMode): Ditto.

2014-03-28  Brian Burg  <bburg@apple.com>

        Web Replay: add page-level setting to bypass the MemoryCache
        https://bugs.webkit.org/show_bug.cgi?id=130728

        Reviewed by Timothy Hatcher.

        When replaying a specific Page we don't want to store its cached resources in the
        MemoryCache. This patch adds a page setting to prevent the page's resources from
        being saved in the MemoryCache.

        If Settings::usesMemoryCache() is false, page resources are given the special
        SessionID bypassCacheSessionID(). The cached resource loader and memory cache
        act as if the memory cache is disabled if the resource has this special session id.

        Hook up ReplayController to override the memory cache setting during capture/replay.

        Test: http/tests/cache/bypass-memory-cache-after-reload.html

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::requestResource):
        (WebCore::CachedResourceLoader::revalidateResource):
        * loader/cache/MemoryCache.cpp:
        (WebCore::MemoryCache::add):
        * page/Page.cpp:
        (WebCore::Page::sessionID):
        * page/SessionID.h:
        (WebCore::SessionID::bypassCacheSessionID):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (WebCore::Settings::setUsesMemoryCache):
        (WebCore::Settings::usesMemoryCache):
        * replay/ReplayController.cpp:
        (WebCore::ReplayController::setForceDeterministicSettings):
        * replay/ReplayController.h:
        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::Backup::Backup):
        (WebCore::InternalSettings::Backup::restoreTo):
        (WebCore::InternalSettings::setUsesMemoryCache):
        * testing/InternalSettings.h:
        * testing/InternalSettings.idl:

2014-03-28  Radu Stavila  <stavila@adobe.com>

        In some situations, partial layouts of floating elements produce incorrect results.
        https://bugs.webkit.org/show_bug.cgi?id=122668

        Reviewed by David Hyatt.

        When performing partial layout of float elements and checking if other float
        elements are encountered, incorrect results were obtained by not checking
        the size of the existing floats vector.

        Test: fast/block/float/floats-in-clean-line-crash.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlockFlow::checkFloatsInCleanLine):

2014-03-28  Beth Dakin  <bdakin@apple.com>

        Build fix.

        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::paint):

2014-03-28  Jer Noble  <jer.noble@apple.com>

        [MSE] Implement support for SourceBuffer.remove()
        https://bugs.webkit.org/show_bug.cgi?id=121562

        Reviewed by Eric Carlson.

        Test: media/media-source/media-source-remove.html

        Add support for SourceBuffer.remove().

        * Modules/mediasource/SourceBuffer.cpp:
        (WebCore::SourceBuffer::SourceBuffer): Initialize new member variables.
        (WebCore::SourceBuffer::setTimestampOffset): Update comments to match spec.
        (WebCore::SourceBuffer::remove): Added; start removeTimer.
        (WebCore::SourceBuffer::abortIfUpdating): Cancel removeTimer.
        (WebCore::SourceBuffer::removedFromMediaSource): Call abortIfUpdating().
        (WebCore::SourceBuffer::stop): Cancel removeTimer.
        (WebCore::SourceBuffer::removeCodedFrames): Added.
        (WebCore::SourceBuffer::removeTimerFired): Added.
        * Modules/mediasource/SourceBuffer.h:
        * Modules/mediasource/SourceBuffer.idl:

2014-03-27  Dean Jackson  <dino@apple.com>

        Support form controls that may need incremental redraw
        https://bugs.webkit.org/show_bug.cgi?id=130736

        Reviewed by Beth Dakin.

        There are some form controls that change appearance
        over time. Expand the ControlStates so that it can
        hold a little more information, including a reference
        to the native form control. This way the Theme implementation
        can repaint the existing native control if necessary. At
        least ThemeMac was reusing a single control for painting
        all instances before this change.

        Since ControlStates is now a class, pass it around by
        reference.

        The other major change is keeping a timer to trigger a
        repaint in RenderBox, which happens if Theme/RenderTheme
        update the ControlState to request one.

        * WebCore.xcodeproj/project.pbxproj: Add ControlStates.h.
        * WebCore.vcxproj/WebCore.vcxproj: Ditto.
        * WebCore.vcxproj/WebCore.vcxproj.filters: Ditto.
        * dom/Element.cpp:
        (WebCore::Element::setActive): States now within ControlStates.
        (WebCore::Element::setHovered): Ditto.
        * editing/FrameSelection.cpp:
        (WebCore::FrameSelection::focusedOrActiveStateChanged): Ditto.
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::disabledStateChanged): Ditto.
        (WebCore::HTMLFormControlElement::readOnlyAttributeChanged): Ditto.
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::setChecked): Ditto.
        (WebCore::HTMLInputElement::setIndeterminate): Ditto.
        * html/HTMLOptionElement.cpp:
        (WebCore::HTMLOptionElement::parseAttribute): Ditto.
        * platform/ControlStates.h: New file. Copied the old ControlStates enum,
        and added accessors to hold whether or not the state is dirty, and
        a reference to a platform control if necessary.
        * platform/Theme.h:
        (WebCore::Theme::selectionColor): Pass ControlStates pointer.
        (WebCore::Theme::paint): Ditto.
        (WebCore::Theme::inflateControlPaintRect): Ditto.
        * platform/ThemeTypes.h: Remove ControlStates enum.
        * platform/efl/RenderThemeEfl.cpp:
        (WebCore::RenderThemeEfl::applyEdjeStateFromForm): Pass ControlStates pointer.
        (WebCore::RenderThemeEfl::paintThemePart): Ditto.
        * platform/efl/RenderThemeEfl.h: Ditto.
        * platform/mac/ThemeMac.h: Ditto.
        * platform/mac/ThemeMac.mm:
        (-[WebCoreThemeView addSubview:]): New method to make sure we don't add CALayer backed
        views to the NSView we're using for rendering.
        (WebCore::updateStates): Use the private animated setters if necessary.
        (WebCore::convertControlStatesToThemeDrawState): Namespacing.
        (WebCore::configureCheckbox): Pass ControlStates pointer.
        (WebCore::createCheckboxCell): New helper since we're creating non-static cells.
        (WebCore::sharedCheckboxCell): The old static provider, renamed.
        (WebCore::paintCheckbox): Check if this paint was triggered by a state change
        or an animation. Update the ControlStates if we need to be repainted.
        (WebCore::radio): Parameter is now ControlStates*.
        (WebCore::paintRadio): Ditto.
        (WebCore::setUpButtonCell): Ditto.
        (WebCore::button): Ditto.
        (WebCore::paintButton): Ditto.
        (WebCore::paintStepper): Ditto.
        (WebCore::ThemeMac::ensuredView): Ditto.
        (WebCore::ThemeMac::inflateControlPaintRect): Ditto.
        (WebCore::ThemeMac::paint): Ditto.
        (WebCore::checkbox): Deleted.
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::RenderBox): Initialize timer.
        (WebCore::RenderBox::~RenderBox): Stop any pending timers and delete the ControlState if necessary.
        (WebCore::RenderBox::paintBoxDecorations): Create a ControlStates if needed. Paint, and start the repaint
        timer if the ControlStates say we should.
        (WebCore::RenderBox::repaintTimerFired): Call repaint when the timer fires.
        * rendering/RenderBox.h: Add a timer for repainting.
        * rendering/RenderElement.cpp:
        (WebCore::controlStatesRendererMap): A static HashMap that associates renderers with ControlStates.
        (WebCore::RenderElement::hasControlStatesForRenderer):
        (WebCore::RenderElement::controlStatesForRenderer):
        (WebCore::RenderElement::removeControlStatesForRenderer):
        (WebCore::RenderElement::addControlStatesForRenderer):
        * rendering/RenderElement.h:
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::paint): Use a pointer to ControlStates.
        (WebCore::RenderTheme::adjustRepaintRect): Ditto.
        (WebCore::RenderTheme::stateChanged): Ditto.
        (WebCore::RenderTheme::updateControlStatesForRenderer): New method that just updates the states part of ControlStates.
        (WebCore::RenderTheme::extractControlStatesForRenderer): New method that calculates the state.
        (WebCore::RenderTheme::controlStatesForRenderer): Deleted.
        * rendering/RenderTheme.h:
        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::documentViewFor): Use a ControlStates pointer.

2014-03-28  Myles C. Maxfield  <mmaxfield@apple.com>

        Clear SVGInlineTextBox fragments when the text changes.
        https://bugs.webkit.org/show_bug.cgi?id=130879

        Reviewed by Darin Adler.

        Ported from Blink: https://src.chromium.org/viewvc/blink?revision=150456&view=revision

        This patch modifies SVGInlineTextBox::dirtyLineBoxes to clear all
        following text boxes when invoked. Typically this method is called
        when the underlying text string changes, and that change needs to
        be propagated to all the boxes that use the text beyond the point
        where the text is first modified.
        
        Also cleans up final function keywords for SVGRootInlineBox.

        Test: svg/custom/unicode-in-tspan-multi-svg-crash.html

        * rendering/InlineTextBox.h: Added (non-recursive) dirtyOwnLineBoxes() function
        (WebCore::InlineTextBox::dirtyOwnLineBoxes): Calls dirtyLineBoxes()
        * rendering/svg/SVGInlineTextBox.h: Added (non-recursive) dirtyOwnLineBoxes() function
        (WebCore::SVGInlineTextBox::dirtyOwnLineBoxes):
        * rendering/svg/SVGInlineTextBox.cpp:
        (WebCore::SVGInlineTextBox::dirtyOwnLineBoxes): Non-recursive part of dirtyLineBoxes()
        (WebCore::SVGInlineTextBox::dirtyLineBoxes): Calls dirtyOwnLineBoxes() in a loop
        * rendering/svg/SVGRootInlineBox.h:

2014-03-28  Andreas Kling  <akling@apple.com>

        Rebaseline bindings tests.

2014-03-28  Michael Saboff  <msaboff@apple.com>

        Unreviewed, rolling r166248 back in.

        Turns out r166070 didn't cause a 2% performance loss in page load times

        Reverted changeset:

        Unreviewed, rolling out r166126.
        Rollout r166126 in prepartion to roll out prerequisite r166070

2014-03-26  Antonio Gomes  <a1.gomes@sisa.samsung.com>

        [Bindings] constants are always typed to 'int'
        https://bugs.webkit.org/show_bug.cgi?id=130775

        Reviewed by Darin Adler.

        Patch fixes a bug where all constant getter generated
        methods were returning 'integer' values due to static_cast.

        Compilers should be smarth enough to properly infer which
        jsNumber class construtor to call given a literal value.

        Patch also fixes a bug where values whose representation
        is bigger an integer maximum were overflowing. For instance,
        NodeFilter.SHOW_ALL (0xFFFFFFFF).

        Tests:
        Binding tests updated.
        Rebaselined fast/dom/constants.html

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):
        * bindings/scripts/test/JS/JSTestInterface.cpp:
        (WebCore::jsTestInterfaceIMPLEMENTSCONSTANT1):
        (WebCore::jsTestInterfaceIMPLEMENTSCONSTANT2):
        (WebCore::jsTestInterfaceSUPPLEMENTALCONSTANT1):
        (WebCore::jsTestInterfaceSUPPLEMENTALCONSTANT2):
        * bindings/scripts/test/JS/JSTestObj.cpp:
        (WebCore::jsTestObjCONDITIONAL_CONST):
        (WebCore::jsTestObjCONST_VALUE_0):
        (WebCore::jsTestObjCONST_VALUE_1):
        (WebCore::jsTestObjCONST_VALUE_2):
        (WebCore::jsTestObjCONST_VALUE_4):
        (WebCore::jsTestObjCONST_VALUE_8):
        (WebCore::jsTestObjCONST_VALUE_9):
        (WebCore::jsTestObjCONST_VALUE_11):
        (WebCore::jsTestObjCONST_VALUE_12):
        (WebCore::jsTestObjCONST_VALUE_13):
        (WebCore::jsTestObjCONST_VALUE_14):
        (WebCore::jsTestObjCONST_JAVASCRIPT):
        (WebCore::jsTestObjReadonly):

2014-03-28  Myles C. Maxfield  <mmaxfield@apple.com>

        A TrailingObject's endpoint might get decremented twice
        https://bugs.webkit.org/show_bug.cgi?id=130874

        Reviewed by Darin Adler.

        There are two places where we might shave off a trailing space from the end
        of a line. We don't want to hit both codepaths for a single line.

        Fixes fast/block/update-midpoints-for-trailing-boxes-crash.html after r166245.

        * rendering/line/BreakingContextInlineHeaders.h:
        (WebCore::checkMidpoints):
        (WebCore::BreakingContext::handleEndOfLine):

2014-03-28  Andreas Kling  <akling@apple.com>

        Inline JSDOMWrapper subclasses' finishCreation().
        <https://webkit.org/b/130890>

        finishCreation() is really a no-op for JSDOMWrapper subclasses in
        release builds. None of the ancestor classes do anything but assert
        in their implementations.

        Generate the function inline, reducing binary size, and removing
        an unnecessary call from the JSFoo::create() helpers.

        Reviewed by Sam Weinig.

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateHeader):
        (GenerateImplementation):

2014-03-28  Jer Noble  <jer.noble@apple.com>

        [Mac] HLS streams will report an incorrect natural size.
        https://bugs.webkit.org/show_bug.cgi?id=130859

        Reviewed by Eric Carlson.

        Some HLS streams will report incorrect naturalSizes due to the asset's preferredTransform
        property not being  available at the same time as the track's natural size. Given that
        AVFoundation only allows one video track to be selected at a time, simply use the asset's
        presentation size, cached in m_cachedPresentation size in all cases.

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::sizeChanged):

2014-03-28  Antti Koivisto  <antti@apple.com>

        Remove NodeListRootType flag
        https://bugs.webkit.org/show_bug.cgi?id=130896

        Reviewed by Anders Carlsson.

        This can be handled statically (except for the RadioNodeList case) removing
        a branch from NodeList traversal.

        * dom/ClassNodeList.h:
        * dom/Document.cpp:
        (WebCore::Document::registerNodeListForInvalidation):
        (WebCore::Document::unregisterNodeListForInvalidation):
        (WebCore::Document::registerNodeList): Deleted.
        (WebCore::Document::unregisterNodeList): Deleted.
        
            Mark document invalidation registered lists with a bit.
            Renamed for clarity.

        * dom/Document.h:
        * dom/LiveNodeList.cpp:
        (WebCore::LiveNodeList::LiveNodeList):
        (WebCore::LiveNodeList::rootNode):
        
            Base class version that invokes virtual isRootedAtDocument. It is needed to support 
            LiveNodeList::namedItem.

        * dom/LiveNodeList.h:
        (WebCore::LiveNodeList::isRegisteredForInvalidationAtDocument):
        (WebCore::LiveNodeList::setRegisteredForInvalidationAtDocument):
        (WebCore::LiveNodeList::document):
        (WebCore::CachedLiveNodeList<NodeListType>::CachedLiveNodeList):
        (WebCore::CachedLiveNodeList<NodeListType>::~CachedLiveNodeList):
        (WebCore::CachedLiveNodeList<NodeListType>::rootNode):
        
            Call isRootedAtDocument on the final leaf type. Except for RadioNodeList this
            resolves statically.

        (WebCore::CachedLiveNodeList<NodeListType>::willValidateIndexCache):
        (WebCore::CachedLiveNodeList<NodeListType>::invalidateCache):
        (WebCore::LiveNodeList::isRootedAtDocument): Deleted.
        (WebCore::LiveNodeList::rootType): Deleted.
        (WebCore::LiveNodeList::rootNode): Deleted.
        * dom/NameNodeList.h:
        * dom/NodeRareData.h:
        (WebCore::NodeListsNodeData::adoptDocument):
        * dom/TagNodeList.h:
        * html/HTMLCollection.cpp:
        (WebCore::rootTypeFromCollectionType):
        * html/HTMLCollection.h:
        (WebCore::HTMLCollection::isRootedAtDocument):
        (WebCore::HTMLCollection::rootType):
        
            HTMLCollections still needs the flag.

        * html/LabelsNodeList.cpp:
        (WebCore::LabelsNodeList::LabelsNodeList):
        * html/LabelsNodeList.h:
        * html/RadioNodeList.cpp:
        (WebCore::RadioNodeList::RadioNodeList):
        * html/RadioNodeList.h:

2014-03-28  Mario Sanchez Prada  <mario.prada@samsung.com>

        [GTK] Geoclue2 providers won't work after reloading
        https://bugs.webkit.org/show_bug.cgi?id=130898

        Reviewed by Martin Robinson.

        Don't reuse the Geoclue2 client proxy between different calls to
        startPosition(), and create a new client proxy each time instead.

        * platform/geoclue/GeolocationProviderGeoclue2.cpp:
        (GeolocationProviderGeoclue::startUpdating): Don't reuse the
        client proxy, by always calling geoclue_manager_call_get_client().
        (GeolocationProviderGeoclue::stopUpdating): Disconnect from the
        'location-updated' signal and dispose the client proxy.

2014-03-28  Diego Pino Garcia  <dpino@igalia.com>

        [GTK] Too many redirects visiting www.globalforestwatch.org
        https://bugs.webkit.org/show_bug.cgi?id=129681

        Reviewed by Martin Robinson.

        * platform/gtk/UserAgentGtk.cpp:
        (WebCore::standardUserAgent): Append Safari version to UserAgent
        string.

2014-03-28  Michael Saboff  <msaboff@apple.com>

        Unreviewed, rolling r166249 back in.

        Turns out r166070 didn't cause a 2% performance loss in page load times

        Reverted changeset:

        Unreviewed, rolling out r166070.
        Rollout r166070 due to 2% performance loss in page load times

2014-03-28  James Craig  <jcraig@apple.com>

        Web Inspector: Copy/paste error. EventListener block in DOM.json uses description from Node.
        https://bugs.webkit.org/show_bug.cgi?id=130158

        Reviewed by Timothy Hatcher.

        * inspector/protocol/DOM.json: Fixed a copy/paste annoyance.

2014-03-27  James Craig  <jcraig@apple.com>

        Web Inspector: AXI: expose selectedChildNodeIds of list boxes, tree controls, etc., and reconcile UI with childNodeIds
        https://bugs.webkit.org/show_bug.cgi?id=130827

        Reviewed by Timothy Hatcher.

        Test: inspector-protocol/dom/getAccessibilityPropertiesForNode.html

        Support for selectedChildNodeIds in inspector-protocol: DOM.getAccessibilityPropertiesForNode.

        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::buildObjectForAccessibilityProperties):
        * inspector/protocol/DOM.json:

2014-03-27  Brent Fulgham  <bfulgham@apple.com>

        Specify Shadow DOM Pseudo IDs in Media Element Constructors
        https://bugs.webkit.org/show_bug.cgi?id=130882

        Reviewed by Eric Carlson.

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlPanelElement::MediaControlPanelElement): Call setPseudoId in constructor.
        (WebCore::MediaControlPanelEnclosureElement::MediaControlPanelEnclosureElement): Ditto.
        (WebCore::MediaControlTimelineContainerElement::MediaControlTimelineContainerElement): Ditto.
        (WebCore::MediaControlVolumeSliderContainerElement::MediaControlVolumeSliderContainerElement): Ditto.
        (WebCore::MediaControlStatusDisplayElement::MediaControlStatusDisplayElement): Ditto.
        (WebCore::MediaControlPanelMuteButtonElement::MediaControlPanelMuteButtonElement): Ditto.
        (WebCore::MediaControlVolumeSliderMuteButtonElement::MediaControlVolumeSliderMuteButtonElement): Ditto.
        (WebCore::MediaControlPlayButtonElement::MediaControlPlayButtonElement): Ditto.
        (WebCore::MediaControlOverlayPlayButtonElement::MediaControlOverlayPlayButtonElement): Ditto.
        (WebCore::MediaControlSeekForwardButtonElement::MediaControlSeekForwardButtonElement): Ditto.
        (WebCore::MediaControlSeekBackButtonElement::MediaControlSeekBackButtonElement): Ditto.
        (WebCore::MediaControlRewindButtonElement::MediaControlRewindButtonElement): Ditto.
        (WebCore::MediaControlReturnToRealtimeButtonElement::MediaControlReturnToRealtimeButtonElement): Ditto.
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::MediaControlToggleClosedCaptionsButtonElement): Ditto.
        (WebCore::MediaControlClosedCaptionsContainerElement::MediaControlClosedCaptionsContainerElement): Ditto.
        (WebCore::MediaControlClosedCaptionsTrackListElement::MediaControlClosedCaptionsTrackListElement): Ditto.
        (WebCore::MediaControlTimelineElement::MediaControlTimelineElement): Ditto.
        (WebCore::MediaControlPanelVolumeSliderElement::MediaControlPanelVolumeSliderElement): Ditto.
        (WebCore::MediaControlFullscreenVolumeSliderElement::MediaControlFullscreenVolumeSliderElement): Ditto.
        (WebCore::MediaControlFullscreenButtonElement::MediaControlFullscreenButtonElement): Ditto.
        (WebCore::MediaControlFullscreenVolumeMinButtonElement::MediaControlFullscreenVolumeMinButtonElement): Ditto.
        (WebCore::MediaControlFullscreenVolumeMaxButtonElement::MediaControlFullscreenVolumeMaxButtonElement): Ditto.
        (WebCore::MediaControlTimeRemainingDisplayElement::MediaControlTimeRemainingDisplayElement): Ditto.
        (WebCore::MediaControlCurrentTimeDisplayElement::MediaControlCurrentTimeDisplayElement): Ditto.
        (WebCore::MediaControlTextTrackContainerElement::MediaControlTextTrackContainerElement): Ditto.

2014-03-27  Benjamin Poulain  <bpoulain@apple.com>

        [iOS][WK2] Adjust the tile coverage on the scrollview's edges
        https://bugs.webkit.org/show_bug.cgi?id=130884

        Reviewed by Dan Bernstein.

        * platform/ios/ScrollViewIOS.mm:
        (WebCore::ScrollView::computeCoverageRect):
        Pull back the future rect inside the contentRect if it goes outside.
        There is no point in retiling for rubberbanding and the extra tiles should be always be
        on the opposite side to the edges.

2014-03-27  Joseph Pecoraro  <pecoraro@apple.com>

        Remove unused LocaleMac::create method
        https://bugs.webkit.org/show_bug.cgi?id=130870

        Reviewed by Andreas Kling.

        * platform/text/mac/LocaleMac.h:
        * platform/text/mac/LocaleMac.mm:
        (WebCore::LocaleMac::create): Deleted.
        (WebCore::LocaleMac::shortDateFormatter): Deleted.

2014-03-27  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        Clean up unneeded "mutable" keyword
        https://bugs.webkit.org/show_bug.cgi?id=130832

        Reviewed by Andreas Kling.

        As r166350, this patch cleans up unneeded "mutable" keywords.
        Additionally, m_validatedSelectionCache is removed because it is not used anywhere else.

        * css/CSSFontFaceRule.h:
        * css/CSSStyleRule.h:
        * editing/FrameSelection.h:

2014-03-27  Enrica Casucci  <enrica@apple.com>

        Add support for AirPlay picker in WK2 for iOS.
        https://bugs.webkit.org/show_bug.cgi?id=130855
        <rdar://problem/15349859>

        Reviewed by Eric Carlson, Joseph Pecoraro and Benjamin Poulain.

        Adds support in HTMLMediaSession to display the airplay picker
        and to monitor presence of available wireless targets.

        * html/HTMLMediaSession.cpp:
        (WebCore::HTMLMediaSession::showPlaybackTargetPicker):
        (WebCore::HTMLMediaSession::hasWirelessPlaybackTargets):
        (WebCore::HTMLMediaSession::setHasPlaybackTargetAvailabilityListeners):
        * loader/EmptyClients.h:
        * page/ChromeClient.h:
        * platform/audio/MediaSessionManager.cpp:
        (WebCore::MediaSessionManager::wirelessRoutesAvailableChanged):
        * platform/audio/MediaSessionManager.h:
        (WebCore::MediaSessionManager::hasWirelessTargetsAvailable):
        (WebCore::MediaSessionManager::startMonitoringAirPlayRoutes):
        (WebCore::MediaSessionManager::stopMonitoringAirPlayRoutes):
        * platform/audio/ios/MediaSessionManagerIOS.h:
        * platform/audio/ios/MediaSessionManagerIOS.mm:
        (WebCore::MediaSessionManageriOS::hasWirelessTargetsAvailable):
        (WebCore::MediaSessionManageriOS::startMonitoringAirPlayRoutes):
        (WebCore::MediaSessionManageriOS::stopMonitoringAirPlayRoutes):
        (-[WebMediaSessionHelper initWithCallback:]):
        (-[WebMediaSessionHelper hasWirelessTargetsAvailable]):
        (-[WebMediaSessionHelper startMonitoringAirPlayRoutes]):
        (-[WebMediaSessionHelper stopMonitoringAirPlayRoutes]):
        (-[WebMediaSessionHelper wirelessRoutesAvailableDidChange:]):
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::wirelessVideoPlaybackDisabled):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::setWirelessVideoPlaybackDisabled):

2014-03-27  Bem Jones-Bey  <bjonesbe@adobe.com>

        [CSS Shapes][css clip-path] rounded corner calculation for box shapes is wrong
        https://bugs.webkit.org/show_bug.cgi?id=127982

        Reviewed by Simon Fraser.

        Calculate rounded corners for box shapes as defined in the CSS Shapes
        spec.

        Tests: css3/masking/clip-path-border-radius-border-box-000.html
               css3/masking/clip-path-border-radius-content-box-000.html
               css3/masking/clip-path-border-radius-content-box-001.html
               css3/masking/clip-path-border-radius-padding-box-000.html
               css3/masking/clip-path-border-radius-padding-box-001.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-border-box-000.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-border-box-001.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-border-box-002.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-content-box-000.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-content-box-001.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-content-box-002.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-content-box-003.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-margin-box-000.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-margin-box-001.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-margin-box-002.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-margin-box-003.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-margin-box-004.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-padding-box-000.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-padding-box-001.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-padding-box-002.html
               fast/shapes/shape-outside-floats/shape-outside-floats-border-radius-padding-box-003.html

        * platform/graphics/RoundedRect.h:
        (WebCore::RoundedRect::Radii::transposedRadii): Transpose radii for
            vertical writing modes.
        (WebCore::RoundedRect::moveBy): Add method for use with clip path.
        (WebCore::RoundedRect::transposedRect): Transpose rect for vertical
            writing modes.
        * rendering/RenderBox.h:
        (WebCore::RenderBox::marginBoxRect): Return the margin box rect for
            the RenderBox.
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::setupClipPath): Call the new function for the
            rounded corner calculation.
        * rendering/shapes/ShapeInfo.cpp:
        (WebCore::ShapeInfo<RenderType>::computedShape): Call the new function
            for the rounded corner calculation.
        * rendering/shapes/BoxShape.cpp:
        (WebCore::adjustRadiusForMarginBoxShape): Helper function for
            computeRoundedRectForLayoutBoxShape.
        (WebCore::computeMarginBoxShapeRadius): Ditto.
        (WebCore::computeMarginBoxShapeRadii): Ditto.
        (WebCore::computeRoundedRectForBoxShape): Utility function to do the
            rounded corner calculation.
        * rendering/shapes/BoxShape.h: Add new function.
        * rendering/style/RenderStyle.h:
        (WebCore::RenderStyle::getRoundedInnerBorderFor): Add default argument
            values.

2014-03-27  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r166364.
        https://bugs.webkit.org/show_bug.cgi?id=130872

        Caused a test assertion (Requested by smfr on #webkit).

        Reverted changeset:

        "Operator stretching: expose a math data API"
        https://bugs.webkit.org/show_bug.cgi?id=130572
        http://trac.webkit.org/changeset/166364

2014-03-27  Benjamin Poulain  <bpoulain@apple.com>

        [iOS][WK2] Compute a good exposed rect when scaling WKContentView
        https://bugs.webkit.org/show_bug.cgi?id=130761

        Reviewed by Simon Fraser.

        * WebCore.exp.in:
        * platform/ScrollView.h:
        * platform/ios/ScrollViewIOS.mm:
        (WebCore::ScrollView::setScrollVelocity):
        (WebCore::ScrollView::computeCoverageRect):
        While scaling in, do not add margins tiles. When scaling out, add 1 margin tile size
        all around.

2014-03-27  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r166360.
        https://bugs.webkit.org/show_bug.cgi?id=130869

        Seems to have broken PLT (Requested by ap on #webkit).

        Reverted changeset:

        "Connection::dispatchOneMessage() can be re-entered while
        handling Cmd-key menu"
        https://bugs.webkit.org/show_bug.cgi?id=130767
        http://trac.webkit.org/changeset/166360

2014-03-27  Antti Koivisto  <antti@apple.com>

        Remove LiveNodeList::Type
        https://bugs.webkit.org/show_bug.cgi?id=130866

        Reviewed by Andreas Kling.

        We don't need dynamic type information anymore.

        * dom/ClassNodeList.cpp:
        (WebCore::ClassNodeList::ClassNodeList):
        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::getElementsByTagName):
        (WebCore::ContainerNode::getElementsByName):
        (WebCore::ContainerNode::getElementsByClassName):
        (WebCore::ContainerNode::radioNodeList):
        * dom/LiveNodeList.cpp:
        (WebCore::LiveNodeList::LiveNodeList):
        * dom/LiveNodeList.h:
        (WebCore::LiveNodeList::invalidationType):
        (WebCore::CachedLiveNodeList<NodeListType>::CachedLiveNodeList):
        (WebCore::LiveNodeList::type): Deleted.
        * dom/NameNodeList.cpp:
        (WebCore::NameNodeList::NameNodeList):
        (WebCore::NameNodeList::nodeMatches): Deleted.
        * dom/NameNodeList.h:
        (WebCore::NameNodeList::nodeMatches):
        * dom/NodeRareData.h:
        (WebCore::NodeListTypeIdentifier<ClassNodeList>::value):
        (WebCore::NodeListTypeIdentifier<NameNodeList>::value):
        (WebCore::NodeListTypeIdentifier<TagNodeList>::value):
        (WebCore::NodeListTypeIdentifier<HTMLTagNodeList>::value):
        (WebCore::NodeListTypeIdentifier<RadioNodeList>::value):
        (WebCore::NodeListTypeIdentifier<LabelsNodeList>::value):
        
            Get unique id from type for key generation purposes only.

        (WebCore::NodeListsNodeData::addCacheWithAtomicName):
        (WebCore::NodeListsNodeData::addCacheWithName):
        (WebCore::NodeListsNodeData::removeCacheWithAtomicName):
        (WebCore::NodeListsNodeData::removeCacheWithName):
        (WebCore::NodeListsNodeData::namedNodeListKey):
        * dom/TagNodeList.cpp:
        (WebCore::TagNodeList::TagNodeList):
        (WebCore::HTMLTagNodeList::HTMLTagNodeList):
        * dom/TagNodeList.h:
        * html/LabelableElement.cpp:
        (WebCore::LabelableElement::labels):
        * html/LabelsNodeList.cpp:
        (WebCore::LabelsNodeList::LabelsNodeList):
        * html/LabelsNodeList.h:
        * html/RadioNodeList.cpp:
        (WebCore::RadioNodeList::RadioNodeList):
        * html/RadioNodeList.h:

2014-03-27  Simon Fraser  <simon.fraser@apple.com>

        Fix crash when RenderView is cleared inside of frame flattening layout
        https://bugs.webkit.org/show_bug.cgi?id=130864

        Reviewed by Dan Bernstein.
        
        Navigating on http://wallstcheatsheet.com pages on iOS in WebKit1 would
        sometimes crash when, inside the inChildFrameLayoutWithFrameFlattening clause,
        our frame's RenderView would be null after doing a layout from the root frame,
        possibly also when WebCore was being re-entered from another thread.
        
        Add a null check to fix this.
        
        Crash was timing-dependent and hard to test.

        * page/FrameView.cpp:
        (WebCore::FrameView::layout):

2014-03-27  Antti Koivisto  <antti@apple.com>

        Remove some unnecessary branches from LiveNodeList traversal
        https://bugs.webkit.org/show_bug.cgi?id=130854

        Reviewed by Andreas Kling.

        Compile different traversal code paths for all NodeList subclasses.

        * dom/ClassNodeList.cpp:
        (WebCore::ClassNodeList::ClassNodeList):
        (WebCore::ClassNodeList::~ClassNodeList):
        (WebCore::ClassNodeList::nodeMatches): Deleted.
        * dom/ClassNodeList.h:
        (WebCore::ClassNodeList::nodeMatches):
        (WebCore::ClassNodeList::nodeMatchesInlined): Deleted.
        
            Remove separate nodeMatchesInlined functions. 
            We now rely on exact types and marking classes final.

        * dom/LiveNodeList.cpp:
        (WebCore::LiveNodeList::LiveNodeList):
        (WebCore::LiveNodeList::~LiveNodeList):
        (WebCore::LiveNodeList::namedItem):
        (WebCore::LiveNodeList::rootNode): Deleted.
        (WebCore::isMatchingElement): Deleted.
        (WebCore::firstMatchingElement): Deleted.
        (WebCore::lastMatchingElement): Deleted.
        (WebCore::nextMatchingElement): Deleted.
        (WebCore::previousMatchingElement): Deleted.
        (WebCore::traverseMatchingElementsForward): Deleted.
        (WebCore::traverseMatchingElementsBackward): Deleted.
        (WebCore::LiveNodeList::collectionFirst): Deleted.
        (WebCore::LiveNodeList::collectionLast): Deleted.
        (WebCore::LiveNodeList::collectionTraverseForward): Deleted.
        (WebCore::LiveNodeList::collectionTraverseBackward): Deleted.
        (WebCore::LiveNodeList::length): Deleted.
        (WebCore::LiveNodeList::item): Deleted.
        (WebCore::LiveNodeList::memoryCost): Deleted.
        (WebCore::LiveNodeList::invalidateCache): Deleted.
        * dom/LiveNodeList.h:
        (WebCore::LiveNodeList::invalidateCacheForAttribute):
        (WebCore::CachedLiveNodeList::collectionCanTraverseBackward):
        (WebCore::LiveNodeList::rootNode):
        (WebCore::CachedLiveNodeList<NodeListType>::CachedLiveNodeList):
        
            Add CachedLiveNodeList<NodeListType> utility type that interfaces with CollectionIndexCache.
            It is the base class for all concrete LiveNodeLists.

        (WebCore::CachedLiveNodeList<NodeListType>::~CachedLiveNodeList):
        (WebCore::CachedLiveNodeList<NodeListType>::collectionFirst):
        (WebCore::CachedLiveNodeList<NodeListType>::collectionLast):
        (WebCore::nextMatchingElement):
        (WebCore::CachedLiveNodeList<NodeListType>::collectionTraverseForward):
        (WebCore::previousMatchingElement):
        (WebCore::CachedLiveNodeList<NodeListType>::collectionTraverseBackward):
        (WebCore::CachedLiveNodeList<NodeListType>::willValidateIndexCache):
        (WebCore::CachedLiveNodeList<NodeListType>::invalidateCache):
        (WebCore::CachedLiveNodeList<NodeListType>::length):
        (WebCore::CachedLiveNodeList<NodeListType>::item):
        (WebCore::CachedLiveNodeList<NodeListType>::memoryCost):
        
            Templated code moves to header.

        (WebCore::LiveNodeList::LiveNodeList): Deleted.
        (WebCore::LiveNodeList::~LiveNodeList): Deleted.
        (WebCore::LiveNodeList::invalidateCache): Deleted.
        (WebCore::LiveNodeList::collectionCanTraverseBackward): Deleted.
        (WebCore::LiveNodeList::willValidateIndexCache): Deleted.
        * dom/NameNodeList.cpp:
        (WebCore::NameNodeList::NameNodeList):
        * dom/NameNodeList.h:
        * dom/Node.cpp:
        (WebCore::Document::invalidateNodeListAndCollectionCaches):
        (WebCore::NodeListsNodeData::invalidateCaches):
        * dom/TagNodeList.cpp:
        (WebCore::TagNodeList::TagNodeList):
        (WebCore::HTMLTagNodeList::HTMLTagNodeList):
        (WebCore::HTMLTagNodeList::~HTMLTagNodeList):
        (WebCore::TagNodeList::nodeMatches): Deleted.
        (WebCore::HTMLTagNodeList::nodeMatches): Deleted.
        * dom/TagNodeList.h:
        (WebCore::TagNodeList::nodeMatches):
        (WebCore::HTMLTagNodeList::nodeMatches):
        (WebCore::TagNodeList::create): Deleted.
        (WebCore::HTMLTagNodeList::nodeMatchesInlined): Deleted.
        * html/LabelsNodeList.cpp:
        (WebCore::LabelsNodeList::LabelsNodeList):
        * html/LabelsNodeList.h:
        * html/RadioNodeList.cpp:
        (WebCore::RadioNodeList::RadioNodeList):
        * html/RadioNodeList.h:

2014-03-27  Adenilson Cavalcanti  <cavalcantii@gmail.com>

        Remove comment from Filter.h
        https://bugs.webkit.org/show_bug.cgi?id=130848

        Reviewed by Simon Fraser.

        Exploring the use of consts on applyScale() methods didn't yield
        good results.

        No new tests, no change on behavior.

        * platform/graphics/filters/Filter.h:

2014-03-27  Frédéric Wang  <fred.wang@free.fr>

        Operator stretching: expose a math data API
        https://bugs.webkit.org/show_bug.cgi?id=130572

        Reviewed by Chris Fleizach.

        We expose a new SimpleFontData API to give access to the data from the
        OpenType MATH table using a font cache. The class OpenTypeMathData will
        be implemented in bug 130324. On Darwin platform, we also implement the
        missing FontPlatformData::openTypeTable function which will be necessary
        to load the OpenType MATH table. The changes are intended to be used
        for MathML operator stretching (bug 130322) so tests are not added yet.

        * CMakeLists.txt: add new OpenTypeMathData files.
        * WebCore.vcxproj/WebCore.vcxproj: ditto.
        * WebCore.vcxproj/WebCore.vcxproj.filters: ditto.
        * WebCore.xcodeproj/project.pbxproj: ditto.
        * platform/graphics/FontCache.cpp: We add a FontCache::getMathData function to implement a cache for the math data.
        We make the math and vertical data share the same key for the cache.
        (WebCore::fontMathDataCacheInstance):
        (WebCore::FontCache::getMathData):
        (WebCore::fontVerticalDataCacheInstance):
        * platform/graphics/FontCache.h: We declare FontCache::getMathData and FontFileKey on all platforms.
        * platform/graphics/FontPlatformData.cpp:
        (WebCore::FontPlatformData::openTypeTable): We implement openTypeTable() on Darwin platform.
        * platform/graphics/FontPlatformData.h: We expose openTypeTable() on Darwin platform.
        * platform/graphics/SimpleFontData.cpp: We initialize m_mathData from the font cache.
        (WebCore::SimpleFontData::SimpleFontData):
        * platform/graphics/SimpleFontData.h: We expose a mathData() function to access the MATH data.
        * platform/graphics/opentype/OpenTypeMathData.cpp: Added. This is a new class that will be used to parse the data from the OpenType MATH table.
        (WebCore::OpenTypeMathData::OpenTypeMathData):
        * platform/graphics/opentype/OpenTypeMathData.h: Added.
        (WebCore::OpenTypeMathData::create):
        (WebCore::OpenTypeMathData::hasMathData):

2014-03-27  Brent Fulgham  <bfulgham@apple.com>

        Fix a crash caused by track insertion after load()
        https://bugs.webkit.org/show_bug.cgi?id=130777

        Reviewed by Eric Carlson.

        Test: media/track/track-insert-after-load-crash.html

        Based on the Blink change (patch by acolwell@chromium.org):
        https://codereview.chromium.org/211373009/

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute): Remove stale LoadMediaResource flag after explicit load.

2014-03-27  Alexey Proskuryakov  <ap@apple.com>

        Connection::dispatchOneMessage() can be re-entered while handling Cmd-key menu
        equivalents, ASSERT(!_data->_keyDownEventBeingResent)
        https://bugs.webkit.org/show_bug.cgi?id=130767
        <rdar://problem/16307487>

        Added a wrapper for RunLoop::initializeMainThread that also adds modal run loop
        mode to it on Mac.

        * CMakeLists.txt:
        * WebCore.exp.in:
        * WebCore.vcxproj/WebCore.vcxproj:
        * WebCore.vcxproj/WebCore.vcxproj.filters:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/MainRunLoop.cpp: Added.
        (WebCore::initializeMainRunLoop):
        * platform/MainRunLoop.h: Added.
        * platform/mac/MainRunLoop.mm: Added.
        (WebCore::initializeMainRunLoop):

2014-03-27  Krzysztof Czech  <k.czech@samsung.com>

        AX: Returns const reference to static string.
        https://bugs.webkit.org/show_bug.cgi?id=130835

        Reviewed by Mario Sanchez Prada.

        Avoiding some unnecessary copies by returning const reference to static string.

        No new tests. No behaviour change.

        * accessibility/AccessibilityMediaControls.cpp:
        (WebCore::AccessibilityMediaControl::controlTypeName):
        (WebCore::AccessibilityMediaControlsContainer::elementTypeName):
        * accessibility/AccessibilityMediaControls.h:

2014-03-27  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Rename inNamedFlow flag to isNamedFlowContentNode flag
        https://bugs.webkit.org/show_bug.cgi?id=130731

        Reviewed by Andrei Bucur.

        Currently, the inNamedFlow flag in Node class tells if a node is a content node, one that has a style with flow-into.
        Since it is used only for those nodes and not propagated through hierarchy, i want to renamed it to a more meaningful name.
        No new functionality, no new tests.

        * dom/ContainerNode.cpp:
        (WebCore::destroyRenderTreeIfNeeded):
        * dom/Element.cpp:
        (WebCore::Element::~Element):
        (WebCore::Element::unregisterNamedFlowContentElement):
        * dom/Node.h:
        (WebCore::Node::isNamedFlowContentNode):
        (WebCore::Node::setIsNamedFlowContentNode):
        (WebCore::Node::clearIsNamedFlowContentNode):
        * rendering/RenderNamedFlowThread.cpp:
        (WebCore::RenderNamedFlowThread::clearContentElements):
        (WebCore::RenderNamedFlowThread::registerNamedFlowContentElement):
        (WebCore::RenderNamedFlowThread::unregisterNamedFlowContentElement):
        (WebCore::nextNodeInsideContentElement):
        * style/StyleResolveTree.cpp:
        (WebCore::Style::attachChildren):
        (WebCore::Style::resolveLocal):

2014-03-27  Mihnea Ovidenie  <mihnea@adobe.com>

        [CSSRegions] Crash when cloning a region child with a content node child
        https://bugs.webkit.org/show_bug.cgi?id=129811

        Reviewed by David Hyatt.

        Collecting the children of a region in another named flow will be supported
        again in the future and it will be revisited when we will implement the content
        keyword: http://dev.w3.org/csswg/css-regions-1/#the-flow-into-property.
        Remove the support for now as it introduces unnecessary complexity in the code
        and potential wrong behavior.

        Test: fast/regions/region-content-node-child-clone-crash.html

        * dom/Element.cpp:
        (WebCore::Element::shouldMoveToFlowThread):
        (WebCore::Element::clearStyleDerivedDataBeforeDetachingRenderer):
        * dom/Element.h:
        * dom/ElementRareData.h:
        (WebCore::ElementRareData::ElementRareData):
        * rendering/FlowThreadController.cpp:
        * rendering/FlowThreadController.h:
        * style/StyleResolveTree.cpp:
        (WebCore::Style::moveToFlowThreadIfNeeded):
        (WebCore::Style::createRendererIfNeeded):

2014-03-27  Gyuyoung Kim  <gyuyoung.kim@samsung.com>

        Remove unneeded mutable keyword in some member variables 
        https://bugs.webkit.org/show_bug.cgi?id=130813

        Reviewed by Andreas Kling.

        Some member variables have mutable keyword though they don't used by const function.
        This patch removes them. 

        No new tests, no behavior changes. Just clean up.

        * storage/StorageAreaSync.h:
        * svg/animation/SVGSMILElement.h:

2014-03-27  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r166296 and r166331.
        https://bugs.webkit.org/show_bug.cgi?id=130822

        caused some crashes and frequent assertion failures, and the
        fix is going to take a little while (Requested by thorton on
        #webkit).

        Reverted changesets:

        "[iOS WebKit2] Flush all surfaces after painting into all of
        them, instead of after painting into each one"
        https://bugs.webkit.org/show_bug.cgi?id=130768
        http://trac.webkit.org/changeset/166296

        "Assertion failure in RemoteLayerBackingStore::flush"
        https://bugs.webkit.org/show_bug.cgi?id=130810
        http://trac.webkit.org/changeset/166331

2014-03-26  Simon Fraser  <simon.fraser@apple.com>

        Fix failing scrolling tests by reverting to previous behavior where
        the scrolling geometry for the main frame scrolling node was only
        updated from frameViewLayoutUpdated() and no-where else.

        * WebCore.exp.in:
        * page/scrolling/AsyncScrollingCoordinator.cpp:
        (WebCore::AsyncScrollingCoordinator::updateScrollingNode):
        * page/scrolling/AsyncScrollingCoordinator.h:
        * page/scrolling/ScrollingCoordinator.h:
        (WebCore::ScrollingCoordinator::updateScrollingNode):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateScrollCoordinatedLayer):
        (WebCore::RenderLayerCompositor::detachScrollCoordinatedLayer): Deleted.

2014-03-26  Ryosuke Niwa  <rniwa@webkit.org>

        HTMLConverter::_processText is slow because it walks up ancestor elements
        https://bugs.webkit.org/show_bug.cgi?id=130820

        Reviewed by Sam Weinig.

        Avoid walking up the tree from each text node by caching the aggregated attributed strings for each element.
        Also compute the attributed strings top-down to avoid calling mutableCopy in every iteration. 

        This reduces the runtime of Interactive/CopyAll.html from 15s to 13s (15%).

        * editing/cocoa/HTMLConverter.mm:
        (HTMLConverter::_attributesForElement):
        (HTMLConverter::attributesForElement):
        (HTMLConverter::aggregatedAttributesForAncestors):
        (HTMLConverter::_processText):

2014-03-26  Sam Weinig  <sam@webkit.org>

        Fix iOS build.

        * editing/cocoa/HTMLConverter.mm:
        (_font):

2014-03-26  Ryosuke Niwa  <rniwa@webkit.org>

        Make _processText and _traverseNode in HTMLConverter more efficient
        https://bugs.webkit.org/show_bug.cgi?id=130769

        Reviewed by Sam Weinig.

        Rewrote a bunch of code in C++ and avoided creating wrappers.
        This reduces the runtime of Interactive/CopyAll.html from ~16.5s to 15s.

        * editing/cocoa/HTMLConverter.mm:
        (HTMLConverterCaches::isAncestorsOfStartToBeConverted):
        (HTMLConverter::HTMLConverter):
        (HTMLConverter::~HTMLConverter):
        (HTMLConverter::_processElement):
        (HTMLConverter::_processText):
        (HTMLConverter::_traverseNode):
        (HTMLConverter::_traverseFooterNode):
        (HTMLConverterCaches::cacheAncestorsOfStartToBeConverted):
        (HTMLConverter::_loadFromDOMRange):

2014-03-26  Adenilson Cavalcanti  <cavalcantii@gmail.com>

        FEGaussianBlur: unify and const-ify calculateKernelSize
        https://bugs.webkit.org/show_bug.cgi?id=130779

        Some methods can benefit of using const refs as also make sense to
        unify the interface (i.e. parameters) in calculateKernelSize/Unscaled.

        FilterEffect::filter() will now return a reference, which helps since
        its descendants were accessing methods into the pointer without testing
        for it.

        Reviewed by Simon Fraser.

        No new tests, no changes on behavior.

        * platform/graphics/filters/FEDisplacementMap.cpp:
        (WebCore::FEDisplacementMap::platformApplySoftware):
        * platform/graphics/filters/FEDropShadow.cpp:
        (WebCore::FEDropShadow::determineAbsolutePaintRect):
        (WebCore::FEDropShadow::platformApplySoftware):
        * platform/graphics/filters/FEGaussianBlur.cpp:
        (WebCore::FEGaussianBlur::calculateUnscaledKernelSize):
        (WebCore::FEGaussianBlur::calculateKernelSize):
        (WebCore::FEGaussianBlur::determineAbsolutePaintRect):
        (WebCore::FEGaussianBlur::platformApplySoftware):
        * platform/graphics/filters/FEGaussianBlur.h:
        * platform/graphics/filters/FEMorphology.cpp:
        (WebCore::FEMorphology::determineAbsolutePaintRect):
        (WebCore::FEMorphology::platformApplySoftware):
        * platform/graphics/filters/FEOffset.cpp:
        (WebCore::FEOffset::determineAbsolutePaintRect):
        (WebCore::FEOffset::platformApplySoftware):
        * platform/graphics/filters/FETile.cpp:
        (WebCore::FETile::platformApplySoftware):
        * platform/graphics/filters/FETurbulence.cpp:
        (WebCore::FETurbulence::fillRegion):
        * platform/graphics/filters/Filter.h:
        (WebCore::Filter::applyHorizontalScale):
        (WebCore::Filter::applyVerticalScale):
        * platform/graphics/filters/FilterEffect.h:
        (WebCore::FilterEffect::filter):
        * platform/graphics/filters/SourceAlpha.cpp:
        (WebCore::SourceAlpha::determineAbsolutePaintRect):
        (WebCore::SourceAlpha::platformApplySoftware):
        * platform/graphics/filters/SourceGraphic.cpp:
        (WebCore::SourceGraphic::determineAbsolutePaintRect):
        (WebCore::SourceGraphic::platformApplySoftware):
        * rendering/svg/RenderSVGResourceFilterPrimitive.cpp:
        (WebCore::RenderSVGResourceFilterPrimitive::determineFilterPrimitiveSubregion):
        * svg/graphics/filters/SVGFEImage.cpp:
        (WebCore::FEImage::determineAbsolutePaintRect):
        (WebCore::FEImage::platformApplySoftware):

2014-03-26  Simon Fraser  <simon.fraser@apple.com>

        Make sure childContainmentLayer is parented
        https://bugs.webkit.org/show_bug.cgi?id=130808

        Reviewed by Tim Horton.

        m_childContainmentLayer was never parented if the page
        created no other compositing layers, which left a dangling
        GraphicsLayer which in turn confused UI-side compositing a little.
        Fix by always parenting this layer.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::createPrimaryGraphicsLayer):

2014-03-26  Brian Burg  <bburg@apple.com>

        Web Replay: disable page cache during capture/replay
        https://bugs.webkit.org/show_bug.cgi?id=130672

        Reviewed by Timothy Hatcher.

        Save, set, and restore page cache settings at the correct times.

        No new tests. If this code fails, then the tests for network replay will fail.

        * replay/ReplayController.cpp:
        (WebCore::ReplayController::setForceDeterministicSettings): Added.
        (WebCore::ReplayController::startCapturing):
        (WebCore::ReplayController::stopCapturing):
        (WebCore::ReplayController::cancelPlayback):
        (WebCore::ReplayController::replayToPosition):
        * replay/ReplayController.h:

2014-03-26  Sam Weinig  <sam@webkit.org>

        Convert more of HTMLConverter to C++
        https://bugs.webkit.org/show_bug.cgi?id=130811

        Reviewed by Anders Carlsson.

        * editing/cocoa/HTMLConverter.mm:
        (HTMLConverter::HTMLConverter):
        (HTMLConverter::~HTMLConverter):
        (HTMLConverter::_blockLevelElementForNode):
        (HTMLConverter::_colorForElement):
        (HTMLConverter::_computedAttributesForElement):
        (HTMLConverter::_attributesForElement):
        (HTMLConverter::_fillInBlock):
        (HTMLConverter::_enterElement):
        (HTMLConverter::_addTableForElement):
        (HTMLConverter::_addTableCellForElement):
        (HTMLConverter::_processElement):
        (HTMLConverter::_exitElement):
        (HTMLConverter::_getFloat): Deleted.
        (HTMLConverter::_elementIsBlockLevel): Deleted.
        (HTMLConverter::_elementHasOwnBackgroundColor): Deleted.
        (HTMLConverter::_colorForNode): Deleted.

2014-03-26  Simon Fraser  <simon.fraser@apple.com>

        Hook up -webkit-overflow-scrolling:touch for iOS WK2
        https://bugs.webkit.org/show_bug.cgi?id=130809

        Reviewed by Tim Horton.

        Get -webkit-overflow-scrolling: touch working for iOS WK2.
        
        * WebCore.exp.in:
        * page/scrolling/AsyncScrollingCoordinator.cpp:
        (WebCore::AsyncScrollingCoordinator::updateScrollingNode):
        Send in ScrollingGeometry when we update scrolling nodes.
        * page/scrolling/AsyncScrollingCoordinator.h:
        * page/scrolling/ScrollingCoordinator.h:
        (WebCore::ScrollingCoordinator::updateScrollingNode):
        * page/scrolling/ios/ScrollingTreeScrollingNodeIOS.h:
        Need to get to the scrolling layer in a subclass.
        (WebCore::ScrollingTreeScrollingNodeIOS::scrollLayer):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::hasAcceleratedTouchScrolling): Remove code
        that temporarily disabled touch-scrolling.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateScrollCoordinatedLayer): When we
        update scrolling nodes, send in the right scrolling geometry.

2014-03-26  Timothy Hatcher  <timothy@apple.com>

        Modernize the loops in InspectorPageAgent.cpp.

        Also moves the check for hiddenFromInspector to a lower level.
        This hides hidden resources from more places.

        https://bugs.webkit.org/show_bug.cgi?id=130803

        Reviewed by Joseph Pecoraro.

        * inspector/InspectorPageAgent.cpp:
        (WebCore::buildArrayForCookies):
        (WebCore::cachedResourcesForFrame):
        (WebCore::allResourcesURLsForFrame):
        (WebCore::InspectorPageAgent::getCookies):
        (WebCore::InspectorPageAgent::searchInResources):
        (WebCore::InspectorPageAgent::didClearWindowObjectInWorld):
        (WebCore::InspectorPageAgent::loaderDetachedFromFrame):
        (WebCore::InspectorPageAgent::buildObjectForFrameTree):

2014-03-26  Thiago de Barros Lacerda  <thiago.lacerda@openbossa.org>

        Add platform implementation for RTCOfferAnswerOptions and RTCOfferOptions
        https://bugs.webkit.org/show_bug.cgi?id=130689

        Reviewed by Eric Carlson.

        RTCOfferAnswerOptions and RTCOfferOptions objects were being passed to platform class, causing a layer
        violation.

        * Modules/mediastream/RTCOfferAnswerOptions.cpp:
        (WebCore::RTCOfferAnswerOptions::initialize):
        (WebCore::RTCOfferOptions::initialize):
        * Modules/mediastream/RTCOfferAnswerOptions.h:
        (WebCore::RTCOfferAnswerOptions::requestIdentity):
        (WebCore::RTCOfferAnswerOptions::privateOfferAnswerOptions):
        (WebCore::RTCOfferAnswerOptions::RTCOfferAnswerOptions):
        (WebCore::RTCOfferOptions::offerToReceiveVideo):
        (WebCore::RTCOfferOptions::offerToReceiveAudio):
        (WebCore::RTCOfferOptions::voiceActivityDetection):
        (WebCore::RTCOfferOptions::iceRestart):
        (WebCore::RTCOfferOptions::privateOfferOptions):
        (WebCore::RTCOfferOptions::RTCOfferOptions):
        * Modules/mediastream/RTCPeerConnection.cpp:
        (WebCore::RTCPeerConnection::createOffer):
        (WebCore::RTCPeerConnection::createAnswer):
        * platform/mediastream/RTCOfferAnswerOptionsPrivate.h: Added.
        * platform/mediastream/RTCPeerConnectionHandler.h:
        * platform/mock/RTCPeerConnectionHandlerMock.cpp:
        (WebCore::RTCPeerConnectionHandlerMock::createOffer):
        (WebCore::RTCPeerConnectionHandlerMock::createAnswer):
        * platform/mock/RTCPeerConnectionHandlerMock.h:

2014-03-26  Zalan Bujtas  <zalan@apple.com>

        Device scale factor should always be greater than 0.
        https://bugs.webkit.org/show_bug.cgi?id=130798

        Reviewed by David Kilzer.

        Rendering context requires a device scale factor > 0 so that we can map CSS pixels
        to device pixels properly. Neither 0 nor a negative device pixel ratio are considered to be valid.

        * page/Page.cpp:
        (WebCore::Page::setDeviceScaleFactor):

2014-03-26  Myles C. Maxfield  <mmaxfield@apple.com>

        Skipping underlines disregard points completely inside the underline rect
        https://bugs.webkit.org/show_bug.cgi?id=130800

        Reviewed by Dean Jackson.

        When determining bounds for underline skipping, endpoints of glyph contours
        that lie entirely within the rect of the underline are ignored. This patch
        makes these points affect the skipping regions the same way that intersections
        do.

        Test: fast/css3-text/css3-text-decoration/text-decoration-skip/glyph-inside-underline.html

        * platform/graphics/mac/FontMac.mm:
        (WebCore::updateX): Refactored common code into a function
        (WebCore::findPathIntersections): Test for endpoints which lie entirely within
        the underline bounds

2014-03-26  Pratik Solanki  <psolanki@apple.com>

        Unreviewed. iOS build fix after r166312. Soft link CMTimeRangeGetEnd.

        * platform/ios/WebVideoFullscreenInterfaceAVKit.mm:

2014-03-26  Timothy Hatcher  <timothy@apple.com>

        Propagate the hiddenFromInspector flag on ResourceRequest in
        places when a new request a made or passed between processes.

        https://bugs.webkit.org/show_bug.cgi?id=130741

        Reviewed by Joseph Pecoraro.

        * WebCore.exp.in: Updated symbols for updateFromDelegatePreservingOldProperties.
        * platform/network/cf/ResourceRequest.h:
        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties): Added.
        (WebCore::ResourceRequest::updateFromDelegatePreservingOldHTTPBody): Deleted.
        * platform/network/curl/ResourceRequest.h:
        (WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties): Added.
        (WebCore::ResourceRequest::updateFromDelegatePreservingOldHTTPBody): Deleted.
        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties): Added.
        (WebCore::ResourceRequest::updateFromDelegatePreservingOldHTTPBody): Deleted.
        * platform/network/soup/ResourceRequest.h:
        (WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties): Added.
        (WebCore::ResourceRequest::updateFromDelegatePreservingOldHTTPBody): Deleted.

2014-03-26  Zoltan Horvath  <zoltan@webkit.org>

        [CSS Shapes] Remove no-longer-used shape-inside geometry code
        https://bugs.webkit.org/show_bug.cgi?id=130740

        Reviewed by David Hyatt.

        This patch removes shape-padding support, since it can be used only with shape-inside.
        Shape-inside support has been removed in r166301.

        No new tests needed, existing tests have been removed by r166301.

        * rendering/shapes/BoxShape.cpp:
        (WebCore::BoxShape::shapePaddingLogicalBoundingBox): Deleted.
        (WebCore::BoxShape::shapePaddingBounds): Deleted.
        (WebCore::BoxShape::getIncludedIntervals): Deleted.
        (WebCore::BoxShape::firstIncludedIntervalLogicalTop): Deleted.
        * rendering/shapes/BoxShape.h:
        * rendering/shapes/PolygonShape.cpp:
        (WebCore::leftSide): Deleted.
        (WebCore::isReflexVertex): Deleted.
        (WebCore::computeShapePaddingBounds): Deleted.
        (WebCore::PolygonShape::shapePaddingBounds): Deleted.
        (WebCore::PolygonShape::getIncludedIntervals): Deleted.
        (WebCore::firstFitRectInPolygon): Deleted.
        (WebCore::aboveOrToTheLeft): Deleted.
        (WebCore::PolygonShape::firstIncludedIntervalLogicalTop): Deleted.
        * rendering/shapes/PolygonShape.h:
        (WebCore::PolygonShape::PolygonShape):
        * rendering/shapes/RasterShape.cpp:
        (WebCore::RasterShapeIntervals::firstIncludedIntervalY): Deleted.
        (WebCore::RasterShapeIntervals::getIncludedIntervals): Deleted.
        (WebCore::RasterShape::paddingIntervals): Deleted.
        (WebCore::RasterShape::getIncludedIntervals): Deleted.
        (WebCore::RasterShape::firstIncludedIntervalLogicalTop): Deleted.
        * rendering/shapes/RasterShape.h:
        * rendering/shapes/RectangleShape.cpp:
        (WebCore::ellipseYIntercept): Deleted.
        (WebCore::RectangleShape::shapePaddingBounds): Deleted.
        (WebCore::RectangleShape::getIncludedIntervals): Deleted.
        (WebCore::cornerInterceptForWidth): Deleted.
        (WebCore::RectangleShape::firstIncludedIntervalLogicalTop): Deleted.
        * rendering/shapes/RectangleShape.h:
        * rendering/shapes/Shape.cpp:
        (WebCore::Shape::createShape):
        (WebCore::Shape::createRasterShape):
        (WebCore::Shape::createBoxShape):
        * rendering/shapes/Shape.h:
        (WebCore::Shape::lineOverlapsShapePaddingBounds): Deleted.
        (WebCore::Shape::shapePadding): Deleted.
        * rendering/shapes/ShapeInfo.cpp:
        (WebCore::ShapeInfo<RenderType>::computedShape):
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::changeRequiresLayout):
        * rendering/style/RenderStyle.h:
        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        (WebCore::StyleRareNonInheritedData::operator==):
        * rendering/style/StyleRareNonInheritedData.h:

2014-03-26  Jeremy Jones  <jeremyj@apple.com>

        Implement hasLiveStreamingContent property in WebAVPlayerController
        https://bugs.webkit.org/show_bug.cgi?id=128684

        Reviewed by Simon Fraser.

        * WebCore.exp.in:
        Add export for WebVideoFullscreenInterfaceAVKit::setSeekableRanges().

        * platform/ios/WebVideoFullscreenInterface.h:
        Add setSeekableRanges()

        * platform/ios/WebVideoFullscreenInterfaceAVKit.h:
        Add setSeekableRanges()

        * platform/ios/WebVideoFullscreenInterfaceAVKit.mm:
        Remove vestigial playerLayer property. Add seekableTimeRanges property.

        (-[WebAVPlayerController dealloc]):
        Release _seekableTimeRanges.
        Remove references to _playerLayer.

        (-[WebAVPlayerController hasLiveStreamingContent]):
        Implement based on duration. Live stream has an infinite duration.

        (+[WebAVPlayerController keyPathsForValuesAffectingHasLiveStreamingContent]):
        Describe dependent keys for computed property hasLiveStreamingContent.

        (-[WebAVPlayerController skipBackwardThirtySeconds:]):
        Seek back 30 seconds if that time is in the seekable ranges.

        (-[WebAVPlayerController gotoEndOfSeekableRanges:]):
        Jump to live by going to the of the seekable ranges.

        (WebVideoFullscreenInterfaceAVKit::setSeekableRanges):
        Convert TimeRange to CMTimeRange.

        * platform/ios/WebVideoFullscreenModelMediaElement.mm:
        (WebVideoFullscreenModelMediaElement::setMediaElement):
        Set initial seekable ranges.

        (WebVideoFullscreenModelMediaElement::handleEvent):
        Update seekable ranges when time changes.

2014-03-26  Brent Fulgham  <bfulgham@apple.com>

        Fix OS X build.

        * WebCore.exp.in: Add missing export symbol.

2014-03-26  Simon Fraser  <simon.fraser@apple.com>

        Fix the Windows build. Add a no-op impl for Mac non-UI-side.

        * platform/graphics/ca/mac/PlatformCALayerMac.h:
        * platform/graphics/ca/win/PlatformCALayerWin.cpp:
        (PlatformCALayerWin::PlatformCALayerWin):
        * platform/graphics/ca/win/PlatformCALayerWin.h:

2014-03-26  Simon Fraser  <simon.fraser@apple.com>

        REGRESSION (r155977): matrix animations no longer animate
        https://bugs.webkit.org/show_bug.cgi?id=130789
        <rdar://problem/15650946>

        Reviewed by Dean Jackson.
        
        r155977 erroneously removed two lines that set the end points for
        matrix animations (used when transform lists don't match), so
        put them back.
        
        Also don't repaint when updateContentsScale()
        is called and doesn't change the contents scale.

        Test: compositing/animation/matrix-animation.html

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::updateRootRelativeScale):
        (WebCore::GraphicsLayerCA::setTransformAnimationEndpoints):
        (WebCore::GraphicsLayerCA::updateContentsScale):

2014-03-26  Simon Fraser  <simon.fraser@apple.com>

        Add a custom behavior flag to GraphicsLayer, piped down to PlatformCALayer, for scrolling layers
        https://bugs.webkit.org/show_bug.cgi?id=130778

        Reviewed by Tim Horton.

        Make it possible to put a "custom behavior" flag on a layer so that,
        with UI-side compositing, we know to create a specific type of
        layer or view for that GraphicsLayer.

        * WebCore.exp.in:
        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::GraphicsLayer):
        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::setCustomBehavior):
        (WebCore::GraphicsLayer::customBehavior):
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers):
        (WebCore::GraphicsLayerCA::updateCustomBehavior):
        (WebCore::GraphicsLayerCA::setCustomBehavior):
        * platform/graphics/ca/GraphicsLayerCA.h:
        * platform/graphics/ca/PlatformCALayer.h:
        * platform/graphics/ca/mac/PlatformCALayerMac.h:
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayerMac::PlatformCALayerMac):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateScrollingLayers):

2014-03-26  Brent Fulgham  <bfulgham@apple.com>

        Unreviewed test correction.

        Because of the way DRT on Windows links to WebCore, having the implementaion of the update
        method in the header caused a runtime failure due to duplicate symbols being bound to the
        compilation unit.

        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::setEnhancedUserInterfaceAccessibility): Moved from header.
        * accessibility/AXObjectCache.h:
        (WebCore::AXObjectCache::setEnhancedUserInterfaceAccessibility): Deleted.

2014-03-26  Jer Noble  <jer.noble@apple.com>

        REGRESSION(r162679): Poster image visible under the video
        https://bugs.webkit.org/show_bug.cgi?id=130783

        Reviewed by Simon Fraser.

        In the listed revision, we started checking for isRenderImage()
        instead of isImage(). RenderMedias return 'true' for the first
        but 'false' for the second. Change the if() statement to check
        for isRenderMedia() in addition to !isRenderImage().

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::isDirectlyCompositedImage):

2014-03-26  Antti Koivisto  <antti@apple.com>

        Render tree construction is O(N^2) in number of siblings
        https://bugs.webkit.org/show_bug.cgi?id=129065

        Reviewed by Darin Adler.
        
        When adding a new renderer to the tree we would search for the correct render tree
        position by traversing DOM children forward to find something that already has a renderer.
        In common case there is no such renderer. This would be repeated for each inserted renderer
        leading to O(n^2) in respect to child node count.
        
        This patch caches the computed render tree insertion position and passes it to siblings.
        Until the cached position is reached it can be used for all new renderers.

        Test: perf/sibling-renderer-On2.html

        * style/StyleResolveTree.cpp:
        (WebCore::Style::RenderTreePosition::parent):
        (WebCore::Style::RenderTreePosition::RenderTreePosition):
        (WebCore::Style::RenderTreePosition::canInsert):
        (WebCore::Style::RenderTreePosition::insert):
        (WebCore::Style::RenderTreePosition::computeNextSibling):
        (WebCore::Style::RenderTreePosition::invalidateNextSibling):
        (WebCore::Style::styleForElement):
        (WebCore::Style::elementInsideRegionNeedsRenderer):
        (WebCore::Style::createRendererIfNeeded):
        (WebCore::Style::createTextRendererIfNeeded):
        (WebCore::Style::attachTextRenderer):
        (WebCore::Style::updateTextRendererAfterContentChange):
        (WebCore::Style::attachChildren):
        (WebCore::Style::attachDistributedChildren):
        (WebCore::Style::attachShadowRoot):
        (WebCore::Style::attachBeforeOrAfterPseudoElementIfNeeded):
        (WebCore::Style::attachRenderTree):
        (WebCore::Style::resolveLocal):
        (WebCore::Style::resolveTextNode):
        (WebCore::Style::resolveShadowTree):
        (WebCore::Style::updateBeforeOrAfterPseudoElement):
        (WebCore::Style::resolveTree):

2014-03-26  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r166264.
        https://bugs.webkit.org/show_bug.cgi?id=130785

        Broke some window.opener tests for WK2 Mavericks (Requested by
        brrian__ on #webkit).

        Reverted changeset:

        "Web Replay: resource unique identifiers should be unique-per-
        frame, not globally"
        https://bugs.webkit.org/show_bug.cgi?id=130632
        http://trac.webkit.org/changeset/166264

2014-03-26  Zoltan Horvath  <zoltan@webkit.org>

        [CSS Shapes] Remove shape-inside support
        https://bugs.webkit.org/show_bug.cgi?id=130698

        Reviewed by David Hyatt.

        CSS Shapes Level 1 (CR) only contains shape-outside. We are focusing our efforts on finalizing
        the implementation of shape-outside, it's worth to remove shape-inside code at this point for now.

        A list of reasons for the removal:
          - Shape-inside is only part of Shapes Level 2, which needs to be improved on some topics.
          - Shape-inside is lack of new shapes support (e.g. inset).
          - Deprecated shapes (r165472) are removed from the code (e.g. rectangle), which affects shape-inside. 
          - The current shape-inside code spreads across the layout code.
          - The current shape-inside implementation is experimental in some areas,
            and the partially implemented code can have security implications.
          - Removal of shape-inside opens possibilities for code complexity and performance
            optimizations for shape-outside. (e.g. simpler geometry code)

        No new tests are needed.

        * CMakeLists.txt:
        * Configurations/FeatureDefines.xcconfig:
        * GNUmakefile.list.am:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::ComputedStyleExtractor::propertyValue):
        * css/CSSParser.cpp:
        (WebCore::isSimpleLengthPropertyID):
        (WebCore::CSSParser::parseValue):
        (WebCore::CSSParser::parseShapeProperty):
        * css/CSSPropertyNames.in:
        * css/DeprecatedStyleBuilder.cpp:
        (WebCore::DeprecatedStyleBuilder::DeprecatedStyleBuilder):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):
        (WebCore::StyleResolver::loadPendingImages):
        * page/animation/CSSPropertyAnimation.cpp:
        (WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap):
        * rendering/LayoutState.cpp:
        (WebCore::LayoutState::LayoutState):
        * rendering/LayoutState.h:
        (WebCore::LayoutState::LayoutState):
        (WebCore::LayoutState::shapeInsideInfo): Deleted.
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::styleDidChange):
        (WebCore::RenderBlock::imageChanged):
        (WebCore::RenderBlock::preparePaginationBeforeBlockLayout):
        (WebCore::RenderBlock::relayoutShapeDescendantIfMoved): Deleted.
        (WebCore::RenderBlock::logicalOffsetFromShapeAncestorContainer): Deleted.
        (WebCore::RenderBlock::updateShapeInsideInfoAfterStyleChange): Deleted.
        (WebCore::RenderBlock::ensureShapeInsideInfo): Deleted.
        (WebCore::RenderBlock::shapeInsideInfo): Deleted.
        (WebCore::RenderBlock::setShapeInsideInfo): Deleted.
        (WebCore::RenderBlock::markShapeInsideDescendantsForLayout): Deleted.
        (WebCore::RenderBlock::layoutShapeInsideInfo): Deleted.
        (WebCore::shapeInfoRequiresRelayout): Deleted.
        (WebCore::RenderBlock::computeShapeSize): Deleted.
        (WebCore::RenderBlock::updateShapesBeforeBlockLayout): Deleted.
        (WebCore::RenderBlock::updateShapesAfterBlockLayout): Deleted.
        (WebCore::RenderBlock::prepareShapesAndPaginationBeforeBlockLayout): Deleted.
        * rendering/RenderBlock.h:
        (WebCore::RenderBlock::allowsShapeInsideInfoSharing): Deleted.
        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::layoutBlock):
        (WebCore::RenderBlockFlow::layoutBlockChild):
        (WebCore::RenderBlockFlow::computeLogicalLocationForFloat):
        * rendering/RenderBlockFlow.h:
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlockFlow::computeInlineDirectionPositionsForLine):
        (WebCore::RenderBlockFlow::layoutRunsAndFloatsInRange):
        (WebCore::constructBidiRunsForLine): Deleted.
        (WebCore::pushShapeContentOverflowBelowTheContentBox): Deleted.
        (WebCore::RenderBlockFlow::updateShapeAndSegmentsForCurrentLine): Deleted.
        (WebCore::RenderBlockFlow::updateShapeAndSegmentsForCurrentLineInFlowThread): Deleted.
        (WebCore::adjustLogicalLineTop): Deleted.
        (WebCore::RenderBlockFlow::adjustLogicalLineTopAndLogicalHeightIfNeeded): Deleted.
        * rendering/RenderDeprecatedFlexibleBox.cpp:
        (WebCore::RenderDeprecatedFlexibleBox::layoutBlock):
        * rendering/RenderElement.cpp:
        (WebCore::RenderElement::~RenderElement):
        (WebCore::RenderElement::initializeStyle):
        (WebCore::RenderElement::setStyle):
        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::layoutBlock):
        * rendering/RenderGrid.cpp:
        (WebCore::RenderGrid::layoutBlock):
        * rendering/RenderNamedFlowFragment.cpp:
        (WebCore::RenderNamedFlowFragment::createStyle):
        * rendering/RenderView.h:
        * rendering/SimpleLineLayout.cpp:
        (WebCore::SimpleLineLayout::canUseFor):
        * rendering/line/BreakingContextInlineHeaders.h:
        (WebCore::BreakingContext::handleText):
        (WebCore::BreakingContext::handleEndOfLine):
        (WebCore::updateSegmentsForShapes): Deleted.
        * rendering/line/LineBreaker.cpp:
        (WebCore::LineBreaker::nextLineBreak):
        * rendering/line/LineWidth.cpp:
        (WebCore::LineWidth::LineWidth):
        (WebCore::LineWidth::updateAvailableWidth):
        (WebCore::LineWidth::wrapNextToShapeOutside):
        (WebCore::LineWidth::fitBelowFloats):
        (WebCore::LineWidth::updateLineSegment): Deleted.
        (WebCore::LineWidth::updateCurrentShapeSegment): Deleted.
        * rendering/line/LineWidth.h:
        * rendering/shapes/ShapeInsideInfo.cpp: Removed.
        * rendering/shapes/ShapeInsideInfo.h: Removed.
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::changeRequiresLayout):
        * rendering/style/RenderStyle.h:
        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        (WebCore::StyleRareNonInheritedData::operator==):
        * rendering/style/StyleRareNonInheritedData.h:

2014-03-25  Brent Fulgham  <bfulgham@apple.com>

        Avoid duplicate size checks when creating empty image
        https://bugs.webkit.org/show_bug.cgi?id=130730

        Reviewed by Dean Jackson.

        Merged from Blink (patch by ch.dumez@samsung.com):
        https://chromium.googlesource.com/chromium/blink/+/4861a71bc1f284fc97417f405ab7d08dc6947b88
        http://crbug.com/190633011

        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::createEmptyImageData): Don't perform overflow calculation twice.

2014-03-26  Sergio Villar Senin  <svillar@igalia.com>

        [CSS Grid Layout] getComputedStyle() must return the specified value for positioning properties
        https://bugs.webkit.org/show_bug.cgi?id=130010

        Reviewed by Darin Adler.

        According to the specs
        http://dev.w3.org/csswg/css-grid/#property-index and also to
        http://lists.w3.org/Archives/Public/www-style/2014Mar/0162.html
        the function getComputedStyle() must return the specified values
        for positioning properties, i.e, grid-{columns|rows}-{start|end}.

        We were in some cases, adjusting the style in the StyleResolver
        (for example with two opposing spans) something that is now done
        in the RenderGrid because we cannot alter the original style.

        The code moved to the renderer became more self explanatory and it
        now supports named grid areas with names ending in "-start" and
        "-end".

        Test: fast/css-grid-layout/named-grid-lines-with-named-grid-areas-get-set.html

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::adjustRenderStyle):
        (WebCore::gridLineDefinedBeforeGridArea): Deleted.
        (WebCore::StyleResolver::adjustNamedGridItemPosition): Deleted.
        (WebCore::StyleResolver::adjustGridItemPosition): Deleted.
        * css/StyleResolver.h:
        * rendering/RenderGrid.cpp:
        (WebCore::isColumnSide):
        (WebCore::RenderGrid::explicitGridSizeForSide):
        (WebCore::gridLineDefinedBeforeGridArea):
        (WebCore::setNamedLinePositionIfDefinedBeforeArea):
        (WebCore::RenderGrid::adjustNamedGridItemPosition):
        (WebCore::RenderGrid::adjustGridPositionsFromStyle):
        (WebCore::RenderGrid::resolveGridPositionsFromStyle):
        (WebCore::RenderGrid::resolveNamedGridLinePositionFromStyle):
        (WebCore::RenderGrid::resolveNamedGridLinePositionAgainstOppositePosition):
        * rendering/RenderGrid.h:
        * rendering/style/GridPosition.h:
        (WebCore::GridPosition::setAutoPosition): New helper function.

2014-03-26  Simon Fraser  <simon.fraser@apple.com>

        Fix the iOS build.

        * WebCore.exp.in:

2014-03-26  Tim Horton  <timothy_horton@apple.com>

        [iOS WebKit2] Flush all surfaces after painting into all of them, instead of after painting into each one
        https://bugs.webkit.org/show_bug.cgi?id=130768
        <rdar://problem/16421471>

        Reviewed by Simon Fraser.

        * platform/graphics/cocoa/IOSurface.h:
        Add a non-ensuring platformContext() getter.

2014-03-26  James Craig  <jcraig@apple.com>

        Web Inspector: AXI: crash when inspecting "bar" text node in getAccessibilityPropertiesForNode layout test
        https://bugs.webkit.org/show_bug.cgi?id=130290

        Reviewed by Timothy Hatcher.

        Test: inspector-protocol/dom/getAccessibilityPropertiesForNode.html

        Fixing regression from r165590. http://webkit.org/b/129779
        Verify isElementNode to avoid calling toElement on document or text nodes.

        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::buildObjectForAccessibilityProperties):

2014-03-25  Sergio Villar Senin  <svillar@igalia.com>

        Replace DEPRECATED_DEFINE_STATIC_LOCAL by static NeverDestroyed<T> in editing/
        https://bugs.webkit.org/show_bug.cgi?id=130722

        Reviewed by Antti Koivisto.

        * editing/AlternativeTextController.cpp:
        (WebCore::markerTypesForAutocorrection):
        (WebCore::markerTypesForReplacement):
        (WebCore::markerTypesForAppliedDictationAlternative):
        * editing/EditingStyle.cpp:
        (WebCore::htmlElementEquivalents):
        (WebCore::htmlAttributeEquivalents):
        * editing/FormatBlockCommand.cpp:
        (WebCore::isElementForFormatBlock):
        * editing/RemoveFormatCommand.cpp:
        (WebCore::isElementForRemoveFormatCommand):
        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::isProhibitedParagraphChild):
        * editing/atk/FrameSelectionAtk.cpp:
        (WebCore::maybeEmitTextFocusChange):

2014-03-25  Simon Fraser  <simon.fraser@apple.com>

        Add a new type of scrolling tree node for overflow scrolling
        https://bugs.webkit.org/show_bug.cgi?id=130763

        Reviewed by Tim Horton.

        Prepare for overflow scrolling via the scrolling tree by adding
        a new scrolling node type for overflow:scroll nodes. Mostly
        this is a new ScrollingNodeType that gets mapped to the same
        scrolling state nodes and scrolling nodes, but iOS creates
        state and scrolling nodes specific to overflow:scroll.
        
        Change the type checking on nodes to use virtual functions instead
        of just checking the node type, to allow the macros to work with
        the new scrolling node type.

        * WebCore.exp.in:
        * page/scrolling/AsyncScrollingCoordinator.cpp:
        (WebCore::AsyncScrollingCoordinator::ensureRootStateNodeForFrameView):
        * page/scrolling/ScrollingCoordinator.h:
        * page/scrolling/ScrollingStateFixedNode.h:
        * page/scrolling/ScrollingStateNode.h:
        (WebCore::ScrollingStateNode::isFixedNode):
        (WebCore::ScrollingStateNode::isStickyNode):
        (WebCore::ScrollingStateNode::isScrollingNode):
        * page/scrolling/ScrollingStateScrollingNode.cpp:
        (WebCore::ScrollingStateScrollingNode::create):
        (WebCore::ScrollingStateScrollingNode::ScrollingStateScrollingNode):
        * page/scrolling/ScrollingStateScrollingNode.h:
        * page/scrolling/ScrollingStateStickyNode.h:
        * page/scrolling/ScrollingStateTree.cpp:
        (WebCore::ScrollingStateTree::attachNode):
        * page/scrolling/ScrollingTree.cpp:
        (WebCore::ScrollingTree::viewportChangedViaDelegatedScrolling):
        (WebCore::ScrollingTree::updateTreeFromStateNode):
        * page/scrolling/ScrollingTreeNode.h:
        (WebCore::ScrollingTreeNode::isFixedNode):
        (WebCore::ScrollingTreeNode::isStickyNode):
        (WebCore::ScrollingTreeNode::isScrollingNode):
        * page/scrolling/ScrollingTreeScrollingNode.cpp:
        (WebCore::ScrollingTreeScrollingNode::ScrollingTreeScrollingNode):
        * page/scrolling/ScrollingTreeScrollingNode.h:
        * page/scrolling/ios/ScrollingCoordinatorIOS.mm:
        (WebCore::ScrollingCoordinatorIOS::createScrollingTreeNode):
        * page/scrolling/ios/ScrollingTreeScrollingNodeIOS.h:
        * page/scrolling/ios/ScrollingTreeScrollingNodeIOS.mm:
        (WebCore::ScrollingTreeScrollingNodeIOS::create):
        (WebCore::ScrollingTreeScrollingNodeIOS::ScrollingTreeScrollingNodeIOS):
        * page/scrolling/mac/ScrollingCoordinatorMac.mm:
        (WebCore::ScrollingCoordinatorMac::createScrollingTreeNode):
        * page/scrolling/mac/ScrollingTreeFixedNode.h:
        * page/scrolling/mac/ScrollingTreeScrollingNodeMac.h:
        * page/scrolling/mac/ScrollingTreeScrollingNodeMac.mm:
        (WebCore::ScrollingTreeScrollingNodeMac::create):
        (WebCore::ScrollingTreeScrollingNodeMac::ScrollingTreeScrollingNodeMac):
        * page/scrolling/mac/ScrollingTreeStickyNode.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateScrollCoordinatedLayer):

2014-03-26  Krzysztof Czech  <k.czech@samsung.com>

        [ATK] Utilize new AtkValue interface coming in ATK 2.11.92
        https://bugs.webkit.org/show_bug.cgi?id=130575

        Reviewed by Mario Sanchez Prada.

        ATK 2.11.92 introduces some new API and deprecates an old one.
        Adjust current implementation to meet requirements of the new API.

        No new tests. Covered by existing ones.

        * accessibility/atk/AXObjectCacheAtk.cpp:
        (WebCore::AXObjectCache::postPlatformNotification):
        * accessibility/atk/WebKitAccessibleInterfaceValue.cpp:
        (webkitAccessibleSetNewValue):
        (webkitAccessibleGetIncrementValue):
        (webkitAccessibleGetValueAndText):
        (webkitAccessibleGetIncrement):
        (webkitAccessibleSetValue):
        (webkitAccessibleGetRange):
        (webkitAccessibleValueSetCurrentValue):
        (webkitAccessibleValueGetMinimumIncrement):
        (webkitAccessibleValueInterfaceInit):

2014-03-26  Zan Dobersek  <zdobersek@igalia.com>

        Unreviewed. Removing the remaining Automake cruft.

        * GNUmakefile.list.am: 