/*
 * Copyright (C) 2006, 2007, 2009 Apple Inc. All rights reserved.
 * Copyright (C) 2006 Samuel Weinig <sam.weinig@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

// Introduced in DOM Level 2:
[
    JSCustomHeader,
    JSCustomMarkFunction,
    GenerateIsReachable,
    JSCustomGetOwnPropertySlotAndDescriptor,
    CustomNamedSetter,
    IndexedGetter,
    CustomEnumerateProperty,
    SkipVTableValidation
] interface CSSStyleDeclaration {
             [TreatReturnedNullStringAs=Null, TreatNullAs=NullString] attribute DOMString        cssText
                 setter raises(DOMException);

    [TreatReturnedNullStringAs=Null] DOMString          getPropertyValue(in [Default=Undefined] optional DOMString propertyName);
    [Custom] CSSValue           getPropertyCSSValue(in [Default=Undefined] optional DOMString propertyName);
    [TreatReturnedNullStringAs=Null] DOMString          removeProperty(in [Default=Undefined] optional DOMString propertyName)
        raises(DOMException);
    [TreatReturnedNullStringAs=Null] DOMString          getPropertyPriority(in [Default=Undefined] optional DOMString propertyName);
    [ObjCLegacyUnnamedParameters] void setProperty(in [Default=Undefined] optional DOMString propertyName, 
                                    in [TreatNullAs=NullString, Default=Undefined] optional DOMString value, 
                                    in [Default=Undefined] optional DOMString priority)
        raises(DOMException);

    readonly attribute unsigned long    length;
    DOMString          item(in [Default=Undefined] optional unsigned long index);
    readonly attribute CSSRule          parentRule;

    // Extensions
    [TreatReturnedNullStringAs=Null] DOMString          getPropertyShorthand(in [Default=Undefined] optional DOMString propertyName);
    boolean            isPropertyImplicit(in [Default=Undefined] optional DOMString propertyName);
};

