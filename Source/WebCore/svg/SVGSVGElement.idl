/*
 * Copyright (C) 2004, 2005 Nikolas Zimmermann <zimmermann@kde.org>
 * Copyright (C) 2004, 2005, 2010 Rob Buis <buis@kde.org>
 * Copyright (C) 2006 Samuel Weinig <sam.weinig@gmail.com>
 * Copyright (C) 2006 Apple Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

// FIXME: no css::ViewCSS available!
// FIXME: Fix SVGSVGElement inheritance (css::DocumentCSS)!
// FIXME: no events::DocumentEvent available!

interface SVGSVGElement : SVGGraphicsElement {
    readonly attribute SVGAnimatedLength x;
    readonly attribute SVGAnimatedLength y;
    readonly attribute SVGAnimatedLength width;
    readonly attribute SVGAnimatedLength height;
    attribute DOMString contentScriptType;
    attribute DOMString contentStyleType;
    readonly attribute SVGRect viewport;
    readonly attribute unrestricted float pixelUnitToMillimeterX;
    readonly attribute unrestricted float pixelUnitToMillimeterY;
    readonly attribute unrestricted float screenPixelToMillimeterX;
    readonly attribute unrestricted float screenPixelToMillimeterY;
    readonly attribute boolean useCurrentView;
    readonly attribute SVGViewSpec currentView;
    attribute unrestricted float currentScale;
    readonly attribute SVGPoint currentTranslate;

    unsigned long suspendRedraw(optional unsigned long maxWaitMilliseconds = 0);
    void unsuspendRedraw(optional unsigned long suspendHandleId = 0);
    void unsuspendRedrawAll();
    void forceRedraw();
    void pauseAnimations();
    void unpauseAnimations();
    boolean animationsPaused();
    unrestricted float getCurrentTime();
    void setCurrentTime(optional unrestricted float seconds = NaN);
    NodeList getIntersectionList(optional SVGRect rect = null, optional SVGElement? referenceElement = null);
    NodeList getEnclosureList(optional SVGRect rect = null, optional SVGElement? referenceElement = null);
    boolean checkIntersection(optional SVGElement? element = null, optional SVGRect rect = null);
    boolean checkEnclosure(optional SVGElement? element = null, optional SVGRect rect = null);
    void deselectAll();

    SVGNumber createSVGNumber();
    SVGLength createSVGLength();
    SVGAngle createSVGAngle();
    SVGPoint createSVGPoint();
    SVGMatrix createSVGMatrix();
    SVGRect createSVGRect();
    SVGTransform createSVGTransform();
    SVGTransform createSVGTransformFromMatrix(optional SVGMatrix matrix = null);

    // FIXME: Using "undefined" as default parameter value is wrong.
    Element getElementById([RequiresExistingAtomicString] optional DOMString elementId = "undefined");
};

SVGSVGElement implements SVGExternalResourcesRequired;
SVGSVGElement implements SVGFitToViewBox;
SVGSVGElement implements SVGZoomAndPan;
