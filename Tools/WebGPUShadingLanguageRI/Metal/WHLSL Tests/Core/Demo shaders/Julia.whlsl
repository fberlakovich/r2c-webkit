struct VertexInput {
    float2 position;
    float2 uv;
}

struct VertexOutput {
    float4 wsl_Position;
    float2 uv;
}

struct FragmentOutput {
    float4 wsl_Color;
}

vertex VertexOutput vertexShader(VertexInput vertexInput) {
    VertexOutput result;
    result.wsl_Position = float4(vertexInput.position, 0., 1.);
    result.uv = vertexInput.uv;
    return result;
}

fragment FragmentOutput fragmentShader(VertexOutput stageIn) {
    FragmentOutput result;
    float m = julia(stageIn.uv);
    float3 hot = float3(1, 1, 1);
    float3 cold = float3(0, 1, 0.1);
    float3 res = interpolate(cold, hot, m);
    res = hslToRgb(res);
    result.wsl_Color = float4(res, 1);
    return result;
}

float3 interpolate(float3 x, float3 y, float z)
{
    float3 res;
    res.x = x.x + (y.x - x.x) * z;
    res.y = x.y + (y.y - x.y) * z;
    res.z = x.z + (y.z - x.z) * z;
    return res;
}

float hueToRgb(float p, float q, float t)
{
if(t < 0.0) t += 1.0;
            if(t > 1.0) t -= 1.0;
            if(t < 1.0/6.0) return p + (q - p) * 6.0 * t;
            if(t < 1.0/2.0) return q;
            if(t < 2.0/3.0) return p + (q - p) * (2.0/3.0 - t) * 6.0;
            return p;
}

float3 hslToRgb(float3 hsl)
{
    float3 rgb;
    float h = hsl.x;
    float s = hsl.y;
    float l = hsl.z;
    if(s == 0){
        rgb = float3(l, l, l);
    } else {
        float q;
        if (l < 0.5) { q = l * (1.0 + s); } else { q = l + s - l * s; }
        float p = 2.0 * l - q;
        rgb.x = hueToRgb(p, q, h + 1.0/3.0);
        rgb.y = hueToRgb(p, q, h);
        rgb.z = hueToRgb(p, q, h - 1.0/3.0);
    }

    return rgb;

}

float julia(float2 uv)
{
    float n = 2.0f;
    float2 z;
    float2 c;
    float2 scale = float2(2, 2.9);
    float2 center = float2(0.7, 0);
    int iter = 100;
    c.x = 1.3333 * (uv.x - 0.5) * scale.x - center.x;
    c.y = (uv.y - 0.5) * scale.y - center.y;
    z = c;
    int i;
    for (i = 0; i < iter; i++) {
        float x = pow(z.x * z.x + z.y * z.y, n / 2.0) * cos(n * atan2(z.y, z.x)) + c.x;
        float y = pow(z.x * z.x + z.y * z.y, n / 2.0) * sin(n * atan2(z.y, z.x)) + c.y;

        if(pow(x, 2.0f) + pow(y, 2.0f) > 16.0f) break;
        z.x = x;
        z.y = y;
    }
    float res;
    if (i < iter) {
        float log_zn = log( z.x*z.x + z.y*z.y ) / 2.0f;
        float nu = log( log_zn / log(n) ) / log(2.0f);
        res = (float(i) + 1 - nu) / float(iter);
    } else {
       res = 1;
    }
    return res;
}

