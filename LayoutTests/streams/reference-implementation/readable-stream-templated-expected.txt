
PASS Running templatedRSEmpty with ReadableStream (empty) 
PASS instances have the correct methods and properties 
PASS Running templatedRSEmptyReader with ReadableStream (empty) reader 
PASS instances have the correct methods and properties 
PASS locked should be true 
PASS read() should never settle 
PASS two read()s should both never settle 
PASS read() should return distinct promises each time 
PASS getReader() again on the stream should fail 
PASS releasing the lock with pending read requests should throw but the read requests should stay pending 
TIMEOUT releasing the lock should cause further read() calls to reject with a TypeError Test timed out
TIMEOUT releasing the lock should cause closed to reject Test timed out
PASS releasing the lock should cause locked to become false 
PASS canceling via the reader should cause the reader to act closed 
PASS canceling via the stream should fail 
PASS Running templatedRSClosed with ReadableStream (closed via call in start) 
PASS cancel() should return a distinct fulfilled promise each time 
PASS locked should be false 
PASS getReader() should be OK 
FAIL piping to a WritableStream in the writable state should close the writable stream WritableStream constructor not implemented
FAIL piping to a WritableStream in the writable state with { preventClose: true } should do nothing WritableStream constructor not implemented
PASS should be able to acquire multiple readers if they are released in succession 
FAIL should not be able to acquire a second reader if we don't release the first one assert_throws: getting a second reader should throw function "function () { rs.getReader(); }" did not throw
PASS Running templatedRSClosedReader with ReadableStream reader (closed before getting reader) 
PASS read() should fulfill with { value: undefined, done: true } 
PASS read() multiple times should fulfill with { value: undefined, done: true } 
PASS read() should work when used within another read() fulfill callback 
PASS closed should fulfill with undefined 
FAIL releasing the lock should cause closed to reject and change identity assert_not_equals: the closed promise should change identity got disallowed value object "[object Promise]"
PASS cancel() should return a distinct fulfilled promise each time 
PASS Running templatedRSClosedReader with ReadableStream reader (closed after getting reader) 
PASS read() should fulfill with { value: undefined, done: true } 
PASS read() multiple times should fulfill with { value: undefined, done: true } 
PASS read() should work when used within another read() fulfill callback 
PASS closed should fulfill with undefined 
FAIL releasing the lock should cause closed to reject and change identity assert_not_equals: the closed promise should change identity got disallowed value object "[object Promise]"
PASS cancel() should return a distinct fulfilled promise each time 
PASS Running templatedRSClosed with ReadableStream (closed via cancel) 
PASS cancel() should return a distinct fulfilled promise each time 
PASS locked should be false 
PASS getReader() should be OK 
FAIL piping to a WritableStream in the writable state should close the writable stream WritableStream constructor not implemented
FAIL piping to a WritableStream in the writable state with { preventClose: true } should do nothing WritableStream constructor not implemented
PASS should be able to acquire multiple readers if they are released in succession 
FAIL should not be able to acquire a second reader if we don't release the first one assert_throws: getting a second reader should throw function "function () { rs.getReader(); }" did not throw
PASS Running templatedRSClosedReader with ReadableStream reader (closed via cancel after getting reader) 
PASS read() should fulfill with { value: undefined, done: true } 
PASS read() multiple times should fulfill with { value: undefined, done: true } 
PASS read() should work when used within another read() fulfill callback 
PASS closed should fulfill with undefined 
FAIL releasing the lock should cause closed to reject and change identity assert_not_equals: the closed promise should change identity got disallowed value object "[object Promise]"
PASS cancel() should return a distinct fulfilled promise each time 
PASS Running templatedRSErrored with ReadableStream (errored via call in start) 
FAIL piping to a WritableStream in the writable state should abort the writable stream WritableStream constructor not implemented
PASS getReader() should return a reader that acts errored 
PASS read() twice should give the error each time 
PASS locked should be false 
PASS Running templatedRSErroredSyncOnly with ReadableStream (errored via call in start) 
PASS should be able to obtain a second reader, with the correct closed promise 
FAIL should not be able to obtain additional readers if we don't release the first lock assert_throws: getting a second reader should throw a TypeError function "function () { rs.getReader(); }" did not throw
PASS cancel() should return a distinct rejected promise each time 
PASS reader cancel() should return a distinct rejected promise each time 
PASS Running templatedRSErrored with ReadableStream (errored via returning a rejected promise in start) 
FAIL piping to a WritableStream in the writable state should abort the writable stream WritableStream constructor not implemented
PASS getReader() should return a reader that acts errored 
PASS read() twice should give the error each time 
PASS locked should be false 
PASS Running templatedRSErroredAsyncOnly with ReadableStream (errored via returning a rejected promise in start) reader 
FAIL piping with no options WritableStream constructor not implemented
FAIL piping with { preventAbort: false } WritableStream constructor not implemented
FAIL piping with { preventAbort: true } WritableStream constructor not implemented
PASS Running templatedRSErroredReader with ReadableStream (errored via returning a rejected promise in start) reader 
PASS closed should reject with the error 
FAIL releasing the lock should cause closed to reject and change identity assert_not_equals: the closed promise should change identity got disallowed value object "[object Promise]"
PASS read() should reject with the error 
PASS Running templatedRSErroredReader with ReadableStream reader (errored before getting reader) 
PASS closed should reject with the error 
FAIL releasing the lock should cause closed to reject and change identity assert_not_equals: the closed promise should change identity got disallowed value object "[object Promise]"
PASS read() should reject with the error 
PASS Running templatedRSErroredReader with ReadableStream reader (errored after getting reader) 
PASS closed should reject with the error 
FAIL releasing the lock should cause closed to reject and change identity assert_not_equals: the closed promise should change identity got disallowed value object "[object Promise]"
PASS read() should reject with the error 
PASS Running templatedRSTwoChunksOpenReader with ReadableStream (two chunks enqueued, still open) reader 
PASS calling read() twice without waiting will eventually give both chunks 
PASS calling read() twice with waiting will eventually give both chunks 
PASS read() should return distinct promises each time 
PASS cancel() after a read() should still give that single read result 
PASS Running templatedRSTwoChunksClosed with ReadableStream (two chunks enqueued, then closed) 
FAIL piping with no options and no destination errors WritableStream constructor not implemented
FAIL piping with { preventClose: false } and no destination errors WritableStream constructor not implemented
FAIL piping with { preventClose: true } and no destination errors WritableStream constructor not implemented
FAIL piping with { preventClose: false } and a destination with that errors synchronously WritableStream constructor not implemented
FAIL piping with { preventClose: true } and a destination with that errors synchronously WritableStream constructor not implemented
FAIL piping with { preventClose: true } and a destination that errors on the last chunk WritableStream constructor not implemented
PASS Running templatedRSTwoChunksClosed with ReadableStream (two chunks enqueued async, then closed) 
FAIL piping with no options and no destination errors WritableStream constructor not implemented
FAIL piping with { preventClose: false } and no destination errors WritableStream constructor not implemented
FAIL piping with { preventClose: true } and no destination errors WritableStream constructor not implemented
FAIL piping with { preventClose: false } and a destination with that errors synchronously WritableStream constructor not implemented
FAIL piping with { preventClose: true } and a destination with that errors synchronously WritableStream constructor not implemented
FAIL piping with { preventClose: true } and a destination that errors on the last chunk WritableStream constructor not implemented
PASS Running templatedRSTwoChunksClosed with ReadableStream (two chunks enqueued via pull, then closed) 
FAIL piping with no options and no destination errors WritableStream constructor not implemented
FAIL piping with { preventClose: false } and no destination errors WritableStream constructor not implemented
FAIL piping with { preventClose: true } and no destination errors WritableStream constructor not implemented
FAIL piping with { preventClose: false } and a destination with that errors synchronously WritableStream constructor not implemented
FAIL piping with { preventClose: true } and a destination with that errors synchronously WritableStream constructor not implemented
FAIL piping with { preventClose: true } and a destination that errors on the last chunk WritableStream constructor not implemented
PASS Running templatedRSTwoChunksClosedReader with ReadableStream (two chunks enqueued, then closed) reader 
PASS third read(), without waiting, should give { value: undefined, done: true } 
PASS third read, with waiting, should give { value: undefined, done: true } 
FAIL draining the stream via read() should cause the reader closed promise to fulfill, but locked stays true assert_true: stream should remain locked expected true got false
FAIL releasing the lock after the stream is closed should cause locked to become false assert_true: the stream should start locked expected true got false
TIMEOUT releasing the lock should cause further read() calls to reject with a TypeError Test timed out
PASS reader's closed property always returns the same promise 

