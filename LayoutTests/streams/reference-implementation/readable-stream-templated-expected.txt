CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: line 361: Unhandled Promise Rejection: Error: boo!
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: line 361: Unhandled Promise Rejection: Error: boo!
CONSOLE MESSAGE: line 361: Unhandled Promise Rejection: Error: boo!
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: line 361: Unhandled Promise Rejection: Error: boo!
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: line 361: Unhandled Promise Rejection: Error: boo!
CONSOLE MESSAGE: Unhandled Promise Rejection: Error: !!!
CONSOLE MESSAGE: Unhandled Promise Rejection: Error: !!!
CONSOLE MESSAGE: Unhandled Promise Rejection: Error: !!!
CONSOLE MESSAGE: Unhandled Promise Rejection: Error: !!!
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream

Harness Error (FAIL), message = cancel() called on a reader owned by no readable stream

PASS Running templatedRSClosed with ReadableStream (closed via call in start) 
PASS piping to a WritableStream in the writable state should close the writable stream 
PASS piping to a WritableStream in the writable state with { preventClose: true } should do nothing 
PASS Running templatedRSClosed with ReadableStream (closed via cancel) 
PASS piping to a WritableStream in the writable state should close the writable stream 
PASS piping to a WritableStream in the writable state with { preventClose: true } should do nothing 
PASS Running templatedRSErrored with ReadableStream (errored via call in start) 
PASS piping to a WritableStream in the writable state should abort the writable stream 
PASS Running templatedRSErrored with ReadableStream (errored via returning a rejected promise in start) 
PASS piping to a WritableStream in the writable state should abort the writable stream 
PASS Running templatedRSErroredAsyncOnly with ReadableStream (errored via returning a rejected promise in start) reader 
PASS piping with no options 
PASS piping with { preventAbort: false } 
PASS piping with { preventAbort: true } 
PASS Running templatedRSTwoChunksClosed with ReadableStream (two chunks enqueued, then closed) 
PASS piping with no options and no destination errors 
PASS piping with { preventClose: false } and no destination errors 
PASS piping with { preventClose: true } and no destination errors 
PASS piping with { preventClose: false } and a destination with that errors synchronously 
PASS piping with { preventClose: true } and a destination with that errors synchronously 
PASS piping with { preventClose: true } and a destination that errors on the last chunk 
PASS Running templatedRSTwoChunksClosed with ReadableStream (two chunks enqueued async, then closed) 
PASS piping with no options and no destination errors 
PASS piping with { preventClose: false } and no destination errors 
PASS piping with { preventClose: true } and no destination errors 
PASS piping with { preventClose: false } and a destination with that errors synchronously 
PASS piping with { preventClose: true } and a destination with that errors synchronously 
PASS piping with { preventClose: true } and a destination that errors on the last chunk 
PASS Running templatedRSTwoChunksClosed with ReadableStream (two chunks enqueued via pull, then closed) 
PASS piping with no options and no destination errors 
PASS piping with { preventClose: false } and no destination errors 
PASS piping with { preventClose: true } and no destination errors 
PASS piping with { preventClose: false } and a destination with that errors synchronously 
PASS piping with { preventClose: true } and a destination with that errors synchronously 
PASS piping with { preventClose: true } and a destination that errors on the last chunk 

