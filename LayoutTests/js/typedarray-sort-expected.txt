This test checks the behavior of the TypedArray.prototype.sort function

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS Int32Array.prototype.sort.length is 1
PASS Int32Array.prototype.sort.name is 'sort'
PASS isSameFunctionForEachTypedArrayPrototype('sort') is true
PASS testPrototypeReceivesArray('sort', [undefined, this, { }, [ ], true, '']) is true

testPrototypeFunction has the following arg list (name, args, init, result [ , expectedArray ])

1.0 No Argument Testing
PASS testPrototypeFunction('sort', '()', [12, 5, 8, 13, 44], [5, 8, 12, 13, 44], [5, 8, 12, 13, 44]) is true
PASS testPrototypeFunction('sort', '()', [2, 4, 8, 3, 4], [2, 3, 4, 4, 8]) is true

1.1 Signed Numbers
PASS testPrototypeFunctionOnSigned('sort', '()', [12, -5, 8, -13, 44], [-13, -5, 8, 12, 44]) is true

1.2 Float Numbers
PASS testPrototypeFunctionOnFloat('sort', '()', [12, -5, 0, -0, -13, 44], [-13, -5, -0, 0, 12, 44]) is true
1.3 Negative NaNs
PASS Object.is(floatView[0],0) && Object.is(floatView[1], NaN) is true

2.0 Custom Function Testing
PASS testPrototypeFunction('sort', '(sortBackwards)', [2, 5, 10, 3, 4], [10, 5, 4, 3, 2]) is true

3.0 Exception Test
PASS testPrototypeFunction('sort', '(compareException)', [12, 15, 10, 13, 44], true) threw exception exception from function.

4.0 Wrong Type for Callback Test
PASS testPrototypeFunction('sort', '(8)', [12, 15, 10, 13, 44], [10, 12, 13, 15, 44]) is true
PASS testPrototypeFunction('sort', '("wrong")', [12, 15, 10, 13, 44], [10, 12, 13, 15, 44]) is true
PASS testPrototypeFunction('sort', '(new Object())', [12, 15, 10, 13, 44], [10, 12, 13, 15, 44]) is true
PASS testPrototypeFunction('sort', '(null)', [12, 15, 10, 13, 44], [10, 12, 13, 15, 44]) is true

PASS successfullyParsed is true

TEST COMPLETE

