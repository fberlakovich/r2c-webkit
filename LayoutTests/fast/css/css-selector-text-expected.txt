This tests parsing and re-serialization of some CSS selectors.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS parseThenSerializeRule('* { }') is '* { }'
PASS parseThenSerializeRule('a { }') is 'a { }'
PASS parseThenSerializeRule('#a { }') is '#a { }'
PASS parseThenSerializeRule('.a { }') is '.a { }'
PASS parseThenSerializeRule(':active { }') is ':active { }'
PASS parseThenSerializeRule('[a] { }') is '[a] { }'
PASS parseThenSerializeRule('[a="b"] { }') is '[a="b"] { }'
PASS parseThenSerializeRule('[a~="b"] { }') is '[a~="b"] { }'
PASS parseThenSerializeRule('[a|="b"] { }') is '[a|="b"] { }'
PASS parseThenSerializeRule('[a^="b"] { }') is '[a^="b"] { }'
PASS parseThenSerializeRule('[a$="b"] { }') is '[a$="b"] { }'
PASS parseThenSerializeRule('[a*="b"] { }') is '[a*="b"] { }'

PASS parseThenSerializeRule('*|a { }') is '*|a { }'
PASS parseThenSerializeRule('n|a { }') is 'n|a { }'
PASS parseThenSerializeRule('*|* { }') is '*|* { }'
PASS parseThenSerializeRule('n|* { }') is 'n|* { }'
PASS parseThenSerializeRule('[*|a] { }') is '[*|a] { }'
PASS parseThenSerializeRule('[n|a] { }') is '[n|a] { }'

PASS parseThenSerializeRule('a:active { }') is 'a:active { }'
PASS parseThenSerializeRule('a b { }') is 'a b { }'
PASS parseThenSerializeRule('a + b { }') is 'a + b { }'
PASS parseThenSerializeRule('a ~ b { }') is 'a ~ b { }'
PASS parseThenSerializeRule('a > b { }') is 'a > b { }'

PASS parseThenSerializeRule(':active { }') is ':active { }'
PASS parseThenSerializeRule(':checked { }') is ':checked { }'
PASS parseThenSerializeRule(':disabled { }') is ':disabled { }'
PASS parseThenSerializeRule(':empty { }') is ':empty { }'
PASS parseThenSerializeRule(':enabled { }') is ':enabled { }'
PASS parseThenSerializeRule(':first-child { }') is ':first-child { }'
PASS parseThenSerializeRule(':first-of-type { }') is ':first-of-type { }'
PASS parseThenSerializeRule(':focus { }') is ':focus { }'
PASS parseThenSerializeRule(':hover { }') is ':hover { }'
PASS parseThenSerializeRule(':indeterminate { }') is ':indeterminate { }'
PASS parseThenSerializeRule(':link { }') is ':link { }'
PASS parseThenSerializeRule(':not(:placeholder-shown) { }') is ':not(:placeholder-shown) { }'
PASS parseThenSerializeRule(':placeholder-shown { }') is ':placeholder-shown { }'
PASS parseThenSerializeRule(':root { }') is ':root { }'
PASS parseThenSerializeRule(':target { }') is ':target { }'
PASS parseThenSerializeRule(':visited { }') is ':visited { }'

PASS parseThenSerializeRule(':lang(a) { }') is ':lang(a) { }'
PASS parseThenSerializeRule(':not(a) { }') is ':not(a) { }'
PASS parseThenSerializeRule(':-webkit-any(a,b,p) { }') is ':-webkit-any(a,b,p) { }'

PASS parseThenSerializeRule('::after { }') is '::after { }'
PASS parseThenSerializeRule('::before { }') is '::before { }'
PASS parseThenSerializeRule('::first-letter { }') is '::first-letter { }'
PASS parseThenSerializeRule('::first-line { }') is '::first-line { }'
PASS parseThenSerializeRule('::selection { }') is '::selection { }'

PASS parseThenSerializeRule(':-webkit-any-link { }') is ':-webkit-any-link { }'
PASS parseThenSerializeRule(':-webkit-autofill { }') is ':-webkit-autofill { }'
PASS parseThenSerializeRule(':-webkit-drag { }') is ':-webkit-drag { }'

PASS parseThenSerializeRule(':nth-child(odd) { }') is ':nth-child(odd) { }'
PASS parseThenSerializeRule(':nth-child(even) { }') is ':nth-child(even) { }'
PASS parseThenSerializeRule(':nth-child(n) { }') is ':nth-child(n) { }'
PASS parseThenSerializeRule(':nth-child(-n) { }') is ':nth-child(-n) { }'
PASS parseThenSerializeRule(':nth-child(5) { }') is ':nth-child(5) { }'
PASS parseThenSerializeRule(':nth-child(-5) { }') is ':nth-child(-5) { }'
PASS parseThenSerializeRule(':nth-child(5n+7) { }') is ':nth-child(5n+7) { }'
PASS parseThenSerializeRule(':nth-child(-5n+7) { }') is ':nth-child(-5n+7) { }'
PASS parseThenSerializeRule(':nth-child(5n-7) { }') is ':nth-child(5n-7) { }'
PASS parseThenSerializeRule(':nth-child(-5n-7) { }') is ':nth-child(-5n-7) { }'

PASS parseThenSerializeRule(':nth-child(odd of .foo, :nth-child(odd)) { }') is ':nth-child(odd of .foo, :nth-child(odd)) { }'
PASS parseThenSerializeRule(':nth-child(even of .foo, :nth-child(odd)) { }') is ':nth-child(even of .foo, :nth-child(odd)) { }'
PASS parseThenSerializeRule(':nth-child(n of .foo, :nth-child(odd)) { }') is ':nth-child(n of .foo, :nth-child(odd)) { }'
PASS parseThenSerializeRule(':nth-child(-n of .foo, :nth-child(odd)) { }') is ':nth-child(-n of .foo, :nth-child(odd)) { }'
PASS parseThenSerializeRule(':nth-child(5 of .foo, :nth-child(odd)) { }') is ':nth-child(5 of .foo, :nth-child(odd)) { }'
PASS parseThenSerializeRule(':nth-child(-5 of .foo, :nth-child(odd)) { }') is ':nth-child(-5 of .foo, :nth-child(odd)) { }'
PASS parseThenSerializeRule(':nth-child(5n+7 of .foo, :nth-child(odd)) { }') is ':nth-child(5n+7 of .foo, :nth-child(odd)) { }'
PASS parseThenSerializeRule(':nth-child(-5n+7 of .foo, :nth-child(odd)) { }') is ':nth-child(-5n+7 of .foo, :nth-child(odd)) { }'
PASS parseThenSerializeRule(':nth-child(5n-7 of .foo, :nth-child(odd)) { }') is ':nth-child(5n-7 of .foo, :nth-child(odd)) { }'
PASS parseThenSerializeRule(':nth-child(-5n-7 of .foo, :nth-child(odd)) { }') is ':nth-child(-5n-7 of .foo, :nth-child(odd)) { }'

PASS parseThenSerializeRule(':matches(single) { }') is ':matches(single) { }'
PASS parseThenSerializeRule(':matches(a, b, p) { }') is ':matches(a, b, p) { }'
PASS parseThenSerializeRule(':matches(#alice, #bob, #chris) { }') is ':matches(#alice, #bob, #chris) { }'
PASS parseThenSerializeRule(':matches(.selector, #tama, #hanayo, #midoriko) { }') is ':matches(.selector, #tama, #hanayo, #midoriko) { }'
PASS parseThenSerializeRule(':matches(.name, #ok, :visited) { }') is ':matches(.name, #ok, :visited) { }'
PASS parseThenSerializeRule(':matches(.name, #ok, :visited, :link) { }') is ':matches(.name, #ok, :visited, :link) { }'
PASS parseThenSerializeRule(':matches(.name, #ok, :matches(:visited)) { }') is ':matches(.name, #ok, :matches(:visited)) { }'
PASS parseThenSerializeRule(':matches(.name, #ok, :not(:link)) { }') is ':matches(.name, #ok, :not(:link)) { }'
PASS parseThenSerializeRule(':matches(.name, #ok, :not(:link)) { }') is ':matches(.name, #ok, :not(:link)) { }'
PASS parseThenSerializeRule(':matches(.name, #ok, :-webkit-any(hello)) { }') is ':matches(.name, #ok, :-webkit-any(hello)) { }'
PASS parseThenSerializeRule(':matches(.name, #ok, :-webkit-any(.selector,#tama,#hanayo,#midoriko)) { }') is ':matches(.name, #ok, :-webkit-any(.selector,#tama,#hanayo,#midoriko)) { }'
PASS parseThenSerializeRule(':matches([type="file"]) { }') is ':matches([type="file"]) { }'
PASS parseThenSerializeRule(':matches(:hover) { }') is ':matches(:hover) { }'
PASS parseThenSerializeRule('input:matches([type="file"], :hover, :focus):enabled { }') is 'input:matches([type="file"], :hover, :focus):enabled { }'
PASS parseThenSerializeRule(':matches(input[type="file"], a:hover, button:focus) { }') is ':matches(input[type="file"], a:hover, button:focus) { }'
PASS parseThenSerializeRule(':matches(.class1.class2.class3) { }') is ':matches(.class1.class2.class3) { }'
PASS parseThenSerializeRule(':matches(.class1:hover) { }') is ':matches(.class1:hover) { }'
PASS parseThenSerializeRule(':matches(a.class1.class2.class3:hover) { }') is ':matches(a.class1.class2.class3:hover) { }'
PASS parseThenSerializeRule(':matches(::first-letter, ::first-line) { }') is ':matches(::first-letter, ::first-line) { }'
PASS parseThenSerializeRule(':matches(a > ::first-letter, b ~ ::first-line, c ::after, d + ::before) { }') is ':matches(a > ::first-letter, b ~ ::first-line, c ::after, d + ::before) { }'
PASS parseThenSerializeRule(':matches(.ok a > ::first-letter, .ok b ~ ::first-line, .ok c ::after, .ok d + ::before) { }') is ':matches(.ok a > ::first-letter, .ok b ~ ::first-line, .ok c ::after, .ok d + ::before) { }'
PASS parseThenSerializeRule(':matches(.ok a > .ok ::first-letter, .ok b ~ .ok ::first-line, .ok c .ok ::after, .ok d + .ok ::before) { }') is ':matches(.ok a > .ok ::first-letter, .ok b ~ .ok ::first-line, .ok c .ok ::after, .ok d + .ok ::before) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(single)) { }') is ':-webkit-any(:matches(single)) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(a, b, p)) { }') is ':-webkit-any(:matches(a, b, p)) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(#alice, #bob, #chris)) { }') is ':-webkit-any(:matches(#alice, #bob, #chris)) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(.selector, #tama, #hanayo, #midoriko)) { }') is ':-webkit-any(:matches(.selector, #tama, #hanayo, #midoriko)) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(.name, #ok, :visited)) { }') is ':-webkit-any(:matches(.name, #ok, :visited)) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(.name, #ok, :visited, :link)) { }') is ':-webkit-any(:matches(.name, #ok, :visited, :link)) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(.name, #ok, :matches(:visited))) { }') is ':-webkit-any(:matches(.name, #ok, :matches(:visited))) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(.name, #ok, :not(:link))) { }') is ':-webkit-any(:matches(.name, #ok, :not(:link))) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(.name, #ok, :not(:link))) { }') is ':-webkit-any(:matches(.name, #ok, :not(:link))) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(.name, #ok, :-webkit-any(hello))) { }') is ':-webkit-any(:matches(.name, #ok, :-webkit-any(hello))) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(.name, #ok, :-webkit-any(.selector,#tama,#hanayo,#midoriko))) { }') is ':-webkit-any(:matches(.name, #ok, :-webkit-any(.selector,#tama,#hanayo,#midoriko))) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches([type="file"])) { }') is ':-webkit-any(:matches([type="file"])) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(:hover)) { }') is ':-webkit-any(:matches(:hover)) { }'
PASS parseThenSerializeRule(':-webkit-any(input:matches([type="file"], :hover, :focus):enabled) { }') is ':-webkit-any(input:matches([type="file"], :hover, :focus):enabled) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(input[type="file"], a:hover, button:focus)) { }') is ':-webkit-any(:matches(input[type="file"], a:hover, button:focus)) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(.class1.class2.class3)) { }') is ':-webkit-any(:matches(.class1.class2.class3)) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(.class1:hover)) { }') is ':-webkit-any(:matches(.class1:hover)) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(a.class1.class2.class3:hover)) { }') is ':-webkit-any(:matches(a.class1.class2.class3:hover)) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(::first-letter, ::first-line)) { }') is ':-webkit-any(:matches(::first-letter, ::first-line)) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(a > ::first-letter, b ~ ::first-line, c ::after, d + ::before)) { }') is ':-webkit-any(:matches(a > ::first-letter, b ~ ::first-line, c ::after, d + ::before)) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(.ok a > ::first-letter, .ok b ~ ::first-line, .ok c ::after, .ok d + ::before)) { }') is ':-webkit-any(:matches(.ok a > ::first-letter, .ok b ~ ::first-line, .ok c ::after, .ok d + ::before)) { }'
PASS parseThenSerializeRule(':-webkit-any(:matches(.ok a > .ok ::first-letter, .ok b ~ .ok ::first-line, .ok c .ok ::after, .ok d + .ok ::before)) { }') is ':-webkit-any(:matches(.ok a > .ok ::first-letter, .ok b ~ .ok ::first-line, .ok c .ok ::after, .ok d + .ok ::before)) { }'

PASS parseThenSerializeRule('::-webkit-file-upload-button { }') is '*::-webkit-file-upload-button { }'
PASS parseThenSerializeRule('::-webkit-search-cancel-button { }') is '*::-webkit-search-cancel-button { }'
PASS parseThenSerializeRule('::-webkit-search-decoration { }') is '*::-webkit-search-decoration { }'
PASS parseThenSerializeRule('::-webkit-search-results-button { }') is '*::-webkit-search-results-button { }'
PASS parseThenSerializeRule('::-webkit-search-results-decoration { }') is '*::-webkit-search-results-decoration { }'
PASS parseThenSerializeRule('::-webkit-slider-thumb { }') is '*::-webkit-slider-thumb { }'

PASS parseThenSerializeRule('a::-webkit-slider-thumb { }') is 'a::-webkit-slider-thumb { }'
PASS parseThenSerializeRule('a ::-webkit-slider-thumb { }') is 'a *::-webkit-slider-thumb { }'
PASS parseThenSerializeRule('[a]::-webkit-slider-thumb { }') is '[a]::-webkit-slider-thumb { }'
PASS parseThenSerializeRule('[a] ::-webkit-slider-thumb { }') is '[a] *::-webkit-slider-thumb { }'
PASS parseThenSerializeRule('.a::-webkit-slider-thumb { }') is '.a::-webkit-slider-thumb { }'
PASS parseThenSerializeRule('.a ::-webkit-slider-thumb { }') is '.a *::-webkit-slider-thumb { }'
PASS parseThenSerializeRule('#a::-webkit-slider-thumb { }') is '#a::-webkit-slider-thumb { }'
PASS parseThenSerializeRule('#a ::-webkit-slider-thumb { }') is '#a *::-webkit-slider-thumb { }'
PASS parseThenSerializeRule('* ::-webkit-slider-thumb { }') is '* *::-webkit-slider-thumb { }'

PASS parseThenSerializeRule('a[b]::-webkit-slider-thumb { }') is 'a[b]::-webkit-slider-thumb { }'
PASS parseThenSerializeRule('a.b::-webkit-slider-thumb { }') is 'a.b::-webkit-slider-thumb { }'
PASS parseThenSerializeRule('a#b::-webkit-slider-thumb { }') is 'a#b::-webkit-slider-thumb { }'
PASS parseThenSerializeRule('a[b].c#d::-webkit-slider-thumb { }') is 'a[b].c#d::-webkit-slider-thumb { }'

PASS parseThenSerializeRule('input:not([type="file"]):focus { }') is 'input:not([type="file"]):focus { }'
PASS parseThenSerializeRule(':-webkit-any([type="file"]) { }') is ':-webkit-any([type="file"]) { }'
PASS parseThenSerializeRule(':-webkit-any(:hover) { }') is ':-webkit-any(:hover) { }'
PASS parseThenSerializeRule('input:-webkit-any([type="file"],:hover,:focus):enabled { }') is 'input:-webkit-any([type="file"],:hover,:focus):enabled { }'
PASS parseThenSerializeRule(':-webkit-any(input[type="file"],a:hover,button:focus) { }') is ':-webkit-any(input[type="file"],a:hover,button:focus) { }'
PASS parseThenSerializeRule(':-webkit-any(.class1.class2.class3) { }') is ':-webkit-any(.class1.class2.class3) { }'
PASS parseThenSerializeRule(':-webkit-any(.class1:hover) { }') is ':-webkit-any(.class1:hover) { }'
PASS parseThenSerializeRule(':-webkit-any(a.class1.class2.class3:hover) { }') is ':-webkit-any(a.class1.class2.class3:hover) { }'

PASS parseThenSerializeRule('*:active { }') is ':active { }'
PASS parseThenSerializeRule('|a { }') is 'a { }'

PASS parseThenSerializeRule('input[type=file]:focus { }') is 'input[type="file"]:focus { }'

PASS parseThenSerializeRule('a+b { }') is 'a + b { }'
PASS parseThenSerializeRule('a~b { }') is 'a ~ b { }'
PASS parseThenSerializeRule('a>b { }') is 'a > b { }'

PASS parseThenSerializeRule(':after { }') is '::after { }'
PASS parseThenSerializeRule(':before { }') is '::before { }'
PASS parseThenSerializeRule(':first-letter { }') is '::first-letter { }'
PASS parseThenSerializeRule(':first-line { }') is '::first-line { }'
PASS parseThenSerializeRule(':-webkit-any(    a.class1  ,  	#id,[attr]  ) { }') is ':-webkit-any(a.class1,#id,[attr]) { }'

PASS parseThenSerializeRule(':matches(single    ) { }') is ':matches(single) { }'
PASS parseThenSerializeRule(':matches(a,b    ,p) { }') is ':matches(a, b, p) { }'
PASS parseThenSerializeRule(':matches(#alice,                   #bob,#chris) { }') is ':matches(#alice, #bob, #chris) { }'
PASS parseThenSerializeRule(':matches(  .selector,#tama,                #hanayo,#midoriko) { }') is ':matches(.selector, #tama, #hanayo, #midoriko) { }'
PASS parseThenSerializeRule(':matches(    .name,#ok,:visited   ) { }') is ':matches(.name, #ok, :visited) { }'
PASS parseThenSerializeRule(':matches(    .name,#ok,    :visited, :link) { }') is ':matches(.name, #ok, :visited, :link) { }'
PASS parseThenSerializeRule(':matches(    .name,#ok,    :matches(:visited    )) { }') is ':matches(.name, #ok, :matches(:visited)) { }'
PASS parseThenSerializeRule(':matches(.name,  #ok,:not(:link)) { }') is ':matches(.name, #ok, :not(:link)) { }'
PASS parseThenSerializeRule(':matches(.name,#ok,:not(:link)) { }') is ':matches(.name, #ok, :not(:link)) { }'
PASS parseThenSerializeRule(':matches(    .name,#ok,:-webkit-any(   hello)) { }') is ':matches(.name, #ok, :-webkit-any(hello)) { }'
PASS parseThenSerializeRule(':matches(    .name,#ok, :-webkit-any(.selector, #tama, #hanayo, #midoriko)) { }') is ':matches(.name, #ok, :-webkit-any(.selector,#tama,#hanayo,#midoriko)) { }'
PASS parseThenSerializeRule(':matches(       [type="file"]) { }') is ':matches([type="file"]) { }'
PASS parseThenSerializeRule(':matches(  :hover    ) { }') is ':matches(:hover) { }'
PASS parseThenSerializeRule('input:matches([type="file"],:hover,:focus):enabled { }') is 'input:matches([type="file"], :hover, :focus):enabled { }'
PASS parseThenSerializeRule(':matches(input[type="file"], a:hover, button:focus) { }') is ':matches(input[type="file"], a:hover, button:focus) { }'
PASS parseThenSerializeRule(':matches( .class1.class2.class3   ) { }') is ':matches(.class1.class2.class3) { }'
PASS parseThenSerializeRule(':matches(.class1:hover   ) { }') is ':matches(.class1:hover) { }'
PASS parseThenSerializeRule(':matches(a.class1.class2.class3:hover   ) { }') is ':matches(a.class1.class2.class3:hover) { }'
PASS parseThenSerializeRule(':matches(:first-letter,::first-line) { }') is ':matches(::first-letter, ::first-line) { }'
PASS parseThenSerializeRule(':matches(a>:first-letter,b   ~ ::first-line, c :after, d+ :before) { }') is ':matches(a > ::first-letter, b ~ ::first-line, c ::after, d + ::before) { }'
PASS parseThenSerializeRule(':matches(.ok a >    ::first-letter, .ok b~ ::first-line, .ok c :after, .ok d +:before) { }') is ':matches(.ok a > ::first-letter, .ok b ~ ::first-line, .ok c ::after, .ok d + ::before) { }'
PASS parseThenSerializeRule(':matches(.ok a> .ok ::first-letter, .ok b   ~.ok :first-line, .ok c .ok    ::after, .ok d + .ok ::before) { }') is ':matches(.ok a > .ok ::first-letter, .ok b ~ .ok ::first-line, .ok c .ok ::after, .ok d + .ok ::before) { }'

PASS successfullyParsed is true

TEST COMPLETE

