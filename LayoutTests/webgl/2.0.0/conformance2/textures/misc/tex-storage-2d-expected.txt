This test runs the WebGL Test listed below in an iframe and reports PASS or FAIL.

Test: ../../../resources/webgl_test_files/conformance2/textures/misc/tex-storage-2d.html
[ 1: PASS ] WebGL context exists
[ 2: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero width
[ 3: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero height
[ 4: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for negative height
[ 5: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero levels
[ 6: PASS ] getError was expected value: INVALID_OPERATION : texStorage2D should fail for too many levels
[ 7: PASS ] getError was expected value: INVALID_ENUM : texStorage2D should fail for bad target TEXTURE_CUBE_MAP_NEGATIVE_X
[ 8: PASS ] getError was expected value: INVALID_OPERATION : texStorage2D should fail when no texture is bound
[ 9: PASS ] getError was expected value: INVALID_ENUM : texStorage2D should fail for bad internalformat RGBA
[ 10: PASS ] getError was expected value: NO_ERROR : texStorage2D should succeed with a good sized internalformat
[ 11: FAIL ] getError expected: NO_ERROR. Was INVALID_ENUM : getTexParameter should succeed with TEXTURE_IMMUTABLE_FORMAT
[ 12: PASS ] getTexParameter with TEXTURE_IMMUTABLE_FORMAT should not return 0
[ 13: PASS ] getError was expected value: INVALID_OPERATION : texImage2D should fail on immutable texture
[ 14: PASS ] getError was expected value: INVALID_OPERATION : compressedTexImage2D should fail on immutable texture
[ 15: PASS ] getError was expected value: INVALID_OPERATION : copyTexImage2D should fail on immutable texture
[ 16: PASS ] texture should sample as uninitialized texture after texStorage2D
[ 17: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 18: PASS ] texture should sample as red after uploading red pixels with texSubImage2D
[ 19: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero width
[ 20: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero height
[ 21: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for negative height
[ 22: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero levels
[ 23: PASS ] getError was expected value: INVALID_OPERATION : texStorage2D should fail for too many levels
[ 24: PASS ] getError was expected value: INVALID_ENUM : texStorage2D should fail for bad target TEXTURE_CUBE_MAP_NEGATIVE_X
[ 25: PASS ] getError was expected value: INVALID_OPERATION : texStorage2D should fail when no texture is bound
[ 26: PASS ] getError was expected value: INVALID_ENUM : texStorage2D should fail for bad internalformat RGB
[ 27: PASS ] getError was expected value: NO_ERROR : texStorage2D should succeed with a good sized internalformat
[ 28: FAIL ] getError expected: NO_ERROR. Was INVALID_ENUM : getTexParameter should succeed with TEXTURE_IMMUTABLE_FORMAT
[ 29: PASS ] getTexParameter with TEXTURE_IMMUTABLE_FORMAT should not return 0
[ 30: PASS ] getError was expected value: INVALID_OPERATION : texImage2D should fail on immutable texture
[ 31: PASS ] getError was expected value: INVALID_OPERATION : compressedTexImage2D should fail on immutable texture
[ 32: PASS ] getError was expected value: INVALID_OPERATION : copyTexImage2D should fail on immutable texture
[ 33: PASS ] texture should sample as uninitialized texture after texStorage2D
[ 34: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 35: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 36: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 37: PASS ] texture should sample as red after uploading red pixels with texSubImage2D
[ 38: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero width
[ 39: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero height
[ 40: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for negative height
[ 41: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero levels
[ 42: PASS ] getError was expected value: INVALID_OPERATION : texStorage2D should fail for too many levels
[ 43: PASS ] getError was expected value: INVALID_ENUM : texStorage2D should fail for bad target TEXTURE_CUBE_MAP_NEGATIVE_X
[ 44: PASS ] getError was expected value: INVALID_OPERATION : texStorage2D should fail when no texture is bound
[ 45: PASS ] getError was expected value: INVALID_ENUM : texStorage2D should fail for bad internalformat RGBA
[ 46: PASS ] getError was expected value: NO_ERROR : texStorage2D should succeed with a good sized internalformat
[ 47: FAIL ] getError expected: NO_ERROR. Was INVALID_ENUM : getTexParameter should succeed with TEXTURE_IMMUTABLE_FORMAT
[ 48: PASS ] getTexParameter with TEXTURE_IMMUTABLE_FORMAT should not return 0
[ 49: PASS ] getError was expected value: INVALID_OPERATION : texImage2D should fail on immutable texture
[ 50: PASS ] getError was expected value: INVALID_OPERATION : compressedTexImage2D should fail on immutable texture
[ 51: PASS ] getError was expected value: INVALID_OPERATION : copyTexImage2D should fail on immutable texture
[ 52: PASS ] texture should sample as uninitialized texture after texStorage2D
[ 53: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 54: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 55: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 56: PASS ] texture should sample as red after uploading red pixels with texSubImage2D
[ 57: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero width
[ 58: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero height
[ 59: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for negative height
[ 60: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero levels
[ 61: PASS ] getError was expected value: INVALID_OPERATION : texStorage2D should fail for too many levels
[ 62: PASS ] getError was expected value: INVALID_ENUM : texStorage2D should fail for bad target TEXTURE_CUBE_MAP_NEGATIVE_X
[ 63: PASS ] getError was expected value: INVALID_OPERATION : texStorage2D should fail when no texture is bound
[ 64: PASS ] getError was expected value: INVALID_ENUM : texStorage2D should fail for bad internalformat RGBA
[ 65: PASS ] getError was expected value: NO_ERROR : texStorage2D should succeed with a good sized internalformat
[ 66: FAIL ] getError expected: NO_ERROR. Was INVALID_ENUM : getTexParameter should succeed with TEXTURE_IMMUTABLE_FORMAT
[ 67: PASS ] getTexParameter with TEXTURE_IMMUTABLE_FORMAT should not return 0
[ 68: PASS ] getError was expected value: INVALID_OPERATION : texImage2D should fail on immutable texture
[ 69: PASS ] getError was expected value: INVALID_OPERATION : compressedTexImage2D should fail on immutable texture
[ 70: PASS ] getError was expected value: INVALID_OPERATION : copyTexImage2D should fail on immutable texture
[ 71: PASS ] texture should sample as uninitialized texture after texStorage2D
[ 72: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 73: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 74: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 75: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 76: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 77: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 78: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 79: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 80: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 81: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 82: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 83: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 84: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 85: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 86: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 87: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 88: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 89: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 90: PASS ] texture should sample as red after uploading red pixels with texSubImage2D
[ 91: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero width
[ 92: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero height
[ 93: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for negative height
[ 94: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero levels
[ 95: PASS ] getError was expected value: INVALID_OPERATION : texStorage2D should fail for too many levels
[ 96: PASS ] getError was expected value: INVALID_ENUM : texStorage2D should fail for bad target TEXTURE_CUBE_MAP_NEGATIVE_X
[ 97: PASS ] getError was expected value: INVALID_OPERATION : texStorage2D should fail when no texture is bound
[ 98: PASS ] getError was expected value: INVALID_ENUM : texStorage2D should fail for bad internalformat RGB
[ 99: PASS ] getError was expected value: NO_ERROR : texStorage2D should succeed with a good sized internalformat
[ 100: FAIL ] getError expected: NO_ERROR. Was INVALID_ENUM : getTexParameter should succeed with TEXTURE_IMMUTABLE_FORMAT
[ 101: PASS ] getTexParameter with TEXTURE_IMMUTABLE_FORMAT should not return 0
[ 102: PASS ] getError was expected value: INVALID_OPERATION : texImage2D should fail on immutable texture
[ 103: PASS ] getError was expected value: INVALID_OPERATION : compressedTexImage2D should fail on immutable texture
[ 104: PASS ] getError was expected value: INVALID_OPERATION : copyTexImage2D should fail on immutable texture
[ 105: PASS ] texture should sample as uninitialized texture after texStorage2D
[ 106: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 107: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 108: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 109: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 110: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 111: PASS ] getError was expected value: NO_ERROR : texSubImage2D should succeed on immutable texture as long as the format is compatible
[ 112: PASS ] texture should sample as red after uploading red pixels with texSubImage2D
[ 113: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero width
[ 114: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero height
[ 115: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for negative height
[ 116: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero levels
[ 117: PASS ] getError was expected value: INVALID_OPERATION : texStorage2D should fail for too many levels
[ 118: PASS ] getError was expected value: INVALID_ENUM : texStorage2D should fail for bad target TEXTURE_CUBE_MAP_NEGATIVE_X
[ 119: PASS ] getError was expected value: INVALID_OPERATION : texStorage2D should fail when no texture is bound
[ 120: PASS ] getError was expected value: INVALID_ENUM : texStorage2D should fail for bad internalformat UNSIGNED_INT_2_10_10_10_REV
[ 121: PASS ] getError was expected value: NO_ERROR : texStorage2D should succeed with a good sized internalformat
[ 122: FAIL ] getError expected: NO_ERROR. Was INVALID_ENUM : getTexParameter should succeed with TEXTURE_IMMUTABLE_FORMAT
[ 123: PASS ] getTexParameter with TEXTURE_IMMUTABLE_FORMAT should not return 0
[ 124: PASS ] getError was expected value: INVALID_OPERATION : texImage2D should fail on immutable texture
[ 125: PASS ] getError was expected value: INVALID_OPERATION : compressedTexImage2D should fail on immutable texture
[ 126: PASS ] getError was expected value: INVALID_OPERATION : copyTexImage2D should fail on immutable texture
[ 127: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero width
[ 128: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero height
[ 129: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for negative height
[ 130: PASS ] getError was expected value: INVALID_VALUE : texStorage2D should fail for zero levels
[ 131: PASS ] getError was expected value: INVALID_OPERATION : texStorage2D should fail for too many levels
[ 132: PASS ] getError was expected value: INVALID_ENUM : texStorage2D should fail for bad target TEXTURE_CUBE_MAP_NEGATIVE_X
[ 133: PASS ] getError was expected value: INVALID_OPERATION : texStorage2D should fail when no texture is bound
[ 134: PASS ] getError was expected value: INVALID_ENUM : texStorage2D should fail for bad internalformat RGB
[ 135: PASS ] getError was expected value: NO_ERROR : texStorage2D should succeed with a good sized internalformat
[ 136: FAIL ] getError expected: NO_ERROR. Was INVALID_ENUM : getTexParameter should succeed with TEXTURE_IMMUTABLE_FORMAT
[ 137: PASS ] getTexParameter with TEXTURE_IMMUTABLE_FORMAT should not return 0
[ 138: PASS ] getError was expected value: INVALID_OPERATION : texImage2D should fail on immutable texture
[ 139: PASS ] getError was expected value: INVALID_OPERATION : compressedTexImage2D should fail on immutable texture
[ 140: PASS ] getError was expected value: INVALID_OPERATION : copyTexImage2D should fail on immutable texture
[ 141: PASS ] getError was expected value: NO_ERROR : texStorage2D should succeed with size [8, 8].
[ 142: PASS ] getError was expected value: NO_ERROR : texStorage2D should succeed with size [8, 1].
[ 143: PASS ] getError was expected value: NO_ERROR : texStorage2D should succeed with size [1, 8].
[ 144: PASS ] getError was expected value: NO_ERROR : there should be no errors
[ 145: PASS ] successfullyParsed is true
[ FAIL ] 7 failures reported

