
FAIL If details.id is missing, assign a identifier assert_true: must be some truthy value expected true got false
FAIL If details.id is missing, assign a unique identifier assert_not_equals: UA generated ID must be unique got disallowed value ""
FAIL If the same id is provided, then use it assert_equals: id must be test123 expected "test123" but got ""
FAIL Use ids even if they are strange assert_equals: id must be provided value, even if very long and contain spaces expected "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" but got ""
FAIL Use provided request ID assert_equals: expected "foo" but got ""
FAIL If the length of the methodData sequence is zero, then throw a TypeError assert_throws: function "() => {
      new PaymentRequest([], {
        total: {
          label: "",
          amount: {
            currency: "USD",
            value: "1.00",
          },
        },
      });
    }" did not throw
FAIL If the length of the paymentMethod.supportedMethods sequence is zero, then throw a TypeError assert_throws: function "() => {
      new PaymentRequest(
        [
          {
            supportedMethods: [],
          },
        ],
        {
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.00",
            },
          },
        }
      );
    }" did not throw
PASS Method data must be JSON-serializable object (a list in this case) 
PASS Method data must be JSON-serializable object (an object in this case) 
FAIL Rethrow any exceptions of JSON-serializing paymentMethod.data into a string assert_throws: function "() => {
      new PaymentRequest(
        [
          {
            supportedMethods: ["basic-card"],
            data: recursiveDictionary,
          },
        ],
        {
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.00",
            },
          },
        }
      );
    }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "-1"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "-1.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "-1.00"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "-1000.000"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" did not throw
PASS PaymentDetailsBase.0 can be 0 length 
PASS PaymentDetailsBase.1 can be 0 length 
PASS PaymentDetailsBase.2 can be 0 length 
FAIL If the first character of details.total.amount.value is U+002D HYPHEN-MINUS, then throw a TypeError assert_throws: function "() => {
      new PaymentRequest(
        [
          {
            supportedMethods: ["basic-card"],
          },
        ],
        {
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "-1.00",
            },
          },
        }
      );
    }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" did not throw
PASS Negative values are allowed for displayItems.amount.value, irrespective of total amount 
PASS it handles high precision currency values without throwing 
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" did not throw
PASS If there is no selected shipping option, then PaymentRequest.shippingOption remains null 
FAIL If there is a selected shipping option, then it becomes synchronously selected assert_equals: selected option must be PASS expected (string) "PASS" but got (object) null
FAIL If there is a multiple selected shipping options, only the last is selected assert_equals: selected option must PASS expected (string) "PASS" but got (object) null
PASS If there are any duplicate shipping option ids, then there are no shipping options 
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1.00"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1000.000"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "-"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "10."), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case ".99"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "-10."), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "10-"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case ""), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "null"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" did not throw
PASS Modifier data must be JSON-serializable object (a list in this case) 
PASS Modifier data must be JSON-serializable object (a object in this case) 
FAIL Rethrow any exceptions of JSON-serializing modifier.data into a string assert_throws: function "() => {
      new PaymentRequest(
        [
          {
            supportedMethods: ["basic-card"],
          },
        ],
        {
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.00",
            },
          },
          modifiers: [
            {
              supportedMethods: ["basic-card"],
              data: recursiveDictionary,
            },
          ],
        }
      );
    }" did not throw
PASS Shipping type should be valid 
PASS PaymentRequest.shippingAddress must initially be null 
PASS If options.requestShipping is not set, then request.shippingType attribute is null. 
FAIL If options.requestShipping is true, request.shippingType will be options.shippingType. assert_equals: must be shipping expected (string) "shipping" but got (object) null

