
FAIL If node is a host-including inclusive ancestor of parent, then throw a HierarchyRequestError DOMException. assert_throws_dom: function "() => insert(doc.body, doc.body)" threw object "TypeError: undefined is not an object (evaluating 'parent[methodName].length')" that is not a DOMException HierarchyRequestError: property "code" is equal to undefined, expected 3
FAIL If node is not a DocumentFragment, DocumentType, Element, Text, ProcessingInstruction, or Comment node, then throw a HierarchyRequestError DOMException. assert_throws_dom: function "() => insert(doc, doc2)" threw object "TypeError: undefined is not an object (evaluating 'parent[methodName].length')" that is not a DOMException HierarchyRequestError: property "code" is equal to undefined, expected 3
FAIL If node is a Text node and parent is a document, then throw a HierarchyRequestError DOMException. assert_throws_dom: function "() => insert(doc, doc.createTextNode("text"))" threw object "TypeError: undefined is not an object (evaluating 'parent[methodName].length')" that is not a DOMException HierarchyRequestError: property "code" is equal to undefined, expected 3
FAIL If node is a doctype and parent is not a document, then throw a HierarchyRequestError DOMException. assert_throws_dom: function "() => insert(doc.createElement("a"), doctype)" threw object "TypeError: undefined is not an object (evaluating 'parent[methodName].length')" that is not a DOMException HierarchyRequestError: property "code" is equal to undefined, expected 3
FAIL If node is a DocumentFragment with multiple elements and parent is a document, then throw a HierarchyRequestError DOMException. assert_throws_dom: function "() => insert(doc, df)" threw object "TypeError: undefined is not an object (evaluating 'parent[methodName].length')" that is not a DOMException HierarchyRequestError: property "code" is equal to undefined, expected 3
FAIL If node is a DocumentFragment with an element and parent is a document with another element, then throw a HierarchyRequestError DOMException. assert_throws_dom: function "() => insert(doc, df)" threw object "TypeError: undefined is not an object (evaluating 'parent[methodName].length')" that is not a DOMException HierarchyRequestError: property "code" is equal to undefined, expected 3
FAIL If node is an Element and parent is a document with another element, then throw a HierarchyRequestError DOMException. assert_throws_dom: function "() => insert(doc, el)" threw object "TypeError: undefined is not an object (evaluating 'parent[methodName].length')" that is not a DOMException HierarchyRequestError: property "code" is equal to undefined, expected 3
FAIL If node is a doctype and parent is a document with another doctype, then throw a HierarchyRequestError DOMException. assert_throws_dom: function "() => insert(doc, doctype)" threw object "TypeError: undefined is not an object (evaluating 'parent[methodName].length')" that is not a DOMException HierarchyRequestError: property "code" is equal to undefined, expected 3
FAIL If node is a doctype and parent is a document with an element, then throw a HierarchyRequestError DOMException. assert_throws_dom: function "() => insert(doc, doctype)" threw object "TypeError: undefined is not an object (evaluating 'parent[methodName].length')" that is not a DOMException HierarchyRequestError: property "code" is equal to undefined, expected 3
FAIL Element.replaceChildren() without any argument, on a parent having no child. parent.replaceChildren is not a function. (In 'parent.replaceChildren()', 'parent.replaceChildren' is undefined)
FAIL Element.replaceChildren() with null as an argument, on a parent having no child. parent.replaceChildren is not a function. (In 'parent.replaceChildren(null)', 'parent.replaceChildren' is undefined)
FAIL Element.replaceChildren() with undefined as an argument, on a parent having no child. parent.replaceChildren is not a function. (In 'parent.replaceChildren(undefined)', 'parent.replaceChildren' is undefined)
FAIL Element.replaceChildren() with only text as an argument, on a parent having no child. parent.replaceChildren is not a function. (In 'parent.replaceChildren('text')', 'parent.replaceChildren' is undefined)
FAIL Element.replaceChildren() with only one element as an argument, on a parent having no child. parent.replaceChildren is not a function. (In 'parent.replaceChildren(x)', 'parent.replaceChildren' is undefined)
FAIL Element.replaceChildren() with null as an argument, on a parent having a child. parent.replaceChildren is not a function. (In 'parent.replaceChildren(null)', 'parent.replaceChildren' is undefined)
FAIL Element.replaceChildren() with one element and text as argument, on a parent having a child. parent.replaceChildren is not a function. (In 'parent.replaceChildren(x, 'text')', 'parent.replaceChildren' is undefined)
FAIL Element.replaceChildren() should move nodes in the right order parent.replaceChildren is not a function. (In 'parent.replaceChildren(...previousParent.children)', 'parent.replaceChildren' is undefined)
FAIL DocumentFragment.replaceChildren() without any argument, on a parent having no child. parent.replaceChildren is not a function. (In 'parent.replaceChildren()', 'parent.replaceChildren' is undefined)
FAIL DocumentFragment.replaceChildren() with null as an argument, on a parent having no child. parent.replaceChildren is not a function. (In 'parent.replaceChildren(null)', 'parent.replaceChildren' is undefined)
FAIL DocumentFragment.replaceChildren() with undefined as an argument, on a parent having no child. parent.replaceChildren is not a function. (In 'parent.replaceChildren(undefined)', 'parent.replaceChildren' is undefined)
FAIL DocumentFragment.replaceChildren() with only text as an argument, on a parent having no child. parent.replaceChildren is not a function. (In 'parent.replaceChildren('text')', 'parent.replaceChildren' is undefined)
FAIL DocumentFragment.replaceChildren() with only one element as an argument, on a parent having no child. parent.replaceChildren is not a function. (In 'parent.replaceChildren(x)', 'parent.replaceChildren' is undefined)
FAIL DocumentFragment.replaceChildren() with null as an argument, on a parent having a child. parent.replaceChildren is not a function. (In 'parent.replaceChildren(null)', 'parent.replaceChildren' is undefined)
FAIL DocumentFragment.replaceChildren() with one element and text as argument, on a parent having a child. parent.replaceChildren is not a function. (In 'parent.replaceChildren(x, 'text')', 'parent.replaceChildren' is undefined)
FAIL DocumentFragment.replaceChildren() should move nodes in the right order parent.replaceChildren is not a function. (In 'parent.replaceChildren(...previousParent.children)', 'parent.replaceChildren' is undefined)

