CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream
CONSOLE MESSAGE: Unhandled Promise Rejection: TypeError: cancel() called on a reader owned by no readable stream

Harness Error (FAIL), message = cancel() called on a reader owned by no readable stream

FAIL Closing must be propagated forward: starts closed; preventClose omitted; fulfilled close promise assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
FAIL Closing must be propagated forward: starts closed; preventClose omitted; rejected close promise assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
FAIL Closing must be propagated forward: starts closed; preventClose = undefined (falsy); fulfilled close promise assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
FAIL Closing must be propagated forward: starts closed; preventClose = null (falsy); fulfilled close promise assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
FAIL Closing must be propagated forward: starts closed; preventClose = false (falsy); fulfilled close promise assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
FAIL Closing must be propagated forward: starts closed; preventClose = 0 (falsy); fulfilled close promise assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
FAIL Closing must be propagated forward: starts closed; preventClose = -0 (falsy); fulfilled close promise assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
FAIL Closing must be propagated forward: starts closed; preventClose = NaN (falsy); fulfilled close promise assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
FAIL Closing must be propagated forward: starts closed; preventClose =  (falsy); fulfilled close promise assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
PASS Closing must be propagated forward: starts closed; preventClose = true (truthy) 
PASS Closing must be propagated forward: starts closed; preventClose = a (truthy) 
PASS Closing must be propagated forward: starts closed; preventClose = 1 (truthy) 
PASS Closing must be propagated forward: starts closed; preventClose = Symbol() (truthy) 
PASS Closing must be propagated forward: starts closed; preventClose = [object Object] (truthy) 
PASS Closing must be propagated forward: starts closed; preventClose = true, preventAbort = true 
PASS Closing must be propagated forward: starts closed; preventClose = true, preventAbort = true, preventCancel = true 
FAIL Closing must be propagated forward: becomes closed asynchronously; preventClose omitted; fulfilled close promise assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
FAIL Closing must be propagated forward: becomes closed asynchronously; preventClose omitted; rejected close promise assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
PASS Closing must be propagated forward: becomes closed asynchronously; preventClose = true 
FAIL Closing must be propagated forward: becomes closed asynchronously; dest never desires chunks; preventClose omitted; fulfilled close promise assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
FAIL Closing must be propagated forward: becomes closed asynchronously; dest never desires chunks; preventClose omitted; rejected close promise assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
PASS Closing must be propagated forward: becomes closed asynchronously; dest never desires chunks; preventClose = true 
FAIL Closing must be propagated forward: becomes closed after one chunk; preventClose omitted; fulfilled close promise assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
FAIL Closing must be propagated forward: becomes closed after one chunk; preventClose omitted; rejected close promise assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
PASS Closing must be propagated forward: becomes closed after one chunk; preventClose = true 
FAIL Closing must be propagated forward: shutdown must not occur until the final write completes assert_array_equals: close must always be called with the controller lengths differ, expected 1 got 0
PASS Closing must be propagated forward: shutdown must not occur until the final write completes; preventClose = true 

