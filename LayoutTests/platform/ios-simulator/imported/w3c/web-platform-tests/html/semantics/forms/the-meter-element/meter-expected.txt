Meter Element


FAIL Default values assert_equals: min value expected (number) 0 but got (undefined) undefined
PASS Setting values to min, max, low, high and optimum 
FAIL Invalid floating-point number values assert_equals: meter value expected (number) 0 but got (string) "foobar"
FAIL max < min assert_equals: min value expected (number) 0 but got (undefined) undefined
FAIL value < min assert_equals: meter value expected 10 but got 0
FAIL value > max assert_equals: meter value expected 20 but got 30
FAIL low < min assert_equals: low value expected 10 but got 5
FAIL low > max assert_equals: low value expected 20 but got 25
FAIL high < low assert_equals: high value expected 12 but got 10
FAIL high > max assert_equals: high value expected 20 but got 22
FAIL optimum < min assert_equals: low value expected (number) 10 but got (undefined) undefined
FAIL optimum > max assert_equals: low value expected (number) 10 but got (undefined) undefined
FAIL value must be 0 when a string is given assert_equals: expected (number) 0 but got (undefined) undefined
FAIL default value of min is 0 assert_equals: expected (number) 0 but got (undefined) undefined
FAIL If min is not specified and value is smaller than the default value of min (i.e. 0), the actual value must be 0 assert_equals: expected (number) 0 but got (undefined) undefined
FAIL default value of max is 1.0 assert_equals: expected (number) 1 but got (undefined) undefined
FAIL If max is not specified and value is larger than the default value of max (i.e. 1.0), the actual value must be 1.0 assert_equals: expected (number) 1 but got (undefined) undefined
FAIL If a value smaller than 1.0 is given to min and max is not specified, max must be the same value as its default value (i.e. 1.0) assert_equals: expected (number) 1 but got (undefined) undefined
FAIL If a value smaller than 1.0 is given to min, max is not specified, and value is larger than the default value of max (i.e. 1.0), the actual value must be 1.0 assert_equals: expected (number) 1 but got (undefined) undefined
FAIL If a value larger than or equal to 1.0 is given to min and max is not specified, max must be the same value as min assert_equals: expected (number) 12.1 but got (undefined) undefined
FAIL If a value larger than or equal to 1.0 is given to min and max is not specified, the actual value must be the same value as min assert_equals: expected (number) 12.1 but got (undefined) undefined
FAIL If a value smaller than 0 is given to max and min is not specified, min must be be the same value as its default value (i.e. 0) assert_equals: expected (number) 0 but got (undefined) undefined
FAIL If a value smaller than 0 is given to max and min is not specified, max must be be the same value as the default value of min (i.e. 0) assert_equals: expected (number) 0 but got (undefined) undefined
FAIL If a value smaller than 0 is given to max and min is not specified, the actual value must be be the same value as the default value of min (i.e. 0) assert_equals: expected (number) 0 but got (undefined) undefined
FAIL If a value larger than or equal to 0 is given to max and min is not specified, max must be the same value as the default value of min (i.e. 0) assert_equals: expected (number) 0 but got (undefined) undefined
FAIL If a value larger than or equal to 0 is given to max and min is not specified, min must be the same value as its default value (i.e. 0) assert_equals: expected (number) 0 but got (undefined) undefined
FAIL If a value larger than or equal to 0 is given to max and min is not specified, the actual value must be the same value as the default value of min (i.e. 0) assert_equals: expected (number) 0 but got (undefined) undefined
FAIL min must be 0 when a string is given assert_equals: expected (number) 0 but got (undefined) undefined
FAIL If a string is given to min and value is smaller than the default value of min (i.e. 0), the actual value must be 0 assert_equals: expected (number) 0 but got (undefined) undefined
FAIL max must be 1.0 when a string is given assert_equals: expected (number) 1 but got (undefined) undefined
FAIL If a string is given to max and value is larger than the default value of min (i.e. 1.0), the actual value must be 1.0 assert_equals: expected (number) 1 but got (undefined) undefined
FAIL giving a string to low must not affect the actual value assert_equals: expected (number) -10.3 but got (undefined) undefined
FAIL high must equal max when a string is given to high assert_equals: expected (number) 1.5 but got (undefined) undefined
FAIL giving a string to high must not affect the actual value assert_equals: expected (number) 1.5 but got (undefined) undefined
FAIL value must not be smaller than min assert_equals: expected (number) 4.5 but got (undefined) undefined
FAIL value must not be larger than max assert_equals: expected (number) 52.02 but got (undefined) undefined
FAIL default low and high values equal min and max, respectively assert_array_equals: property 0, expected -12.3 but got undefined
FAIL default low and high values equal 0 and 1.0 respectively, if both low and high are not specified assert_array_equals: property 0, expected 0 but got undefined
FAIL low must not be smaller than min assert_array_equals: property 0, expected 12.3 but got undefined
FAIL low must not be larger than max assert_array_equals: property 0, expected -34.5 but got undefined
FAIL high must not be smaller than min assert_array_equals: property 0, expected 12.3 but got undefined
FAIL high must not be larger than max assert_array_equals: property 0, expected -34.5 but got undefined
FAIL If min is not specified, low must not be smaller than default value of min (i.e. 0) assert_array_equals: property 0, expected 0 but got undefined
FAIL If a value smaller than low is given to high, it must be set to the same value as low assert_array_equals: property 0, expected -10.3 but got undefined
FAIL If max is not specified, high must not be larger than default value of max (i.e. 1.0) assert_array_equals: property 0, expected 1 but got undefined
FAIL optimum smaller than min assert_equals: expected (number) 0 but got (undefined) undefined
FAIL optimum (smaller than min) must not affect min and the actual value assert_array_equals: property 0, expected 0 but got undefined
FAIL optimum smaller than max assert_equals: expected (number) 1 but got (undefined) undefined
FAIL optimum (larger than max) must not affect max and the actual value assert_array_equals: property 0, expected 1 but got undefined
FAIL default optimum value is the midpoint between min and max assert_equals: expected (number) NaN but got (undefined) undefined

